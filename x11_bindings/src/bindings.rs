#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}

pub const XCB_XKB_MAJOR_VERSION: u32 = 1;
pub const XCB_XKB_MINOR_VERSION: u32 = 0;
pub const XCB_XKB_KEYBOARD: u32 = 0;
pub const XCB_XKB_USE_EXTENSION: u32 = 0;
pub const XCB_XKB_SELECT_EVENTS: u32 = 1;
pub const XCB_XKB_BELL: u32 = 3;
pub const XCB_XKB_GET_STATE: u32 = 4;
pub const XCB_XKB_LATCH_LOCK_STATE: u32 = 5;
pub const XCB_XKB_GET_CONTROLS: u32 = 6;
pub const XCB_XKB_SET_CONTROLS: u32 = 7;
pub const XCB_XKB_GET_MAP: u32 = 8;
pub const XCB_XKB_SET_MAP: u32 = 9;
pub const XCB_XKB_GET_COMPAT_MAP: u32 = 10;
pub const XCB_XKB_SET_COMPAT_MAP: u32 = 11;
pub const XCB_XKB_GET_INDICATOR_STATE: u32 = 12;
pub const XCB_XKB_GET_INDICATOR_MAP: u32 = 13;
pub const XCB_XKB_SET_INDICATOR_MAP: u32 = 14;
pub const XCB_XKB_GET_NAMED_INDICATOR: u32 = 15;
pub const XCB_XKB_SET_NAMED_INDICATOR: u32 = 16;
pub const XCB_XKB_GET_NAMES: u32 = 17;
pub const XCB_XKB_SET_NAMES: u32 = 18;
pub const XCB_XKB_PER_CLIENT_FLAGS: u32 = 21;
pub const XCB_XKB_LIST_COMPONENTS: u32 = 22;
pub const XCB_XKB_GET_KBD_BY_NAME: u32 = 23;
pub const XCB_XKB_GET_DEVICE_INFO: u32 = 24;
pub const XCB_XKB_SET_DEVICE_INFO: u32 = 25;
pub const XCB_XKB_SET_DEBUGGING_FLAGS: u32 = 101;
pub const XCB_XKB_NEW_KEYBOARD_NOTIFY: u32 = 0;
pub const XCB_XKB_MAP_NOTIFY: u32 = 1;
pub const XCB_XKB_STATE_NOTIFY: u32 = 2;
pub const XCB_XKB_CONTROLS_NOTIFY: u32 = 3;
pub const XCB_XKB_INDICATOR_STATE_NOTIFY: u32 = 4;
pub const XCB_XKB_INDICATOR_MAP_NOTIFY: u32 = 5;
pub const XCB_XKB_NAMES_NOTIFY: u32 = 6;
pub const XCB_XKB_COMPAT_MAP_NOTIFY: u32 = 7;
pub const XCB_XKB_BELL_NOTIFY: u32 = 8;
pub const XCB_XKB_ACTION_MESSAGE: u32 = 9;
pub const XCB_XKB_ACCESS_X_NOTIFY: u32 = 10;
pub const XCB_XKB_EXTENSION_DEVICE_NOTIFY: u32 = 11;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const XKB_MOD_NAME_SHIFT: &[u8; 6] = b"Shift\0";
pub const XKB_MOD_NAME_CAPS: &[u8; 5] = b"Lock\0";
pub const XKB_MOD_NAME_CTRL: &[u8; 8] = b"Control\0";
pub const XKB_MOD_NAME_MOD1: &[u8; 5] = b"Mod1\0";
pub const XKB_MOD_NAME_MOD2: &[u8; 5] = b"Mod2\0";
pub const XKB_MOD_NAME_MOD3: &[u8; 5] = b"Mod3\0";
pub const XKB_MOD_NAME_MOD4: &[u8; 5] = b"Mod4\0";
pub const XKB_MOD_NAME_MOD5: &[u8; 5] = b"Mod5\0";
pub const XKB_MOD_NAME_ALT: &[u8; 5] = b"Mod1\0";
pub const XKB_MOD_NAME_LOGO: &[u8; 5] = b"Mod4\0";
pub const XKB_MOD_NAME_NUM: &[u8; 5] = b"Mod2\0";
pub const XKB_VMOD_NAME_ALT: &[u8; 4] = b"Alt\0";
pub const XKB_VMOD_NAME_HYPER: &[u8; 6] = b"Hyper\0";
pub const XKB_VMOD_NAME_LEVEL3: &[u8; 11] = b"LevelThree\0";
pub const XKB_VMOD_NAME_LEVEL5: &[u8; 10] = b"LevelFive\0";
pub const XKB_VMOD_NAME_META: &[u8; 5] = b"Meta\0";
pub const XKB_VMOD_NAME_NUM: &[u8; 8] = b"NumLock\0";
pub const XKB_VMOD_NAME_SCROLL: &[u8; 11] = b"ScrollLock\0";
pub const XKB_VMOD_NAME_SUPER: &[u8; 6] = b"Super\0";
pub const XKB_LED_NAME_NUM: &[u8; 9] = b"Num Lock\0";
pub const XKB_LED_NAME_CAPS: &[u8; 10] = b"Caps Lock\0";
pub const XKB_LED_NAME_SCROLL: &[u8; 12] = b"Scroll Lock\0";
pub const XKB_LED_NAME_COMPOSE: &[u8; 8] = b"Compose\0";
pub const XKB_LED_NAME_KANA: &[u8; 5] = b"Kana\0";
pub const XKB_KEY_NoSymbol: u32 = 0;
pub const XKB_KEY_VoidSymbol: u32 = 16777215;
pub const XKB_KEY_BackSpace: u32 = 65288;
pub const XKB_KEY_Tab: u32 = 65289;
pub const XKB_KEY_Linefeed: u32 = 65290;
pub const XKB_KEY_Clear: u32 = 65291;
pub const XKB_KEY_Return: u32 = 65293;
pub const XKB_KEY_Pause: u32 = 65299;
pub const XKB_KEY_Scroll_Lock: u32 = 65300;
pub const XKB_KEY_Sys_Req: u32 = 65301;
pub const XKB_KEY_Escape: u32 = 65307;
pub const XKB_KEY_Delete: u32 = 65535;
pub const XKB_KEY_Multi_key: u32 = 65312;
pub const XKB_KEY_Codeinput: u32 = 65335;
pub const XKB_KEY_SingleCandidate: u32 = 65340;
pub const XKB_KEY_MultipleCandidate: u32 = 65341;
pub const XKB_KEY_PreviousCandidate: u32 = 65342;
pub const XKB_KEY_Kanji: u32 = 65313;
pub const XKB_KEY_Muhenkan: u32 = 65314;
pub const XKB_KEY_Henkan_Mode: u32 = 65315;
pub const XKB_KEY_Henkan: u32 = 65315;
pub const XKB_KEY_Romaji: u32 = 65316;
pub const XKB_KEY_Hiragana: u32 = 65317;
pub const XKB_KEY_Katakana: u32 = 65318;
pub const XKB_KEY_Hiragana_Katakana: u32 = 65319;
pub const XKB_KEY_Zenkaku: u32 = 65320;
pub const XKB_KEY_Hankaku: u32 = 65321;
pub const XKB_KEY_Zenkaku_Hankaku: u32 = 65322;
pub const XKB_KEY_Touroku: u32 = 65323;
pub const XKB_KEY_Massyo: u32 = 65324;
pub const XKB_KEY_Kana_Lock: u32 = 65325;
pub const XKB_KEY_Kana_Shift: u32 = 65326;
pub const XKB_KEY_Eisu_Shift: u32 = 65327;
pub const XKB_KEY_Eisu_toggle: u32 = 65328;
pub const XKB_KEY_Kanji_Bangou: u32 = 65335;
pub const XKB_KEY_Zen_Koho: u32 = 65341;
pub const XKB_KEY_Mae_Koho: u32 = 65342;
pub const XKB_KEY_Home: u32 = 65360;
pub const XKB_KEY_Left: u32 = 65361;
pub const XKB_KEY_Up: u32 = 65362;
pub const XKB_KEY_Right: u32 = 65363;
pub const XKB_KEY_Down: u32 = 65364;
pub const XKB_KEY_Prior: u32 = 65365;
pub const XKB_KEY_Page_Up: u32 = 65365;
pub const XKB_KEY_Next: u32 = 65366;
pub const XKB_KEY_Page_Down: u32 = 65366;
pub const XKB_KEY_End: u32 = 65367;
pub const XKB_KEY_Begin: u32 = 65368;
pub const XKB_KEY_Select: u32 = 65376;
pub const XKB_KEY_Print: u32 = 65377;
pub const XKB_KEY_Execute: u32 = 65378;
pub const XKB_KEY_Insert: u32 = 65379;
pub const XKB_KEY_Undo: u32 = 65381;
pub const XKB_KEY_Redo: u32 = 65382;
pub const XKB_KEY_Menu: u32 = 65383;
pub const XKB_KEY_Find: u32 = 65384;
pub const XKB_KEY_Cancel: u32 = 65385;
pub const XKB_KEY_Help: u32 = 65386;
pub const XKB_KEY_Break: u32 = 65387;
pub const XKB_KEY_Mode_switch: u32 = 65406;
pub const XKB_KEY_script_switch: u32 = 65406;
pub const XKB_KEY_Num_Lock: u32 = 65407;
pub const XKB_KEY_KP_Space: u32 = 65408;
pub const XKB_KEY_KP_Tab: u32 = 65417;
pub const XKB_KEY_KP_Enter: u32 = 65421;
pub const XKB_KEY_KP_F1: u32 = 65425;
pub const XKB_KEY_KP_F2: u32 = 65426;
pub const XKB_KEY_KP_F3: u32 = 65427;
pub const XKB_KEY_KP_F4: u32 = 65428;
pub const XKB_KEY_KP_Home: u32 = 65429;
pub const XKB_KEY_KP_Left: u32 = 65430;
pub const XKB_KEY_KP_Up: u32 = 65431;
pub const XKB_KEY_KP_Right: u32 = 65432;
pub const XKB_KEY_KP_Down: u32 = 65433;
pub const XKB_KEY_KP_Prior: u32 = 65434;
pub const XKB_KEY_KP_Page_Up: u32 = 65434;
pub const XKB_KEY_KP_Next: u32 = 65435;
pub const XKB_KEY_KP_Page_Down: u32 = 65435;
pub const XKB_KEY_KP_End: u32 = 65436;
pub const XKB_KEY_KP_Begin: u32 = 65437;
pub const XKB_KEY_KP_Insert: u32 = 65438;
pub const XKB_KEY_KP_Delete: u32 = 65439;
pub const XKB_KEY_KP_Equal: u32 = 65469;
pub const XKB_KEY_KP_Multiply: u32 = 65450;
pub const XKB_KEY_KP_Add: u32 = 65451;
pub const XKB_KEY_KP_Separator: u32 = 65452;
pub const XKB_KEY_KP_Subtract: u32 = 65453;
pub const XKB_KEY_KP_Decimal: u32 = 65454;
pub const XKB_KEY_KP_Divide: u32 = 65455;
pub const XKB_KEY_KP_0: u32 = 65456;
pub const XKB_KEY_KP_1: u32 = 65457;
pub const XKB_KEY_KP_2: u32 = 65458;
pub const XKB_KEY_KP_3: u32 = 65459;
pub const XKB_KEY_KP_4: u32 = 65460;
pub const XKB_KEY_KP_5: u32 = 65461;
pub const XKB_KEY_KP_6: u32 = 65462;
pub const XKB_KEY_KP_7: u32 = 65463;
pub const XKB_KEY_KP_8: u32 = 65464;
pub const XKB_KEY_KP_9: u32 = 65465;
pub const XKB_KEY_F1: u32 = 65470;
pub const XKB_KEY_F2: u32 = 65471;
pub const XKB_KEY_F3: u32 = 65472;
pub const XKB_KEY_F4: u32 = 65473;
pub const XKB_KEY_F5: u32 = 65474;
pub const XKB_KEY_F6: u32 = 65475;
pub const XKB_KEY_F7: u32 = 65476;
pub const XKB_KEY_F8: u32 = 65477;
pub const XKB_KEY_F9: u32 = 65478;
pub const XKB_KEY_F10: u32 = 65479;
pub const XKB_KEY_F11: u32 = 65480;
pub const XKB_KEY_L1: u32 = 65480;
pub const XKB_KEY_F12: u32 = 65481;
pub const XKB_KEY_L2: u32 = 65481;
pub const XKB_KEY_F13: u32 = 65482;
pub const XKB_KEY_L3: u32 = 65482;
pub const XKB_KEY_F14: u32 = 65483;
pub const XKB_KEY_L4: u32 = 65483;
pub const XKB_KEY_F15: u32 = 65484;
pub const XKB_KEY_L5: u32 = 65484;
pub const XKB_KEY_F16: u32 = 65485;
pub const XKB_KEY_L6: u32 = 65485;
pub const XKB_KEY_F17: u32 = 65486;
pub const XKB_KEY_L7: u32 = 65486;
pub const XKB_KEY_F18: u32 = 65487;
pub const XKB_KEY_L8: u32 = 65487;
pub const XKB_KEY_F19: u32 = 65488;
pub const XKB_KEY_L9: u32 = 65488;
pub const XKB_KEY_F20: u32 = 65489;
pub const XKB_KEY_L10: u32 = 65489;
pub const XKB_KEY_F21: u32 = 65490;
pub const XKB_KEY_R1: u32 = 65490;
pub const XKB_KEY_F22: u32 = 65491;
pub const XKB_KEY_R2: u32 = 65491;
pub const XKB_KEY_F23: u32 = 65492;
pub const XKB_KEY_R3: u32 = 65492;
pub const XKB_KEY_F24: u32 = 65493;
pub const XKB_KEY_R4: u32 = 65493;
pub const XKB_KEY_F25: u32 = 65494;
pub const XKB_KEY_R5: u32 = 65494;
pub const XKB_KEY_F26: u32 = 65495;
pub const XKB_KEY_R6: u32 = 65495;
pub const XKB_KEY_F27: u32 = 65496;
pub const XKB_KEY_R7: u32 = 65496;
pub const XKB_KEY_F28: u32 = 65497;
pub const XKB_KEY_R8: u32 = 65497;
pub const XKB_KEY_F29: u32 = 65498;
pub const XKB_KEY_R9: u32 = 65498;
pub const XKB_KEY_F30: u32 = 65499;
pub const XKB_KEY_R10: u32 = 65499;
pub const XKB_KEY_F31: u32 = 65500;
pub const XKB_KEY_R11: u32 = 65500;
pub const XKB_KEY_F32: u32 = 65501;
pub const XKB_KEY_R12: u32 = 65501;
pub const XKB_KEY_F33: u32 = 65502;
pub const XKB_KEY_R13: u32 = 65502;
pub const XKB_KEY_F34: u32 = 65503;
pub const XKB_KEY_R14: u32 = 65503;
pub const XKB_KEY_F35: u32 = 65504;
pub const XKB_KEY_R15: u32 = 65504;
pub const XKB_KEY_Shift_L: u32 = 65505;
pub const XKB_KEY_Shift_R: u32 = 65506;
pub const XKB_KEY_Control_L: u32 = 65507;
pub const XKB_KEY_Control_R: u32 = 65508;
pub const XKB_KEY_Caps_Lock: u32 = 65509;
pub const XKB_KEY_Shift_Lock: u32 = 65510;
pub const XKB_KEY_Meta_L: u32 = 65511;
pub const XKB_KEY_Meta_R: u32 = 65512;
pub const XKB_KEY_Alt_L: u32 = 65513;
pub const XKB_KEY_Alt_R: u32 = 65514;
pub const XKB_KEY_Super_L: u32 = 65515;
pub const XKB_KEY_Super_R: u32 = 65516;
pub const XKB_KEY_Hyper_L: u32 = 65517;
pub const XKB_KEY_Hyper_R: u32 = 65518;
pub const XKB_KEY_ISO_Lock: u32 = 65025;
pub const XKB_KEY_ISO_Level2_Latch: u32 = 65026;
pub const XKB_KEY_ISO_Level3_Shift: u32 = 65027;
pub const XKB_KEY_ISO_Level3_Latch: u32 = 65028;
pub const XKB_KEY_ISO_Level3_Lock: u32 = 65029;
pub const XKB_KEY_ISO_Level5_Shift: u32 = 65041;
pub const XKB_KEY_ISO_Level5_Latch: u32 = 65042;
pub const XKB_KEY_ISO_Level5_Lock: u32 = 65043;
pub const XKB_KEY_ISO_Group_Shift: u32 = 65406;
pub const XKB_KEY_ISO_Group_Latch: u32 = 65030;
pub const XKB_KEY_ISO_Group_Lock: u32 = 65031;
pub const XKB_KEY_ISO_Next_Group: u32 = 65032;
pub const XKB_KEY_ISO_Next_Group_Lock: u32 = 65033;
pub const XKB_KEY_ISO_Prev_Group: u32 = 65034;
pub const XKB_KEY_ISO_Prev_Group_Lock: u32 = 65035;
pub const XKB_KEY_ISO_First_Group: u32 = 65036;
pub const XKB_KEY_ISO_First_Group_Lock: u32 = 65037;
pub const XKB_KEY_ISO_Last_Group: u32 = 65038;
pub const XKB_KEY_ISO_Last_Group_Lock: u32 = 65039;
pub const XKB_KEY_ISO_Left_Tab: u32 = 65056;
pub const XKB_KEY_ISO_Move_Line_Up: u32 = 65057;
pub const XKB_KEY_ISO_Move_Line_Down: u32 = 65058;
pub const XKB_KEY_ISO_Partial_Line_Up: u32 = 65059;
pub const XKB_KEY_ISO_Partial_Line_Down: u32 = 65060;
pub const XKB_KEY_ISO_Partial_Space_Left: u32 = 65061;
pub const XKB_KEY_ISO_Partial_Space_Right: u32 = 65062;
pub const XKB_KEY_ISO_Set_Margin_Left: u32 = 65063;
pub const XKB_KEY_ISO_Set_Margin_Right: u32 = 65064;
pub const XKB_KEY_ISO_Release_Margin_Left: u32 = 65065;
pub const XKB_KEY_ISO_Release_Margin_Right: u32 = 65066;
pub const XKB_KEY_ISO_Release_Both_Margins: u32 = 65067;
pub const XKB_KEY_ISO_Fast_Cursor_Left: u32 = 65068;
pub const XKB_KEY_ISO_Fast_Cursor_Right: u32 = 65069;
pub const XKB_KEY_ISO_Fast_Cursor_Up: u32 = 65070;
pub const XKB_KEY_ISO_Fast_Cursor_Down: u32 = 65071;
pub const XKB_KEY_ISO_Continuous_Underline: u32 = 65072;
pub const XKB_KEY_ISO_Discontinuous_Underline: u32 = 65073;
pub const XKB_KEY_ISO_Emphasize: u32 = 65074;
pub const XKB_KEY_ISO_Center_Object: u32 = 65075;
pub const XKB_KEY_ISO_Enter: u32 = 65076;
pub const XKB_KEY_dead_grave: u32 = 65104;
pub const XKB_KEY_dead_acute: u32 = 65105;
pub const XKB_KEY_dead_circumflex: u32 = 65106;
pub const XKB_KEY_dead_tilde: u32 = 65107;
pub const XKB_KEY_dead_perispomeni: u32 = 65107;
pub const XKB_KEY_dead_macron: u32 = 65108;
pub const XKB_KEY_dead_breve: u32 = 65109;
pub const XKB_KEY_dead_abovedot: u32 = 65110;
pub const XKB_KEY_dead_diaeresis: u32 = 65111;
pub const XKB_KEY_dead_abovering: u32 = 65112;
pub const XKB_KEY_dead_doubleacute: u32 = 65113;
pub const XKB_KEY_dead_caron: u32 = 65114;
pub const XKB_KEY_dead_cedilla: u32 = 65115;
pub const XKB_KEY_dead_ogonek: u32 = 65116;
pub const XKB_KEY_dead_iota: u32 = 65117;
pub const XKB_KEY_dead_voiced_sound: u32 = 65118;
pub const XKB_KEY_dead_semivoiced_sound: u32 = 65119;
pub const XKB_KEY_dead_belowdot: u32 = 65120;
pub const XKB_KEY_dead_hook: u32 = 65121;
pub const XKB_KEY_dead_horn: u32 = 65122;
pub const XKB_KEY_dead_stroke: u32 = 65123;
pub const XKB_KEY_dead_abovecomma: u32 = 65124;
pub const XKB_KEY_dead_psili: u32 = 65124;
pub const XKB_KEY_dead_abovereversedcomma: u32 = 65125;
pub const XKB_KEY_dead_dasia: u32 = 65125;
pub const XKB_KEY_dead_doublegrave: u32 = 65126;
pub const XKB_KEY_dead_belowring: u32 = 65127;
pub const XKB_KEY_dead_belowmacron: u32 = 65128;
pub const XKB_KEY_dead_belowcircumflex: u32 = 65129;
pub const XKB_KEY_dead_belowtilde: u32 = 65130;
pub const XKB_KEY_dead_belowbreve: u32 = 65131;
pub const XKB_KEY_dead_belowdiaeresis: u32 = 65132;
pub const XKB_KEY_dead_invertedbreve: u32 = 65133;
pub const XKB_KEY_dead_belowcomma: u32 = 65134;
pub const XKB_KEY_dead_currency: u32 = 65135;
pub const XKB_KEY_dead_lowline: u32 = 65168;
pub const XKB_KEY_dead_aboveverticalline: u32 = 65169;
pub const XKB_KEY_dead_belowverticalline: u32 = 65170;
pub const XKB_KEY_dead_longsolidusoverlay: u32 = 65171;
pub const XKB_KEY_dead_a: u32 = 65152;
pub const XKB_KEY_dead_A: u32 = 65153;
pub const XKB_KEY_dead_e: u32 = 65154;
pub const XKB_KEY_dead_E: u32 = 65155;
pub const XKB_KEY_dead_i: u32 = 65156;
pub const XKB_KEY_dead_I: u32 = 65157;
pub const XKB_KEY_dead_o: u32 = 65158;
pub const XKB_KEY_dead_O: u32 = 65159;
pub const XKB_KEY_dead_u: u32 = 65160;
pub const XKB_KEY_dead_U: u32 = 65161;
pub const XKB_KEY_dead_small_schwa: u32 = 65162;
pub const XKB_KEY_dead_schwa: u32 = 65162;
pub const XKB_KEY_dead_capital_schwa: u32 = 65163;
pub const XKB_KEY_dead_SCHWA: u32 = 65163;
pub const XKB_KEY_dead_greek: u32 = 65164;
pub const XKB_KEY_dead_hamza: u32 = 65165;
pub const XKB_KEY_First_Virtual_Screen: u32 = 65232;
pub const XKB_KEY_Prev_Virtual_Screen: u32 = 65233;
pub const XKB_KEY_Next_Virtual_Screen: u32 = 65234;
pub const XKB_KEY_Last_Virtual_Screen: u32 = 65236;
pub const XKB_KEY_Terminate_Server: u32 = 65237;
pub const XKB_KEY_AccessX_Enable: u32 = 65136;
pub const XKB_KEY_AccessX_Feedback_Enable: u32 = 65137;
pub const XKB_KEY_RepeatKeys_Enable: u32 = 65138;
pub const XKB_KEY_SlowKeys_Enable: u32 = 65139;
pub const XKB_KEY_BounceKeys_Enable: u32 = 65140;
pub const XKB_KEY_StickyKeys_Enable: u32 = 65141;
pub const XKB_KEY_MouseKeys_Enable: u32 = 65142;
pub const XKB_KEY_MouseKeys_Accel_Enable: u32 = 65143;
pub const XKB_KEY_Overlay1_Enable: u32 = 65144;
pub const XKB_KEY_Overlay2_Enable: u32 = 65145;
pub const XKB_KEY_AudibleBell_Enable: u32 = 65146;
pub const XKB_KEY_Pointer_Left: u32 = 65248;
pub const XKB_KEY_Pointer_Right: u32 = 65249;
pub const XKB_KEY_Pointer_Up: u32 = 65250;
pub const XKB_KEY_Pointer_Down: u32 = 65251;
pub const XKB_KEY_Pointer_UpLeft: u32 = 65252;
pub const XKB_KEY_Pointer_UpRight: u32 = 65253;
pub const XKB_KEY_Pointer_DownLeft: u32 = 65254;
pub const XKB_KEY_Pointer_DownRight: u32 = 65255;
pub const XKB_KEY_Pointer_Button_Dflt: u32 = 65256;
pub const XKB_KEY_Pointer_Button1: u32 = 65257;
pub const XKB_KEY_Pointer_Button2: u32 = 65258;
pub const XKB_KEY_Pointer_Button3: u32 = 65259;
pub const XKB_KEY_Pointer_Button4: u32 = 65260;
pub const XKB_KEY_Pointer_Button5: u32 = 65261;
pub const XKB_KEY_Pointer_DblClick_Dflt: u32 = 65262;
pub const XKB_KEY_Pointer_DblClick1: u32 = 65263;
pub const XKB_KEY_Pointer_DblClick2: u32 = 65264;
pub const XKB_KEY_Pointer_DblClick3: u32 = 65265;
pub const XKB_KEY_Pointer_DblClick4: u32 = 65266;
pub const XKB_KEY_Pointer_DblClick5: u32 = 65267;
pub const XKB_KEY_Pointer_Drag_Dflt: u32 = 65268;
pub const XKB_KEY_Pointer_Drag1: u32 = 65269;
pub const XKB_KEY_Pointer_Drag2: u32 = 65270;
pub const XKB_KEY_Pointer_Drag3: u32 = 65271;
pub const XKB_KEY_Pointer_Drag4: u32 = 65272;
pub const XKB_KEY_Pointer_Drag5: u32 = 65277;
pub const XKB_KEY_Pointer_EnableKeys: u32 = 65273;
pub const XKB_KEY_Pointer_Accelerate: u32 = 65274;
pub const XKB_KEY_Pointer_DfltBtnNext: u32 = 65275;
pub const XKB_KEY_Pointer_DfltBtnPrev: u32 = 65276;
pub const XKB_KEY_ch: u32 = 65184;
pub const XKB_KEY_Ch: u32 = 65185;
pub const XKB_KEY_CH: u32 = 65186;
pub const XKB_KEY_c_h: u32 = 65187;
pub const XKB_KEY_C_h: u32 = 65188;
pub const XKB_KEY_C_H: u32 = 65189;
pub const XKB_KEY_3270_Duplicate: u32 = 64769;
pub const XKB_KEY_3270_FieldMark: u32 = 64770;
pub const XKB_KEY_3270_Right2: u32 = 64771;
pub const XKB_KEY_3270_Left2: u32 = 64772;
pub const XKB_KEY_3270_BackTab: u32 = 64773;
pub const XKB_KEY_3270_EraseEOF: u32 = 64774;
pub const XKB_KEY_3270_EraseInput: u32 = 64775;
pub const XKB_KEY_3270_Reset: u32 = 64776;
pub const XKB_KEY_3270_Quit: u32 = 64777;
pub const XKB_KEY_3270_PA1: u32 = 64778;
pub const XKB_KEY_3270_PA2: u32 = 64779;
pub const XKB_KEY_3270_PA3: u32 = 64780;
pub const XKB_KEY_3270_Test: u32 = 64781;
pub const XKB_KEY_3270_Attn: u32 = 64782;
pub const XKB_KEY_3270_CursorBlink: u32 = 64783;
pub const XKB_KEY_3270_AltCursor: u32 = 64784;
pub const XKB_KEY_3270_KeyClick: u32 = 64785;
pub const XKB_KEY_3270_Jump: u32 = 64786;
pub const XKB_KEY_3270_Ident: u32 = 64787;
pub const XKB_KEY_3270_Rule: u32 = 64788;
pub const XKB_KEY_3270_Copy: u32 = 64789;
pub const XKB_KEY_3270_Play: u32 = 64790;
pub const XKB_KEY_3270_Setup: u32 = 64791;
pub const XKB_KEY_3270_Record: u32 = 64792;
pub const XKB_KEY_3270_ChangeScreen: u32 = 64793;
pub const XKB_KEY_3270_DeleteWord: u32 = 64794;
pub const XKB_KEY_3270_ExSelect: u32 = 64795;
pub const XKB_KEY_3270_CursorSelect: u32 = 64796;
pub const XKB_KEY_3270_PrintScreen: u32 = 64797;
pub const XKB_KEY_3270_Enter: u32 = 64798;
pub const XKB_KEY_space: u32 = 32;
pub const XKB_KEY_exclam: u32 = 33;
pub const XKB_KEY_quotedbl: u32 = 34;
pub const XKB_KEY_numbersign: u32 = 35;
pub const XKB_KEY_dollar: u32 = 36;
pub const XKB_KEY_percent: u32 = 37;
pub const XKB_KEY_ampersand: u32 = 38;
pub const XKB_KEY_apostrophe: u32 = 39;
pub const XKB_KEY_quoteright: u32 = 39;
pub const XKB_KEY_parenleft: u32 = 40;
pub const XKB_KEY_parenright: u32 = 41;
pub const XKB_KEY_asterisk: u32 = 42;
pub const XKB_KEY_plus: u32 = 43;
pub const XKB_KEY_comma: u32 = 44;
pub const XKB_KEY_minus: u32 = 45;
pub const XKB_KEY_period: u32 = 46;
pub const XKB_KEY_slash: u32 = 47;
pub const XKB_KEY_0: u32 = 48;
pub const XKB_KEY_1: u32 = 49;
pub const XKB_KEY_2: u32 = 50;
pub const XKB_KEY_3: u32 = 51;
pub const XKB_KEY_4: u32 = 52;
pub const XKB_KEY_5: u32 = 53;
pub const XKB_KEY_6: u32 = 54;
pub const XKB_KEY_7: u32 = 55;
pub const XKB_KEY_8: u32 = 56;
pub const XKB_KEY_9: u32 = 57;
pub const XKB_KEY_colon: u32 = 58;
pub const XKB_KEY_semicolon: u32 = 59;
pub const XKB_KEY_less: u32 = 60;
pub const XKB_KEY_equal: u32 = 61;
pub const XKB_KEY_greater: u32 = 62;
pub const XKB_KEY_question: u32 = 63;
pub const XKB_KEY_at: u32 = 64;
pub const XKB_KEY_A: u32 = 65;
pub const XKB_KEY_B: u32 = 66;
pub const XKB_KEY_C: u32 = 67;
pub const XKB_KEY_D: u32 = 68;
pub const XKB_KEY_E: u32 = 69;
pub const XKB_KEY_F: u32 = 70;
pub const XKB_KEY_G: u32 = 71;
pub const XKB_KEY_H: u32 = 72;
pub const XKB_KEY_I: u32 = 73;
pub const XKB_KEY_J: u32 = 74;
pub const XKB_KEY_K: u32 = 75;
pub const XKB_KEY_L: u32 = 76;
pub const XKB_KEY_M: u32 = 77;
pub const XKB_KEY_N: u32 = 78;
pub const XKB_KEY_O: u32 = 79;
pub const XKB_KEY_P: u32 = 80;
pub const XKB_KEY_Q: u32 = 81;
pub const XKB_KEY_R: u32 = 82;
pub const XKB_KEY_S: u32 = 83;
pub const XKB_KEY_T: u32 = 84;
pub const XKB_KEY_U: u32 = 85;
pub const XKB_KEY_V: u32 = 86;
pub const XKB_KEY_W: u32 = 87;
pub const XKB_KEY_X: u32 = 88;
pub const XKB_KEY_Y: u32 = 89;
pub const XKB_KEY_Z: u32 = 90;
pub const XKB_KEY_bracketleft: u32 = 91;
pub const XKB_KEY_backslash: u32 = 92;
pub const XKB_KEY_bracketright: u32 = 93;
pub const XKB_KEY_asciicircum: u32 = 94;
pub const XKB_KEY_underscore: u32 = 95;
pub const XKB_KEY_grave: u32 = 96;
pub const XKB_KEY_quoteleft: u32 = 96;
pub const XKB_KEY_a: u32 = 97;
pub const XKB_KEY_b: u32 = 98;
pub const XKB_KEY_c: u32 = 99;
pub const XKB_KEY_d: u32 = 100;
pub const XKB_KEY_e: u32 = 101;
pub const XKB_KEY_f: u32 = 102;
pub const XKB_KEY_g: u32 = 103;
pub const XKB_KEY_h: u32 = 104;
pub const XKB_KEY_i: u32 = 105;
pub const XKB_KEY_j: u32 = 106;
pub const XKB_KEY_k: u32 = 107;
pub const XKB_KEY_l: u32 = 108;
pub const XKB_KEY_m: u32 = 109;
pub const XKB_KEY_n: u32 = 110;
pub const XKB_KEY_o: u32 = 111;
pub const XKB_KEY_p: u32 = 112;
pub const XKB_KEY_q: u32 = 113;
pub const XKB_KEY_r: u32 = 114;
pub const XKB_KEY_s: u32 = 115;
pub const XKB_KEY_t: u32 = 116;
pub const XKB_KEY_u: u32 = 117;
pub const XKB_KEY_v: u32 = 118;
pub const XKB_KEY_w: u32 = 119;
pub const XKB_KEY_x: u32 = 120;
pub const XKB_KEY_y: u32 = 121;
pub const XKB_KEY_z: u32 = 122;
pub const XKB_KEY_braceleft: u32 = 123;
pub const XKB_KEY_bar: u32 = 124;
pub const XKB_KEY_braceright: u32 = 125;
pub const XKB_KEY_asciitilde: u32 = 126;
pub const XKB_KEY_nobreakspace: u32 = 160;
pub const XKB_KEY_exclamdown: u32 = 161;
pub const XKB_KEY_cent: u32 = 162;
pub const XKB_KEY_sterling: u32 = 163;
pub const XKB_KEY_currency: u32 = 164;
pub const XKB_KEY_yen: u32 = 165;
pub const XKB_KEY_brokenbar: u32 = 166;
pub const XKB_KEY_section: u32 = 167;
pub const XKB_KEY_diaeresis: u32 = 168;
pub const XKB_KEY_copyright: u32 = 169;
pub const XKB_KEY_ordfeminine: u32 = 170;
pub const XKB_KEY_guillemotleft: u32 = 171;
pub const XKB_KEY_guillemetleft: u32 = 171;
pub const XKB_KEY_notsign: u32 = 172;
pub const XKB_KEY_hyphen: u32 = 173;
pub const XKB_KEY_registered: u32 = 174;
pub const XKB_KEY_macron: u32 = 175;
pub const XKB_KEY_degree: u32 = 176;
pub const XKB_KEY_plusminus: u32 = 177;
pub const XKB_KEY_twosuperior: u32 = 178;
pub const XKB_KEY_threesuperior: u32 = 179;
pub const XKB_KEY_acute: u32 = 180;
pub const XKB_KEY_mu: u32 = 181;
pub const XKB_KEY_paragraph: u32 = 182;
pub const XKB_KEY_periodcentered: u32 = 183;
pub const XKB_KEY_cedilla: u32 = 184;
pub const XKB_KEY_onesuperior: u32 = 185;
pub const XKB_KEY_masculine: u32 = 186;
pub const XKB_KEY_ordmasculine: u32 = 186;
pub const XKB_KEY_guillemotright: u32 = 187;
pub const XKB_KEY_guillemetright: u32 = 187;
pub const XKB_KEY_onequarter: u32 = 188;
pub const XKB_KEY_onehalf: u32 = 189;
pub const XKB_KEY_threequarters: u32 = 190;
pub const XKB_KEY_questiondown: u32 = 191;
pub const XKB_KEY_Agrave: u32 = 192;
pub const XKB_KEY_Aacute: u32 = 193;
pub const XKB_KEY_Acircumflex: u32 = 194;
pub const XKB_KEY_Atilde: u32 = 195;
pub const XKB_KEY_Adiaeresis: u32 = 196;
pub const XKB_KEY_Aring: u32 = 197;
pub const XKB_KEY_AE: u32 = 198;
pub const XKB_KEY_Ccedilla: u32 = 199;
pub const XKB_KEY_Egrave: u32 = 200;
pub const XKB_KEY_Eacute: u32 = 201;
pub const XKB_KEY_Ecircumflex: u32 = 202;
pub const XKB_KEY_Ediaeresis: u32 = 203;
pub const XKB_KEY_Igrave: u32 = 204;
pub const XKB_KEY_Iacute: u32 = 205;
pub const XKB_KEY_Icircumflex: u32 = 206;
pub const XKB_KEY_Idiaeresis: u32 = 207;
pub const XKB_KEY_ETH: u32 = 208;
pub const XKB_KEY_Eth: u32 = 208;
pub const XKB_KEY_Ntilde: u32 = 209;
pub const XKB_KEY_Ograve: u32 = 210;
pub const XKB_KEY_Oacute: u32 = 211;
pub const XKB_KEY_Ocircumflex: u32 = 212;
pub const XKB_KEY_Otilde: u32 = 213;
pub const XKB_KEY_Odiaeresis: u32 = 214;
pub const XKB_KEY_multiply: u32 = 215;
pub const XKB_KEY_Oslash: u32 = 216;
pub const XKB_KEY_Ooblique: u32 = 216;
pub const XKB_KEY_Ugrave: u32 = 217;
pub const XKB_KEY_Uacute: u32 = 218;
pub const XKB_KEY_Ucircumflex: u32 = 219;
pub const XKB_KEY_Udiaeresis: u32 = 220;
pub const XKB_KEY_Yacute: u32 = 221;
pub const XKB_KEY_THORN: u32 = 222;
pub const XKB_KEY_Thorn: u32 = 222;
pub const XKB_KEY_ssharp: u32 = 223;
pub const XKB_KEY_agrave: u32 = 224;
pub const XKB_KEY_aacute: u32 = 225;
pub const XKB_KEY_acircumflex: u32 = 226;
pub const XKB_KEY_atilde: u32 = 227;
pub const XKB_KEY_adiaeresis: u32 = 228;
pub const XKB_KEY_aring: u32 = 229;
pub const XKB_KEY_ae: u32 = 230;
pub const XKB_KEY_ccedilla: u32 = 231;
pub const XKB_KEY_egrave: u32 = 232;
pub const XKB_KEY_eacute: u32 = 233;
pub const XKB_KEY_ecircumflex: u32 = 234;
pub const XKB_KEY_ediaeresis: u32 = 235;
pub const XKB_KEY_igrave: u32 = 236;
pub const XKB_KEY_iacute: u32 = 237;
pub const XKB_KEY_icircumflex: u32 = 238;
pub const XKB_KEY_idiaeresis: u32 = 239;
pub const XKB_KEY_eth: u32 = 240;
pub const XKB_KEY_ntilde: u32 = 241;
pub const XKB_KEY_ograve: u32 = 242;
pub const XKB_KEY_oacute: u32 = 243;
pub const XKB_KEY_ocircumflex: u32 = 244;
pub const XKB_KEY_otilde: u32 = 245;
pub const XKB_KEY_odiaeresis: u32 = 246;
pub const XKB_KEY_division: u32 = 247;
pub const XKB_KEY_oslash: u32 = 248;
pub const XKB_KEY_ooblique: u32 = 248;
pub const XKB_KEY_ugrave: u32 = 249;
pub const XKB_KEY_uacute: u32 = 250;
pub const XKB_KEY_ucircumflex: u32 = 251;
pub const XKB_KEY_udiaeresis: u32 = 252;
pub const XKB_KEY_yacute: u32 = 253;
pub const XKB_KEY_thorn: u32 = 254;
pub const XKB_KEY_ydiaeresis: u32 = 255;
pub const XKB_KEY_Aogonek: u32 = 417;
pub const XKB_KEY_breve: u32 = 418;
pub const XKB_KEY_Lstroke: u32 = 419;
pub const XKB_KEY_Lcaron: u32 = 421;
pub const XKB_KEY_Sacute: u32 = 422;
pub const XKB_KEY_Scaron: u32 = 425;
pub const XKB_KEY_Scedilla: u32 = 426;
pub const XKB_KEY_Tcaron: u32 = 427;
pub const XKB_KEY_Zacute: u32 = 428;
pub const XKB_KEY_Zcaron: u32 = 430;
pub const XKB_KEY_Zabovedot: u32 = 431;
pub const XKB_KEY_aogonek: u32 = 433;
pub const XKB_KEY_ogonek: u32 = 434;
pub const XKB_KEY_lstroke: u32 = 435;
pub const XKB_KEY_lcaron: u32 = 437;
pub const XKB_KEY_sacute: u32 = 438;
pub const XKB_KEY_caron: u32 = 439;
pub const XKB_KEY_scaron: u32 = 441;
pub const XKB_KEY_scedilla: u32 = 442;
pub const XKB_KEY_tcaron: u32 = 443;
pub const XKB_KEY_zacute: u32 = 444;
pub const XKB_KEY_doubleacute: u32 = 445;
pub const XKB_KEY_zcaron: u32 = 446;
pub const XKB_KEY_zabovedot: u32 = 447;
pub const XKB_KEY_Racute: u32 = 448;
pub const XKB_KEY_Abreve: u32 = 451;
pub const XKB_KEY_Lacute: u32 = 453;
pub const XKB_KEY_Cacute: u32 = 454;
pub const XKB_KEY_Ccaron: u32 = 456;
pub const XKB_KEY_Eogonek: u32 = 458;
pub const XKB_KEY_Ecaron: u32 = 460;
pub const XKB_KEY_Dcaron: u32 = 463;
pub const XKB_KEY_Dstroke: u32 = 464;
pub const XKB_KEY_Nacute: u32 = 465;
pub const XKB_KEY_Ncaron: u32 = 466;
pub const XKB_KEY_Odoubleacute: u32 = 469;
pub const XKB_KEY_Rcaron: u32 = 472;
pub const XKB_KEY_Uring: u32 = 473;
pub const XKB_KEY_Udoubleacute: u32 = 475;
pub const XKB_KEY_Tcedilla: u32 = 478;
pub const XKB_KEY_racute: u32 = 480;
pub const XKB_KEY_abreve: u32 = 483;
pub const XKB_KEY_lacute: u32 = 485;
pub const XKB_KEY_cacute: u32 = 486;
pub const XKB_KEY_ccaron: u32 = 488;
pub const XKB_KEY_eogonek: u32 = 490;
pub const XKB_KEY_ecaron: u32 = 492;
pub const XKB_KEY_dcaron: u32 = 495;
pub const XKB_KEY_dstroke: u32 = 496;
pub const XKB_KEY_nacute: u32 = 497;
pub const XKB_KEY_ncaron: u32 = 498;
pub const XKB_KEY_odoubleacute: u32 = 501;
pub const XKB_KEY_rcaron: u32 = 504;
pub const XKB_KEY_uring: u32 = 505;
pub const XKB_KEY_udoubleacute: u32 = 507;
pub const XKB_KEY_tcedilla: u32 = 510;
pub const XKB_KEY_abovedot: u32 = 511;
pub const XKB_KEY_Hstroke: u32 = 673;
pub const XKB_KEY_Hcircumflex: u32 = 678;
pub const XKB_KEY_Iabovedot: u32 = 681;
pub const XKB_KEY_Gbreve: u32 = 683;
pub const XKB_KEY_Jcircumflex: u32 = 684;
pub const XKB_KEY_hstroke: u32 = 689;
pub const XKB_KEY_hcircumflex: u32 = 694;
pub const XKB_KEY_idotless: u32 = 697;
pub const XKB_KEY_gbreve: u32 = 699;
pub const XKB_KEY_jcircumflex: u32 = 700;
pub const XKB_KEY_Cabovedot: u32 = 709;
pub const XKB_KEY_Ccircumflex: u32 = 710;
pub const XKB_KEY_Gabovedot: u32 = 725;
pub const XKB_KEY_Gcircumflex: u32 = 728;
pub const XKB_KEY_Ubreve: u32 = 733;
pub const XKB_KEY_Scircumflex: u32 = 734;
pub const XKB_KEY_cabovedot: u32 = 741;
pub const XKB_KEY_ccircumflex: u32 = 742;
pub const XKB_KEY_gabovedot: u32 = 757;
pub const XKB_KEY_gcircumflex: u32 = 760;
pub const XKB_KEY_ubreve: u32 = 765;
pub const XKB_KEY_scircumflex: u32 = 766;
pub const XKB_KEY_kra: u32 = 930;
pub const XKB_KEY_kappa: u32 = 930;
pub const XKB_KEY_Rcedilla: u32 = 931;
pub const XKB_KEY_Itilde: u32 = 933;
pub const XKB_KEY_Lcedilla: u32 = 934;
pub const XKB_KEY_Emacron: u32 = 938;
pub const XKB_KEY_Gcedilla: u32 = 939;
pub const XKB_KEY_Tslash: u32 = 940;
pub const XKB_KEY_rcedilla: u32 = 947;
pub const XKB_KEY_itilde: u32 = 949;
pub const XKB_KEY_lcedilla: u32 = 950;
pub const XKB_KEY_emacron: u32 = 954;
pub const XKB_KEY_gcedilla: u32 = 955;
pub const XKB_KEY_tslash: u32 = 956;
pub const XKB_KEY_ENG: u32 = 957;
pub const XKB_KEY_eng: u32 = 959;
pub const XKB_KEY_Amacron: u32 = 960;
pub const XKB_KEY_Iogonek: u32 = 967;
pub const XKB_KEY_Eabovedot: u32 = 972;
pub const XKB_KEY_Imacron: u32 = 975;
pub const XKB_KEY_Ncedilla: u32 = 977;
pub const XKB_KEY_Omacron: u32 = 978;
pub const XKB_KEY_Kcedilla: u32 = 979;
pub const XKB_KEY_Uogonek: u32 = 985;
pub const XKB_KEY_Utilde: u32 = 989;
pub const XKB_KEY_Umacron: u32 = 990;
pub const XKB_KEY_amacron: u32 = 992;
pub const XKB_KEY_iogonek: u32 = 999;
pub const XKB_KEY_eabovedot: u32 = 1004;
pub const XKB_KEY_imacron: u32 = 1007;
pub const XKB_KEY_ncedilla: u32 = 1009;
pub const XKB_KEY_omacron: u32 = 1010;
pub const XKB_KEY_kcedilla: u32 = 1011;
pub const XKB_KEY_uogonek: u32 = 1017;
pub const XKB_KEY_utilde: u32 = 1021;
pub const XKB_KEY_umacron: u32 = 1022;
pub const XKB_KEY_Wcircumflex: u32 = 16777588;
pub const XKB_KEY_wcircumflex: u32 = 16777589;
pub const XKB_KEY_Ycircumflex: u32 = 16777590;
pub const XKB_KEY_ycircumflex: u32 = 16777591;
pub const XKB_KEY_Babovedot: u32 = 16784898;
pub const XKB_KEY_babovedot: u32 = 16784899;
pub const XKB_KEY_Dabovedot: u32 = 16784906;
pub const XKB_KEY_dabovedot: u32 = 16784907;
pub const XKB_KEY_Fabovedot: u32 = 16784926;
pub const XKB_KEY_fabovedot: u32 = 16784927;
pub const XKB_KEY_Mabovedot: u32 = 16784960;
pub const XKB_KEY_mabovedot: u32 = 16784961;
pub const XKB_KEY_Pabovedot: u32 = 16784982;
pub const XKB_KEY_pabovedot: u32 = 16784983;
pub const XKB_KEY_Sabovedot: u32 = 16784992;
pub const XKB_KEY_sabovedot: u32 = 16784993;
pub const XKB_KEY_Tabovedot: u32 = 16785002;
pub const XKB_KEY_tabovedot: u32 = 16785003;
pub const XKB_KEY_Wgrave: u32 = 16785024;
pub const XKB_KEY_wgrave: u32 = 16785025;
pub const XKB_KEY_Wacute: u32 = 16785026;
pub const XKB_KEY_wacute: u32 = 16785027;
pub const XKB_KEY_Wdiaeresis: u32 = 16785028;
pub const XKB_KEY_wdiaeresis: u32 = 16785029;
pub const XKB_KEY_Ygrave: u32 = 16785138;
pub const XKB_KEY_ygrave: u32 = 16785139;
pub const XKB_KEY_OE: u32 = 5052;
pub const XKB_KEY_oe: u32 = 5053;
pub const XKB_KEY_Ydiaeresis: u32 = 5054;
pub const XKB_KEY_overline: u32 = 1150;
pub const XKB_KEY_kana_fullstop: u32 = 1185;
pub const XKB_KEY_kana_openingbracket: u32 = 1186;
pub const XKB_KEY_kana_closingbracket: u32 = 1187;
pub const XKB_KEY_kana_comma: u32 = 1188;
pub const XKB_KEY_kana_conjunctive: u32 = 1189;
pub const XKB_KEY_kana_middledot: u32 = 1189;
pub const XKB_KEY_kana_WO: u32 = 1190;
pub const XKB_KEY_kana_a: u32 = 1191;
pub const XKB_KEY_kana_i: u32 = 1192;
pub const XKB_KEY_kana_u: u32 = 1193;
pub const XKB_KEY_kana_e: u32 = 1194;
pub const XKB_KEY_kana_o: u32 = 1195;
pub const XKB_KEY_kana_ya: u32 = 1196;
pub const XKB_KEY_kana_yu: u32 = 1197;
pub const XKB_KEY_kana_yo: u32 = 1198;
pub const XKB_KEY_kana_tsu: u32 = 1199;
pub const XKB_KEY_kana_tu: u32 = 1199;
pub const XKB_KEY_prolongedsound: u32 = 1200;
pub const XKB_KEY_kana_A: u32 = 1201;
pub const XKB_KEY_kana_I: u32 = 1202;
pub const XKB_KEY_kana_U: u32 = 1203;
pub const XKB_KEY_kana_E: u32 = 1204;
pub const XKB_KEY_kana_O: u32 = 1205;
pub const XKB_KEY_kana_KA: u32 = 1206;
pub const XKB_KEY_kana_KI: u32 = 1207;
pub const XKB_KEY_kana_KU: u32 = 1208;
pub const XKB_KEY_kana_KE: u32 = 1209;
pub const XKB_KEY_kana_KO: u32 = 1210;
pub const XKB_KEY_kana_SA: u32 = 1211;
pub const XKB_KEY_kana_SHI: u32 = 1212;
pub const XKB_KEY_kana_SU: u32 = 1213;
pub const XKB_KEY_kana_SE: u32 = 1214;
pub const XKB_KEY_kana_SO: u32 = 1215;
pub const XKB_KEY_kana_TA: u32 = 1216;
pub const XKB_KEY_kana_CHI: u32 = 1217;
pub const XKB_KEY_kana_TI: u32 = 1217;
pub const XKB_KEY_kana_TSU: u32 = 1218;
pub const XKB_KEY_kana_TU: u32 = 1218;
pub const XKB_KEY_kana_TE: u32 = 1219;
pub const XKB_KEY_kana_TO: u32 = 1220;
pub const XKB_KEY_kana_NA: u32 = 1221;
pub const XKB_KEY_kana_NI: u32 = 1222;
pub const XKB_KEY_kana_NU: u32 = 1223;
pub const XKB_KEY_kana_NE: u32 = 1224;
pub const XKB_KEY_kana_NO: u32 = 1225;
pub const XKB_KEY_kana_HA: u32 = 1226;
pub const XKB_KEY_kana_HI: u32 = 1227;
pub const XKB_KEY_kana_FU: u32 = 1228;
pub const XKB_KEY_kana_HU: u32 = 1228;
pub const XKB_KEY_kana_HE: u32 = 1229;
pub const XKB_KEY_kana_HO: u32 = 1230;
pub const XKB_KEY_kana_MA: u32 = 1231;
pub const XKB_KEY_kana_MI: u32 = 1232;
pub const XKB_KEY_kana_MU: u32 = 1233;
pub const XKB_KEY_kana_ME: u32 = 1234;
pub const XKB_KEY_kana_MO: u32 = 1235;
pub const XKB_KEY_kana_YA: u32 = 1236;
pub const XKB_KEY_kana_YU: u32 = 1237;
pub const XKB_KEY_kana_YO: u32 = 1238;
pub const XKB_KEY_kana_RA: u32 = 1239;
pub const XKB_KEY_kana_RI: u32 = 1240;
pub const XKB_KEY_kana_RU: u32 = 1241;
pub const XKB_KEY_kana_RE: u32 = 1242;
pub const XKB_KEY_kana_RO: u32 = 1243;
pub const XKB_KEY_kana_WA: u32 = 1244;
pub const XKB_KEY_kana_N: u32 = 1245;
pub const XKB_KEY_voicedsound: u32 = 1246;
pub const XKB_KEY_semivoicedsound: u32 = 1247;
pub const XKB_KEY_kana_switch: u32 = 65406;
pub const XKB_KEY_Farsi_0: u32 = 16778992;
pub const XKB_KEY_Farsi_1: u32 = 16778993;
pub const XKB_KEY_Farsi_2: u32 = 16778994;
pub const XKB_KEY_Farsi_3: u32 = 16778995;
pub const XKB_KEY_Farsi_4: u32 = 16778996;
pub const XKB_KEY_Farsi_5: u32 = 16778997;
pub const XKB_KEY_Farsi_6: u32 = 16778998;
pub const XKB_KEY_Farsi_7: u32 = 16778999;
pub const XKB_KEY_Farsi_8: u32 = 16779000;
pub const XKB_KEY_Farsi_9: u32 = 16779001;
pub const XKB_KEY_Arabic_percent: u32 = 16778858;
pub const XKB_KEY_Arabic_superscript_alef: u32 = 16778864;
pub const XKB_KEY_Arabic_tteh: u32 = 16778873;
pub const XKB_KEY_Arabic_peh: u32 = 16778878;
pub const XKB_KEY_Arabic_tcheh: u32 = 16778886;
pub const XKB_KEY_Arabic_ddal: u32 = 16778888;
pub const XKB_KEY_Arabic_rreh: u32 = 16778897;
pub const XKB_KEY_Arabic_comma: u32 = 1452;
pub const XKB_KEY_Arabic_fullstop: u32 = 16778964;
pub const XKB_KEY_Arabic_0: u32 = 16778848;
pub const XKB_KEY_Arabic_1: u32 = 16778849;
pub const XKB_KEY_Arabic_2: u32 = 16778850;
pub const XKB_KEY_Arabic_3: u32 = 16778851;
pub const XKB_KEY_Arabic_4: u32 = 16778852;
pub const XKB_KEY_Arabic_5: u32 = 16778853;
pub const XKB_KEY_Arabic_6: u32 = 16778854;
pub const XKB_KEY_Arabic_7: u32 = 16778855;
pub const XKB_KEY_Arabic_8: u32 = 16778856;
pub const XKB_KEY_Arabic_9: u32 = 16778857;
pub const XKB_KEY_Arabic_semicolon: u32 = 1467;
pub const XKB_KEY_Arabic_question_mark: u32 = 1471;
pub const XKB_KEY_Arabic_hamza: u32 = 1473;
pub const XKB_KEY_Arabic_maddaonalef: u32 = 1474;
pub const XKB_KEY_Arabic_hamzaonalef: u32 = 1475;
pub const XKB_KEY_Arabic_hamzaonwaw: u32 = 1476;
pub const XKB_KEY_Arabic_hamzaunderalef: u32 = 1477;
pub const XKB_KEY_Arabic_hamzaonyeh: u32 = 1478;
pub const XKB_KEY_Arabic_alef: u32 = 1479;
pub const XKB_KEY_Arabic_beh: u32 = 1480;
pub const XKB_KEY_Arabic_tehmarbuta: u32 = 1481;
pub const XKB_KEY_Arabic_teh: u32 = 1482;
pub const XKB_KEY_Arabic_theh: u32 = 1483;
pub const XKB_KEY_Arabic_jeem: u32 = 1484;
pub const XKB_KEY_Arabic_hah: u32 = 1485;
pub const XKB_KEY_Arabic_khah: u32 = 1486;
pub const XKB_KEY_Arabic_dal: u32 = 1487;
pub const XKB_KEY_Arabic_thal: u32 = 1488;
pub const XKB_KEY_Arabic_ra: u32 = 1489;
pub const XKB_KEY_Arabic_zain: u32 = 1490;
pub const XKB_KEY_Arabic_seen: u32 = 1491;
pub const XKB_KEY_Arabic_sheen: u32 = 1492;
pub const XKB_KEY_Arabic_sad: u32 = 1493;
pub const XKB_KEY_Arabic_dad: u32 = 1494;
pub const XKB_KEY_Arabic_tah: u32 = 1495;
pub const XKB_KEY_Arabic_zah: u32 = 1496;
pub const XKB_KEY_Arabic_ain: u32 = 1497;
pub const XKB_KEY_Arabic_ghain: u32 = 1498;
pub const XKB_KEY_Arabic_tatweel: u32 = 1504;
pub const XKB_KEY_Arabic_feh: u32 = 1505;
pub const XKB_KEY_Arabic_qaf: u32 = 1506;
pub const XKB_KEY_Arabic_kaf: u32 = 1507;
pub const XKB_KEY_Arabic_lam: u32 = 1508;
pub const XKB_KEY_Arabic_meem: u32 = 1509;
pub const XKB_KEY_Arabic_noon: u32 = 1510;
pub const XKB_KEY_Arabic_ha: u32 = 1511;
pub const XKB_KEY_Arabic_heh: u32 = 1511;
pub const XKB_KEY_Arabic_waw: u32 = 1512;
pub const XKB_KEY_Arabic_alefmaksura: u32 = 1513;
pub const XKB_KEY_Arabic_yeh: u32 = 1514;
pub const XKB_KEY_Arabic_fathatan: u32 = 1515;
pub const XKB_KEY_Arabic_dammatan: u32 = 1516;
pub const XKB_KEY_Arabic_kasratan: u32 = 1517;
pub const XKB_KEY_Arabic_fatha: u32 = 1518;
pub const XKB_KEY_Arabic_damma: u32 = 1519;
pub const XKB_KEY_Arabic_kasra: u32 = 1520;
pub const XKB_KEY_Arabic_shadda: u32 = 1521;
pub const XKB_KEY_Arabic_sukun: u32 = 1522;
pub const XKB_KEY_Arabic_madda_above: u32 = 16778835;
pub const XKB_KEY_Arabic_hamza_above: u32 = 16778836;
pub const XKB_KEY_Arabic_hamza_below: u32 = 16778837;
pub const XKB_KEY_Arabic_jeh: u32 = 16778904;
pub const XKB_KEY_Arabic_veh: u32 = 16778916;
pub const XKB_KEY_Arabic_keheh: u32 = 16778921;
pub const XKB_KEY_Arabic_gaf: u32 = 16778927;
pub const XKB_KEY_Arabic_noon_ghunna: u32 = 16778938;
pub const XKB_KEY_Arabic_heh_doachashmee: u32 = 16778942;
pub const XKB_KEY_Farsi_yeh: u32 = 16778956;
pub const XKB_KEY_Arabic_farsi_yeh: u32 = 16778956;
pub const XKB_KEY_Arabic_yeh_baree: u32 = 16778962;
pub const XKB_KEY_Arabic_heh_goal: u32 = 16778945;
pub const XKB_KEY_Arabic_switch: u32 = 65406;
pub const XKB_KEY_Cyrillic_GHE_bar: u32 = 16778386;
pub const XKB_KEY_Cyrillic_ghe_bar: u32 = 16778387;
pub const XKB_KEY_Cyrillic_ZHE_descender: u32 = 16778390;
pub const XKB_KEY_Cyrillic_zhe_descender: u32 = 16778391;
pub const XKB_KEY_Cyrillic_KA_descender: u32 = 16778394;
pub const XKB_KEY_Cyrillic_ka_descender: u32 = 16778395;
pub const XKB_KEY_Cyrillic_KA_vertstroke: u32 = 16778396;
pub const XKB_KEY_Cyrillic_ka_vertstroke: u32 = 16778397;
pub const XKB_KEY_Cyrillic_EN_descender: u32 = 16778402;
pub const XKB_KEY_Cyrillic_en_descender: u32 = 16778403;
pub const XKB_KEY_Cyrillic_U_straight: u32 = 16778414;
pub const XKB_KEY_Cyrillic_u_straight: u32 = 16778415;
pub const XKB_KEY_Cyrillic_U_straight_bar: u32 = 16778416;
pub const XKB_KEY_Cyrillic_u_straight_bar: u32 = 16778417;
pub const XKB_KEY_Cyrillic_HA_descender: u32 = 16778418;
pub const XKB_KEY_Cyrillic_ha_descender: u32 = 16778419;
pub const XKB_KEY_Cyrillic_CHE_descender: u32 = 16778422;
pub const XKB_KEY_Cyrillic_che_descender: u32 = 16778423;
pub const XKB_KEY_Cyrillic_CHE_vertstroke: u32 = 16778424;
pub const XKB_KEY_Cyrillic_che_vertstroke: u32 = 16778425;
pub const XKB_KEY_Cyrillic_SHHA: u32 = 16778426;
pub const XKB_KEY_Cyrillic_shha: u32 = 16778427;
pub const XKB_KEY_Cyrillic_SCHWA: u32 = 16778456;
pub const XKB_KEY_Cyrillic_schwa: u32 = 16778457;
pub const XKB_KEY_Cyrillic_I_macron: u32 = 16778466;
pub const XKB_KEY_Cyrillic_i_macron: u32 = 16778467;
pub const XKB_KEY_Cyrillic_O_bar: u32 = 16778472;
pub const XKB_KEY_Cyrillic_o_bar: u32 = 16778473;
pub const XKB_KEY_Cyrillic_U_macron: u32 = 16778478;
pub const XKB_KEY_Cyrillic_u_macron: u32 = 16778479;
pub const XKB_KEY_Serbian_dje: u32 = 1697;
pub const XKB_KEY_Macedonia_gje: u32 = 1698;
pub const XKB_KEY_Cyrillic_io: u32 = 1699;
pub const XKB_KEY_Ukrainian_ie: u32 = 1700;
pub const XKB_KEY_Ukranian_je: u32 = 1700;
pub const XKB_KEY_Macedonia_dse: u32 = 1701;
pub const XKB_KEY_Ukrainian_i: u32 = 1702;
pub const XKB_KEY_Ukranian_i: u32 = 1702;
pub const XKB_KEY_Ukrainian_yi: u32 = 1703;
pub const XKB_KEY_Ukranian_yi: u32 = 1703;
pub const XKB_KEY_Cyrillic_je: u32 = 1704;
pub const XKB_KEY_Serbian_je: u32 = 1704;
pub const XKB_KEY_Cyrillic_lje: u32 = 1705;
pub const XKB_KEY_Serbian_lje: u32 = 1705;
pub const XKB_KEY_Cyrillic_nje: u32 = 1706;
pub const XKB_KEY_Serbian_nje: u32 = 1706;
pub const XKB_KEY_Serbian_tshe: u32 = 1707;
pub const XKB_KEY_Macedonia_kje: u32 = 1708;
pub const XKB_KEY_Ukrainian_ghe_with_upturn: u32 = 1709;
pub const XKB_KEY_Byelorussian_shortu: u32 = 1710;
pub const XKB_KEY_Cyrillic_dzhe: u32 = 1711;
pub const XKB_KEY_Serbian_dze: u32 = 1711;
pub const XKB_KEY_numerosign: u32 = 1712;
pub const XKB_KEY_Serbian_DJE: u32 = 1713;
pub const XKB_KEY_Macedonia_GJE: u32 = 1714;
pub const XKB_KEY_Cyrillic_IO: u32 = 1715;
pub const XKB_KEY_Ukrainian_IE: u32 = 1716;
pub const XKB_KEY_Ukranian_JE: u32 = 1716;
pub const XKB_KEY_Macedonia_DSE: u32 = 1717;
pub const XKB_KEY_Ukrainian_I: u32 = 1718;
pub const XKB_KEY_Ukranian_I: u32 = 1718;
pub const XKB_KEY_Ukrainian_YI: u32 = 1719;
pub const XKB_KEY_Ukranian_YI: u32 = 1719;
pub const XKB_KEY_Cyrillic_JE: u32 = 1720;
pub const XKB_KEY_Serbian_JE: u32 = 1720;
pub const XKB_KEY_Cyrillic_LJE: u32 = 1721;
pub const XKB_KEY_Serbian_LJE: u32 = 1721;
pub const XKB_KEY_Cyrillic_NJE: u32 = 1722;
pub const XKB_KEY_Serbian_NJE: u32 = 1722;
pub const XKB_KEY_Serbian_TSHE: u32 = 1723;
pub const XKB_KEY_Macedonia_KJE: u32 = 1724;
pub const XKB_KEY_Ukrainian_GHE_WITH_UPTURN: u32 = 1725;
pub const XKB_KEY_Byelorussian_SHORTU: u32 = 1726;
pub const XKB_KEY_Cyrillic_DZHE: u32 = 1727;
pub const XKB_KEY_Serbian_DZE: u32 = 1727;
pub const XKB_KEY_Cyrillic_yu: u32 = 1728;
pub const XKB_KEY_Cyrillic_a: u32 = 1729;
pub const XKB_KEY_Cyrillic_be: u32 = 1730;
pub const XKB_KEY_Cyrillic_tse: u32 = 1731;
pub const XKB_KEY_Cyrillic_de: u32 = 1732;
pub const XKB_KEY_Cyrillic_ie: u32 = 1733;
pub const XKB_KEY_Cyrillic_ef: u32 = 1734;
pub const XKB_KEY_Cyrillic_ghe: u32 = 1735;
pub const XKB_KEY_Cyrillic_ha: u32 = 1736;
pub const XKB_KEY_Cyrillic_i: u32 = 1737;
pub const XKB_KEY_Cyrillic_shorti: u32 = 1738;
pub const XKB_KEY_Cyrillic_ka: u32 = 1739;
pub const XKB_KEY_Cyrillic_el: u32 = 1740;
pub const XKB_KEY_Cyrillic_em: u32 = 1741;
pub const XKB_KEY_Cyrillic_en: u32 = 1742;
pub const XKB_KEY_Cyrillic_o: u32 = 1743;
pub const XKB_KEY_Cyrillic_pe: u32 = 1744;
pub const XKB_KEY_Cyrillic_ya: u32 = 1745;
pub const XKB_KEY_Cyrillic_er: u32 = 1746;
pub const XKB_KEY_Cyrillic_es: u32 = 1747;
pub const XKB_KEY_Cyrillic_te: u32 = 1748;
pub const XKB_KEY_Cyrillic_u: u32 = 1749;
pub const XKB_KEY_Cyrillic_zhe: u32 = 1750;
pub const XKB_KEY_Cyrillic_ve: u32 = 1751;
pub const XKB_KEY_Cyrillic_softsign: u32 = 1752;
pub const XKB_KEY_Cyrillic_yeru: u32 = 1753;
pub const XKB_KEY_Cyrillic_ze: u32 = 1754;
pub const XKB_KEY_Cyrillic_sha: u32 = 1755;
pub const XKB_KEY_Cyrillic_e: u32 = 1756;
pub const XKB_KEY_Cyrillic_shcha: u32 = 1757;
pub const XKB_KEY_Cyrillic_che: u32 = 1758;
pub const XKB_KEY_Cyrillic_hardsign: u32 = 1759;
pub const XKB_KEY_Cyrillic_YU: u32 = 1760;
pub const XKB_KEY_Cyrillic_A: u32 = 1761;
pub const XKB_KEY_Cyrillic_BE: u32 = 1762;
pub const XKB_KEY_Cyrillic_TSE: u32 = 1763;
pub const XKB_KEY_Cyrillic_DE: u32 = 1764;
pub const XKB_KEY_Cyrillic_IE: u32 = 1765;
pub const XKB_KEY_Cyrillic_EF: u32 = 1766;
pub const XKB_KEY_Cyrillic_GHE: u32 = 1767;
pub const XKB_KEY_Cyrillic_HA: u32 = 1768;
pub const XKB_KEY_Cyrillic_I: u32 = 1769;
pub const XKB_KEY_Cyrillic_SHORTI: u32 = 1770;
pub const XKB_KEY_Cyrillic_KA: u32 = 1771;
pub const XKB_KEY_Cyrillic_EL: u32 = 1772;
pub const XKB_KEY_Cyrillic_EM: u32 = 1773;
pub const XKB_KEY_Cyrillic_EN: u32 = 1774;
pub const XKB_KEY_Cyrillic_O: u32 = 1775;
pub const XKB_KEY_Cyrillic_PE: u32 = 1776;
pub const XKB_KEY_Cyrillic_YA: u32 = 1777;
pub const XKB_KEY_Cyrillic_ER: u32 = 1778;
pub const XKB_KEY_Cyrillic_ES: u32 = 1779;
pub const XKB_KEY_Cyrillic_TE: u32 = 1780;
pub const XKB_KEY_Cyrillic_U: u32 = 1781;
pub const XKB_KEY_Cyrillic_ZHE: u32 = 1782;
pub const XKB_KEY_Cyrillic_VE: u32 = 1783;
pub const XKB_KEY_Cyrillic_SOFTSIGN: u32 = 1784;
pub const XKB_KEY_Cyrillic_YERU: u32 = 1785;
pub const XKB_KEY_Cyrillic_ZE: u32 = 1786;
pub const XKB_KEY_Cyrillic_SHA: u32 = 1787;
pub const XKB_KEY_Cyrillic_E: u32 = 1788;
pub const XKB_KEY_Cyrillic_SHCHA: u32 = 1789;
pub const XKB_KEY_Cyrillic_CHE: u32 = 1790;
pub const XKB_KEY_Cyrillic_HARDSIGN: u32 = 1791;
pub const XKB_KEY_Greek_ALPHAaccent: u32 = 1953;
pub const XKB_KEY_Greek_EPSILONaccent: u32 = 1954;
pub const XKB_KEY_Greek_ETAaccent: u32 = 1955;
pub const XKB_KEY_Greek_IOTAaccent: u32 = 1956;
pub const XKB_KEY_Greek_IOTAdieresis: u32 = 1957;
pub const XKB_KEY_Greek_IOTAdiaeresis: u32 = 1957;
pub const XKB_KEY_Greek_OMICRONaccent: u32 = 1959;
pub const XKB_KEY_Greek_UPSILONaccent: u32 = 1960;
pub const XKB_KEY_Greek_UPSILONdieresis: u32 = 1961;
pub const XKB_KEY_Greek_OMEGAaccent: u32 = 1963;
pub const XKB_KEY_Greek_accentdieresis: u32 = 1966;
pub const XKB_KEY_Greek_horizbar: u32 = 1967;
pub const XKB_KEY_Greek_alphaaccent: u32 = 1969;
pub const XKB_KEY_Greek_epsilonaccent: u32 = 1970;
pub const XKB_KEY_Greek_etaaccent: u32 = 1971;
pub const XKB_KEY_Greek_iotaaccent: u32 = 1972;
pub const XKB_KEY_Greek_iotadieresis: u32 = 1973;
pub const XKB_KEY_Greek_iotaaccentdieresis: u32 = 1974;
pub const XKB_KEY_Greek_omicronaccent: u32 = 1975;
pub const XKB_KEY_Greek_upsilonaccent: u32 = 1976;
pub const XKB_KEY_Greek_upsilondieresis: u32 = 1977;
pub const XKB_KEY_Greek_upsilonaccentdieresis: u32 = 1978;
pub const XKB_KEY_Greek_omegaaccent: u32 = 1979;
pub const XKB_KEY_Greek_ALPHA: u32 = 1985;
pub const XKB_KEY_Greek_BETA: u32 = 1986;
pub const XKB_KEY_Greek_GAMMA: u32 = 1987;
pub const XKB_KEY_Greek_DELTA: u32 = 1988;
pub const XKB_KEY_Greek_EPSILON: u32 = 1989;
pub const XKB_KEY_Greek_ZETA: u32 = 1990;
pub const XKB_KEY_Greek_ETA: u32 = 1991;
pub const XKB_KEY_Greek_THETA: u32 = 1992;
pub const XKB_KEY_Greek_IOTA: u32 = 1993;
pub const XKB_KEY_Greek_KAPPA: u32 = 1994;
pub const XKB_KEY_Greek_LAMDA: u32 = 1995;
pub const XKB_KEY_Greek_LAMBDA: u32 = 1995;
pub const XKB_KEY_Greek_MU: u32 = 1996;
pub const XKB_KEY_Greek_NU: u32 = 1997;
pub const XKB_KEY_Greek_XI: u32 = 1998;
pub const XKB_KEY_Greek_OMICRON: u32 = 1999;
pub const XKB_KEY_Greek_PI: u32 = 2000;
pub const XKB_KEY_Greek_RHO: u32 = 2001;
pub const XKB_KEY_Greek_SIGMA: u32 = 2002;
pub const XKB_KEY_Greek_TAU: u32 = 2004;
pub const XKB_KEY_Greek_UPSILON: u32 = 2005;
pub const XKB_KEY_Greek_PHI: u32 = 2006;
pub const XKB_KEY_Greek_CHI: u32 = 2007;
pub const XKB_KEY_Greek_PSI: u32 = 2008;
pub const XKB_KEY_Greek_OMEGA: u32 = 2009;
pub const XKB_KEY_Greek_alpha: u32 = 2017;
pub const XKB_KEY_Greek_beta: u32 = 2018;
pub const XKB_KEY_Greek_gamma: u32 = 2019;
pub const XKB_KEY_Greek_delta: u32 = 2020;
pub const XKB_KEY_Greek_epsilon: u32 = 2021;
pub const XKB_KEY_Greek_zeta: u32 = 2022;
pub const XKB_KEY_Greek_eta: u32 = 2023;
pub const XKB_KEY_Greek_theta: u32 = 2024;
pub const XKB_KEY_Greek_iota: u32 = 2025;
pub const XKB_KEY_Greek_kappa: u32 = 2026;
pub const XKB_KEY_Greek_lamda: u32 = 2027;
pub const XKB_KEY_Greek_lambda: u32 = 2027;
pub const XKB_KEY_Greek_mu: u32 = 2028;
pub const XKB_KEY_Greek_nu: u32 = 2029;
pub const XKB_KEY_Greek_xi: u32 = 2030;
pub const XKB_KEY_Greek_omicron: u32 = 2031;
pub const XKB_KEY_Greek_pi: u32 = 2032;
pub const XKB_KEY_Greek_rho: u32 = 2033;
pub const XKB_KEY_Greek_sigma: u32 = 2034;
pub const XKB_KEY_Greek_finalsmallsigma: u32 = 2035;
pub const XKB_KEY_Greek_tau: u32 = 2036;
pub const XKB_KEY_Greek_upsilon: u32 = 2037;
pub const XKB_KEY_Greek_phi: u32 = 2038;
pub const XKB_KEY_Greek_chi: u32 = 2039;
pub const XKB_KEY_Greek_psi: u32 = 2040;
pub const XKB_KEY_Greek_omega: u32 = 2041;
pub const XKB_KEY_Greek_switch: u32 = 65406;
pub const XKB_KEY_leftradical: u32 = 2209;
pub const XKB_KEY_topleftradical: u32 = 2210;
pub const XKB_KEY_horizconnector: u32 = 2211;
pub const XKB_KEY_topintegral: u32 = 2212;
pub const XKB_KEY_botintegral: u32 = 2213;
pub const XKB_KEY_vertconnector: u32 = 2214;
pub const XKB_KEY_topleftsqbracket: u32 = 2215;
pub const XKB_KEY_botleftsqbracket: u32 = 2216;
pub const XKB_KEY_toprightsqbracket: u32 = 2217;
pub const XKB_KEY_botrightsqbracket: u32 = 2218;
pub const XKB_KEY_topleftparens: u32 = 2219;
pub const XKB_KEY_botleftparens: u32 = 2220;
pub const XKB_KEY_toprightparens: u32 = 2221;
pub const XKB_KEY_botrightparens: u32 = 2222;
pub const XKB_KEY_leftmiddlecurlybrace: u32 = 2223;
pub const XKB_KEY_rightmiddlecurlybrace: u32 = 2224;
pub const XKB_KEY_topleftsummation: u32 = 2225;
pub const XKB_KEY_botleftsummation: u32 = 2226;
pub const XKB_KEY_topvertsummationconnector: u32 = 2227;
pub const XKB_KEY_botvertsummationconnector: u32 = 2228;
pub const XKB_KEY_toprightsummation: u32 = 2229;
pub const XKB_KEY_botrightsummation: u32 = 2230;
pub const XKB_KEY_rightmiddlesummation: u32 = 2231;
pub const XKB_KEY_lessthanequal: u32 = 2236;
pub const XKB_KEY_notequal: u32 = 2237;
pub const XKB_KEY_greaterthanequal: u32 = 2238;
pub const XKB_KEY_integral: u32 = 2239;
pub const XKB_KEY_therefore: u32 = 2240;
pub const XKB_KEY_variation: u32 = 2241;
pub const XKB_KEY_infinity: u32 = 2242;
pub const XKB_KEY_nabla: u32 = 2245;
pub const XKB_KEY_approximate: u32 = 2248;
pub const XKB_KEY_similarequal: u32 = 2249;
pub const XKB_KEY_ifonlyif: u32 = 2253;
pub const XKB_KEY_implies: u32 = 2254;
pub const XKB_KEY_identical: u32 = 2255;
pub const XKB_KEY_radical: u32 = 2262;
pub const XKB_KEY_includedin: u32 = 2266;
pub const XKB_KEY_includes: u32 = 2267;
pub const XKB_KEY_intersection: u32 = 2268;
pub const XKB_KEY_union: u32 = 2269;
pub const XKB_KEY_logicaland: u32 = 2270;
pub const XKB_KEY_logicalor: u32 = 2271;
pub const XKB_KEY_partialderivative: u32 = 2287;
pub const XKB_KEY_function: u32 = 2294;
pub const XKB_KEY_leftarrow: u32 = 2299;
pub const XKB_KEY_uparrow: u32 = 2300;
pub const XKB_KEY_rightarrow: u32 = 2301;
pub const XKB_KEY_downarrow: u32 = 2302;
pub const XKB_KEY_blank: u32 = 2527;
pub const XKB_KEY_soliddiamond: u32 = 2528;
pub const XKB_KEY_checkerboard: u32 = 2529;
pub const XKB_KEY_ht: u32 = 2530;
pub const XKB_KEY_ff: u32 = 2531;
pub const XKB_KEY_cr: u32 = 2532;
pub const XKB_KEY_lf: u32 = 2533;
pub const XKB_KEY_nl: u32 = 2536;
pub const XKB_KEY_vt: u32 = 2537;
pub const XKB_KEY_lowrightcorner: u32 = 2538;
pub const XKB_KEY_uprightcorner: u32 = 2539;
pub const XKB_KEY_upleftcorner: u32 = 2540;
pub const XKB_KEY_lowleftcorner: u32 = 2541;
pub const XKB_KEY_crossinglines: u32 = 2542;
pub const XKB_KEY_horizlinescan1: u32 = 2543;
pub const XKB_KEY_horizlinescan3: u32 = 2544;
pub const XKB_KEY_horizlinescan5: u32 = 2545;
pub const XKB_KEY_horizlinescan7: u32 = 2546;
pub const XKB_KEY_horizlinescan9: u32 = 2547;
pub const XKB_KEY_leftt: u32 = 2548;
pub const XKB_KEY_rightt: u32 = 2549;
pub const XKB_KEY_bott: u32 = 2550;
pub const XKB_KEY_topt: u32 = 2551;
pub const XKB_KEY_vertbar: u32 = 2552;
pub const XKB_KEY_emspace: u32 = 2721;
pub const XKB_KEY_enspace: u32 = 2722;
pub const XKB_KEY_em3space: u32 = 2723;
pub const XKB_KEY_em4space: u32 = 2724;
pub const XKB_KEY_digitspace: u32 = 2725;
pub const XKB_KEY_punctspace: u32 = 2726;
pub const XKB_KEY_thinspace: u32 = 2727;
pub const XKB_KEY_hairspace: u32 = 2728;
pub const XKB_KEY_emdash: u32 = 2729;
pub const XKB_KEY_endash: u32 = 2730;
pub const XKB_KEY_signifblank: u32 = 2732;
pub const XKB_KEY_ellipsis: u32 = 2734;
pub const XKB_KEY_doubbaselinedot: u32 = 2735;
pub const XKB_KEY_onethird: u32 = 2736;
pub const XKB_KEY_twothirds: u32 = 2737;
pub const XKB_KEY_onefifth: u32 = 2738;
pub const XKB_KEY_twofifths: u32 = 2739;
pub const XKB_KEY_threefifths: u32 = 2740;
pub const XKB_KEY_fourfifths: u32 = 2741;
pub const XKB_KEY_onesixth: u32 = 2742;
pub const XKB_KEY_fivesixths: u32 = 2743;
pub const XKB_KEY_careof: u32 = 2744;
pub const XKB_KEY_figdash: u32 = 2747;
pub const XKB_KEY_leftanglebracket: u32 = 2748;
pub const XKB_KEY_decimalpoint: u32 = 2749;
pub const XKB_KEY_rightanglebracket: u32 = 2750;
pub const XKB_KEY_marker: u32 = 2751;
pub const XKB_KEY_oneeighth: u32 = 2755;
pub const XKB_KEY_threeeighths: u32 = 2756;
pub const XKB_KEY_fiveeighths: u32 = 2757;
pub const XKB_KEY_seveneighths: u32 = 2758;
pub const XKB_KEY_trademark: u32 = 2761;
pub const XKB_KEY_signaturemark: u32 = 2762;
pub const XKB_KEY_trademarkincircle: u32 = 2763;
pub const XKB_KEY_leftopentriangle: u32 = 2764;
pub const XKB_KEY_rightopentriangle: u32 = 2765;
pub const XKB_KEY_emopencircle: u32 = 2766;
pub const XKB_KEY_emopenrectangle: u32 = 2767;
pub const XKB_KEY_leftsinglequotemark: u32 = 2768;
pub const XKB_KEY_rightsinglequotemark: u32 = 2769;
pub const XKB_KEY_leftdoublequotemark: u32 = 2770;
pub const XKB_KEY_rightdoublequotemark: u32 = 2771;
pub const XKB_KEY_prescription: u32 = 2772;
pub const XKB_KEY_permille: u32 = 2773;
pub const XKB_KEY_minutes: u32 = 2774;
pub const XKB_KEY_seconds: u32 = 2775;
pub const XKB_KEY_latincross: u32 = 2777;
pub const XKB_KEY_hexagram: u32 = 2778;
pub const XKB_KEY_filledrectbullet: u32 = 2779;
pub const XKB_KEY_filledlefttribullet: u32 = 2780;
pub const XKB_KEY_filledrighttribullet: u32 = 2781;
pub const XKB_KEY_emfilledcircle: u32 = 2782;
pub const XKB_KEY_emfilledrect: u32 = 2783;
pub const XKB_KEY_enopencircbullet: u32 = 2784;
pub const XKB_KEY_enopensquarebullet: u32 = 2785;
pub const XKB_KEY_openrectbullet: u32 = 2786;
pub const XKB_KEY_opentribulletup: u32 = 2787;
pub const XKB_KEY_opentribulletdown: u32 = 2788;
pub const XKB_KEY_openstar: u32 = 2789;
pub const XKB_KEY_enfilledcircbullet: u32 = 2790;
pub const XKB_KEY_enfilledsqbullet: u32 = 2791;
pub const XKB_KEY_filledtribulletup: u32 = 2792;
pub const XKB_KEY_filledtribulletdown: u32 = 2793;
pub const XKB_KEY_leftpointer: u32 = 2794;
pub const XKB_KEY_rightpointer: u32 = 2795;
pub const XKB_KEY_club: u32 = 2796;
pub const XKB_KEY_diamond: u32 = 2797;
pub const XKB_KEY_heart: u32 = 2798;
pub const XKB_KEY_maltesecross: u32 = 2800;
pub const XKB_KEY_dagger: u32 = 2801;
pub const XKB_KEY_doubledagger: u32 = 2802;
pub const XKB_KEY_checkmark: u32 = 2803;
pub const XKB_KEY_ballotcross: u32 = 2804;
pub const XKB_KEY_musicalsharp: u32 = 2805;
pub const XKB_KEY_musicalflat: u32 = 2806;
pub const XKB_KEY_malesymbol: u32 = 2807;
pub const XKB_KEY_femalesymbol: u32 = 2808;
pub const XKB_KEY_telephone: u32 = 2809;
pub const XKB_KEY_telephonerecorder: u32 = 2810;
pub const XKB_KEY_phonographcopyright: u32 = 2811;
pub const XKB_KEY_caret: u32 = 2812;
pub const XKB_KEY_singlelowquotemark: u32 = 2813;
pub const XKB_KEY_doublelowquotemark: u32 = 2814;
pub const XKB_KEY_cursor: u32 = 2815;
pub const XKB_KEY_leftcaret: u32 = 2979;
pub const XKB_KEY_rightcaret: u32 = 2982;
pub const XKB_KEY_downcaret: u32 = 2984;
pub const XKB_KEY_upcaret: u32 = 2985;
pub const XKB_KEY_overbar: u32 = 3008;
pub const XKB_KEY_downtack: u32 = 3010;
pub const XKB_KEY_upshoe: u32 = 3011;
pub const XKB_KEY_downstile: u32 = 3012;
pub const XKB_KEY_underbar: u32 = 3014;
pub const XKB_KEY_jot: u32 = 3018;
pub const XKB_KEY_quad: u32 = 3020;
pub const XKB_KEY_uptack: u32 = 3022;
pub const XKB_KEY_circle: u32 = 3023;
pub const XKB_KEY_upstile: u32 = 3027;
pub const XKB_KEY_downshoe: u32 = 3030;
pub const XKB_KEY_rightshoe: u32 = 3032;
pub const XKB_KEY_leftshoe: u32 = 3034;
pub const XKB_KEY_lefttack: u32 = 3036;
pub const XKB_KEY_righttack: u32 = 3068;
pub const XKB_KEY_hebrew_doublelowline: u32 = 3295;
pub const XKB_KEY_hebrew_aleph: u32 = 3296;
pub const XKB_KEY_hebrew_bet: u32 = 3297;
pub const XKB_KEY_hebrew_beth: u32 = 3297;
pub const XKB_KEY_hebrew_gimel: u32 = 3298;
pub const XKB_KEY_hebrew_gimmel: u32 = 3298;
pub const XKB_KEY_hebrew_dalet: u32 = 3299;
pub const XKB_KEY_hebrew_daleth: u32 = 3299;
pub const XKB_KEY_hebrew_he: u32 = 3300;
pub const XKB_KEY_hebrew_waw: u32 = 3301;
pub const XKB_KEY_hebrew_zain: u32 = 3302;
pub const XKB_KEY_hebrew_zayin: u32 = 3302;
pub const XKB_KEY_hebrew_chet: u32 = 3303;
pub const XKB_KEY_hebrew_het: u32 = 3303;
pub const XKB_KEY_hebrew_tet: u32 = 3304;
pub const XKB_KEY_hebrew_teth: u32 = 3304;
pub const XKB_KEY_hebrew_yod: u32 = 3305;
pub const XKB_KEY_hebrew_finalkaph: u32 = 3306;
pub const XKB_KEY_hebrew_kaph: u32 = 3307;
pub const XKB_KEY_hebrew_lamed: u32 = 3308;
pub const XKB_KEY_hebrew_finalmem: u32 = 3309;
pub const XKB_KEY_hebrew_mem: u32 = 3310;
pub const XKB_KEY_hebrew_finalnun: u32 = 3311;
pub const XKB_KEY_hebrew_nun: u32 = 3312;
pub const XKB_KEY_hebrew_samech: u32 = 3313;
pub const XKB_KEY_hebrew_samekh: u32 = 3313;
pub const XKB_KEY_hebrew_ayin: u32 = 3314;
pub const XKB_KEY_hebrew_finalpe: u32 = 3315;
pub const XKB_KEY_hebrew_pe: u32 = 3316;
pub const XKB_KEY_hebrew_finalzade: u32 = 3317;
pub const XKB_KEY_hebrew_finalzadi: u32 = 3317;
pub const XKB_KEY_hebrew_zade: u32 = 3318;
pub const XKB_KEY_hebrew_zadi: u32 = 3318;
pub const XKB_KEY_hebrew_qoph: u32 = 3319;
pub const XKB_KEY_hebrew_kuf: u32 = 3319;
pub const XKB_KEY_hebrew_resh: u32 = 3320;
pub const XKB_KEY_hebrew_shin: u32 = 3321;
pub const XKB_KEY_hebrew_taw: u32 = 3322;
pub const XKB_KEY_hebrew_taf: u32 = 3322;
pub const XKB_KEY_Hebrew_switch: u32 = 65406;
pub const XKB_KEY_Thai_kokai: u32 = 3489;
pub const XKB_KEY_Thai_khokhai: u32 = 3490;
pub const XKB_KEY_Thai_khokhuat: u32 = 3491;
pub const XKB_KEY_Thai_khokhwai: u32 = 3492;
pub const XKB_KEY_Thai_khokhon: u32 = 3493;
pub const XKB_KEY_Thai_khorakhang: u32 = 3494;
pub const XKB_KEY_Thai_ngongu: u32 = 3495;
pub const XKB_KEY_Thai_chochan: u32 = 3496;
pub const XKB_KEY_Thai_choching: u32 = 3497;
pub const XKB_KEY_Thai_chochang: u32 = 3498;
pub const XKB_KEY_Thai_soso: u32 = 3499;
pub const XKB_KEY_Thai_chochoe: u32 = 3500;
pub const XKB_KEY_Thai_yoying: u32 = 3501;
pub const XKB_KEY_Thai_dochada: u32 = 3502;
pub const XKB_KEY_Thai_topatak: u32 = 3503;
pub const XKB_KEY_Thai_thothan: u32 = 3504;
pub const XKB_KEY_Thai_thonangmontho: u32 = 3505;
pub const XKB_KEY_Thai_thophuthao: u32 = 3506;
pub const XKB_KEY_Thai_nonen: u32 = 3507;
pub const XKB_KEY_Thai_dodek: u32 = 3508;
pub const XKB_KEY_Thai_totao: u32 = 3509;
pub const XKB_KEY_Thai_thothung: u32 = 3510;
pub const XKB_KEY_Thai_thothahan: u32 = 3511;
pub const XKB_KEY_Thai_thothong: u32 = 3512;
pub const XKB_KEY_Thai_nonu: u32 = 3513;
pub const XKB_KEY_Thai_bobaimai: u32 = 3514;
pub const XKB_KEY_Thai_popla: u32 = 3515;
pub const XKB_KEY_Thai_phophung: u32 = 3516;
pub const XKB_KEY_Thai_fofa: u32 = 3517;
pub const XKB_KEY_Thai_phophan: u32 = 3518;
pub const XKB_KEY_Thai_fofan: u32 = 3519;
pub const XKB_KEY_Thai_phosamphao: u32 = 3520;
pub const XKB_KEY_Thai_moma: u32 = 3521;
pub const XKB_KEY_Thai_yoyak: u32 = 3522;
pub const XKB_KEY_Thai_rorua: u32 = 3523;
pub const XKB_KEY_Thai_ru: u32 = 3524;
pub const XKB_KEY_Thai_loling: u32 = 3525;
pub const XKB_KEY_Thai_lu: u32 = 3526;
pub const XKB_KEY_Thai_wowaen: u32 = 3527;
pub const XKB_KEY_Thai_sosala: u32 = 3528;
pub const XKB_KEY_Thai_sorusi: u32 = 3529;
pub const XKB_KEY_Thai_sosua: u32 = 3530;
pub const XKB_KEY_Thai_hohip: u32 = 3531;
pub const XKB_KEY_Thai_lochula: u32 = 3532;
pub const XKB_KEY_Thai_oang: u32 = 3533;
pub const XKB_KEY_Thai_honokhuk: u32 = 3534;
pub const XKB_KEY_Thai_paiyannoi: u32 = 3535;
pub const XKB_KEY_Thai_saraa: u32 = 3536;
pub const XKB_KEY_Thai_maihanakat: u32 = 3537;
pub const XKB_KEY_Thai_saraaa: u32 = 3538;
pub const XKB_KEY_Thai_saraam: u32 = 3539;
pub const XKB_KEY_Thai_sarai: u32 = 3540;
pub const XKB_KEY_Thai_saraii: u32 = 3541;
pub const XKB_KEY_Thai_saraue: u32 = 3542;
pub const XKB_KEY_Thai_sarauee: u32 = 3543;
pub const XKB_KEY_Thai_sarau: u32 = 3544;
pub const XKB_KEY_Thai_sarauu: u32 = 3545;
pub const XKB_KEY_Thai_phinthu: u32 = 3546;
pub const XKB_KEY_Thai_maihanakat_maitho: u32 = 3550;
pub const XKB_KEY_Thai_baht: u32 = 3551;
pub const XKB_KEY_Thai_sarae: u32 = 3552;
pub const XKB_KEY_Thai_saraae: u32 = 3553;
pub const XKB_KEY_Thai_sarao: u32 = 3554;
pub const XKB_KEY_Thai_saraaimaimuan: u32 = 3555;
pub const XKB_KEY_Thai_saraaimaimalai: u32 = 3556;
pub const XKB_KEY_Thai_lakkhangyao: u32 = 3557;
pub const XKB_KEY_Thai_maiyamok: u32 = 3558;
pub const XKB_KEY_Thai_maitaikhu: u32 = 3559;
pub const XKB_KEY_Thai_maiek: u32 = 3560;
pub const XKB_KEY_Thai_maitho: u32 = 3561;
pub const XKB_KEY_Thai_maitri: u32 = 3562;
pub const XKB_KEY_Thai_maichattawa: u32 = 3563;
pub const XKB_KEY_Thai_thanthakhat: u32 = 3564;
pub const XKB_KEY_Thai_nikhahit: u32 = 3565;
pub const XKB_KEY_Thai_leksun: u32 = 3568;
pub const XKB_KEY_Thai_leknung: u32 = 3569;
pub const XKB_KEY_Thai_leksong: u32 = 3570;
pub const XKB_KEY_Thai_leksam: u32 = 3571;
pub const XKB_KEY_Thai_leksi: u32 = 3572;
pub const XKB_KEY_Thai_lekha: u32 = 3573;
pub const XKB_KEY_Thai_lekhok: u32 = 3574;
pub const XKB_KEY_Thai_lekchet: u32 = 3575;
pub const XKB_KEY_Thai_lekpaet: u32 = 3576;
pub const XKB_KEY_Thai_lekkao: u32 = 3577;
pub const XKB_KEY_Hangul: u32 = 65329;
pub const XKB_KEY_Hangul_Start: u32 = 65330;
pub const XKB_KEY_Hangul_End: u32 = 65331;
pub const XKB_KEY_Hangul_Hanja: u32 = 65332;
pub const XKB_KEY_Hangul_Jamo: u32 = 65333;
pub const XKB_KEY_Hangul_Romaja: u32 = 65334;
pub const XKB_KEY_Hangul_Codeinput: u32 = 65335;
pub const XKB_KEY_Hangul_Jeonja: u32 = 65336;
pub const XKB_KEY_Hangul_Banja: u32 = 65337;
pub const XKB_KEY_Hangul_PreHanja: u32 = 65338;
pub const XKB_KEY_Hangul_PostHanja: u32 = 65339;
pub const XKB_KEY_Hangul_SingleCandidate: u32 = 65340;
pub const XKB_KEY_Hangul_MultipleCandidate: u32 = 65341;
pub const XKB_KEY_Hangul_PreviousCandidate: u32 = 65342;
pub const XKB_KEY_Hangul_Special: u32 = 65343;
pub const XKB_KEY_Hangul_switch: u32 = 65406;
pub const XKB_KEY_Hangul_Kiyeog: u32 = 3745;
pub const XKB_KEY_Hangul_SsangKiyeog: u32 = 3746;
pub const XKB_KEY_Hangul_KiyeogSios: u32 = 3747;
pub const XKB_KEY_Hangul_Nieun: u32 = 3748;
pub const XKB_KEY_Hangul_NieunJieuj: u32 = 3749;
pub const XKB_KEY_Hangul_NieunHieuh: u32 = 3750;
pub const XKB_KEY_Hangul_Dikeud: u32 = 3751;
pub const XKB_KEY_Hangul_SsangDikeud: u32 = 3752;
pub const XKB_KEY_Hangul_Rieul: u32 = 3753;
pub const XKB_KEY_Hangul_RieulKiyeog: u32 = 3754;
pub const XKB_KEY_Hangul_RieulMieum: u32 = 3755;
pub const XKB_KEY_Hangul_RieulPieub: u32 = 3756;
pub const XKB_KEY_Hangul_RieulSios: u32 = 3757;
pub const XKB_KEY_Hangul_RieulTieut: u32 = 3758;
pub const XKB_KEY_Hangul_RieulPhieuf: u32 = 3759;
pub const XKB_KEY_Hangul_RieulHieuh: u32 = 3760;
pub const XKB_KEY_Hangul_Mieum: u32 = 3761;
pub const XKB_KEY_Hangul_Pieub: u32 = 3762;
pub const XKB_KEY_Hangul_SsangPieub: u32 = 3763;
pub const XKB_KEY_Hangul_PieubSios: u32 = 3764;
pub const XKB_KEY_Hangul_Sios: u32 = 3765;
pub const XKB_KEY_Hangul_SsangSios: u32 = 3766;
pub const XKB_KEY_Hangul_Ieung: u32 = 3767;
pub const XKB_KEY_Hangul_Jieuj: u32 = 3768;
pub const XKB_KEY_Hangul_SsangJieuj: u32 = 3769;
pub const XKB_KEY_Hangul_Cieuc: u32 = 3770;
pub const XKB_KEY_Hangul_Khieuq: u32 = 3771;
pub const XKB_KEY_Hangul_Tieut: u32 = 3772;
pub const XKB_KEY_Hangul_Phieuf: u32 = 3773;
pub const XKB_KEY_Hangul_Hieuh: u32 = 3774;
pub const XKB_KEY_Hangul_A: u32 = 3775;
pub const XKB_KEY_Hangul_AE: u32 = 3776;
pub const XKB_KEY_Hangul_YA: u32 = 3777;
pub const XKB_KEY_Hangul_YAE: u32 = 3778;
pub const XKB_KEY_Hangul_EO: u32 = 3779;
pub const XKB_KEY_Hangul_E: u32 = 3780;
pub const XKB_KEY_Hangul_YEO: u32 = 3781;
pub const XKB_KEY_Hangul_YE: u32 = 3782;
pub const XKB_KEY_Hangul_O: u32 = 3783;
pub const XKB_KEY_Hangul_WA: u32 = 3784;
pub const XKB_KEY_Hangul_WAE: u32 = 3785;
pub const XKB_KEY_Hangul_OE: u32 = 3786;
pub const XKB_KEY_Hangul_YO: u32 = 3787;
pub const XKB_KEY_Hangul_U: u32 = 3788;
pub const XKB_KEY_Hangul_WEO: u32 = 3789;
pub const XKB_KEY_Hangul_WE: u32 = 3790;
pub const XKB_KEY_Hangul_WI: u32 = 3791;
pub const XKB_KEY_Hangul_YU: u32 = 3792;
pub const XKB_KEY_Hangul_EU: u32 = 3793;
pub const XKB_KEY_Hangul_YI: u32 = 3794;
pub const XKB_KEY_Hangul_I: u32 = 3795;
pub const XKB_KEY_Hangul_J_Kiyeog: u32 = 3796;
pub const XKB_KEY_Hangul_J_SsangKiyeog: u32 = 3797;
pub const XKB_KEY_Hangul_J_KiyeogSios: u32 = 3798;
pub const XKB_KEY_Hangul_J_Nieun: u32 = 3799;
pub const XKB_KEY_Hangul_J_NieunJieuj: u32 = 3800;
pub const XKB_KEY_Hangul_J_NieunHieuh: u32 = 3801;
pub const XKB_KEY_Hangul_J_Dikeud: u32 = 3802;
pub const XKB_KEY_Hangul_J_Rieul: u32 = 3803;
pub const XKB_KEY_Hangul_J_RieulKiyeog: u32 = 3804;
pub const XKB_KEY_Hangul_J_RieulMieum: u32 = 3805;
pub const XKB_KEY_Hangul_J_RieulPieub: u32 = 3806;
pub const XKB_KEY_Hangul_J_RieulSios: u32 = 3807;
pub const XKB_KEY_Hangul_J_RieulTieut: u32 = 3808;
pub const XKB_KEY_Hangul_J_RieulPhieuf: u32 = 3809;
pub const XKB_KEY_Hangul_J_RieulHieuh: u32 = 3810;
pub const XKB_KEY_Hangul_J_Mieum: u32 = 3811;
pub const XKB_KEY_Hangul_J_Pieub: u32 = 3812;
pub const XKB_KEY_Hangul_J_PieubSios: u32 = 3813;
pub const XKB_KEY_Hangul_J_Sios: u32 = 3814;
pub const XKB_KEY_Hangul_J_SsangSios: u32 = 3815;
pub const XKB_KEY_Hangul_J_Ieung: u32 = 3816;
pub const XKB_KEY_Hangul_J_Jieuj: u32 = 3817;
pub const XKB_KEY_Hangul_J_Cieuc: u32 = 3818;
pub const XKB_KEY_Hangul_J_Khieuq: u32 = 3819;
pub const XKB_KEY_Hangul_J_Tieut: u32 = 3820;
pub const XKB_KEY_Hangul_J_Phieuf: u32 = 3821;
pub const XKB_KEY_Hangul_J_Hieuh: u32 = 3822;
pub const XKB_KEY_Hangul_RieulYeorinHieuh: u32 = 3823;
pub const XKB_KEY_Hangul_SunkyeongeumMieum: u32 = 3824;
pub const XKB_KEY_Hangul_SunkyeongeumPieub: u32 = 3825;
pub const XKB_KEY_Hangul_PanSios: u32 = 3826;
pub const XKB_KEY_Hangul_KkogjiDalrinIeung: u32 = 3827;
pub const XKB_KEY_Hangul_SunkyeongeumPhieuf: u32 = 3828;
pub const XKB_KEY_Hangul_YeorinHieuh: u32 = 3829;
pub const XKB_KEY_Hangul_AraeA: u32 = 3830;
pub const XKB_KEY_Hangul_AraeAE: u32 = 3831;
pub const XKB_KEY_Hangul_J_PanSios: u32 = 3832;
pub const XKB_KEY_Hangul_J_KkogjiDalrinIeung: u32 = 3833;
pub const XKB_KEY_Hangul_J_YeorinHieuh: u32 = 3834;
pub const XKB_KEY_Korean_Won: u32 = 3839;
pub const XKB_KEY_Armenian_ligature_ew: u32 = 16778631;
pub const XKB_KEY_Armenian_full_stop: u32 = 16778633;
pub const XKB_KEY_Armenian_verjaket: u32 = 16778633;
pub const XKB_KEY_Armenian_separation_mark: u32 = 16778589;
pub const XKB_KEY_Armenian_but: u32 = 16778589;
pub const XKB_KEY_Armenian_hyphen: u32 = 16778634;
pub const XKB_KEY_Armenian_yentamna: u32 = 16778634;
pub const XKB_KEY_Armenian_exclam: u32 = 16778588;
pub const XKB_KEY_Armenian_amanak: u32 = 16778588;
pub const XKB_KEY_Armenian_accent: u32 = 16778587;
pub const XKB_KEY_Armenian_shesht: u32 = 16778587;
pub const XKB_KEY_Armenian_question: u32 = 16778590;
pub const XKB_KEY_Armenian_paruyk: u32 = 16778590;
pub const XKB_KEY_Armenian_AYB: u32 = 16778545;
pub const XKB_KEY_Armenian_ayb: u32 = 16778593;
pub const XKB_KEY_Armenian_BEN: u32 = 16778546;
pub const XKB_KEY_Armenian_ben: u32 = 16778594;
pub const XKB_KEY_Armenian_GIM: u32 = 16778547;
pub const XKB_KEY_Armenian_gim: u32 = 16778595;
pub const XKB_KEY_Armenian_DA: u32 = 16778548;
pub const XKB_KEY_Armenian_da: u32 = 16778596;
pub const XKB_KEY_Armenian_YECH: u32 = 16778549;
pub const XKB_KEY_Armenian_yech: u32 = 16778597;
pub const XKB_KEY_Armenian_ZA: u32 = 16778550;
pub const XKB_KEY_Armenian_za: u32 = 16778598;
pub const XKB_KEY_Armenian_E: u32 = 16778551;
pub const XKB_KEY_Armenian_e: u32 = 16778599;
pub const XKB_KEY_Armenian_AT: u32 = 16778552;
pub const XKB_KEY_Armenian_at: u32 = 16778600;
pub const XKB_KEY_Armenian_TO: u32 = 16778553;
pub const XKB_KEY_Armenian_to: u32 = 16778601;
pub const XKB_KEY_Armenian_ZHE: u32 = 16778554;
pub const XKB_KEY_Armenian_zhe: u32 = 16778602;
pub const XKB_KEY_Armenian_INI: u32 = 16778555;
pub const XKB_KEY_Armenian_ini: u32 = 16778603;
pub const XKB_KEY_Armenian_LYUN: u32 = 16778556;
pub const XKB_KEY_Armenian_lyun: u32 = 16778604;
pub const XKB_KEY_Armenian_KHE: u32 = 16778557;
pub const XKB_KEY_Armenian_khe: u32 = 16778605;
pub const XKB_KEY_Armenian_TSA: u32 = 16778558;
pub const XKB_KEY_Armenian_tsa: u32 = 16778606;
pub const XKB_KEY_Armenian_KEN: u32 = 16778559;
pub const XKB_KEY_Armenian_ken: u32 = 16778607;
pub const XKB_KEY_Armenian_HO: u32 = 16778560;
pub const XKB_KEY_Armenian_ho: u32 = 16778608;
pub const XKB_KEY_Armenian_DZA: u32 = 16778561;
pub const XKB_KEY_Armenian_dza: u32 = 16778609;
pub const XKB_KEY_Armenian_GHAT: u32 = 16778562;
pub const XKB_KEY_Armenian_ghat: u32 = 16778610;
pub const XKB_KEY_Armenian_TCHE: u32 = 16778563;
pub const XKB_KEY_Armenian_tche: u32 = 16778611;
pub const XKB_KEY_Armenian_MEN: u32 = 16778564;
pub const XKB_KEY_Armenian_men: u32 = 16778612;
pub const XKB_KEY_Armenian_HI: u32 = 16778565;
pub const XKB_KEY_Armenian_hi: u32 = 16778613;
pub const XKB_KEY_Armenian_NU: u32 = 16778566;
pub const XKB_KEY_Armenian_nu: u32 = 16778614;
pub const XKB_KEY_Armenian_SHA: u32 = 16778567;
pub const XKB_KEY_Armenian_sha: u32 = 16778615;
pub const XKB_KEY_Armenian_VO: u32 = 16778568;
pub const XKB_KEY_Armenian_vo: u32 = 16778616;
pub const XKB_KEY_Armenian_CHA: u32 = 16778569;
pub const XKB_KEY_Armenian_cha: u32 = 16778617;
pub const XKB_KEY_Armenian_PE: u32 = 16778570;
pub const XKB_KEY_Armenian_pe: u32 = 16778618;
pub const XKB_KEY_Armenian_JE: u32 = 16778571;
pub const XKB_KEY_Armenian_je: u32 = 16778619;
pub const XKB_KEY_Armenian_RA: u32 = 16778572;
pub const XKB_KEY_Armenian_ra: u32 = 16778620;
pub const XKB_KEY_Armenian_SE: u32 = 16778573;
pub const XKB_KEY_Armenian_se: u32 = 16778621;
pub const XKB_KEY_Armenian_VEV: u32 = 16778574;
pub const XKB_KEY_Armenian_vev: u32 = 16778622;
pub const XKB_KEY_Armenian_TYUN: u32 = 16778575;
pub const XKB_KEY_Armenian_tyun: u32 = 16778623;
pub const XKB_KEY_Armenian_RE: u32 = 16778576;
pub const XKB_KEY_Armenian_re: u32 = 16778624;
pub const XKB_KEY_Armenian_TSO: u32 = 16778577;
pub const XKB_KEY_Armenian_tso: u32 = 16778625;
pub const XKB_KEY_Armenian_VYUN: u32 = 16778578;
pub const XKB_KEY_Armenian_vyun: u32 = 16778626;
pub const XKB_KEY_Armenian_PYUR: u32 = 16778579;
pub const XKB_KEY_Armenian_pyur: u32 = 16778627;
pub const XKB_KEY_Armenian_KE: u32 = 16778580;
pub const XKB_KEY_Armenian_ke: u32 = 16778628;
pub const XKB_KEY_Armenian_O: u32 = 16778581;
pub const XKB_KEY_Armenian_o: u32 = 16778629;
pub const XKB_KEY_Armenian_FE: u32 = 16778582;
pub const XKB_KEY_Armenian_fe: u32 = 16778630;
pub const XKB_KEY_Armenian_apostrophe: u32 = 16778586;
pub const XKB_KEY_Georgian_an: u32 = 16781520;
pub const XKB_KEY_Georgian_ban: u32 = 16781521;
pub const XKB_KEY_Georgian_gan: u32 = 16781522;
pub const XKB_KEY_Georgian_don: u32 = 16781523;
pub const XKB_KEY_Georgian_en: u32 = 16781524;
pub const XKB_KEY_Georgian_vin: u32 = 16781525;
pub const XKB_KEY_Georgian_zen: u32 = 16781526;
pub const XKB_KEY_Georgian_tan: u32 = 16781527;
pub const XKB_KEY_Georgian_in: u32 = 16781528;
pub const XKB_KEY_Georgian_kan: u32 = 16781529;
pub const XKB_KEY_Georgian_las: u32 = 16781530;
pub const XKB_KEY_Georgian_man: u32 = 16781531;
pub const XKB_KEY_Georgian_nar: u32 = 16781532;
pub const XKB_KEY_Georgian_on: u32 = 16781533;
pub const XKB_KEY_Georgian_par: u32 = 16781534;
pub const XKB_KEY_Georgian_zhar: u32 = 16781535;
pub const XKB_KEY_Georgian_rae: u32 = 16781536;
pub const XKB_KEY_Georgian_san: u32 = 16781537;
pub const XKB_KEY_Georgian_tar: u32 = 16781538;
pub const XKB_KEY_Georgian_un: u32 = 16781539;
pub const XKB_KEY_Georgian_phar: u32 = 16781540;
pub const XKB_KEY_Georgian_khar: u32 = 16781541;
pub const XKB_KEY_Georgian_ghan: u32 = 16781542;
pub const XKB_KEY_Georgian_qar: u32 = 16781543;
pub const XKB_KEY_Georgian_shin: u32 = 16781544;
pub const XKB_KEY_Georgian_chin: u32 = 16781545;
pub const XKB_KEY_Georgian_can: u32 = 16781546;
pub const XKB_KEY_Georgian_jil: u32 = 16781547;
pub const XKB_KEY_Georgian_cil: u32 = 16781548;
pub const XKB_KEY_Georgian_char: u32 = 16781549;
pub const XKB_KEY_Georgian_xan: u32 = 16781550;
pub const XKB_KEY_Georgian_jhan: u32 = 16781551;
pub const XKB_KEY_Georgian_hae: u32 = 16781552;
pub const XKB_KEY_Georgian_he: u32 = 16781553;
pub const XKB_KEY_Georgian_hie: u32 = 16781554;
pub const XKB_KEY_Georgian_we: u32 = 16781555;
pub const XKB_KEY_Georgian_har: u32 = 16781556;
pub const XKB_KEY_Georgian_hoe: u32 = 16781557;
pub const XKB_KEY_Georgian_fi: u32 = 16781558;
pub const XKB_KEY_Xabovedot: u32 = 16785034;
pub const XKB_KEY_Ibreve: u32 = 16777516;
pub const XKB_KEY_Zstroke: u32 = 16777653;
pub const XKB_KEY_Gcaron: u32 = 16777702;
pub const XKB_KEY_Ocaron: u32 = 16777681;
pub const XKB_KEY_Obarred: u32 = 16777631;
pub const XKB_KEY_xabovedot: u32 = 16785035;
pub const XKB_KEY_ibreve: u32 = 16777517;
pub const XKB_KEY_zstroke: u32 = 16777654;
pub const XKB_KEY_gcaron: u32 = 16777703;
pub const XKB_KEY_ocaron: u32 = 16777682;
pub const XKB_KEY_obarred: u32 = 16777845;
pub const XKB_KEY_SCHWA: u32 = 16777615;
pub const XKB_KEY_schwa: u32 = 16777817;
pub const XKB_KEY_EZH: u32 = 16777655;
pub const XKB_KEY_ezh: u32 = 16777874;
pub const XKB_KEY_Lbelowdot: u32 = 16784950;
pub const XKB_KEY_lbelowdot: u32 = 16784951;
pub const XKB_KEY_Abelowdot: u32 = 16785056;
pub const XKB_KEY_abelowdot: u32 = 16785057;
pub const XKB_KEY_Ahook: u32 = 16785058;
pub const XKB_KEY_ahook: u32 = 16785059;
pub const XKB_KEY_Acircumflexacute: u32 = 16785060;
pub const XKB_KEY_acircumflexacute: u32 = 16785061;
pub const XKB_KEY_Acircumflexgrave: u32 = 16785062;
pub const XKB_KEY_acircumflexgrave: u32 = 16785063;
pub const XKB_KEY_Acircumflexhook: u32 = 16785064;
pub const XKB_KEY_acircumflexhook: u32 = 16785065;
pub const XKB_KEY_Acircumflextilde: u32 = 16785066;
pub const XKB_KEY_acircumflextilde: u32 = 16785067;
pub const XKB_KEY_Acircumflexbelowdot: u32 = 16785068;
pub const XKB_KEY_acircumflexbelowdot: u32 = 16785069;
pub const XKB_KEY_Abreveacute: u32 = 16785070;
pub const XKB_KEY_abreveacute: u32 = 16785071;
pub const XKB_KEY_Abrevegrave: u32 = 16785072;
pub const XKB_KEY_abrevegrave: u32 = 16785073;
pub const XKB_KEY_Abrevehook: u32 = 16785074;
pub const XKB_KEY_abrevehook: u32 = 16785075;
pub const XKB_KEY_Abrevetilde: u32 = 16785076;
pub const XKB_KEY_abrevetilde: u32 = 16785077;
pub const XKB_KEY_Abrevebelowdot: u32 = 16785078;
pub const XKB_KEY_abrevebelowdot: u32 = 16785079;
pub const XKB_KEY_Ebelowdot: u32 = 16785080;
pub const XKB_KEY_ebelowdot: u32 = 16785081;
pub const XKB_KEY_Ehook: u32 = 16785082;
pub const XKB_KEY_ehook: u32 = 16785083;
pub const XKB_KEY_Etilde: u32 = 16785084;
pub const XKB_KEY_etilde: u32 = 16785085;
pub const XKB_KEY_Ecircumflexacute: u32 = 16785086;
pub const XKB_KEY_ecircumflexacute: u32 = 16785087;
pub const XKB_KEY_Ecircumflexgrave: u32 = 16785088;
pub const XKB_KEY_ecircumflexgrave: u32 = 16785089;
pub const XKB_KEY_Ecircumflexhook: u32 = 16785090;
pub const XKB_KEY_ecircumflexhook: u32 = 16785091;
pub const XKB_KEY_Ecircumflextilde: u32 = 16785092;
pub const XKB_KEY_ecircumflextilde: u32 = 16785093;
pub const XKB_KEY_Ecircumflexbelowdot: u32 = 16785094;
pub const XKB_KEY_ecircumflexbelowdot: u32 = 16785095;
pub const XKB_KEY_Ihook: u32 = 16785096;
pub const XKB_KEY_ihook: u32 = 16785097;
pub const XKB_KEY_Ibelowdot: u32 = 16785098;
pub const XKB_KEY_ibelowdot: u32 = 16785099;
pub const XKB_KEY_Obelowdot: u32 = 16785100;
pub const XKB_KEY_obelowdot: u32 = 16785101;
pub const XKB_KEY_Ohook: u32 = 16785102;
pub const XKB_KEY_ohook: u32 = 16785103;
pub const XKB_KEY_Ocircumflexacute: u32 = 16785104;
pub const XKB_KEY_ocircumflexacute: u32 = 16785105;
pub const XKB_KEY_Ocircumflexgrave: u32 = 16785106;
pub const XKB_KEY_ocircumflexgrave: u32 = 16785107;
pub const XKB_KEY_Ocircumflexhook: u32 = 16785108;
pub const XKB_KEY_ocircumflexhook: u32 = 16785109;
pub const XKB_KEY_Ocircumflextilde: u32 = 16785110;
pub const XKB_KEY_ocircumflextilde: u32 = 16785111;
pub const XKB_KEY_Ocircumflexbelowdot: u32 = 16785112;
pub const XKB_KEY_ocircumflexbelowdot: u32 = 16785113;
pub const XKB_KEY_Ohornacute: u32 = 16785114;
pub const XKB_KEY_ohornacute: u32 = 16785115;
pub const XKB_KEY_Ohorngrave: u32 = 16785116;
pub const XKB_KEY_ohorngrave: u32 = 16785117;
pub const XKB_KEY_Ohornhook: u32 = 16785118;
pub const XKB_KEY_ohornhook: u32 = 16785119;
pub const XKB_KEY_Ohorntilde: u32 = 16785120;
pub const XKB_KEY_ohorntilde: u32 = 16785121;
pub const XKB_KEY_Ohornbelowdot: u32 = 16785122;
pub const XKB_KEY_ohornbelowdot: u32 = 16785123;
pub const XKB_KEY_Ubelowdot: u32 = 16785124;
pub const XKB_KEY_ubelowdot: u32 = 16785125;
pub const XKB_KEY_Uhook: u32 = 16785126;
pub const XKB_KEY_uhook: u32 = 16785127;
pub const XKB_KEY_Uhornacute: u32 = 16785128;
pub const XKB_KEY_uhornacute: u32 = 16785129;
pub const XKB_KEY_Uhorngrave: u32 = 16785130;
pub const XKB_KEY_uhorngrave: u32 = 16785131;
pub const XKB_KEY_Uhornhook: u32 = 16785132;
pub const XKB_KEY_uhornhook: u32 = 16785133;
pub const XKB_KEY_Uhorntilde: u32 = 16785134;
pub const XKB_KEY_uhorntilde: u32 = 16785135;
pub const XKB_KEY_Uhornbelowdot: u32 = 16785136;
pub const XKB_KEY_uhornbelowdot: u32 = 16785137;
pub const XKB_KEY_Ybelowdot: u32 = 16785140;
pub const XKB_KEY_ybelowdot: u32 = 16785141;
pub const XKB_KEY_Yhook: u32 = 16785142;
pub const XKB_KEY_yhook: u32 = 16785143;
pub const XKB_KEY_Ytilde: u32 = 16785144;
pub const XKB_KEY_ytilde: u32 = 16785145;
pub const XKB_KEY_Ohorn: u32 = 16777632;
pub const XKB_KEY_ohorn: u32 = 16777633;
pub const XKB_KEY_Uhorn: u32 = 16777647;
pub const XKB_KEY_uhorn: u32 = 16777648;
pub const XKB_KEY_combining_tilde: u32 = 16777987;
pub const XKB_KEY_combining_grave: u32 = 16777984;
pub const XKB_KEY_combining_acute: u32 = 16777985;
pub const XKB_KEY_combining_hook: u32 = 16777993;
pub const XKB_KEY_combining_belowdot: u32 = 16778019;
pub const XKB_KEY_EcuSign: u32 = 16785568;
pub const XKB_KEY_ColonSign: u32 = 16785569;
pub const XKB_KEY_CruzeiroSign: u32 = 16785570;
pub const XKB_KEY_FFrancSign: u32 = 16785571;
pub const XKB_KEY_LiraSign: u32 = 16785572;
pub const XKB_KEY_MillSign: u32 = 16785573;
pub const XKB_KEY_NairaSign: u32 = 16785574;
pub const XKB_KEY_PesetaSign: u32 = 16785575;
pub const XKB_KEY_RupeeSign: u32 = 16785576;
pub const XKB_KEY_WonSign: u32 = 16785577;
pub const XKB_KEY_NewSheqelSign: u32 = 16785578;
pub const XKB_KEY_DongSign: u32 = 16785579;
pub const XKB_KEY_EuroSign: u32 = 8364;
pub const XKB_KEY_zerosuperior: u32 = 16785520;
pub const XKB_KEY_foursuperior: u32 = 16785524;
pub const XKB_KEY_fivesuperior: u32 = 16785525;
pub const XKB_KEY_sixsuperior: u32 = 16785526;
pub const XKB_KEY_sevensuperior: u32 = 16785527;
pub const XKB_KEY_eightsuperior: u32 = 16785528;
pub const XKB_KEY_ninesuperior: u32 = 16785529;
pub const XKB_KEY_zerosubscript: u32 = 16785536;
pub const XKB_KEY_onesubscript: u32 = 16785537;
pub const XKB_KEY_twosubscript: u32 = 16785538;
pub const XKB_KEY_threesubscript: u32 = 16785539;
pub const XKB_KEY_foursubscript: u32 = 16785540;
pub const XKB_KEY_fivesubscript: u32 = 16785541;
pub const XKB_KEY_sixsubscript: u32 = 16785542;
pub const XKB_KEY_sevensubscript: u32 = 16785543;
pub const XKB_KEY_eightsubscript: u32 = 16785544;
pub const XKB_KEY_ninesubscript: u32 = 16785545;
pub const XKB_KEY_partdifferential: u32 = 16785922;
pub const XKB_KEY_emptyset: u32 = 16785925;
pub const XKB_KEY_elementof: u32 = 16785928;
pub const XKB_KEY_notelementof: u32 = 16785929;
pub const XKB_KEY_containsas: u32 = 16785931;
pub const XKB_KEY_squareroot: u32 = 16785946;
pub const XKB_KEY_cuberoot: u32 = 16785947;
pub const XKB_KEY_fourthroot: u32 = 16785948;
pub const XKB_KEY_dintegral: u32 = 16785964;
pub const XKB_KEY_tintegral: u32 = 16785965;
pub const XKB_KEY_because: u32 = 16785973;
pub const XKB_KEY_approxeq: u32 = 16785992;
pub const XKB_KEY_notapproxeq: u32 = 16785991;
pub const XKB_KEY_notidentical: u32 = 16786018;
pub const XKB_KEY_stricteq: u32 = 16786019;
pub const XKB_KEY_braille_dot_1: u32 = 65521;
pub const XKB_KEY_braille_dot_2: u32 = 65522;
pub const XKB_KEY_braille_dot_3: u32 = 65523;
pub const XKB_KEY_braille_dot_4: u32 = 65524;
pub const XKB_KEY_braille_dot_5: u32 = 65525;
pub const XKB_KEY_braille_dot_6: u32 = 65526;
pub const XKB_KEY_braille_dot_7: u32 = 65527;
pub const XKB_KEY_braille_dot_8: u32 = 65528;
pub const XKB_KEY_braille_dot_9: u32 = 65529;
pub const XKB_KEY_braille_dot_10: u32 = 65530;
pub const XKB_KEY_braille_blank: u32 = 16787456;
pub const XKB_KEY_braille_dots_1: u32 = 16787457;
pub const XKB_KEY_braille_dots_2: u32 = 16787458;
pub const XKB_KEY_braille_dots_12: u32 = 16787459;
pub const XKB_KEY_braille_dots_3: u32 = 16787460;
pub const XKB_KEY_braille_dots_13: u32 = 16787461;
pub const XKB_KEY_braille_dots_23: u32 = 16787462;
pub const XKB_KEY_braille_dots_123: u32 = 16787463;
pub const XKB_KEY_braille_dots_4: u32 = 16787464;
pub const XKB_KEY_braille_dots_14: u32 = 16787465;
pub const XKB_KEY_braille_dots_24: u32 = 16787466;
pub const XKB_KEY_braille_dots_124: u32 = 16787467;
pub const XKB_KEY_braille_dots_34: u32 = 16787468;
pub const XKB_KEY_braille_dots_134: u32 = 16787469;
pub const XKB_KEY_braille_dots_234: u32 = 16787470;
pub const XKB_KEY_braille_dots_1234: u32 = 16787471;
pub const XKB_KEY_braille_dots_5: u32 = 16787472;
pub const XKB_KEY_braille_dots_15: u32 = 16787473;
pub const XKB_KEY_braille_dots_25: u32 = 16787474;
pub const XKB_KEY_braille_dots_125: u32 = 16787475;
pub const XKB_KEY_braille_dots_35: u32 = 16787476;
pub const XKB_KEY_braille_dots_135: u32 = 16787477;
pub const XKB_KEY_braille_dots_235: u32 = 16787478;
pub const XKB_KEY_braille_dots_1235: u32 = 16787479;
pub const XKB_KEY_braille_dots_45: u32 = 16787480;
pub const XKB_KEY_braille_dots_145: u32 = 16787481;
pub const XKB_KEY_braille_dots_245: u32 = 16787482;
pub const XKB_KEY_braille_dots_1245: u32 = 16787483;
pub const XKB_KEY_braille_dots_345: u32 = 16787484;
pub const XKB_KEY_braille_dots_1345: u32 = 16787485;
pub const XKB_KEY_braille_dots_2345: u32 = 16787486;
pub const XKB_KEY_braille_dots_12345: u32 = 16787487;
pub const XKB_KEY_braille_dots_6: u32 = 16787488;
pub const XKB_KEY_braille_dots_16: u32 = 16787489;
pub const XKB_KEY_braille_dots_26: u32 = 16787490;
pub const XKB_KEY_braille_dots_126: u32 = 16787491;
pub const XKB_KEY_braille_dots_36: u32 = 16787492;
pub const XKB_KEY_braille_dots_136: u32 = 16787493;
pub const XKB_KEY_braille_dots_236: u32 = 16787494;
pub const XKB_KEY_braille_dots_1236: u32 = 16787495;
pub const XKB_KEY_braille_dots_46: u32 = 16787496;
pub const XKB_KEY_braille_dots_146: u32 = 16787497;
pub const XKB_KEY_braille_dots_246: u32 = 16787498;
pub const XKB_KEY_braille_dots_1246: u32 = 16787499;
pub const XKB_KEY_braille_dots_346: u32 = 16787500;
pub const XKB_KEY_braille_dots_1346: u32 = 16787501;
pub const XKB_KEY_braille_dots_2346: u32 = 16787502;
pub const XKB_KEY_braille_dots_12346: u32 = 16787503;
pub const XKB_KEY_braille_dots_56: u32 = 16787504;
pub const XKB_KEY_braille_dots_156: u32 = 16787505;
pub const XKB_KEY_braille_dots_256: u32 = 16787506;
pub const XKB_KEY_braille_dots_1256: u32 = 16787507;
pub const XKB_KEY_braille_dots_356: u32 = 16787508;
pub const XKB_KEY_braille_dots_1356: u32 = 16787509;
pub const XKB_KEY_braille_dots_2356: u32 = 16787510;
pub const XKB_KEY_braille_dots_12356: u32 = 16787511;
pub const XKB_KEY_braille_dots_456: u32 = 16787512;
pub const XKB_KEY_braille_dots_1456: u32 = 16787513;
pub const XKB_KEY_braille_dots_2456: u32 = 16787514;
pub const XKB_KEY_braille_dots_12456: u32 = 16787515;
pub const XKB_KEY_braille_dots_3456: u32 = 16787516;
pub const XKB_KEY_braille_dots_13456: u32 = 16787517;
pub const XKB_KEY_braille_dots_23456: u32 = 16787518;
pub const XKB_KEY_braille_dots_123456: u32 = 16787519;
pub const XKB_KEY_braille_dots_7: u32 = 16787520;
pub const XKB_KEY_braille_dots_17: u32 = 16787521;
pub const XKB_KEY_braille_dots_27: u32 = 16787522;
pub const XKB_KEY_braille_dots_127: u32 = 16787523;
pub const XKB_KEY_braille_dots_37: u32 = 16787524;
pub const XKB_KEY_braille_dots_137: u32 = 16787525;
pub const XKB_KEY_braille_dots_237: u32 = 16787526;
pub const XKB_KEY_braille_dots_1237: u32 = 16787527;
pub const XKB_KEY_braille_dots_47: u32 = 16787528;
pub const XKB_KEY_braille_dots_147: u32 = 16787529;
pub const XKB_KEY_braille_dots_247: u32 = 16787530;
pub const XKB_KEY_braille_dots_1247: u32 = 16787531;
pub const XKB_KEY_braille_dots_347: u32 = 16787532;
pub const XKB_KEY_braille_dots_1347: u32 = 16787533;
pub const XKB_KEY_braille_dots_2347: u32 = 16787534;
pub const XKB_KEY_braille_dots_12347: u32 = 16787535;
pub const XKB_KEY_braille_dots_57: u32 = 16787536;
pub const XKB_KEY_braille_dots_157: u32 = 16787537;
pub const XKB_KEY_braille_dots_257: u32 = 16787538;
pub const XKB_KEY_braille_dots_1257: u32 = 16787539;
pub const XKB_KEY_braille_dots_357: u32 = 16787540;
pub const XKB_KEY_braille_dots_1357: u32 = 16787541;
pub const XKB_KEY_braille_dots_2357: u32 = 16787542;
pub const XKB_KEY_braille_dots_12357: u32 = 16787543;
pub const XKB_KEY_braille_dots_457: u32 = 16787544;
pub const XKB_KEY_braille_dots_1457: u32 = 16787545;
pub const XKB_KEY_braille_dots_2457: u32 = 16787546;
pub const XKB_KEY_braille_dots_12457: u32 = 16787547;
pub const XKB_KEY_braille_dots_3457: u32 = 16787548;
pub const XKB_KEY_braille_dots_13457: u32 = 16787549;
pub const XKB_KEY_braille_dots_23457: u32 = 16787550;
pub const XKB_KEY_braille_dots_123457: u32 = 16787551;
pub const XKB_KEY_braille_dots_67: u32 = 16787552;
pub const XKB_KEY_braille_dots_167: u32 = 16787553;
pub const XKB_KEY_braille_dots_267: u32 = 16787554;
pub const XKB_KEY_braille_dots_1267: u32 = 16787555;
pub const XKB_KEY_braille_dots_367: u32 = 16787556;
pub const XKB_KEY_braille_dots_1367: u32 = 16787557;
pub const XKB_KEY_braille_dots_2367: u32 = 16787558;
pub const XKB_KEY_braille_dots_12367: u32 = 16787559;
pub const XKB_KEY_braille_dots_467: u32 = 16787560;
pub const XKB_KEY_braille_dots_1467: u32 = 16787561;
pub const XKB_KEY_braille_dots_2467: u32 = 16787562;
pub const XKB_KEY_braille_dots_12467: u32 = 16787563;
pub const XKB_KEY_braille_dots_3467: u32 = 16787564;
pub const XKB_KEY_braille_dots_13467: u32 = 16787565;
pub const XKB_KEY_braille_dots_23467: u32 = 16787566;
pub const XKB_KEY_braille_dots_123467: u32 = 16787567;
pub const XKB_KEY_braille_dots_567: u32 = 16787568;
pub const XKB_KEY_braille_dots_1567: u32 = 16787569;
pub const XKB_KEY_braille_dots_2567: u32 = 16787570;
pub const XKB_KEY_braille_dots_12567: u32 = 16787571;
pub const XKB_KEY_braille_dots_3567: u32 = 16787572;
pub const XKB_KEY_braille_dots_13567: u32 = 16787573;
pub const XKB_KEY_braille_dots_23567: u32 = 16787574;
pub const XKB_KEY_braille_dots_123567: u32 = 16787575;
pub const XKB_KEY_braille_dots_4567: u32 = 16787576;
pub const XKB_KEY_braille_dots_14567: u32 = 16787577;
pub const XKB_KEY_braille_dots_24567: u32 = 16787578;
pub const XKB_KEY_braille_dots_124567: u32 = 16787579;
pub const XKB_KEY_braille_dots_34567: u32 = 16787580;
pub const XKB_KEY_braille_dots_134567: u32 = 16787581;
pub const XKB_KEY_braille_dots_234567: u32 = 16787582;
pub const XKB_KEY_braille_dots_1234567: u32 = 16787583;
pub const XKB_KEY_braille_dots_8: u32 = 16787584;
pub const XKB_KEY_braille_dots_18: u32 = 16787585;
pub const XKB_KEY_braille_dots_28: u32 = 16787586;
pub const XKB_KEY_braille_dots_128: u32 = 16787587;
pub const XKB_KEY_braille_dots_38: u32 = 16787588;
pub const XKB_KEY_braille_dots_138: u32 = 16787589;
pub const XKB_KEY_braille_dots_238: u32 = 16787590;
pub const XKB_KEY_braille_dots_1238: u32 = 16787591;
pub const XKB_KEY_braille_dots_48: u32 = 16787592;
pub const XKB_KEY_braille_dots_148: u32 = 16787593;
pub const XKB_KEY_braille_dots_248: u32 = 16787594;
pub const XKB_KEY_braille_dots_1248: u32 = 16787595;
pub const XKB_KEY_braille_dots_348: u32 = 16787596;
pub const XKB_KEY_braille_dots_1348: u32 = 16787597;
pub const XKB_KEY_braille_dots_2348: u32 = 16787598;
pub const XKB_KEY_braille_dots_12348: u32 = 16787599;
pub const XKB_KEY_braille_dots_58: u32 = 16787600;
pub const XKB_KEY_braille_dots_158: u32 = 16787601;
pub const XKB_KEY_braille_dots_258: u32 = 16787602;
pub const XKB_KEY_braille_dots_1258: u32 = 16787603;
pub const XKB_KEY_braille_dots_358: u32 = 16787604;
pub const XKB_KEY_braille_dots_1358: u32 = 16787605;
pub const XKB_KEY_braille_dots_2358: u32 = 16787606;
pub const XKB_KEY_braille_dots_12358: u32 = 16787607;
pub const XKB_KEY_braille_dots_458: u32 = 16787608;
pub const XKB_KEY_braille_dots_1458: u32 = 16787609;
pub const XKB_KEY_braille_dots_2458: u32 = 16787610;
pub const XKB_KEY_braille_dots_12458: u32 = 16787611;
pub const XKB_KEY_braille_dots_3458: u32 = 16787612;
pub const XKB_KEY_braille_dots_13458: u32 = 16787613;
pub const XKB_KEY_braille_dots_23458: u32 = 16787614;
pub const XKB_KEY_braille_dots_123458: u32 = 16787615;
pub const XKB_KEY_braille_dots_68: u32 = 16787616;
pub const XKB_KEY_braille_dots_168: u32 = 16787617;
pub const XKB_KEY_braille_dots_268: u32 = 16787618;
pub const XKB_KEY_braille_dots_1268: u32 = 16787619;
pub const XKB_KEY_braille_dots_368: u32 = 16787620;
pub const XKB_KEY_braille_dots_1368: u32 = 16787621;
pub const XKB_KEY_braille_dots_2368: u32 = 16787622;
pub const XKB_KEY_braille_dots_12368: u32 = 16787623;
pub const XKB_KEY_braille_dots_468: u32 = 16787624;
pub const XKB_KEY_braille_dots_1468: u32 = 16787625;
pub const XKB_KEY_braille_dots_2468: u32 = 16787626;
pub const XKB_KEY_braille_dots_12468: u32 = 16787627;
pub const XKB_KEY_braille_dots_3468: u32 = 16787628;
pub const XKB_KEY_braille_dots_13468: u32 = 16787629;
pub const XKB_KEY_braille_dots_23468: u32 = 16787630;
pub const XKB_KEY_braille_dots_123468: u32 = 16787631;
pub const XKB_KEY_braille_dots_568: u32 = 16787632;
pub const XKB_KEY_braille_dots_1568: u32 = 16787633;
pub const XKB_KEY_braille_dots_2568: u32 = 16787634;
pub const XKB_KEY_braille_dots_12568: u32 = 16787635;
pub const XKB_KEY_braille_dots_3568: u32 = 16787636;
pub const XKB_KEY_braille_dots_13568: u32 = 16787637;
pub const XKB_KEY_braille_dots_23568: u32 = 16787638;
pub const XKB_KEY_braille_dots_123568: u32 = 16787639;
pub const XKB_KEY_braille_dots_4568: u32 = 16787640;
pub const XKB_KEY_braille_dots_14568: u32 = 16787641;
pub const XKB_KEY_braille_dots_24568: u32 = 16787642;
pub const XKB_KEY_braille_dots_124568: u32 = 16787643;
pub const XKB_KEY_braille_dots_34568: u32 = 16787644;
pub const XKB_KEY_braille_dots_134568: u32 = 16787645;
pub const XKB_KEY_braille_dots_234568: u32 = 16787646;
pub const XKB_KEY_braille_dots_1234568: u32 = 16787647;
pub const XKB_KEY_braille_dots_78: u32 = 16787648;
pub const XKB_KEY_braille_dots_178: u32 = 16787649;
pub const XKB_KEY_braille_dots_278: u32 = 16787650;
pub const XKB_KEY_braille_dots_1278: u32 = 16787651;
pub const XKB_KEY_braille_dots_378: u32 = 16787652;
pub const XKB_KEY_braille_dots_1378: u32 = 16787653;
pub const XKB_KEY_braille_dots_2378: u32 = 16787654;
pub const XKB_KEY_braille_dots_12378: u32 = 16787655;
pub const XKB_KEY_braille_dots_478: u32 = 16787656;
pub const XKB_KEY_braille_dots_1478: u32 = 16787657;
pub const XKB_KEY_braille_dots_2478: u32 = 16787658;
pub const XKB_KEY_braille_dots_12478: u32 = 16787659;
pub const XKB_KEY_braille_dots_3478: u32 = 16787660;
pub const XKB_KEY_braille_dots_13478: u32 = 16787661;
pub const XKB_KEY_braille_dots_23478: u32 = 16787662;
pub const XKB_KEY_braille_dots_123478: u32 = 16787663;
pub const XKB_KEY_braille_dots_578: u32 = 16787664;
pub const XKB_KEY_braille_dots_1578: u32 = 16787665;
pub const XKB_KEY_braille_dots_2578: u32 = 16787666;
pub const XKB_KEY_braille_dots_12578: u32 = 16787667;
pub const XKB_KEY_braille_dots_3578: u32 = 16787668;
pub const XKB_KEY_braille_dots_13578: u32 = 16787669;
pub const XKB_KEY_braille_dots_23578: u32 = 16787670;
pub const XKB_KEY_braille_dots_123578: u32 = 16787671;
pub const XKB_KEY_braille_dots_4578: u32 = 16787672;
pub const XKB_KEY_braille_dots_14578: u32 = 16787673;
pub const XKB_KEY_braille_dots_24578: u32 = 16787674;
pub const XKB_KEY_braille_dots_124578: u32 = 16787675;
pub const XKB_KEY_braille_dots_34578: u32 = 16787676;
pub const XKB_KEY_braille_dots_134578: u32 = 16787677;
pub const XKB_KEY_braille_dots_234578: u32 = 16787678;
pub const XKB_KEY_braille_dots_1234578: u32 = 16787679;
pub const XKB_KEY_braille_dots_678: u32 = 16787680;
pub const XKB_KEY_braille_dots_1678: u32 = 16787681;
pub const XKB_KEY_braille_dots_2678: u32 = 16787682;
pub const XKB_KEY_braille_dots_12678: u32 = 16787683;
pub const XKB_KEY_braille_dots_3678: u32 = 16787684;
pub const XKB_KEY_braille_dots_13678: u32 = 16787685;
pub const XKB_KEY_braille_dots_23678: u32 = 16787686;
pub const XKB_KEY_braille_dots_123678: u32 = 16787687;
pub const XKB_KEY_braille_dots_4678: u32 = 16787688;
pub const XKB_KEY_braille_dots_14678: u32 = 16787689;
pub const XKB_KEY_braille_dots_24678: u32 = 16787690;
pub const XKB_KEY_braille_dots_124678: u32 = 16787691;
pub const XKB_KEY_braille_dots_34678: u32 = 16787692;
pub const XKB_KEY_braille_dots_134678: u32 = 16787693;
pub const XKB_KEY_braille_dots_234678: u32 = 16787694;
pub const XKB_KEY_braille_dots_1234678: u32 = 16787695;
pub const XKB_KEY_braille_dots_5678: u32 = 16787696;
pub const XKB_KEY_braille_dots_15678: u32 = 16787697;
pub const XKB_KEY_braille_dots_25678: u32 = 16787698;
pub const XKB_KEY_braille_dots_125678: u32 = 16787699;
pub const XKB_KEY_braille_dots_35678: u32 = 16787700;
pub const XKB_KEY_braille_dots_135678: u32 = 16787701;
pub const XKB_KEY_braille_dots_235678: u32 = 16787702;
pub const XKB_KEY_braille_dots_1235678: u32 = 16787703;
pub const XKB_KEY_braille_dots_45678: u32 = 16787704;
pub const XKB_KEY_braille_dots_145678: u32 = 16787705;
pub const XKB_KEY_braille_dots_245678: u32 = 16787706;
pub const XKB_KEY_braille_dots_1245678: u32 = 16787707;
pub const XKB_KEY_braille_dots_345678: u32 = 16787708;
pub const XKB_KEY_braille_dots_1345678: u32 = 16787709;
pub const XKB_KEY_braille_dots_2345678: u32 = 16787710;
pub const XKB_KEY_braille_dots_12345678: u32 = 16787711;
pub const XKB_KEY_Sinh_ng: u32 = 16780674;
pub const XKB_KEY_Sinh_h2: u32 = 16780675;
pub const XKB_KEY_Sinh_a: u32 = 16780677;
pub const XKB_KEY_Sinh_aa: u32 = 16780678;
pub const XKB_KEY_Sinh_ae: u32 = 16780679;
pub const XKB_KEY_Sinh_aee: u32 = 16780680;
pub const XKB_KEY_Sinh_i: u32 = 16780681;
pub const XKB_KEY_Sinh_ii: u32 = 16780682;
pub const XKB_KEY_Sinh_u: u32 = 16780683;
pub const XKB_KEY_Sinh_uu: u32 = 16780684;
pub const XKB_KEY_Sinh_ri: u32 = 16780685;
pub const XKB_KEY_Sinh_rii: u32 = 16780686;
pub const XKB_KEY_Sinh_lu: u32 = 16780687;
pub const XKB_KEY_Sinh_luu: u32 = 16780688;
pub const XKB_KEY_Sinh_e: u32 = 16780689;
pub const XKB_KEY_Sinh_ee: u32 = 16780690;
pub const XKB_KEY_Sinh_ai: u32 = 16780691;
pub const XKB_KEY_Sinh_o: u32 = 16780692;
pub const XKB_KEY_Sinh_oo: u32 = 16780693;
pub const XKB_KEY_Sinh_au: u32 = 16780694;
pub const XKB_KEY_Sinh_ka: u32 = 16780698;
pub const XKB_KEY_Sinh_kha: u32 = 16780699;
pub const XKB_KEY_Sinh_ga: u32 = 16780700;
pub const XKB_KEY_Sinh_gha: u32 = 16780701;
pub const XKB_KEY_Sinh_ng2: u32 = 16780702;
pub const XKB_KEY_Sinh_nga: u32 = 16780703;
pub const XKB_KEY_Sinh_ca: u32 = 16780704;
pub const XKB_KEY_Sinh_cha: u32 = 16780705;
pub const XKB_KEY_Sinh_ja: u32 = 16780706;
pub const XKB_KEY_Sinh_jha: u32 = 16780707;
pub const XKB_KEY_Sinh_nya: u32 = 16780708;
pub const XKB_KEY_Sinh_jnya: u32 = 16780709;
pub const XKB_KEY_Sinh_nja: u32 = 16780710;
pub const XKB_KEY_Sinh_tta: u32 = 16780711;
pub const XKB_KEY_Sinh_ttha: u32 = 16780712;
pub const XKB_KEY_Sinh_dda: u32 = 16780713;
pub const XKB_KEY_Sinh_ddha: u32 = 16780714;
pub const XKB_KEY_Sinh_nna: u32 = 16780715;
pub const XKB_KEY_Sinh_ndda: u32 = 16780716;
pub const XKB_KEY_Sinh_tha: u32 = 16780717;
pub const XKB_KEY_Sinh_thha: u32 = 16780718;
pub const XKB_KEY_Sinh_dha: u32 = 16780719;
pub const XKB_KEY_Sinh_dhha: u32 = 16780720;
pub const XKB_KEY_Sinh_na: u32 = 16780721;
pub const XKB_KEY_Sinh_ndha: u32 = 16780723;
pub const XKB_KEY_Sinh_pa: u32 = 16780724;
pub const XKB_KEY_Sinh_pha: u32 = 16780725;
pub const XKB_KEY_Sinh_ba: u32 = 16780726;
pub const XKB_KEY_Sinh_bha: u32 = 16780727;
pub const XKB_KEY_Sinh_ma: u32 = 16780728;
pub const XKB_KEY_Sinh_mba: u32 = 16780729;
pub const XKB_KEY_Sinh_ya: u32 = 16780730;
pub const XKB_KEY_Sinh_ra: u32 = 16780731;
pub const XKB_KEY_Sinh_la: u32 = 16780733;
pub const XKB_KEY_Sinh_va: u32 = 16780736;
pub const XKB_KEY_Sinh_sha: u32 = 16780737;
pub const XKB_KEY_Sinh_ssha: u32 = 16780738;
pub const XKB_KEY_Sinh_sa: u32 = 16780739;
pub const XKB_KEY_Sinh_ha: u32 = 16780740;
pub const XKB_KEY_Sinh_lla: u32 = 16780741;
pub const XKB_KEY_Sinh_fa: u32 = 16780742;
pub const XKB_KEY_Sinh_al: u32 = 16780746;
pub const XKB_KEY_Sinh_aa2: u32 = 16780751;
pub const XKB_KEY_Sinh_ae2: u32 = 16780752;
pub const XKB_KEY_Sinh_aee2: u32 = 16780753;
pub const XKB_KEY_Sinh_i2: u32 = 16780754;
pub const XKB_KEY_Sinh_ii2: u32 = 16780755;
pub const XKB_KEY_Sinh_u2: u32 = 16780756;
pub const XKB_KEY_Sinh_uu2: u32 = 16780758;
pub const XKB_KEY_Sinh_ru2: u32 = 16780760;
pub const XKB_KEY_Sinh_e2: u32 = 16780761;
pub const XKB_KEY_Sinh_ee2: u32 = 16780762;
pub const XKB_KEY_Sinh_ai2: u32 = 16780763;
pub const XKB_KEY_Sinh_o2: u32 = 16780764;
pub const XKB_KEY_Sinh_oo2: u32 = 16780765;
pub const XKB_KEY_Sinh_au2: u32 = 16780766;
pub const XKB_KEY_Sinh_lu2: u32 = 16780767;
pub const XKB_KEY_Sinh_ruu2: u32 = 16780786;
pub const XKB_KEY_Sinh_luu2: u32 = 16780787;
pub const XKB_KEY_Sinh_kunddaliya: u32 = 16780788;
pub const XKB_KEY_XF86ModeLock: u32 = 269025025;
pub const XKB_KEY_XF86MonBrightnessUp: u32 = 269025026;
pub const XKB_KEY_XF86MonBrightnessDown: u32 = 269025027;
pub const XKB_KEY_XF86KbdLightOnOff: u32 = 269025028;
pub const XKB_KEY_XF86KbdBrightnessUp: u32 = 269025029;
pub const XKB_KEY_XF86KbdBrightnessDown: u32 = 269025030;
pub const XKB_KEY_XF86MonBrightnessCycle: u32 = 269025031;
pub const XKB_KEY_XF86Standby: u32 = 269025040;
pub const XKB_KEY_XF86AudioLowerVolume: u32 = 269025041;
pub const XKB_KEY_XF86AudioMute: u32 = 269025042;
pub const XKB_KEY_XF86AudioRaiseVolume: u32 = 269025043;
pub const XKB_KEY_XF86AudioPlay: u32 = 269025044;
pub const XKB_KEY_XF86AudioStop: u32 = 269025045;
pub const XKB_KEY_XF86AudioPrev: u32 = 269025046;
pub const XKB_KEY_XF86AudioNext: u32 = 269025047;
pub const XKB_KEY_XF86HomePage: u32 = 269025048;
pub const XKB_KEY_XF86Mail: u32 = 269025049;
pub const XKB_KEY_XF86Start: u32 = 269025050;
pub const XKB_KEY_XF86Search: u32 = 269025051;
pub const XKB_KEY_XF86AudioRecord: u32 = 269025052;
pub const XKB_KEY_XF86Calculator: u32 = 269025053;
pub const XKB_KEY_XF86Memo: u32 = 269025054;
pub const XKB_KEY_XF86ToDoList: u32 = 269025055;
pub const XKB_KEY_XF86Calendar: u32 = 269025056;
pub const XKB_KEY_XF86PowerDown: u32 = 269025057;
pub const XKB_KEY_XF86ContrastAdjust: u32 = 269025058;
pub const XKB_KEY_XF86RockerUp: u32 = 269025059;
pub const XKB_KEY_XF86RockerDown: u32 = 269025060;
pub const XKB_KEY_XF86RockerEnter: u32 = 269025061;
pub const XKB_KEY_XF86Back: u32 = 269025062;
pub const XKB_KEY_XF86Forward: u32 = 269025063;
pub const XKB_KEY_XF86Stop: u32 = 269025064;
pub const XKB_KEY_XF86Refresh: u32 = 269025065;
pub const XKB_KEY_XF86PowerOff: u32 = 269025066;
pub const XKB_KEY_XF86WakeUp: u32 = 269025067;
pub const XKB_KEY_XF86Eject: u32 = 269025068;
pub const XKB_KEY_XF86ScreenSaver: u32 = 269025069;
pub const XKB_KEY_XF86WWW: u32 = 269025070;
pub const XKB_KEY_XF86Sleep: u32 = 269025071;
pub const XKB_KEY_XF86Favorites: u32 = 269025072;
pub const XKB_KEY_XF86AudioPause: u32 = 269025073;
pub const XKB_KEY_XF86AudioMedia: u32 = 269025074;
pub const XKB_KEY_XF86MyComputer: u32 = 269025075;
pub const XKB_KEY_XF86VendorHome: u32 = 269025076;
pub const XKB_KEY_XF86LightBulb: u32 = 269025077;
pub const XKB_KEY_XF86Shop: u32 = 269025078;
pub const XKB_KEY_XF86History: u32 = 269025079;
pub const XKB_KEY_XF86OpenURL: u32 = 269025080;
pub const XKB_KEY_XF86AddFavorite: u32 = 269025081;
pub const XKB_KEY_XF86HotLinks: u32 = 269025082;
pub const XKB_KEY_XF86BrightnessAdjust: u32 = 269025083;
pub const XKB_KEY_XF86Finance: u32 = 269025084;
pub const XKB_KEY_XF86Community: u32 = 269025085;
pub const XKB_KEY_XF86AudioRewind: u32 = 269025086;
pub const XKB_KEY_XF86BackForward: u32 = 269025087;
pub const XKB_KEY_XF86Launch0: u32 = 269025088;
pub const XKB_KEY_XF86Launch1: u32 = 269025089;
pub const XKB_KEY_XF86Launch2: u32 = 269025090;
pub const XKB_KEY_XF86Launch3: u32 = 269025091;
pub const XKB_KEY_XF86Launch4: u32 = 269025092;
pub const XKB_KEY_XF86Launch5: u32 = 269025093;
pub const XKB_KEY_XF86Launch6: u32 = 269025094;
pub const XKB_KEY_XF86Launch7: u32 = 269025095;
pub const XKB_KEY_XF86Launch8: u32 = 269025096;
pub const XKB_KEY_XF86Launch9: u32 = 269025097;
pub const XKB_KEY_XF86LaunchA: u32 = 269025098;
pub const XKB_KEY_XF86LaunchB: u32 = 269025099;
pub const XKB_KEY_XF86LaunchC: u32 = 269025100;
pub const XKB_KEY_XF86LaunchD: u32 = 269025101;
pub const XKB_KEY_XF86LaunchE: u32 = 269025102;
pub const XKB_KEY_XF86LaunchF: u32 = 269025103;
pub const XKB_KEY_XF86ApplicationLeft: u32 = 269025104;
pub const XKB_KEY_XF86ApplicationRight: u32 = 269025105;
pub const XKB_KEY_XF86Book: u32 = 269025106;
pub const XKB_KEY_XF86CD: u32 = 269025107;
pub const XKB_KEY_XF86Calculater: u32 = 269025108;
pub const XKB_KEY_XF86Clear: u32 = 269025109;
pub const XKB_KEY_XF86Close: u32 = 269025110;
pub const XKB_KEY_XF86Copy: u32 = 269025111;
pub const XKB_KEY_XF86Cut: u32 = 269025112;
pub const XKB_KEY_XF86Display: u32 = 269025113;
pub const XKB_KEY_XF86DOS: u32 = 269025114;
pub const XKB_KEY_XF86Documents: u32 = 269025115;
pub const XKB_KEY_XF86Excel: u32 = 269025116;
pub const XKB_KEY_XF86Explorer: u32 = 269025117;
pub const XKB_KEY_XF86Game: u32 = 269025118;
pub const XKB_KEY_XF86Go: u32 = 269025119;
pub const XKB_KEY_XF86iTouch: u32 = 269025120;
pub const XKB_KEY_XF86LogOff: u32 = 269025121;
pub const XKB_KEY_XF86Market: u32 = 269025122;
pub const XKB_KEY_XF86Meeting: u32 = 269025123;
pub const XKB_KEY_XF86MenuKB: u32 = 269025125;
pub const XKB_KEY_XF86MenuPB: u32 = 269025126;
pub const XKB_KEY_XF86MySites: u32 = 269025127;
pub const XKB_KEY_XF86New: u32 = 269025128;
pub const XKB_KEY_XF86News: u32 = 269025129;
pub const XKB_KEY_XF86OfficeHome: u32 = 269025130;
pub const XKB_KEY_XF86Open: u32 = 269025131;
pub const XKB_KEY_XF86Option: u32 = 269025132;
pub const XKB_KEY_XF86Paste: u32 = 269025133;
pub const XKB_KEY_XF86Phone: u32 = 269025134;
pub const XKB_KEY_XF86Q: u32 = 269025136;
pub const XKB_KEY_XF86Reply: u32 = 269025138;
pub const XKB_KEY_XF86Reload: u32 = 269025139;
pub const XKB_KEY_XF86RotateWindows: u32 = 269025140;
pub const XKB_KEY_XF86RotationPB: u32 = 269025141;
pub const XKB_KEY_XF86RotationKB: u32 = 269025142;
pub const XKB_KEY_XF86Save: u32 = 269025143;
pub const XKB_KEY_XF86ScrollUp: u32 = 269025144;
pub const XKB_KEY_XF86ScrollDown: u32 = 269025145;
pub const XKB_KEY_XF86ScrollClick: u32 = 269025146;
pub const XKB_KEY_XF86Send: u32 = 269025147;
pub const XKB_KEY_XF86Spell: u32 = 269025148;
pub const XKB_KEY_XF86SplitScreen: u32 = 269025149;
pub const XKB_KEY_XF86Support: u32 = 269025150;
pub const XKB_KEY_XF86TaskPane: u32 = 269025151;
pub const XKB_KEY_XF86Terminal: u32 = 269025152;
pub const XKB_KEY_XF86Tools: u32 = 269025153;
pub const XKB_KEY_XF86Travel: u32 = 269025154;
pub const XKB_KEY_XF86UserPB: u32 = 269025156;
pub const XKB_KEY_XF86User1KB: u32 = 269025157;
pub const XKB_KEY_XF86User2KB: u32 = 269025158;
pub const XKB_KEY_XF86Video: u32 = 269025159;
pub const XKB_KEY_XF86WheelButton: u32 = 269025160;
pub const XKB_KEY_XF86Word: u32 = 269025161;
pub const XKB_KEY_XF86Xfer: u32 = 269025162;
pub const XKB_KEY_XF86ZoomIn: u32 = 269025163;
pub const XKB_KEY_XF86ZoomOut: u32 = 269025164;
pub const XKB_KEY_XF86Away: u32 = 269025165;
pub const XKB_KEY_XF86Messenger: u32 = 269025166;
pub const XKB_KEY_XF86WebCam: u32 = 269025167;
pub const XKB_KEY_XF86MailForward: u32 = 269025168;
pub const XKB_KEY_XF86Pictures: u32 = 269025169;
pub const XKB_KEY_XF86Music: u32 = 269025170;
pub const XKB_KEY_XF86Battery: u32 = 269025171;
pub const XKB_KEY_XF86Bluetooth: u32 = 269025172;
pub const XKB_KEY_XF86WLAN: u32 = 269025173;
pub const XKB_KEY_XF86UWB: u32 = 269025174;
pub const XKB_KEY_XF86AudioForward: u32 = 269025175;
pub const XKB_KEY_XF86AudioRepeat: u32 = 269025176;
pub const XKB_KEY_XF86AudioRandomPlay: u32 = 269025177;
pub const XKB_KEY_XF86Subtitle: u32 = 269025178;
pub const XKB_KEY_XF86AudioCycleTrack: u32 = 269025179;
pub const XKB_KEY_XF86CycleAngle: u32 = 269025180;
pub const XKB_KEY_XF86FrameBack: u32 = 269025181;
pub const XKB_KEY_XF86FrameForward: u32 = 269025182;
pub const XKB_KEY_XF86Time: u32 = 269025183;
pub const XKB_KEY_XF86Select: u32 = 269025184;
pub const XKB_KEY_XF86View: u32 = 269025185;
pub const XKB_KEY_XF86TopMenu: u32 = 269025186;
pub const XKB_KEY_XF86Red: u32 = 269025187;
pub const XKB_KEY_XF86Green: u32 = 269025188;
pub const XKB_KEY_XF86Yellow: u32 = 269025189;
pub const XKB_KEY_XF86Blue: u32 = 269025190;
pub const XKB_KEY_XF86Suspend: u32 = 269025191;
pub const XKB_KEY_XF86Hibernate: u32 = 269025192;
pub const XKB_KEY_XF86TouchpadToggle: u32 = 269025193;
pub const XKB_KEY_XF86TouchpadOn: u32 = 269025200;
pub const XKB_KEY_XF86TouchpadOff: u32 = 269025201;
pub const XKB_KEY_XF86AudioMicMute: u32 = 269025202;
pub const XKB_KEY_XF86Keyboard: u32 = 269025203;
pub const XKB_KEY_XF86WWAN: u32 = 269025204;
pub const XKB_KEY_XF86RFKill: u32 = 269025205;
pub const XKB_KEY_XF86AudioPreset: u32 = 269025206;
pub const XKB_KEY_XF86RotationLockToggle: u32 = 269025207;
pub const XKB_KEY_XF86FullScreen: u32 = 269025208;
pub const XKB_KEY_XF86Switch_VT_1: u32 = 269024769;
pub const XKB_KEY_XF86Switch_VT_2: u32 = 269024770;
pub const XKB_KEY_XF86Switch_VT_3: u32 = 269024771;
pub const XKB_KEY_XF86Switch_VT_4: u32 = 269024772;
pub const XKB_KEY_XF86Switch_VT_5: u32 = 269024773;
pub const XKB_KEY_XF86Switch_VT_6: u32 = 269024774;
pub const XKB_KEY_XF86Switch_VT_7: u32 = 269024775;
pub const XKB_KEY_XF86Switch_VT_8: u32 = 269024776;
pub const XKB_KEY_XF86Switch_VT_9: u32 = 269024777;
pub const XKB_KEY_XF86Switch_VT_10: u32 = 269024778;
pub const XKB_KEY_XF86Switch_VT_11: u32 = 269024779;
pub const XKB_KEY_XF86Switch_VT_12: u32 = 269024780;
pub const XKB_KEY_XF86Ungrab: u32 = 269024800;
pub const XKB_KEY_XF86ClearGrab: u32 = 269024801;
pub const XKB_KEY_XF86Next_VMode: u32 = 269024802;
pub const XKB_KEY_XF86Prev_VMode: u32 = 269024803;
pub const XKB_KEY_XF86LogWindowTree: u32 = 269024804;
pub const XKB_KEY_XF86LogGrabInfo: u32 = 269024805;
pub const XKB_KEY_XF86BrightnessAuto: u32 = 268964084;
pub const XKB_KEY_XF86DisplayOff: u32 = 268964085;
pub const XKB_KEY_XF86Info: u32 = 268964198;
pub const XKB_KEY_XF86AspectRatio: u32 = 268964215;
pub const XKB_KEY_XF86DVD: u32 = 268964229;
pub const XKB_KEY_XF86Audio: u32 = 268964232;
pub const XKB_KEY_XF86ChannelUp: u32 = 268964242;
pub const XKB_KEY_XF86ChannelDown: u32 = 268964243;
pub const XKB_KEY_XF86Break: u32 = 268964251;
pub const XKB_KEY_XF86VideoPhone: u32 = 268964256;
pub const XKB_KEY_XF86ZoomReset: u32 = 268964260;
pub const XKB_KEY_XF86Editor: u32 = 268964262;
pub const XKB_KEY_XF86GraphicsEditor: u32 = 268964264;
pub const XKB_KEY_XF86Presentation: u32 = 268964265;
pub const XKB_KEY_XF86Database: u32 = 268964266;
pub const XKB_KEY_XF86Voicemail: u32 = 268964268;
pub const XKB_KEY_XF86Addressbook: u32 = 268964269;
pub const XKB_KEY_XF86DisplayToggle: u32 = 268964271;
pub const XKB_KEY_XF86SpellCheck: u32 = 268964272;
pub const XKB_KEY_XF86ContextMenu: u32 = 268964278;
pub const XKB_KEY_XF86MediaRepeat: u32 = 268964279;
pub const XKB_KEY_XF8610ChannelsUp: u32 = 268964280;
pub const XKB_KEY_XF8610ChannelsDown: u32 = 268964281;
pub const XKB_KEY_XF86Images: u32 = 268964282;
pub const XKB_KEY_XF86NotificationCenter: u32 = 268964284;
pub const XKB_KEY_XF86PickupPhone: u32 = 268964285;
pub const XKB_KEY_XF86HangupPhone: u32 = 268964286;
pub const XKB_KEY_XF86Fn: u32 = 268964304;
pub const XKB_KEY_XF86Fn_Esc: u32 = 268964305;
pub const XKB_KEY_XF86FnRightShift: u32 = 268964325;
pub const XKB_KEY_XF86Numeric0: u32 = 268964352;
pub const XKB_KEY_XF86Numeric1: u32 = 268964353;
pub const XKB_KEY_XF86Numeric2: u32 = 268964354;
pub const XKB_KEY_XF86Numeric3: u32 = 268964355;
pub const XKB_KEY_XF86Numeric4: u32 = 268964356;
pub const XKB_KEY_XF86Numeric5: u32 = 268964357;
pub const XKB_KEY_XF86Numeric6: u32 = 268964358;
pub const XKB_KEY_XF86Numeric7: u32 = 268964359;
pub const XKB_KEY_XF86Numeric8: u32 = 268964360;
pub const XKB_KEY_XF86Numeric9: u32 = 268964361;
pub const XKB_KEY_XF86NumericStar: u32 = 268964362;
pub const XKB_KEY_XF86NumericPound: u32 = 268964363;
pub const XKB_KEY_XF86NumericA: u32 = 268964364;
pub const XKB_KEY_XF86NumericB: u32 = 268964365;
pub const XKB_KEY_XF86NumericC: u32 = 268964366;
pub const XKB_KEY_XF86NumericD: u32 = 268964367;
pub const XKB_KEY_XF86CameraFocus: u32 = 268964368;
pub const XKB_KEY_XF86WPSButton: u32 = 268964369;
pub const XKB_KEY_XF86CameraZoomIn: u32 = 268964373;
pub const XKB_KEY_XF86CameraZoomOut: u32 = 268964374;
pub const XKB_KEY_XF86CameraUp: u32 = 268964375;
pub const XKB_KEY_XF86CameraDown: u32 = 268964376;
pub const XKB_KEY_XF86CameraLeft: u32 = 268964377;
pub const XKB_KEY_XF86CameraRight: u32 = 268964378;
pub const XKB_KEY_XF86AttendantOn: u32 = 268964379;
pub const XKB_KEY_XF86AttendantOff: u32 = 268964380;
pub const XKB_KEY_XF86AttendantToggle: u32 = 268964381;
pub const XKB_KEY_XF86LightsToggle: u32 = 268964382;
pub const XKB_KEY_XF86ALSToggle: u32 = 268964400;
pub const XKB_KEY_XF86RefreshRateToggle: u32 = 268964402;
pub const XKB_KEY_XF86Buttonconfig: u32 = 268964416;
pub const XKB_KEY_XF86Taskmanager: u32 = 268964417;
pub const XKB_KEY_XF86Journal: u32 = 268964418;
pub const XKB_KEY_XF86ControlPanel: u32 = 268964419;
pub const XKB_KEY_XF86AppSelect: u32 = 268964420;
pub const XKB_KEY_XF86Screensaver: u32 = 268964421;
pub const XKB_KEY_XF86VoiceCommand: u32 = 268964422;
pub const XKB_KEY_XF86Assistant: u32 = 268964423;
pub const XKB_KEY_XF86EmojiPicker: u32 = 268964425;
pub const XKB_KEY_XF86Dictate: u32 = 268964426;
pub const XKB_KEY_XF86CameraAccessEnable: u32 = 268964427;
pub const XKB_KEY_XF86CameraAccessDisable: u32 = 268964428;
pub const XKB_KEY_XF86CameraAccessToggle: u32 = 268964429;
pub const XKB_KEY_XF86Accessibility: u32 = 268964430;
pub const XKB_KEY_XF86DoNotDisturb: u32 = 268964431;
pub const XKB_KEY_XF86BrightnessMin: u32 = 268964432;
pub const XKB_KEY_XF86BrightnessMax: u32 = 268964433;
pub const XKB_KEY_XF86KbdInputAssistPrev: u32 = 268964448;
pub const XKB_KEY_XF86KbdInputAssistNext: u32 = 268964449;
pub const XKB_KEY_XF86KbdInputAssistPrevgroup: u32 = 268964450;
pub const XKB_KEY_XF86KbdInputAssistNextgroup: u32 = 268964451;
pub const XKB_KEY_XF86KbdInputAssistAccept: u32 = 268964452;
pub const XKB_KEY_XF86KbdInputAssistCancel: u32 = 268964453;
pub const XKB_KEY_XF86RightUp: u32 = 268964454;
pub const XKB_KEY_XF86RightDown: u32 = 268964455;
pub const XKB_KEY_XF86LeftUp: u32 = 268964456;
pub const XKB_KEY_XF86LeftDown: u32 = 268964457;
pub const XKB_KEY_XF86RootMenu: u32 = 268964458;
pub const XKB_KEY_XF86MediaTopMenu: u32 = 268964459;
pub const XKB_KEY_XF86Numeric11: u32 = 268964460;
pub const XKB_KEY_XF86Numeric12: u32 = 268964461;
pub const XKB_KEY_XF86AudioDesc: u32 = 268964462;
pub const XKB_KEY_XF863DMode: u32 = 268964463;
pub const XKB_KEY_XF86NextFavorite: u32 = 268964464;
pub const XKB_KEY_XF86StopRecord: u32 = 268964465;
pub const XKB_KEY_XF86PauseRecord: u32 = 268964466;
pub const XKB_KEY_XF86VOD: u32 = 268964467;
pub const XKB_KEY_XF86Unmute: u32 = 268964468;
pub const XKB_KEY_XF86FastReverse: u32 = 268964469;
pub const XKB_KEY_XF86SlowReverse: u32 = 268964470;
pub const XKB_KEY_XF86Data: u32 = 268964471;
pub const XKB_KEY_XF86OnScreenKeyboard: u32 = 268964472;
pub const XKB_KEY_XF86PrivacyScreenToggle: u32 = 268964473;
pub const XKB_KEY_XF86SelectiveScreenshot: u32 = 268964474;
pub const XKB_KEY_XF86NextElement: u32 = 268964475;
pub const XKB_KEY_XF86PreviousElement: u32 = 268964476;
pub const XKB_KEY_XF86AutopilotEngageToggle: u32 = 268964477;
pub const XKB_KEY_XF86MarkWaypoint: u32 = 268964478;
pub const XKB_KEY_XF86Sos: u32 = 268964479;
pub const XKB_KEY_XF86NavChart: u32 = 268964480;
pub const XKB_KEY_XF86FishingChart: u32 = 268964481;
pub const XKB_KEY_XF86SingleRangeRadar: u32 = 268964482;
pub const XKB_KEY_XF86DualRangeRadar: u32 = 268964483;
pub const XKB_KEY_XF86RadarOverlay: u32 = 268964484;
pub const XKB_KEY_XF86TraditionalSonar: u32 = 268964485;
pub const XKB_KEY_XF86ClearvuSonar: u32 = 268964486;
pub const XKB_KEY_XF86SidevuSonar: u32 = 268964487;
pub const XKB_KEY_XF86NavInfo: u32 = 268964488;
pub const XKB_KEY_XF86Macro1: u32 = 268964496;
pub const XKB_KEY_XF86Macro2: u32 = 268964497;
pub const XKB_KEY_XF86Macro3: u32 = 268964498;
pub const XKB_KEY_XF86Macro4: u32 = 268964499;
pub const XKB_KEY_XF86Macro5: u32 = 268964500;
pub const XKB_KEY_XF86Macro6: u32 = 268964501;
pub const XKB_KEY_XF86Macro7: u32 = 268964502;
pub const XKB_KEY_XF86Macro8: u32 = 268964503;
pub const XKB_KEY_XF86Macro9: u32 = 268964504;
pub const XKB_KEY_XF86Macro10: u32 = 268964505;
pub const XKB_KEY_XF86Macro11: u32 = 268964506;
pub const XKB_KEY_XF86Macro12: u32 = 268964507;
pub const XKB_KEY_XF86Macro13: u32 = 268964508;
pub const XKB_KEY_XF86Macro14: u32 = 268964509;
pub const XKB_KEY_XF86Macro15: u32 = 268964510;
pub const XKB_KEY_XF86Macro16: u32 = 268964511;
pub const XKB_KEY_XF86Macro17: u32 = 268964512;
pub const XKB_KEY_XF86Macro18: u32 = 268964513;
pub const XKB_KEY_XF86Macro19: u32 = 268964514;
pub const XKB_KEY_XF86Macro20: u32 = 268964515;
pub const XKB_KEY_XF86Macro21: u32 = 268964516;
pub const XKB_KEY_XF86Macro22: u32 = 268964517;
pub const XKB_KEY_XF86Macro23: u32 = 268964518;
pub const XKB_KEY_XF86Macro24: u32 = 268964519;
pub const XKB_KEY_XF86Macro25: u32 = 268964520;
pub const XKB_KEY_XF86Macro26: u32 = 268964521;
pub const XKB_KEY_XF86Macro27: u32 = 268964522;
pub const XKB_KEY_XF86Macro28: u32 = 268964523;
pub const XKB_KEY_XF86Macro29: u32 = 268964524;
pub const XKB_KEY_XF86Macro30: u32 = 268964525;
pub const XKB_KEY_XF86MacroRecordStart: u32 = 268964528;
pub const XKB_KEY_XF86MacroRecordStop: u32 = 268964529;
pub const XKB_KEY_XF86MacroPresetCycle: u32 = 268964530;
pub const XKB_KEY_XF86MacroPreset1: u32 = 268964531;
pub const XKB_KEY_XF86MacroPreset2: u32 = 268964532;
pub const XKB_KEY_XF86MacroPreset3: u32 = 268964533;
pub const XKB_KEY_XF86KbdLcdMenu1: u32 = 268964536;
pub const XKB_KEY_XF86KbdLcdMenu2: u32 = 268964537;
pub const XKB_KEY_XF86KbdLcdMenu3: u32 = 268964538;
pub const XKB_KEY_XF86KbdLcdMenu4: u32 = 268964539;
pub const XKB_KEY_XF86KbdLcdMenu5: u32 = 268964540;
pub const XKB_KEY_SunFA_Grave: u32 = 268828416;
pub const XKB_KEY_SunFA_Circum: u32 = 268828417;
pub const XKB_KEY_SunFA_Tilde: u32 = 268828418;
pub const XKB_KEY_SunFA_Acute: u32 = 268828419;
pub const XKB_KEY_SunFA_Diaeresis: u32 = 268828420;
pub const XKB_KEY_SunFA_Cedilla: u32 = 268828421;
pub const XKB_KEY_SunF36: u32 = 268828432;
pub const XKB_KEY_SunF37: u32 = 268828433;
pub const XKB_KEY_SunSys_Req: u32 = 268828512;
pub const XKB_KEY_SunPrint_Screen: u32 = 65377;
pub const XKB_KEY_SunCompose: u32 = 65312;
pub const XKB_KEY_SunAltGraph: u32 = 65406;
pub const XKB_KEY_SunPageUp: u32 = 65365;
pub const XKB_KEY_SunPageDown: u32 = 65366;
pub const XKB_KEY_SunUndo: u32 = 65381;
pub const XKB_KEY_SunAgain: u32 = 65382;
pub const XKB_KEY_SunFind: u32 = 65384;
pub const XKB_KEY_SunStop: u32 = 65385;
pub const XKB_KEY_SunProps: u32 = 268828528;
pub const XKB_KEY_SunFront: u32 = 268828529;
pub const XKB_KEY_SunCopy: u32 = 268828530;
pub const XKB_KEY_SunOpen: u32 = 268828531;
pub const XKB_KEY_SunPaste: u32 = 268828532;
pub const XKB_KEY_SunCut: u32 = 268828533;
pub const XKB_KEY_SunPowerSwitch: u32 = 268828534;
pub const XKB_KEY_SunAudioLowerVolume: u32 = 268828535;
pub const XKB_KEY_SunAudioMute: u32 = 268828536;
pub const XKB_KEY_SunAudioRaiseVolume: u32 = 268828537;
pub const XKB_KEY_SunVideoDegauss: u32 = 268828538;
pub const XKB_KEY_SunVideoLowerBrightness: u32 = 268828539;
pub const XKB_KEY_SunVideoRaiseBrightness: u32 = 268828540;
pub const XKB_KEY_SunPowerSwitchShift: u32 = 268828541;
pub const XKB_KEY_Dring_accent: u32 = 268500656;
pub const XKB_KEY_Dcircumflex_accent: u32 = 268500574;
pub const XKB_KEY_Dcedilla_accent: u32 = 268500524;
pub const XKB_KEY_Dacute_accent: u32 = 268500519;
pub const XKB_KEY_Dgrave_accent: u32 = 268500576;
pub const XKB_KEY_Dtilde: u32 = 268500606;
pub const XKB_KEY_Ddiaeresis: u32 = 268500514;
pub const XKB_KEY_DRemove: u32 = 268500736;
pub const XKB_KEY_hpClearLine: u32 = 268500847;
pub const XKB_KEY_hpInsertLine: u32 = 268500848;
pub const XKB_KEY_hpDeleteLine: u32 = 268500849;
pub const XKB_KEY_hpInsertChar: u32 = 268500850;
pub const XKB_KEY_hpDeleteChar: u32 = 268500851;
pub const XKB_KEY_hpBackTab: u32 = 268500852;
pub const XKB_KEY_hpKP_BackTab: u32 = 268500853;
pub const XKB_KEY_hpModelock1: u32 = 268500808;
pub const XKB_KEY_hpModelock2: u32 = 268500809;
pub const XKB_KEY_hpReset: u32 = 268500844;
pub const XKB_KEY_hpSystem: u32 = 268500845;
pub const XKB_KEY_hpUser: u32 = 268500846;
pub const XKB_KEY_hpmute_acute: u32 = 268435624;
pub const XKB_KEY_hpmute_grave: u32 = 268435625;
pub const XKB_KEY_hpmute_asciicircum: u32 = 268435626;
pub const XKB_KEY_hpmute_diaeresis: u32 = 268435627;
pub const XKB_KEY_hpmute_asciitilde: u32 = 268435628;
pub const XKB_KEY_hplira: u32 = 268435631;
pub const XKB_KEY_hpguilder: u32 = 268435646;
pub const XKB_KEY_hpYdiaeresis: u32 = 268435694;
pub const XKB_KEY_hpIO: u32 = 268435694;
pub const XKB_KEY_hplongminus: u32 = 268435702;
pub const XKB_KEY_hpblock: u32 = 268435708;
pub const XKB_KEY_osfCopy: u32 = 268762882;
pub const XKB_KEY_osfCut: u32 = 268762883;
pub const XKB_KEY_osfPaste: u32 = 268762884;
pub const XKB_KEY_osfBackTab: u32 = 268762887;
pub const XKB_KEY_osfBackSpace: u32 = 268762888;
pub const XKB_KEY_osfClear: u32 = 268762891;
pub const XKB_KEY_osfEscape: u32 = 268762907;
pub const XKB_KEY_osfAddMode: u32 = 268762929;
pub const XKB_KEY_osfPrimaryPaste: u32 = 268762930;
pub const XKB_KEY_osfQuickPaste: u32 = 268762931;
pub const XKB_KEY_osfPageLeft: u32 = 268762944;
pub const XKB_KEY_osfPageUp: u32 = 268762945;
pub const XKB_KEY_osfPageDown: u32 = 268762946;
pub const XKB_KEY_osfPageRight: u32 = 268762947;
pub const XKB_KEY_osfActivate: u32 = 268762948;
pub const XKB_KEY_osfMenuBar: u32 = 268762949;
pub const XKB_KEY_osfLeft: u32 = 268762961;
pub const XKB_KEY_osfUp: u32 = 268762962;
pub const XKB_KEY_osfRight: u32 = 268762963;
pub const XKB_KEY_osfDown: u32 = 268762964;
pub const XKB_KEY_osfEndLine: u32 = 268762967;
pub const XKB_KEY_osfBeginLine: u32 = 268762968;
pub const XKB_KEY_osfEndData: u32 = 268762969;
pub const XKB_KEY_osfBeginData: u32 = 268762970;
pub const XKB_KEY_osfPrevMenu: u32 = 268762971;
pub const XKB_KEY_osfNextMenu: u32 = 268762972;
pub const XKB_KEY_osfPrevField: u32 = 268762973;
pub const XKB_KEY_osfNextField: u32 = 268762974;
pub const XKB_KEY_osfSelect: u32 = 268762976;
pub const XKB_KEY_osfInsert: u32 = 268762979;
pub const XKB_KEY_osfUndo: u32 = 268762981;
pub const XKB_KEY_osfMenu: u32 = 268762983;
pub const XKB_KEY_osfCancel: u32 = 268762985;
pub const XKB_KEY_osfHelp: u32 = 268762986;
pub const XKB_KEY_osfSelectAll: u32 = 268762993;
pub const XKB_KEY_osfDeselectAll: u32 = 268762994;
pub const XKB_KEY_osfReselect: u32 = 268762995;
pub const XKB_KEY_osfExtend: u32 = 268762996;
pub const XKB_KEY_osfRestore: u32 = 268763000;
pub const XKB_KEY_osfDelete: u32 = 268763135;
pub const XKB_KEY_Reset: u32 = 268500844;
pub const XKB_KEY_System: u32 = 268500845;
pub const XKB_KEY_User: u32 = 268500846;
pub const XKB_KEY_ClearLine: u32 = 268500847;
pub const XKB_KEY_InsertLine: u32 = 268500848;
pub const XKB_KEY_DeleteLine: u32 = 268500849;
pub const XKB_KEY_InsertChar: u32 = 268500850;
pub const XKB_KEY_DeleteChar: u32 = 268500851;
pub const XKB_KEY_BackTab: u32 = 268500852;
pub const XKB_KEY_KP_BackTab: u32 = 268500853;
pub const XKB_KEY_Ext16bit_L: u32 = 268500854;
pub const XKB_KEY_Ext16bit_R: u32 = 268500855;
pub const XKB_KEY_mute_acute: u32 = 268435624;
pub const XKB_KEY_mute_grave: u32 = 268435625;
pub const XKB_KEY_mute_asciicircum: u32 = 268435626;
pub const XKB_KEY_mute_diaeresis: u32 = 268435627;
pub const XKB_KEY_mute_asciitilde: u32 = 268435628;
pub const XKB_KEY_lira: u32 = 268435631;
pub const XKB_KEY_guilder: u32 = 268435646;
pub const XKB_KEY_IO: u32 = 268435694;
pub const XKB_KEY_longminus: u32 = 268435702;
pub const XKB_KEY_block: u32 = 268435708;
pub const XKB_KEYCODE_INVALID: u32 = 4294967295;
pub const XKB_LAYOUT_INVALID: u32 = 4294967295;
pub const XKB_LEVEL_INVALID: u32 = 4294967295;
pub const XKB_MOD_INVALID: u32 = 4294967295;
pub const XKB_LED_INVALID: u32 = 4294967295;
pub const XKB_KEYCODE_MAX: u32 = 4294967294;
pub const XKB_KEYSYM_MAX: u32 = 536870911;
pub const XKB_GROUP_INVALID: u32 = 4294967295;
pub const XKB_X11_MIN_MAJOR_XKB_VERSION: u32 = 1;
pub const XKB_X11_MIN_MINOR_XKB_VERSION: u32 = 0;
pub const X_kbUseExtension: u32 = 0;
pub const X_kbSelectEvents: u32 = 1;
pub const X_kbBell: u32 = 3;
pub const X_kbGetState: u32 = 4;
pub const X_kbLatchLockState: u32 = 5;
pub const X_kbGetControls: u32 = 6;
pub const X_kbSetControls: u32 = 7;
pub const X_kbGetMap: u32 = 8;
pub const X_kbSetMap: u32 = 9;
pub const X_kbGetCompatMap: u32 = 10;
pub const X_kbSetCompatMap: u32 = 11;
pub const X_kbGetIndicatorState: u32 = 12;
pub const X_kbGetIndicatorMap: u32 = 13;
pub const X_kbSetIndicatorMap: u32 = 14;
pub const X_kbGetNamedIndicator: u32 = 15;
pub const X_kbSetNamedIndicator: u32 = 16;
pub const X_kbGetNames: u32 = 17;
pub const X_kbSetNames: u32 = 18;
pub const X_kbGetGeometry: u32 = 19;
pub const X_kbSetGeometry: u32 = 20;
pub const X_kbPerClientFlags: u32 = 21;
pub const X_kbListComponents: u32 = 22;
pub const X_kbGetKbdByName: u32 = 23;
pub const X_kbGetDeviceInfo: u32 = 24;
pub const X_kbSetDeviceInfo: u32 = 25;
pub const X_kbSetDebuggingFlags: u32 = 101;
pub const XkbEventCode: u32 = 0;
pub const XkbNumberEvents: u32 = 1;
pub const XkbNewKeyboardNotify: u32 = 0;
pub const XkbMapNotify: u32 = 1;
pub const XkbStateNotify: u32 = 2;
pub const XkbControlsNotify: u32 = 3;
pub const XkbIndicatorStateNotify: u32 = 4;
pub const XkbIndicatorMapNotify: u32 = 5;
pub const XkbNamesNotify: u32 = 6;
pub const XkbCompatMapNotify: u32 = 7;
pub const XkbBellNotify: u32 = 8;
pub const XkbActionMessage: u32 = 9;
pub const XkbAccessXNotify: u32 = 10;
pub const XkbExtensionDeviceNotify: u32 = 11;
pub const XkbNewKeyboardNotifyMask: u32 = 1;
pub const XkbMapNotifyMask: u32 = 2;
pub const XkbStateNotifyMask: u32 = 4;
pub const XkbControlsNotifyMask: u32 = 8;
pub const XkbIndicatorStateNotifyMask: u32 = 16;
pub const XkbIndicatorMapNotifyMask: u32 = 32;
pub const XkbNamesNotifyMask: u32 = 64;
pub const XkbCompatMapNotifyMask: u32 = 128;
pub const XkbBellNotifyMask: u32 = 256;
pub const XkbActionMessageMask: u32 = 512;
pub const XkbAccessXNotifyMask: u32 = 1024;
pub const XkbExtensionDeviceNotifyMask: u32 = 2048;
pub const XkbAllEventsMask: u32 = 4095;
pub const XkbNKN_KeycodesMask: u32 = 1;
pub const XkbNKN_GeometryMask: u32 = 2;
pub const XkbNKN_DeviceIDMask: u32 = 4;
pub const XkbAllNewKeyboardEventsMask: u32 = 7;
pub const XkbAXN_SKPress: u32 = 0;
pub const XkbAXN_SKAccept: u32 = 1;
pub const XkbAXN_SKReject: u32 = 2;
pub const XkbAXN_SKRelease: u32 = 3;
pub const XkbAXN_BKAccept: u32 = 4;
pub const XkbAXN_BKReject: u32 = 5;
pub const XkbAXN_AXKWarning: u32 = 6;
pub const XkbAXN_SKPressMask: u32 = 1;
pub const XkbAXN_SKAcceptMask: u32 = 2;
pub const XkbAXN_SKRejectMask: u32 = 4;
pub const XkbAXN_SKReleaseMask: u32 = 8;
pub const XkbAXN_BKAcceptMask: u32 = 16;
pub const XkbAXN_BKRejectMask: u32 = 32;
pub const XkbAXN_AXKWarningMask: u32 = 64;
pub const XkbAllAccessXEventsMask: u32 = 127;
pub const XkbAllBellEventsMask: u32 = 1;
pub const XkbAllActionMessagesMask: u32 = 1;
pub const XkbKeyboard: u32 = 0;
pub const XkbNumberErrors: u32 = 1;
pub const XkbErr_BadDevice: u32 = 255;
pub const XkbErr_BadClass: u32 = 254;
pub const XkbErr_BadId: u32 = 253;
pub const XkbClientMapMask: u32 = 1;
pub const XkbServerMapMask: u32 = 2;
pub const XkbCompatMapMask: u32 = 4;
pub const XkbIndicatorMapMask: u32 = 8;
pub const XkbNamesMask: u32 = 16;
pub const XkbGeometryMask: u32 = 32;
pub const XkbControlsMask: u32 = 64;
pub const XkbAllComponentsMask: u32 = 127;
pub const XkbModifierStateMask: u32 = 1;
pub const XkbModifierBaseMask: u32 = 2;
pub const XkbModifierLatchMask: u32 = 4;
pub const XkbModifierLockMask: u32 = 8;
pub const XkbGroupStateMask: u32 = 16;
pub const XkbGroupBaseMask: u32 = 32;
pub const XkbGroupLatchMask: u32 = 64;
pub const XkbGroupLockMask: u32 = 128;
pub const XkbCompatStateMask: u32 = 256;
pub const XkbGrabModsMask: u32 = 512;
pub const XkbCompatGrabModsMask: u32 = 1024;
pub const XkbLookupModsMask: u32 = 2048;
pub const XkbCompatLookupModsMask: u32 = 4096;
pub const XkbPointerButtonMask: u32 = 8192;
pub const XkbAllStateComponentsMask: u32 = 16383;
pub const XkbRepeatKeysMask: u32 = 1;
pub const XkbSlowKeysMask: u32 = 2;
pub const XkbBounceKeysMask: u32 = 4;
pub const XkbStickyKeysMask: u32 = 8;
pub const XkbMouseKeysMask: u32 = 16;
pub const XkbMouseKeysAccelMask: u32 = 32;
pub const XkbAccessXKeysMask: u32 = 64;
pub const XkbAccessXTimeoutMask: u32 = 128;
pub const XkbAccessXFeedbackMask: u32 = 256;
pub const XkbAudibleBellMask: u32 = 512;
pub const XkbOverlay1Mask: u32 = 1024;
pub const XkbOverlay2Mask: u32 = 2048;
pub const XkbIgnoreGroupLockMask: u32 = 4096;
pub const XkbGroupsWrapMask: u32 = 134217728;
pub const XkbInternalModsMask: u32 = 268435456;
pub const XkbIgnoreLockModsMask: u32 = 536870912;
pub const XkbPerKeyRepeatMask: u32 = 1073741824;
pub const XkbControlsEnabledMask: u32 = 2147483648;
pub const XkbAccessXOptionsMask: u32 = 264;
pub const XkbAllBooleanCtrlsMask: u32 = 8191;
pub const XkbAllControlsMaskConst: u32 = 4160757759;
pub const XkbAllControlEventsMask: u32 = 4160757759;
pub const XkbAX_SKPressFBMask: u32 = 1;
pub const XkbAX_SKAcceptFBMask: u32 = 2;
pub const XkbAX_FeatureFBMask: u32 = 4;
pub const XkbAX_SlowWarnFBMask: u32 = 8;
pub const XkbAX_IndicatorFBMask: u32 = 16;
pub const XkbAX_StickyKeysFBMask: u32 = 32;
pub const XkbAX_TwoKeysMask: u32 = 64;
pub const XkbAX_LatchToLockMask: u32 = 128;
pub const XkbAX_SKReleaseFBMask: u32 = 256;
pub const XkbAX_SKRejectFBMask: u32 = 512;
pub const XkbAX_BKRejectFBMask: u32 = 1024;
pub const XkbAX_DumbBellFBMask: u32 = 2048;
pub const XkbAX_FBOptionsMask: u32 = 3903;
pub const XkbAX_SKOptionsMask: u32 = 192;
pub const XkbAX_AllOptionsMask: u32 = 4095;
pub const XkbUseCoreKbd: u32 = 256;
pub const XkbUseCorePtr: u32 = 512;
pub const XkbDfltXIClass: u32 = 768;
pub const XkbDfltXIId: u32 = 1024;
pub const XkbAllXIClasses: u32 = 1280;
pub const XkbAllXIIds: u32 = 1536;
pub const XkbXINone: u32 = 65280;
pub const XkbNoModifier: u32 = 255;
pub const XkbNoShiftLevel: u32 = 255;
pub const XkbNoShape: u32 = 255;
pub const XkbNoIndicator: u32 = 255;
pub const XkbNoModifierMask: u32 = 0;
pub const XkbAllModifiersMask: u32 = 255;
pub const XkbAllVirtualModsMask: u32 = 65535;
pub const XkbNumKbdGroups: u32 = 4;
pub const XkbMaxKbdGroup: u32 = 3;
pub const XkbMaxMouseKeysBtn: u32 = 4;
pub const XkbGroup1Index: u32 = 0;
pub const XkbGroup2Index: u32 = 1;
pub const XkbGroup3Index: u32 = 2;
pub const XkbGroup4Index: u32 = 3;
pub const XkbAnyGroup: u32 = 254;
pub const XkbAllGroups: u32 = 255;
pub const XkbGroup1Mask: u32 = 1;
pub const XkbGroup2Mask: u32 = 2;
pub const XkbGroup3Mask: u32 = 4;
pub const XkbGroup4Mask: u32 = 8;
pub const XkbAnyGroupMask: u32 = 128;
pub const XkbAllGroupsMask: u32 = 15;
pub const XkbWrapIntoRange: u32 = 0;
pub const XkbClampIntoRange: u32 = 64;
pub const XkbRedirectIntoRange: u32 = 128;
pub const XkbSA_ClearLocks: u32 = 1;
pub const XkbSA_LatchToLock: u32 = 2;
pub const XkbSA_LockNoLock: u32 = 1;
pub const XkbSA_LockNoUnlock: u32 = 2;
pub const XkbSA_UseModMapMods: u32 = 4;
pub const XkbSA_GroupAbsolute: u32 = 4;
pub const XkbSA_UseDfltButton: u32 = 0;
pub const XkbSA_NoAcceleration: u32 = 1;
pub const XkbSA_MoveAbsoluteX: u32 = 2;
pub const XkbSA_MoveAbsoluteY: u32 = 4;
pub const XkbSA_ISODfltIsGroup: u32 = 128;
pub const XkbSA_ISONoAffectMods: u32 = 64;
pub const XkbSA_ISONoAffectGroup: u32 = 32;
pub const XkbSA_ISONoAffectPtr: u32 = 16;
pub const XkbSA_ISONoAffectCtrls: u32 = 8;
pub const XkbSA_ISOAffectMask: u32 = 120;
pub const XkbSA_MessageOnPress: u32 = 1;
pub const XkbSA_MessageOnRelease: u32 = 2;
pub const XkbSA_MessageGenKeyEvent: u32 = 4;
pub const XkbSA_AffectDfltBtn: u32 = 1;
pub const XkbSA_DfltBtnAbsolute: u32 = 4;
pub const XkbSA_SwitchApplication: u32 = 1;
pub const XkbSA_SwitchAbsolute: u32 = 4;
pub const XkbSA_IgnoreVal: u32 = 0;
pub const XkbSA_SetValMin: u32 = 16;
pub const XkbSA_SetValCenter: u32 = 32;
pub const XkbSA_SetValMax: u32 = 48;
pub const XkbSA_SetValRelative: u32 = 64;
pub const XkbSA_SetValAbsolute: u32 = 80;
pub const XkbSA_ValOpMask: u32 = 112;
pub const XkbSA_ValScaleMask: u32 = 7;
pub const XkbSA_NoAction: u32 = 0;
pub const XkbSA_SetMods: u32 = 1;
pub const XkbSA_LatchMods: u32 = 2;
pub const XkbSA_LockMods: u32 = 3;
pub const XkbSA_SetGroup: u32 = 4;
pub const XkbSA_LatchGroup: u32 = 5;
pub const XkbSA_LockGroup: u32 = 6;
pub const XkbSA_MovePtr: u32 = 7;
pub const XkbSA_PtrBtn: u32 = 8;
pub const XkbSA_LockPtrBtn: u32 = 9;
pub const XkbSA_SetPtrDflt: u32 = 10;
pub const XkbSA_ISOLock: u32 = 11;
pub const XkbSA_Terminate: u32 = 12;
pub const XkbSA_SwitchScreen: u32 = 13;
pub const XkbSA_SetControls: u32 = 14;
pub const XkbSA_LockControls: u32 = 15;
pub const XkbSA_ActionMessage: u32 = 16;
pub const XkbSA_RedirectKey: u32 = 17;
pub const XkbSA_DeviceBtn: u32 = 18;
pub const XkbSA_LockDeviceBtn: u32 = 19;
pub const XkbSA_DeviceValuator: u32 = 20;
pub const XkbSA_LastAction: u32 = 20;
pub const XkbSA_NumActions: u32 = 21;
pub const XkbSA_XFree86Private: u32 = 134;
pub const XkbSA_BreakLatch: u32 = 1045249;
pub const XkbKB_Permanent: u32 = 128;
pub const XkbKB_OpMask: u32 = 127;
pub const XkbKB_Default: u32 = 0;
pub const XkbKB_Lock: u32 = 1;
pub const XkbKB_RadioGroup: u32 = 2;
pub const XkbKB_Overlay1: u32 = 3;
pub const XkbKB_Overlay2: u32 = 4;
pub const XkbKB_RGAllowNone: u32 = 128;
pub const XkbMinLegalKeyCode: u32 = 8;
pub const XkbMaxLegalKeyCode: u32 = 255;
pub const XkbMaxKeyCount: u32 = 248;
pub const XkbPerKeyBitArraySize: u32 = 32;
pub const XkbNumModifiers: u32 = 8;
pub const XkbNumVirtualMods: u32 = 16;
pub const XkbNumIndicators: u32 = 32;
pub const XkbAllIndicatorsMask: u32 = 4294967295;
pub const XkbMaxRadioGroups: u32 = 32;
pub const XkbAllRadioGroupsMask: u32 = 4294967295;
pub const XkbMaxShiftLevel: u32 = 63;
pub const XkbMaxSymsPerKey: u32 = 252;
pub const XkbRGMaxMembers: u32 = 12;
pub const XkbActionMessageLength: u32 = 6;
pub const XkbKeyNameLength: u32 = 4;
pub const XkbMaxRedirectCount: u32 = 8;
pub const XkbGeomPtsPerMM: u32 = 10;
pub const XkbGeomMaxColors: u32 = 32;
pub const XkbGeomMaxLabelColors: u32 = 3;
pub const XkbGeomMaxPriority: u32 = 255;
pub const XkbOneLevelIndex: u32 = 0;
pub const XkbTwoLevelIndex: u32 = 1;
pub const XkbAlphabeticIndex: u32 = 2;
pub const XkbKeypadIndex: u32 = 3;
pub const XkbLastRequiredType: u32 = 3;
pub const XkbNumRequiredTypes: u32 = 4;
pub const XkbMaxKeyTypes: u32 = 255;
pub const XkbOneLevelMask: u32 = 1;
pub const XkbTwoLevelMask: u32 = 2;
pub const XkbAlphabeticMask: u32 = 4;
pub const XkbKeypadMask: u32 = 8;
pub const XkbAllRequiredTypes: u32 = 15;
pub const XkbName: &[u8; 10] = b"XKEYBOARD\0";
pub const XkbMajorVersion: u32 = 1;
pub const XkbMinorVersion: u32 = 0;
pub const XkbExplicitKeyTypesMask: u32 = 15;
pub const XkbExplicitKeyType1Mask: u32 = 1;
pub const XkbExplicitKeyType2Mask: u32 = 2;
pub const XkbExplicitKeyType3Mask: u32 = 4;
pub const XkbExplicitKeyType4Mask: u32 = 8;
pub const XkbExplicitInterpretMask: u32 = 16;
pub const XkbExplicitAutoRepeatMask: u32 = 32;
pub const XkbExplicitBehaviorMask: u32 = 64;
pub const XkbExplicitVModMapMask: u32 = 128;
pub const XkbAllExplicitMask: u32 = 255;
pub const XkbKeyTypesMask: u32 = 1;
pub const XkbKeySymsMask: u32 = 2;
pub const XkbModifierMapMask: u32 = 4;
pub const XkbExplicitComponentsMask: u32 = 8;
pub const XkbKeyActionsMask: u32 = 16;
pub const XkbKeyBehaviorsMask: u32 = 32;
pub const XkbVirtualModsMask: u32 = 64;
pub const XkbVirtualModMapMask: u32 = 128;
pub const XkbAllClientInfoMask: u32 = 7;
pub const XkbAllServerInfoMask: u32 = 248;
pub const XkbAllMapComponentsMask: u32 = 255;
pub const XkbSI_AutoRepeat: u32 = 1;
pub const XkbSI_LockingKey: u32 = 2;
pub const XkbSI_LevelOneOnly: u32 = 128;
pub const XkbSI_OpMask: u32 = 127;
pub const XkbSI_NoneOf: u32 = 0;
pub const XkbSI_AnyOfOrNone: u32 = 1;
pub const XkbSI_AnyOf: u32 = 2;
pub const XkbSI_AllOf: u32 = 3;
pub const XkbSI_Exactly: u32 = 4;
pub const XkbIM_NoExplicit: u32 = 128;
pub const XkbIM_NoAutomatic: u32 = 64;
pub const XkbIM_LEDDrivesKB: u32 = 32;
pub const XkbIM_UseBase: u32 = 1;
pub const XkbIM_UseLatched: u32 = 2;
pub const XkbIM_UseLocked: u32 = 4;
pub const XkbIM_UseEffective: u32 = 8;
pub const XkbIM_UseCompat: u32 = 16;
pub const XkbIM_UseNone: u32 = 0;
pub const XkbIM_UseAnyGroup: u32 = 15;
pub const XkbIM_UseAnyMods: u32 = 31;
pub const XkbSymInterpMask: u32 = 1;
pub const XkbGroupCompatMask: u32 = 2;
pub const XkbAllCompatMask: u32 = 3;
pub const XkbKeycodesNameMask: u32 = 1;
pub const XkbGeometryNameMask: u32 = 2;
pub const XkbSymbolsNameMask: u32 = 4;
pub const XkbPhysSymbolsNameMask: u32 = 8;
pub const XkbTypesNameMask: u32 = 16;
pub const XkbCompatNameMask: u32 = 32;
pub const XkbKeyTypeNamesMask: u32 = 64;
pub const XkbKTLevelNamesMask: u32 = 128;
pub const XkbIndicatorNamesMask: u32 = 256;
pub const XkbKeyNamesMask: u32 = 512;
pub const XkbKeyAliasesMask: u32 = 1024;
pub const XkbVirtualModNamesMask: u32 = 2048;
pub const XkbGroupNamesMask: u32 = 4096;
pub const XkbRGNamesMask: u32 = 8192;
pub const XkbComponentNamesMask: u32 = 63;
pub const XkbAllNamesMask: u32 = 16383;
pub const XkbGBN_TypesMask: u32 = 1;
pub const XkbGBN_CompatMapMask: u32 = 2;
pub const XkbGBN_ClientSymbolsMask: u32 = 4;
pub const XkbGBN_ServerSymbolsMask: u32 = 8;
pub const XkbGBN_SymbolsMask: u32 = 12;
pub const XkbGBN_IndicatorMapMask: u32 = 16;
pub const XkbGBN_KeyNamesMask: u32 = 32;
pub const XkbGBN_GeometryMask: u32 = 64;
pub const XkbGBN_OtherNamesMask: u32 = 128;
pub const XkbGBN_AllComponentsMask: u32 = 255;
pub const XkbLC_Hidden: u32 = 1;
pub const XkbLC_Default: u32 = 2;
pub const XkbLC_Partial: u32 = 4;
pub const XkbLC_AlphanumericKeys: u32 = 256;
pub const XkbLC_ModifierKeys: u32 = 512;
pub const XkbLC_KeypadKeys: u32 = 1024;
pub const XkbLC_FunctionKeys: u32 = 2048;
pub const XkbLC_AlternateGroup: u32 = 4096;
pub const XkbXI_KeyboardsMask: u32 = 1;
pub const XkbXI_ButtonActionsMask: u32 = 2;
pub const XkbXI_IndicatorNamesMask: u32 = 4;
pub const XkbXI_IndicatorMapsMask: u32 = 8;
pub const XkbXI_IndicatorStateMask: u32 = 16;
pub const XkbXI_UnsupportedFeatureMask: u32 = 32768;
pub const XkbXI_AllFeaturesMask: u32 = 31;
pub const XkbXI_AllDeviceFeaturesMask: u32 = 30;
pub const XkbXI_IndicatorsMask: u32 = 28;
pub const XkbAllExtensionDeviceEventsMask: u32 = 32799;
pub const XkbPCF_DetectableAutoRepeatMask: u32 = 1;
pub const XkbPCF_GrabsUseXKBStateMask: u32 = 2;
pub const XkbPCF_AutoResetControlsMask: u32 = 4;
pub const XkbPCF_LookupStateWhenGrabbed: u32 = 8;
pub const XkbPCF_SendEventUsesXKBState: u32 = 16;
pub const XkbPCF_AllFlagsMask: u32 = 31;
pub const XkbDF_DisableLocks: u32 = 1;
pub const XkbAnyActionDataSize: u32 = 7;
pub const XkbOD_Success: u32 = 0;
pub const XkbOD_BadLibraryVersion: u32 = 1;
pub const XkbOD_ConnectionRefused: u32 = 2;
pub const XkbOD_NonXkbServer: u32 = 3;
pub const XkbOD_BadServerVersion: u32 = 4;
pub const XkbLC_ForceLatin1Lookup: u32 = 1;
pub const XkbLC_ConsumeLookupMods: u32 = 2;
pub const XkbLC_AlwaysConsumeShiftAndLock: u32 = 4;
pub const XkbLC_IgnoreNewKeyboards: u32 = 8;
pub const XkbLC_ControlFallback: u32 = 16;
pub const XkbLC_ConsumeKeysOnComposeFail: u32 = 536870912;
pub const XkbLC_ComposeLED: u32 = 1073741824;
pub const XkbLC_BeepOnComposeFail: u32 = 2147483648;
pub const XkbLC_AllComposeControls: u32 = 3221225472;
pub const XkbLC_AllControls: u32 = 3221225503;
pub const XCB_CONN_ERROR: u32 = 1;
pub const XCB_CONN_CLOSED_EXT_NOTSUPPORTED: u32 = 2;
pub const XCB_CONN_CLOSED_MEM_INSUFFICIENT: u32 = 3;
pub const XCB_CONN_CLOSED_REQ_LEN_EXCEED: u32 = 4;
pub const XCB_CONN_CLOSED_PARSE_ERR: u32 = 5;
pub const XCB_CONN_CLOSED_INVALID_SCREEN: u32 = 6;
pub const XCB_CONN_CLOSED_FDPASSING_FAILED: u32 = 7;
pub const XCB_KEY_PRESS: u32 = 2;
pub const XCB_KEY_RELEASE: u32 = 3;
pub const XCB_BUTTON_PRESS: u32 = 4;
pub const XCB_BUTTON_RELEASE: u32 = 5;
pub const XCB_MOTION_NOTIFY: u32 = 6;
pub const XCB_ENTER_NOTIFY: u32 = 7;
pub const XCB_LEAVE_NOTIFY: u32 = 8;
pub const XCB_FOCUS_IN: u32 = 9;
pub const XCB_FOCUS_OUT: u32 = 10;
pub const XCB_KEYMAP_NOTIFY: u32 = 11;
pub const XCB_EXPOSE: u32 = 12;
pub const XCB_GRAPHICS_EXPOSURE: u32 = 13;
pub const XCB_NO_EXPOSURE: u32 = 14;
pub const XCB_VISIBILITY_NOTIFY: u32 = 15;
pub const XCB_CREATE_NOTIFY: u32 = 16;
pub const XCB_DESTROY_NOTIFY: u32 = 17;
pub const XCB_UNMAP_NOTIFY: u32 = 18;
pub const XCB_MAP_NOTIFY: u32 = 19;
pub const XCB_MAP_REQUEST: u32 = 20;
pub const XCB_REPARENT_NOTIFY: u32 = 21;
pub const XCB_CONFIGURE_NOTIFY: u32 = 22;
pub const XCB_CONFIGURE_REQUEST: u32 = 23;
pub const XCB_GRAVITY_NOTIFY: u32 = 24;
pub const XCB_RESIZE_REQUEST: u32 = 25;
pub const XCB_CIRCULATE_NOTIFY: u32 = 26;
pub const XCB_CIRCULATE_REQUEST: u32 = 27;
pub const XCB_PROPERTY_NOTIFY: u32 = 28;
pub const XCB_SELECTION_CLEAR: u32 = 29;
pub const XCB_SELECTION_REQUEST: u32 = 30;
pub const XCB_SELECTION_NOTIFY: u32 = 31;
pub const XCB_COLORMAP_NOTIFY: u32 = 32;
pub const XCB_CLIENT_MESSAGE: u32 = 33;
pub const XCB_MAPPING_NOTIFY: u32 = 34;
pub const XCB_GE_GENERIC: u32 = 35;
pub const XCB_REQUEST: u32 = 1;
pub const XCB_VALUE: u32 = 2;
pub const XCB_WINDOW: u32 = 3;
pub const XCB_PIXMAP: u32 = 4;
pub const XCB_ATOM: u32 = 5;
pub const XCB_CURSOR: u32 = 6;
pub const XCB_FONT: u32 = 7;
pub const XCB_MATCH: u32 = 8;
pub const XCB_DRAWABLE: u32 = 9;
pub const XCB_ACCESS: u32 = 10;
pub const XCB_ALLOC: u32 = 11;
pub const XCB_COLORMAP: u32 = 12;
pub const XCB_G_CONTEXT: u32 = 13;
pub const XCB_ID_CHOICE: u32 = 14;
pub const XCB_NAME: u32 = 15;
pub const XCB_LENGTH: u32 = 16;
pub const XCB_IMPLEMENTATION: u32 = 17;
pub const XCB_CREATE_WINDOW: u32 = 1;
pub const XCB_CHANGE_WINDOW_ATTRIBUTES: u32 = 2;
pub const XCB_GET_WINDOW_ATTRIBUTES: u32 = 3;
pub const XCB_DESTROY_WINDOW: u32 = 4;
pub const XCB_DESTROY_SUBWINDOWS: u32 = 5;
pub const XCB_CHANGE_SAVE_SET: u32 = 6;
pub const XCB_REPARENT_WINDOW: u32 = 7;
pub const XCB_MAP_WINDOW: u32 = 8;
pub const XCB_MAP_SUBWINDOWS: u32 = 9;
pub const XCB_UNMAP_WINDOW: u32 = 10;
pub const XCB_UNMAP_SUBWINDOWS: u32 = 11;
pub const XCB_CONFIGURE_WINDOW: u32 = 12;
pub const XCB_CIRCULATE_WINDOW: u32 = 13;
pub const XCB_GET_GEOMETRY: u32 = 14;
pub const XCB_QUERY_TREE: u32 = 15;
pub const XCB_INTERN_ATOM: u32 = 16;
pub const XCB_GET_ATOM_NAME: u32 = 17;
pub const XCB_CHANGE_PROPERTY: u32 = 18;
pub const XCB_DELETE_PROPERTY: u32 = 19;
pub const XCB_GET_PROPERTY: u32 = 20;
pub const XCB_LIST_PROPERTIES: u32 = 21;
pub const XCB_SET_SELECTION_OWNER: u32 = 22;
pub const XCB_GET_SELECTION_OWNER: u32 = 23;
pub const XCB_CONVERT_SELECTION: u32 = 24;
pub const XCB_SEND_EVENT: u32 = 25;
pub const XCB_GRAB_POINTER: u32 = 26;
pub const XCB_UNGRAB_POINTER: u32 = 27;
pub const XCB_GRAB_BUTTON: u32 = 28;
pub const XCB_UNGRAB_BUTTON: u32 = 29;
pub const XCB_CHANGE_ACTIVE_POINTER_GRAB: u32 = 30;
pub const XCB_GRAB_KEYBOARD: u32 = 31;
pub const XCB_UNGRAB_KEYBOARD: u32 = 32;
pub const XCB_GRAB_KEY: u32 = 33;
pub const XCB_UNGRAB_KEY: u32 = 34;
pub const XCB_ALLOW_EVENTS: u32 = 35;
pub const XCB_GRAB_SERVER: u32 = 36;
pub const XCB_UNGRAB_SERVER: u32 = 37;
pub const XCB_QUERY_POINTER: u32 = 38;
pub const XCB_GET_MOTION_EVENTS: u32 = 39;
pub const XCB_TRANSLATE_COORDINATES: u32 = 40;
pub const XCB_WARP_POINTER: u32 = 41;
pub const XCB_SET_INPUT_FOCUS: u32 = 42;
pub const XCB_GET_INPUT_FOCUS: u32 = 43;
pub const XCB_QUERY_KEYMAP: u32 = 44;
pub const XCB_OPEN_FONT: u32 = 45;
pub const XCB_CLOSE_FONT: u32 = 46;
pub const XCB_QUERY_FONT: u32 = 47;
pub const XCB_QUERY_TEXT_EXTENTS: u32 = 48;
pub const XCB_LIST_FONTS: u32 = 49;
pub const XCB_LIST_FONTS_WITH_INFO: u32 = 50;
pub const XCB_SET_FONT_PATH: u32 = 51;
pub const XCB_GET_FONT_PATH: u32 = 52;
pub const XCB_CREATE_PIXMAP: u32 = 53;
pub const XCB_FREE_PIXMAP: u32 = 54;
pub const XCB_CREATE_GC: u32 = 55;
pub const XCB_CHANGE_GC: u32 = 56;
pub const XCB_COPY_GC: u32 = 57;
pub const XCB_SET_DASHES: u32 = 58;
pub const XCB_SET_CLIP_RECTANGLES: u32 = 59;
pub const XCB_FREE_GC: u32 = 60;
pub const XCB_CLEAR_AREA: u32 = 61;
pub const XCB_COPY_AREA: u32 = 62;
pub const XCB_COPY_PLANE: u32 = 63;
pub const XCB_POLY_POINT: u32 = 64;
pub const XCB_POLY_LINE: u32 = 65;
pub const XCB_POLY_SEGMENT: u32 = 66;
pub const XCB_POLY_RECTANGLE: u32 = 67;
pub const XCB_POLY_ARC: u32 = 68;
pub const XCB_FILL_POLY: u32 = 69;
pub const XCB_POLY_FILL_RECTANGLE: u32 = 70;
pub const XCB_POLY_FILL_ARC: u32 = 71;
pub const XCB_PUT_IMAGE: u32 = 72;
pub const XCB_GET_IMAGE: u32 = 73;
pub const XCB_POLY_TEXT_8: u32 = 74;
pub const XCB_POLY_TEXT_16: u32 = 75;
pub const XCB_IMAGE_TEXT_8: u32 = 76;
pub const XCB_IMAGE_TEXT_16: u32 = 77;
pub const XCB_CREATE_COLORMAP: u32 = 78;
pub const XCB_FREE_COLORMAP: u32 = 79;
pub const XCB_COPY_COLORMAP_AND_FREE: u32 = 80;
pub const XCB_INSTALL_COLORMAP: u32 = 81;
pub const XCB_UNINSTALL_COLORMAP: u32 = 82;
pub const XCB_LIST_INSTALLED_COLORMAPS: u32 = 83;
pub const XCB_ALLOC_COLOR: u32 = 84;
pub const XCB_ALLOC_NAMED_COLOR: u32 = 85;
pub const XCB_ALLOC_COLOR_CELLS: u32 = 86;
pub const XCB_ALLOC_COLOR_PLANES: u32 = 87;
pub const XCB_FREE_COLORS: u32 = 88;
pub const XCB_STORE_COLORS: u32 = 89;
pub const XCB_STORE_NAMED_COLOR: u32 = 90;
pub const XCB_QUERY_COLORS: u32 = 91;
pub const XCB_LOOKUP_COLOR: u32 = 92;
pub const XCB_CREATE_CURSOR: u32 = 93;
pub const XCB_CREATE_GLYPH_CURSOR: u32 = 94;
pub const XCB_FREE_CURSOR: u32 = 95;
pub const XCB_RECOLOR_CURSOR: u32 = 96;
pub const XCB_QUERY_BEST_SIZE: u32 = 97;
pub const XCB_QUERY_EXTENSION: u32 = 98;
pub const XCB_LIST_EXTENSIONS: u32 = 99;
pub const XCB_CHANGE_KEYBOARD_MAPPING: u32 = 100;
pub const XCB_GET_KEYBOARD_MAPPING: u32 = 101;
pub const XCB_CHANGE_KEYBOARD_CONTROL: u32 = 102;
pub const XCB_GET_KEYBOARD_CONTROL: u32 = 103;
pub const XCB_BELL: u32 = 104;
pub const XCB_CHANGE_POINTER_CONTROL: u32 = 105;
pub const XCB_GET_POINTER_CONTROL: u32 = 106;
pub const XCB_SET_SCREEN_SAVER: u32 = 107;
pub const XCB_GET_SCREEN_SAVER: u32 = 108;
pub const XCB_CHANGE_HOSTS: u32 = 109;
pub const XCB_LIST_HOSTS: u32 = 110;
pub const XCB_SET_ACCESS_CONTROL: u32 = 111;
pub const XCB_SET_CLOSE_DOWN_MODE: u32 = 112;
pub const XCB_KILL_CLIENT: u32 = 113;
pub const XCB_ROTATE_PROPERTIES: u32 = 114;
pub const XCB_FORCE_SCREEN_SAVER: u32 = 115;
pub const XCB_SET_POINTER_MAPPING: u32 = 116;
pub const XCB_GET_POINTER_MAPPING: u32 = 117;
pub const XCB_SET_MODIFIER_MAPPING: u32 = 118;
pub const XCB_GET_MODIFIER_MAPPING: u32 = 119;
pub const XCB_NO_OPERATION: u32 = 127;
pub const XCB_NONE: u32 = 0;
pub const XCB_COPY_FROM_PARENT: u32 = 0;
pub const XCB_CURRENT_TIME: u32 = 0;
pub const XCB_NO_SYMBOL: u32 = 0;
pub const XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS: u32 = 18;
pub const XCB_ICCCM_NUM_WM_HINTS_ELEMENTS: u32 = 9;

pub const XCB_RENDER_MAJOR_VERSION: u32 = 0;
pub const XCB_RENDER_MINOR_VERSION: u32 = 11;
pub const XCB_RENDER_PICT_FORMAT: u32 = 0;
pub const XCB_RENDER_PICTURE: u32 = 1;
pub const XCB_RENDER_PICT_OP: u32 = 2;
pub const XCB_RENDER_GLYPH_SET: u32 = 3;
pub const XCB_RENDER_GLYPH: u32 = 4;
pub const XCB_RENDER_QUERY_VERSION: u32 = 0;
pub const XCB_RENDER_QUERY_PICT_FORMATS: u32 = 1;
pub const XCB_RENDER_QUERY_PICT_INDEX_VALUES: u32 = 2;
pub const XCB_RENDER_CREATE_PICTURE: u32 = 4;
pub const XCB_RENDER_CHANGE_PICTURE: u32 = 5;
pub const XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES: u32 = 6;
pub const XCB_RENDER_FREE_PICTURE: u32 = 7;
pub const XCB_RENDER_COMPOSITE: u32 = 8;
pub const XCB_RENDER_TRAPEZOIDS: u32 = 10;
pub const XCB_RENDER_TRIANGLES: u32 = 11;
pub const XCB_RENDER_TRI_STRIP: u32 = 12;
pub const XCB_RENDER_TRI_FAN: u32 = 13;
pub const XCB_RENDER_CREATE_GLYPH_SET: u32 = 17;
pub const XCB_RENDER_REFERENCE_GLYPH_SET: u32 = 18;
pub const XCB_RENDER_FREE_GLYPH_SET: u32 = 19;
pub const XCB_RENDER_ADD_GLYPHS: u32 = 20;
pub const XCB_RENDER_FREE_GLYPHS: u32 = 22;
pub const XCB_RENDER_COMPOSITE_GLYPHS_8: u32 = 23;
pub const XCB_RENDER_COMPOSITE_GLYPHS_16: u32 = 24;
pub const XCB_RENDER_COMPOSITE_GLYPHS_32: u32 = 25;
pub const XCB_RENDER_FILL_RECTANGLES: u32 = 26;
pub const XCB_RENDER_CREATE_CURSOR: u32 = 27;
pub const XCB_RENDER_SET_PICTURE_TRANSFORM: u32 = 28;
pub const XCB_RENDER_QUERY_FILTERS: u32 = 29;
pub const XCB_RENDER_SET_PICTURE_FILTER: u32 = 30;
pub const XCB_RENDER_CREATE_ANIM_CURSOR: u32 = 31;
pub const XCB_RENDER_ADD_TRAPS: u32 = 32;
pub const XCB_RENDER_CREATE_SOLID_FILL: u32 = 33;
pub const XCB_RENDER_CREATE_LINEAR_GRADIENT: u32 = 34;
pub const XCB_RENDER_CREATE_RADIAL_GRADIENT: u32 = 35;
pub const XCB_RENDER_CREATE_CONICAL_GRADIENT: u32 = 36;
pub const XCB_RANDR_MAJOR_VERSION: u32 = 1;
pub const XCB_RANDR_MINOR_VERSION: u32 = 6;
pub const XCB_RANDR_BAD_OUTPUT: u32 = 0;
pub const XCB_RANDR_BAD_CRTC: u32 = 1;
pub const XCB_RANDR_BAD_MODE: u32 = 2;
pub const XCB_RANDR_BAD_PROVIDER: u32 = 3;
pub const XCB_RANDR_QUERY_VERSION: u32 = 0;
pub const XCB_RANDR_SET_SCREEN_CONFIG: u32 = 2;
pub const XCB_RANDR_SELECT_INPUT: u32 = 4;
pub const XCB_RANDR_GET_SCREEN_INFO: u32 = 5;
pub const XCB_RANDR_GET_SCREEN_SIZE_RANGE: u32 = 6;
pub const XCB_RANDR_SET_SCREEN_SIZE: u32 = 7;
pub const XCB_RANDR_GET_SCREEN_RESOURCES: u32 = 8;
pub const XCB_RANDR_GET_OUTPUT_INFO: u32 = 9;
pub const XCB_RANDR_LIST_OUTPUT_PROPERTIES: u32 = 10;
pub const XCB_RANDR_QUERY_OUTPUT_PROPERTY: u32 = 11;
pub const XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY: u32 = 12;
pub const XCB_RANDR_CHANGE_OUTPUT_PROPERTY: u32 = 13;
pub const XCB_RANDR_DELETE_OUTPUT_PROPERTY: u32 = 14;
pub const XCB_RANDR_GET_OUTPUT_PROPERTY: u32 = 15;
pub const XCB_RANDR_CREATE_MODE: u32 = 16;
pub const XCB_RANDR_DESTROY_MODE: u32 = 17;
pub const XCB_RANDR_ADD_OUTPUT_MODE: u32 = 18;
pub const XCB_RANDR_DELETE_OUTPUT_MODE: u32 = 19;
pub const XCB_RANDR_GET_CRTC_INFO: u32 = 20;
pub const XCB_RANDR_SET_CRTC_CONFIG: u32 = 21;
pub const XCB_RANDR_GET_CRTC_GAMMA_SIZE: u32 = 22;
pub const XCB_RANDR_GET_CRTC_GAMMA: u32 = 23;
pub const XCB_RANDR_SET_CRTC_GAMMA: u32 = 24;
pub const XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT: u32 = 25;
pub const XCB_RANDR_SET_CRTC_TRANSFORM: u32 = 26;
pub const XCB_RANDR_GET_CRTC_TRANSFORM: u32 = 27;
pub const XCB_RANDR_GET_PANNING: u32 = 28;
pub const XCB_RANDR_SET_PANNING: u32 = 29;
pub const XCB_RANDR_SET_OUTPUT_PRIMARY: u32 = 30;
pub const XCB_RANDR_GET_OUTPUT_PRIMARY: u32 = 31;
pub const XCB_RANDR_GET_PROVIDERS: u32 = 32;
pub const XCB_RANDR_GET_PROVIDER_INFO: u32 = 33;
pub const XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK: u32 = 34;
pub const XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE: u32 = 35;
pub const XCB_RANDR_LIST_PROVIDER_PROPERTIES: u32 = 36;
pub const XCB_RANDR_QUERY_PROVIDER_PROPERTY: u32 = 37;
pub const XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY: u32 = 38;
pub const XCB_RANDR_CHANGE_PROVIDER_PROPERTY: u32 = 39;
pub const XCB_RANDR_DELETE_PROVIDER_PROPERTY: u32 = 40;
pub const XCB_RANDR_GET_PROVIDER_PROPERTY: u32 = 41;
pub const XCB_RANDR_SCREEN_CHANGE_NOTIFY: u32 = 0;
pub const XCB_RANDR_GET_MONITORS: u32 = 42;
pub const XCB_RANDR_SET_MONITOR: u32 = 43;
pub const XCB_RANDR_DELETE_MONITOR: u32 = 44;
pub const XCB_RANDR_CREATE_LEASE: u32 = 45;
pub const XCB_RANDR_FREE_LEASE: u32 = 46;
pub const XCB_RANDR_NOTIFY: u32 = 1;
pub const XlibSpecificationRelease: u32 = 6;
pub const None: u32 = 0;
pub const ParentRelative: u32 = 1;
pub const CopyFromParent: u32 = 0;
pub const PointerWindow: u32 = 0;
pub const InputFocus: u32 = 1;
pub const PointerRoot: u32 = 1;
pub const AnyPropertyType: u32 = 0;
pub const AnyKey: u32 = 0;
pub const AnyButton: u32 = 0;
pub const AllTemporary: u32 = 0;
pub const CurrentTime: u32 = 0;
pub const NoSymbol: u32 = 0;
pub const NoEventMask: u32 = 0;
pub const KeyPressMask: u32 = 1;
pub const KeyReleaseMask: u32 = 2;
pub const ButtonPressMask: u32 = 4;
pub const ButtonReleaseMask: u32 = 8;
pub const EnterWindowMask: u32 = 16;
pub const LeaveWindowMask: u32 = 32;
pub const PointerMotionMask: u32 = 64;
pub const PointerMotionHintMask: u32 = 128;
pub const Button1MotionMask: u32 = 256;
pub const Button2MotionMask: u32 = 512;
pub const Button3MotionMask: u32 = 1024;
pub const Button4MotionMask: u32 = 2048;
pub const Button5MotionMask: u32 = 4096;
pub const ButtonMotionMask: u32 = 8192;
pub const KeymapStateMask: u32 = 16384;
pub const ExposureMask: u32 = 32768;
pub const VisibilityChangeMask: u32 = 65536;
pub const StructureNotifyMask: u32 = 131072;
pub const ResizeRedirectMask: u32 = 262144;
pub const SubstructureNotifyMask: u32 = 524288;
pub const SubstructureRedirectMask: u32 = 1048576;
pub const FocusChangeMask: u32 = 2097152;
pub const PropertyChangeMask: u32 = 4194304;
pub const ColormapChangeMask: u32 = 8388608;
pub const OwnerGrabButtonMask: u32 = 16777216;
pub const KeyPress: u32 = 2;
pub const KeyRelease: u32 = 3;
pub const ButtonPress: u32 = 4;
pub const ButtonRelease: u32 = 5;
pub const MotionNotify: u32 = 6;
pub const EnterNotify: u32 = 7;
pub const LeaveNotify: u32 = 8;
pub const FocusIn: u32 = 9;
pub const FocusOut: u32 = 10;
pub const KeymapNotify: u32 = 11;
pub const Expose: u32 = 12;
pub const GraphicsExpose: u32 = 13;
pub const NoExpose: u32 = 14;
pub const VisibilityNotify: u32 = 15;
pub const CreateNotify: u32 = 16;
pub const DestroyNotify: u32 = 17;
pub const UnmapNotify: u32 = 18;
pub const MapNotify: u32 = 19;
pub const MapRequest: u32 = 20;
pub const ReparentNotify: u32 = 21;
pub const ConfigureNotify: u32 = 22;
pub const ConfigureRequest: u32 = 23;
pub const GravityNotify: u32 = 24;
pub const ResizeRequest: u32 = 25;
pub const CirculateNotify: u32 = 26;
pub const CirculateRequest: u32 = 27;
pub const PropertyNotify: u32 = 28;
pub const SelectionClear: u32 = 29;
pub const SelectionRequest: u32 = 30;
pub const SelectionNotify: u32 = 31;
pub const ColormapNotify: u32 = 32;
pub const ClientMessage: u32 = 33;
pub const MappingNotify: u32 = 34;
pub const GenericEvent: u32 = 35;
pub const LASTEvent: u32 = 36;
pub const ShiftMask: u32 = 1;
pub const LockMask: u32 = 2;
pub const ControlMask: u32 = 4;
pub const Mod1Mask: u32 = 8;
pub const Mod2Mask: u32 = 16;
pub const Mod3Mask: u32 = 32;
pub const Mod4Mask: u32 = 64;
pub const Mod5Mask: u32 = 128;
pub const ShiftMapIndex: u32 = 0;
pub const LockMapIndex: u32 = 1;
pub const ControlMapIndex: u32 = 2;
pub const Mod1MapIndex: u32 = 3;
pub const Mod2MapIndex: u32 = 4;
pub const Mod3MapIndex: u32 = 5;
pub const Mod4MapIndex: u32 = 6;
pub const Mod5MapIndex: u32 = 7;
pub const Button1Mask: u32 = 256;
pub const Button2Mask: u32 = 512;
pub const Button3Mask: u32 = 1024;
pub const Button4Mask: u32 = 2048;
pub const Button5Mask: u32 = 4096;
pub const AnyModifier: u32 = 32768;
pub const Button1: u32 = 1;
pub const Button2: u32 = 2;
pub const Button3: u32 = 3;
pub const Button4: u32 = 4;
pub const Button5: u32 = 5;
pub const NotifyNormal: u32 = 0;
pub const NotifyGrab: u32 = 1;
pub const NotifyUngrab: u32 = 2;
pub const NotifyWhileGrabbed: u32 = 3;
pub const NotifyHint: u32 = 1;
pub const NotifyAncestor: u32 = 0;
pub const NotifyVirtual: u32 = 1;
pub const NotifyInferior: u32 = 2;
pub const NotifyNonlinear: u32 = 3;
pub const NotifyNonlinearVirtual: u32 = 4;
pub const NotifyPointer: u32 = 5;
pub const NotifyPointerRoot: u32 = 6;
pub const NotifyDetailNone: u32 = 7;
pub const VisibilityUnobscured: u32 = 0;
pub const VisibilityPartiallyObscured: u32 = 1;
pub const VisibilityFullyObscured: u32 = 2;
pub const PlaceOnTop: u32 = 0;
pub const PlaceOnBottom: u32 = 1;
pub const FamilyInternet: u32 = 0;
pub const FamilyDECnet: u32 = 1;
pub const FamilyChaos: u32 = 2;
pub const FamilyInternet6: u32 = 6;
pub const FamilyServerInterpreted: u32 = 5;
pub const PropertyNewValue: u32 = 0;
pub const PropertyDelete: u32 = 1;
pub const ColormapUninstalled: u32 = 0;
pub const ColormapInstalled: u32 = 1;
pub const GrabModeSync: u32 = 0;
pub const GrabModeAsync: u32 = 1;
pub const GrabSuccess: u32 = 0;
pub const AlreadyGrabbed: u32 = 1;
pub const GrabInvalidTime: u32 = 2;
pub const GrabNotViewable: u32 = 3;
pub const GrabFrozen: u32 = 4;
pub const AsyncPointer: u32 = 0;
pub const SyncPointer: u32 = 1;
pub const ReplayPointer: u32 = 2;
pub const AsyncKeyboard: u32 = 3;
pub const SyncKeyboard: u32 = 4;
pub const ReplayKeyboard: u32 = 5;
pub const AsyncBoth: u32 = 6;
pub const SyncBoth: u32 = 7;
pub const RevertToParent: u32 = 2;
pub const Success: u32 = 0;
pub const BadRequest: u32 = 1;
pub const BadValue: u32 = 2;
pub const BadWindow: u32 = 3;
pub const BadPixmap: u32 = 4;
pub const BadAtom: u32 = 5;
pub const BadCursor: u32 = 6;
pub const BadFont: u32 = 7;
pub const BadMatch: u32 = 8;
pub const BadDrawable: u32 = 9;
pub const BadAccess: u32 = 10;
pub const BadAlloc: u32 = 11;
pub const BadColor: u32 = 12;
pub const BadGC: u32 = 13;
pub const BadIDChoice: u32 = 14;
pub const BadName: u32 = 15;
pub const BadLength: u32 = 16;
pub const BadImplementation: u32 = 17;
pub const FirstExtensionError: u32 = 128;
pub const LastExtensionError: u32 = 255;
pub const InputOutput: u32 = 1;
pub const InputOnly: u32 = 2;
pub const CWBackPixmap: u32 = 1;
pub const CWBackPixel: u32 = 2;
pub const CWBorderPixmap: u32 = 4;
pub const CWBorderPixel: u32 = 8;
pub const CWBitGravity: u32 = 16;
pub const CWWinGravity: u32 = 32;
pub const CWBackingStore: u32 = 64;
pub const CWBackingPlanes: u32 = 128;
pub const CWBackingPixel: u32 = 256;
pub const CWOverrideRedirect: u32 = 512;
pub const CWSaveUnder: u32 = 1024;
pub const CWEventMask: u32 = 2048;
pub const CWDontPropagate: u32 = 4096;
pub const CWColormap: u32 = 8192;
pub const CWCursor: u32 = 16384;
pub const CWX: u32 = 1;
pub const CWY: u32 = 2;
pub const CWWidth: u32 = 4;
pub const CWHeight: u32 = 8;
pub const CWBorderWidth: u32 = 16;
pub const CWSibling: u32 = 32;
pub const CWStackMode: u32 = 64;
pub const ForgetGravity: u32 = 0;
pub const NorthWestGravity: u32 = 1;
pub const NorthGravity: u32 = 2;
pub const NorthEastGravity: u32 = 3;
pub const WestGravity: u32 = 4;
pub const CenterGravity: u32 = 5;
pub const EastGravity: u32 = 6;
pub const SouthWestGravity: u32 = 7;
pub const SouthGravity: u32 = 8;
pub const SouthEastGravity: u32 = 9;
pub const StaticGravity: u32 = 10;
pub const UnmapGravity: u32 = 0;
pub const NotUseful: u32 = 0;
pub const WhenMapped: u32 = 1;
pub const Always: u32 = 2;
pub const IsUnmapped: u32 = 0;
pub const IsUnviewable: u32 = 1;
pub const IsViewable: u32 = 2;
pub const SetModeInsert: u32 = 0;
pub const SetModeDelete: u32 = 1;
pub const DestroyAll: u32 = 0;
pub const RetainPermanent: u32 = 1;
pub const RetainTemporary: u32 = 2;
pub const Above: u32 = 0;
pub const Below: u32 = 1;
pub const TopIf: u32 = 2;
pub const BottomIf: u32 = 3;
pub const Opposite: u32 = 4;
pub const RaiseLowest: u32 = 0;
pub const LowerHighest: u32 = 1;
pub const PropModeReplace: u32 = 0;
pub const PropModePrepend: u32 = 1;
pub const PropModeAppend: u32 = 2;
pub const GXclear: u32 = 0;
pub const GXand: u32 = 1;
pub const GXandReverse: u32 = 2;
pub const GXcopy: u32 = 3;
pub const GXandInverted: u32 = 4;
pub const GXnoop: u32 = 5;
pub const GXxor: u32 = 6;
pub const GXor: u32 = 7;
pub const GXnor: u32 = 8;
pub const GXequiv: u32 = 9;
pub const GXinvert: u32 = 10;
pub const GXorReverse: u32 = 11;
pub const GXcopyInverted: u32 = 12;
pub const GXorInverted: u32 = 13;
pub const GXnand: u32 = 14;
pub const GXset: u32 = 15;
pub const LineSolid: u32 = 0;
pub const LineOnOffDash: u32 = 1;
pub const LineDoubleDash: u32 = 2;
pub const CapNotLast: u32 = 0;
pub const CapButt: u32 = 1;
pub const CapRound: u32 = 2;
pub const CapProjecting: u32 = 3;
pub const JoinMiter: u32 = 0;
pub const JoinRound: u32 = 1;
pub const JoinBevel: u32 = 2;
pub const FillSolid: u32 = 0;
pub const FillTiled: u32 = 1;
pub const FillStippled: u32 = 2;
pub const FillOpaqueStippled: u32 = 3;
pub const EvenOddRule: u32 = 0;
pub const WindingRule: u32 = 1;
pub const ClipByChildren: u32 = 0;
pub const IncludeInferiors: u32 = 1;
pub const Unsorted: u32 = 0;
pub const YSorted: u32 = 1;
pub const YXSorted: u32 = 2;
pub const YXBanded: u32 = 3;
pub const CoordModeOrigin: u32 = 0;
pub const CoordModePrevious: u32 = 1;
pub const Complex: u32 = 0;
pub const Nonconvex: u32 = 1;
pub const Convex: u32 = 2;
pub const ArcChord: u32 = 0;
pub const ArcPieSlice: u32 = 1;
pub const GCFunction: u32 = 1;
pub const GCPlaneMask: u32 = 2;
pub const GCForeground: u32 = 4;
pub const GCBackground: u32 = 8;
pub const GCLineWidth: u32 = 16;
pub const GCLineStyle: u32 = 32;
pub const GCCapStyle: u32 = 64;
pub const GCJoinStyle: u32 = 128;
pub const GCFillStyle: u32 = 256;
pub const GCFillRule: u32 = 512;
pub const GCTile: u32 = 1024;
pub const GCStipple: u32 = 2048;
pub const GCTileStipXOrigin: u32 = 4096;
pub const GCTileStipYOrigin: u32 = 8192;
pub const GCFont: u32 = 16384;
pub const GCSubwindowMode: u32 = 32768;
pub const GCGraphicsExposures: u32 = 65536;
pub const GCClipXOrigin: u32 = 131072;
pub const GCClipYOrigin: u32 = 262144;
pub const GCClipMask: u32 = 524288;
pub const GCDashOffset: u32 = 1048576;
pub const GCDashList: u32 = 2097152;
pub const GCArcMode: u32 = 4194304;
pub const GCLastBit: u32 = 22;
pub const FontLeftToRight: u32 = 0;
pub const FontRightToLeft: u32 = 1;
pub const FontChange: u32 = 255;
pub const XYBitmap: u32 = 0;
pub const XYPixmap: u32 = 1;
pub const ZPixmap: u32 = 2;
pub const AllocNone: u32 = 0;
pub const AllocAll: u32 = 1;
pub const DoRed: u32 = 1;
pub const DoGreen: u32 = 2;
pub const DoBlue: u32 = 4;
pub const CursorShape: u32 = 0;
pub const TileShape: u32 = 1;
pub const StippleShape: u32 = 2;
pub const AutoRepeatModeOff: u32 = 0;
pub const AutoRepeatModeOn: u32 = 1;
pub const AutoRepeatModeDefault: u32 = 2;
pub const LedModeOff: u32 = 0;
pub const LedModeOn: u32 = 1;
pub const KBKeyClickPercent: u32 = 1;
pub const KBBellPercent: u32 = 2;
pub const KBBellPitch: u32 = 4;
pub const KBBellDuration: u32 = 8;
pub const KBLed: u32 = 16;
pub const KBLedMode: u32 = 32;
pub const KBKey: u32 = 64;
pub const KBAutoRepeatMode: u32 = 128;
pub const MappingSuccess: u32 = 0;
pub const MappingBusy: u32 = 1;
pub const MappingFailed: u32 = 2;
pub const MappingModifier: u32 = 0;
pub const MappingKeyboard: u32 = 1;
pub const MappingPointer: u32 = 2;
pub const DontPreferBlanking: u32 = 0;
pub const PreferBlanking: u32 = 1;
pub const DefaultBlanking: u32 = 2;
pub const DisableScreenSaver: u32 = 0;
pub const DisableScreenInterval: u32 = 0;
pub const DontAllowExposures: u32 = 0;
pub const AllowExposures: u32 = 1;
pub const DefaultExposures: u32 = 2;
pub const ScreenSaverReset: u32 = 0;
pub const ScreenSaverActive: u32 = 1;
pub const HostInsert: u32 = 0;
pub const HostDelete: u32 = 1;
pub const EnableAccess: u32 = 1;
pub const DisableAccess: u32 = 0;
pub const StaticGray: u32 = 0;
pub const GrayScale: u32 = 1;
pub const StaticColor: u32 = 2;
pub const PseudoColor: u32 = 3;
pub const TrueColor: u32 = 4;
pub const DirectColor: u32 = 5;
pub const LSBFirst: u32 = 0;
pub const MSBFirst: u32 = 1;
pub const NeedFunctionPrototypes: u32 = 1;
pub const NeedVarargsPrototypes: u32 = 1;
pub const NeedNestedPrototypes: u32 = 1;
pub const FUNCPROTO: u32 = 15;
pub const NeedWidePrototypes: u32 = 0;
pub const X_HAVE_UTF8_STRING: u32 = 1;
pub const True: u32 = 1;
pub const False: u32 = 0;
pub const QueuedAlready: u32 = 0;
pub const QueuedAfterReading: u32 = 1;
pub const QueuedAfterFlush: u32 = 2;
pub const XNRequiredCharSet: &[u8; 16] = b"requiredCharSet\0";
pub const XNQueryOrientation: &[u8; 17] = b"queryOrientation\0";
pub const XNBaseFontName: &[u8; 13] = b"baseFontName\0";
pub const XNOMAutomatic: &[u8; 12] = b"omAutomatic\0";
pub const XNMissingCharSet: &[u8; 15] = b"missingCharSet\0";
pub const XNDefaultString: &[u8; 14] = b"defaultString\0";
pub const XNOrientation: &[u8; 12] = b"orientation\0";
pub const XNDirectionalDependentDrawing: &[u8; 28] = b"directionalDependentDrawing\0";
pub const XNContextualDrawing: &[u8; 18] = b"contextualDrawing\0";
pub const XNFontInfo: &[u8; 9] = b"fontInfo\0";
pub const XIMPreeditArea: u32 = 1;
pub const XIMPreeditCallbacks: u32 = 2;
pub const XIMPreeditPosition: u32 = 4;
pub const XIMPreeditNothing: u32 = 8;
pub const XIMPreeditNone: u32 = 16;
pub const XIMStatusArea: u32 = 256;
pub const XIMStatusCallbacks: u32 = 512;
pub const XIMStatusNothing: u32 = 1024;
pub const XIMStatusNone: u32 = 2048;
pub const XNVaNestedList: &[u8; 15] = b"XNVaNestedList\0";
pub const XNQueryInputStyle: &[u8; 16] = b"queryInputStyle\0";
pub const XNClientWindow: &[u8; 13] = b"clientWindow\0";
pub const XNInputStyle: &[u8; 11] = b"inputStyle\0";
pub const XNFocusWindow: &[u8; 12] = b"focusWindow\0";
pub const XNResourceName: &[u8; 13] = b"resourceName\0";
pub const XNResourceClass: &[u8; 14] = b"resourceClass\0";
pub const XNGeometryCallback: &[u8; 17] = b"geometryCallback\0";
pub const XNDestroyCallback: &[u8; 16] = b"destroyCallback\0";
pub const XNFilterEvents: &[u8; 13] = b"filterEvents\0";
pub const XNPreeditStartCallback: &[u8; 21] = b"preeditStartCallback\0";
pub const XNPreeditDoneCallback: &[u8; 20] = b"preeditDoneCallback\0";
pub const XNPreeditDrawCallback: &[u8; 20] = b"preeditDrawCallback\0";
pub const XNPreeditCaretCallback: &[u8; 21] = b"preeditCaretCallback\0";
pub const XNPreeditStateNotifyCallback: &[u8; 27] = b"preeditStateNotifyCallback\0";
pub const XNPreeditAttributes: &[u8; 18] = b"preeditAttributes\0";
pub const XNStatusStartCallback: &[u8; 20] = b"statusStartCallback\0";
pub const XNStatusDoneCallback: &[u8; 19] = b"statusDoneCallback\0";
pub const XNStatusDrawCallback: &[u8; 19] = b"statusDrawCallback\0";
pub const XNStatusAttributes: &[u8; 17] = b"statusAttributes\0";
pub const XNArea: &[u8; 5] = b"area\0";
pub const XNAreaNeeded: &[u8; 11] = b"areaNeeded\0";
pub const XNSpotLocation: &[u8; 13] = b"spotLocation\0";
pub const XNColormap: &[u8; 9] = b"colorMap\0";
pub const XNStdColormap: &[u8; 12] = b"stdColorMap\0";
pub const XNForeground: &[u8; 11] = b"foreground\0";
pub const XNBackground: &[u8; 11] = b"background\0";
pub const XNBackgroundPixmap: &[u8; 17] = b"backgroundPixmap\0";
pub const XNFontSet: &[u8; 8] = b"fontSet\0";
pub const XNLineSpace: &[u8; 10] = b"lineSpace\0";
pub const XNCursor: &[u8; 7] = b"cursor\0";
pub const XNQueryIMValuesList: &[u8; 18] = b"queryIMValuesList\0";
pub const XNQueryICValuesList: &[u8; 18] = b"queryICValuesList\0";
pub const XNVisiblePosition: &[u8; 16] = b"visiblePosition\0";
pub const XNR6PreeditCallback: &[u8; 18] = b"r6PreeditCallback\0";
pub const XNStringConversionCallback: &[u8; 25] = b"stringConversionCallback\0";
pub const XNStringConversion: &[u8; 17] = b"stringConversion\0";
pub const XNResetState: &[u8; 11] = b"resetState\0";
pub const XNHotKey: &[u8; 7] = b"hotKey\0";
pub const XNHotKeyState: &[u8; 12] = b"hotKeyState\0";
pub const XNPreeditState: &[u8; 13] = b"preeditState\0";
pub const XNSeparatorofNestedList: &[u8; 22] = b"separatorofNestedList\0";
pub const XBufferOverflow: i32 = -1;
pub const XLookupNone: u32 = 1;
pub const XLookupChars: u32 = 2;
pub const XLookupKeySym: u32 = 3;
pub const XLookupBoth: u32 = 4;
pub const XIMReverse: u32 = 1;
pub const XIMUnderline: u32 = 2;
pub const XIMHighlight: u32 = 4;
pub const XIMPrimary: u32 = 32;
pub const XIMSecondary: u32 = 64;
pub const XIMTertiary: u32 = 128;
pub const XIMVisibleToForward: u32 = 256;
pub const XIMVisibleToBackword: u32 = 512;
pub const XIMVisibleToCenter: u32 = 1024;
pub const XIMPreeditUnKnown: u32 = 0;
pub const XIMPreeditEnable: u32 = 1;
pub const XIMPreeditDisable: u32 = 2;
pub const XIMInitialState: u32 = 1;
pub const XIMPreserveState: u32 = 2;
pub const XIMStringConversionLeftEdge: u32 = 1;
pub const XIMStringConversionRightEdge: u32 = 2;
pub const XIMStringConversionTopEdge: u32 = 4;
pub const XIMStringConversionBottomEdge: u32 = 8;
pub const XIMStringConversionConcealed: u32 = 16;
pub const XIMStringConversionWrapped: u32 = 32;
pub const XIMStringConversionBuffer: u32 = 1;
pub const XIMStringConversionLine: u32 = 2;
pub const XIMStringConversionWord: u32 = 3;
pub const XIMStringConversionChar: u32 = 4;
pub const XIMStringConversionSubstitution: u32 = 1;
pub const XIMStringConversionRetrieval: u32 = 2;
pub const XIMHotKeyStateON: u32 = 1;
pub const XIMHotKeyStateOFF: u32 = 2;
pub const XTestNumberEvents: u32 = 0;
pub const XTestNumberErrors: u32 = 0;
pub const XTestMajorVersion: u32 = 2;
pub const XTestMinorVersion: u32 = 2;
pub const XTestExtensionName: &[u8; 6] = b"XTEST\0";
pub const sz_xGetExtensionVersionReq: u32 = 8;
pub const sz_xGetExtensionVersionReply: u32 = 32;
pub const sz_xListInputDevicesReq: u32 = 4;
pub const sz_xListInputDevicesReply: u32 = 32;
pub const sz_xOpenDeviceReq: u32 = 8;
pub const sz_xOpenDeviceReply: u32 = 32;
pub const sz_xCloseDeviceReq: u32 = 8;
pub const sz_xSetDeviceModeReq: u32 = 8;
pub const sz_xSetDeviceModeReply: u32 = 32;
pub const sz_xSelectExtensionEventReq: u32 = 12;
pub const sz_xGetSelectedExtensionEventsReq: u32 = 8;
pub const sz_xGetSelectedExtensionEventsReply: u32 = 32;
pub const sz_xChangeDeviceDontPropagateListReq: u32 = 12;
pub const sz_xGetDeviceDontPropagateListReq: u32 = 8;
pub const sz_xGetDeviceDontPropagateListReply: u32 = 32;
pub const sz_xGetDeviceMotionEventsReq: u32 = 16;
pub const sz_xGetDeviceMotionEventsReply: u32 = 32;
pub const sz_xChangeKeyboardDeviceReq: u32 = 8;
pub const sz_xChangeKeyboardDeviceReply: u32 = 32;
pub const sz_xChangePointerDeviceReq: u32 = 8;
pub const sz_xChangePointerDeviceReply: u32 = 32;
pub const sz_xGrabDeviceReq: u32 = 20;
pub const sz_xGrabDeviceReply: u32 = 32;
pub const sz_xUngrabDeviceReq: u32 = 12;
pub const sz_xGrabDeviceKeyReq: u32 = 20;
pub const sz_xGrabDeviceKeyReply: u32 = 32;
pub const sz_xUngrabDeviceKeyReq: u32 = 16;
pub const sz_xGrabDeviceButtonReq: u32 = 20;
pub const sz_xGrabDeviceButtonReply: u32 = 32;
pub const sz_xUngrabDeviceButtonReq: u32 = 16;
pub const sz_xAllowDeviceEventsReq: u32 = 12;
pub const sz_xGetDeviceFocusReq: u32 = 8;
pub const sz_xGetDeviceFocusReply: u32 = 32;
pub const sz_xSetDeviceFocusReq: u32 = 16;
pub const sz_xGetFeedbackControlReq: u32 = 8;
pub const sz_xGetFeedbackControlReply: u32 = 32;
pub const sz_xChangeFeedbackControlReq: u32 = 12;
pub const sz_xGetDeviceKeyMappingReq: u32 = 8;
pub const sz_xGetDeviceKeyMappingReply: u32 = 32;
pub const sz_xChangeDeviceKeyMappingReq: u32 = 8;
pub const sz_xGetDeviceModifierMappingReq: u32 = 8;
pub const sz_xSetDeviceModifierMappingReq: u32 = 8;
pub const sz_xSetDeviceModifierMappingReply: u32 = 32;
pub const sz_xGetDeviceButtonMappingReq: u32 = 8;
pub const sz_xGetDeviceButtonMappingReply: u32 = 32;
pub const sz_xSetDeviceButtonMappingReq: u32 = 8;
pub const sz_xSetDeviceButtonMappingReply: u32 = 32;
pub const sz_xQueryDeviceStateReq: u32 = 8;
pub const sz_xQueryDeviceStateReply: u32 = 32;
pub const sz_xSendExtensionEventReq: u32 = 16;
pub const sz_xDeviceBellReq: u32 = 8;
pub const sz_xSetDeviceValuatorsReq: u32 = 8;
pub const sz_xSetDeviceValuatorsReply: u32 = 32;
pub const sz_xGetDeviceControlReq: u32 = 8;
pub const sz_xGetDeviceControlReply: u32 = 32;
pub const sz_xChangeDeviceControlReq: u32 = 8;
pub const sz_xChangeDeviceControlReply: u32 = 32;
pub const sz_xListDevicePropertiesReq: u32 = 8;
pub const sz_xListDevicePropertiesReply: u32 = 32;
pub const sz_xChangeDevicePropertyReq: u32 = 20;
pub const sz_xDeleteDevicePropertyReq: u32 = 12;
pub const sz_xGetDevicePropertyReq: u32 = 24;
pub const sz_xGetDevicePropertyReply: u32 = 32;
pub const INAME: &[u8; 16] = b"XInputExtension\0";
pub const XI_KEYBOARD: &[u8; 9] = b"KEYBOARD\0";
pub const XI_MOUSE: &[u8; 6] = b"MOUSE\0";
pub const XI_TABLET: &[u8; 7] = b"TABLET\0";
pub const XI_TOUCHSCREEN: &[u8; 12] = b"TOUCHSCREEN\0";
pub const XI_TOUCHPAD: &[u8; 9] = b"TOUCHPAD\0";
pub const XI_BARCODE: &[u8; 8] = b"BARCODE\0";
pub const XI_BUTTONBOX: &[u8; 10] = b"BUTTONBOX\0";
pub const XI_KNOB_BOX: &[u8; 9] = b"KNOB_BOX\0";
pub const XI_ONE_KNOB: &[u8; 9] = b"ONE_KNOB\0";
pub const XI_NINE_KNOB: &[u8; 10] = b"NINE_KNOB\0";
pub const XI_TRACKBALL: &[u8; 10] = b"TRACKBALL\0";
pub const XI_QUADRATURE: &[u8; 11] = b"QUADRATURE\0";
pub const XI_ID_MODULE: &[u8; 10] = b"ID_MODULE\0";
pub const XI_SPACEBALL: &[u8; 10] = b"SPACEBALL\0";
pub const XI_DATAGLOVE: &[u8; 10] = b"DATAGLOVE\0";
pub const XI_EYETRACKER: &[u8; 11] = b"EYETRACKER\0";
pub const XI_CURSORKEYS: &[u8; 11] = b"CURSORKEYS\0";
pub const XI_FOOTMOUSE: &[u8; 10] = b"FOOTMOUSE\0";
pub const XI_JOYSTICK: &[u8; 9] = b"JOYSTICK\0";
pub const Dont_Check: u32 = 0;
pub const XInput_Initial_Release: u32 = 1;
pub const XInput_Add_XDeviceBell: u32 = 2;
pub const XInput_Add_XSetDeviceValuators: u32 = 3;
pub const XInput_Add_XChangeDeviceControl: u32 = 4;
pub const XInput_Add_DevicePresenceNotify: u32 = 5;
pub const XInput_Add_DeviceProperties: u32 = 6;
pub const XI_Absent: u32 = 0;
pub const XI_Present: u32 = 1;
pub const XI_Initial_Release_Major: u32 = 1;
pub const XI_Initial_Release_Minor: u32 = 0;
pub const XI_Add_XDeviceBell_Major: u32 = 1;
pub const XI_Add_XDeviceBell_Minor: u32 = 1;
pub const XI_Add_XSetDeviceValuators_Major: u32 = 1;
pub const XI_Add_XSetDeviceValuators_Minor: u32 = 2;
pub const XI_Add_XChangeDeviceControl_Major: u32 = 1;
pub const XI_Add_XChangeDeviceControl_Minor: u32 = 3;
pub const XI_Add_DevicePresenceNotify_Major: u32 = 1;
pub const XI_Add_DevicePresenceNotify_Minor: u32 = 4;
pub const XI_Add_DeviceProperties_Major: u32 = 1;
pub const XI_Add_DeviceProperties_Minor: u32 = 5;
pub const DEVICE_RESOLUTION: u32 = 1;
pub const DEVICE_ABS_CALIB: u32 = 2;
pub const DEVICE_CORE: u32 = 3;
pub const DEVICE_ENABLE: u32 = 4;
pub const DEVICE_ABS_AREA: u32 = 5;
pub const NoSuchExtension: u32 = 1;
pub const COUNT: u32 = 0;
pub const CREATE: u32 = 1;
pub const NewPointer: u32 = 0;
pub const NewKeyboard: u32 = 1;
pub const XPOINTER: u32 = 0;
pub const XKEYBOARD: u32 = 1;
pub const UseXKeyboard: u32 = 255;
pub const IsXPointer: u32 = 0;
pub const IsXKeyboard: u32 = 1;
pub const IsXExtensionDevice: u32 = 2;
pub const IsXExtensionKeyboard: u32 = 3;
pub const IsXExtensionPointer: u32 = 4;
pub const AsyncThisDevice: u32 = 0;
pub const SyncThisDevice: u32 = 1;
pub const ReplayThisDevice: u32 = 2;
pub const AsyncOtherDevices: u32 = 3;
pub const AsyncAll: u32 = 4;
pub const SyncAll: u32 = 5;
pub const FollowKeyboard: u32 = 3;
pub const RevertToFollowKeyboard: u32 = 3;
pub const DvAccelNum: u32 = 1;
pub const DvAccelDenom: u32 = 2;
pub const DvThreshold: u32 = 4;
pub const DvKeyClickPercent: u32 = 1;
pub const DvPercent: u32 = 2;
pub const DvPitch: u32 = 4;
pub const DvDuration: u32 = 8;
pub const DvLed: u32 = 16;
pub const DvLedMode: u32 = 32;
pub const DvKey: u32 = 64;
pub const DvAutoRepeatMode: u32 = 128;
pub const DvString: u32 = 1;
pub const DvInteger: u32 = 1;
pub const DeviceMode: u32 = 1;
pub const Relative: u32 = 0;
pub const Absolute: u32 = 1;
pub const ProximityState: u32 = 2;
pub const InProximity: u32 = 0;
pub const OutOfProximity: u32 = 2;
pub const AddToList: u32 = 0;
pub const DeleteFromList: u32 = 1;
pub const KeyClass: u32 = 0;
pub const ButtonClass: u32 = 1;
pub const ValuatorClass: u32 = 2;
pub const FeedbackClass: u32 = 3;
pub const ProximityClass: u32 = 4;
pub const FocusClass: u32 = 5;
pub const OtherClass: u32 = 6;
pub const AttachClass: u32 = 7;
pub const KbdFeedbackClass: u32 = 0;
pub const PtrFeedbackClass: u32 = 1;
pub const StringFeedbackClass: u32 = 2;
pub const IntegerFeedbackClass: u32 = 3;
pub const LedFeedbackClass: u32 = 4;
pub const BellFeedbackClass: u32 = 5;
pub const _devicePointerMotionHint: u32 = 0;
pub const _deviceButton1Motion: u32 = 1;
pub const _deviceButton2Motion: u32 = 2;
pub const _deviceButton3Motion: u32 = 3;
pub const _deviceButton4Motion: u32 = 4;
pub const _deviceButton5Motion: u32 = 5;
pub const _deviceButtonMotion: u32 = 6;
pub const _deviceButtonGrab: u32 = 7;
pub const _deviceOwnerGrabButton: u32 = 8;
pub const _noExtensionEvent: u32 = 9;
pub const _devicePresence: u32 = 0;
pub const _deviceEnter: u32 = 0;
pub const _deviceLeave: u32 = 1;
pub const DeviceAdded: u32 = 0;
pub const DeviceRemoved: u32 = 1;
pub const DeviceEnabled: u32 = 2;
pub const DeviceDisabled: u32 = 3;
pub const DeviceUnrecoverable: u32 = 4;
pub const DeviceControlChanged: u32 = 5;
pub const XI_BadDevice: u32 = 0;
pub const XI_BadEvent: u32 = 1;
pub const XI_BadMode: u32 = 2;
pub const XI_DeviceBusy: u32 = 3;
pub const XI_BadClass: u32 = 4;
pub const _deviceKeyPress: u32 = 0;
pub const _deviceKeyRelease: u32 = 1;
pub const _deviceButtonPress: u32 = 0;
pub const _deviceButtonRelease: u32 = 1;
pub const _deviceMotionNotify: u32 = 0;
pub const _deviceFocusIn: u32 = 0;
pub const _deviceFocusOut: u32 = 1;
pub const _proximityIn: u32 = 0;
pub const _proximityOut: u32 = 1;
pub const _deviceStateNotify: u32 = 0;
pub const _deviceMappingNotify: u32 = 1;
pub const _changeDeviceNotify: u32 = 2;
pub const _propertyNotify: u32 = 6;

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_connection_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_iterator_t {
    pub data: *mut ::std::os::raw::c_void,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_iterator_t"][::std::mem::size_of::<xcb_generic_iterator_t>() - 16usize];
    ["Alignment of xcb_generic_iterator_t"]
        [::std::mem::align_of::<xcb_generic_iterator_t>() - 8usize];
    ["Offset of field: xcb_generic_iterator_t::data"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, data) - 0usize];
    ["Offset of field: xcb_generic_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_generic_iterator_t::index"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_reply_t"][::std::mem::size_of::<xcb_generic_reply_t>() - 8usize];
    ["Alignment of xcb_generic_reply_t"][::std::mem::align_of::<xcb_generic_reply_t>() - 4usize];
    ["Offset of field: xcb_generic_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_generic_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_reply_t::length"]
        [::std::mem::offset_of!(xcb_generic_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub pad: [u32; 7usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_event_t"][::std::mem::size_of::<xcb_generic_event_t>() - 36usize];
    ["Alignment of xcb_generic_event_t"][::std::mem::align_of::<xcb_generic_event_t>() - 4usize];
    ["Offset of field: xcb_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_event_t, pad0) - 1usize];
    ["Offset of field: xcb_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_event_t::pad"]
        [::std::mem::offset_of!(xcb_generic_event_t, pad) - 4usize];
    ["Offset of field: xcb_generic_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_generic_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_raw_generic_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub pad: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_raw_generic_event_t"][::std::mem::size_of::<xcb_raw_generic_event_t>() - 32usize];
    ["Alignment of xcb_raw_generic_event_t"]
        [::std::mem::align_of::<xcb_raw_generic_event_t>() - 4usize];
    ["Offset of field: xcb_raw_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_raw_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, pad0) - 1usize];
    ["Offset of field: xcb_raw_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_raw_generic_event_t::pad"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ge_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub event_type: u16,
    pub pad1: u16,
    pub pad: [u32; 5usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ge_event_t"][::std::mem::size_of::<xcb_ge_event_t>() - 36usize];
    ["Alignment of xcb_ge_event_t"][::std::mem::align_of::<xcb_ge_event_t>() - 4usize];
    ["Offset of field: xcb_ge_event_t::response_type"]
        [::std::mem::offset_of!(xcb_ge_event_t, response_type) - 0usize];
    ["Offset of field: xcb_ge_event_t::pad0"]
        [::std::mem::offset_of!(xcb_ge_event_t, pad0) - 1usize];
    ["Offset of field: xcb_ge_event_t::sequence"]
        [::std::mem::offset_of!(xcb_ge_event_t, sequence) - 2usize];
    ["Offset of field: xcb_ge_event_t::length"]
        [::std::mem::offset_of!(xcb_ge_event_t, length) - 4usize];
    ["Offset of field: xcb_ge_event_t::event_type"]
        [::std::mem::offset_of!(xcb_ge_event_t, event_type) - 8usize];
    ["Offset of field: xcb_ge_event_t::pad1"]
        [::std::mem::offset_of!(xcb_ge_event_t, pad1) - 10usize];
    ["Offset of field: xcb_ge_event_t::pad"][::std::mem::offset_of!(xcb_ge_event_t, pad) - 12usize];
    ["Offset of field: xcb_ge_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_ge_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub resource_id: u32,
    pub minor_code: u16,
    pub major_code: u8,
    pub pad0: u8,
    pub pad: [u32; 5usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_error_t"][::std::mem::size_of::<xcb_generic_error_t>() - 36usize];
    ["Alignment of xcb_generic_error_t"][::std::mem::align_of::<xcb_generic_error_t>() - 4usize];
    ["Offset of field: xcb_generic_error_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_error_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_error_t::error_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, error_code) - 1usize];
    ["Offset of field: xcb_generic_error_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_error_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_error_t::resource_id"]
        [::std::mem::offset_of!(xcb_generic_error_t, resource_id) - 4usize];
    ["Offset of field: xcb_generic_error_t::minor_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, minor_code) - 8usize];
    ["Offset of field: xcb_generic_error_t::major_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, major_code) - 10usize];
    ["Offset of field: xcb_generic_error_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_error_t, pad0) - 11usize];
    ["Offset of field: xcb_generic_error_t::pad"]
        [::std::mem::offset_of!(xcb_generic_error_t, pad) - 12usize];
    ["Offset of field: xcb_generic_error_t::full_sequence"]
        [::std::mem::offset_of!(xcb_generic_error_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_void_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_void_cookie_t"][::std::mem::size_of::<xcb_void_cookie_t>() - 4usize];
    ["Alignment of xcb_void_cookie_t"][::std::mem::align_of::<xcb_void_cookie_t>() - 4usize];
    ["Offset of field: xcb_void_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_void_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_char2b_t {
    pub byte1: u8,
    pub byte2: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_char2b_t"][::std::mem::size_of::<xcb_char2b_t>() - 2usize];
    ["Alignment of xcb_char2b_t"][::std::mem::align_of::<xcb_char2b_t>() - 1usize];
    ["Offset of field: xcb_char2b_t::byte1"][::std::mem::offset_of!(xcb_char2b_t, byte1) - 0usize];
    ["Offset of field: xcb_char2b_t::byte2"][::std::mem::offset_of!(xcb_char2b_t, byte2) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_char2b_iterator_t {
    pub data: *mut xcb_char2b_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_char2b_iterator_t"][::std::mem::size_of::<xcb_char2b_iterator_t>() - 16usize];
    ["Alignment of xcb_char2b_iterator_t"]
        [::std::mem::align_of::<xcb_char2b_iterator_t>() - 8usize];
    ["Offset of field: xcb_char2b_iterator_t::data"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, data) - 0usize];
    ["Offset of field: xcb_char2b_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_char2b_iterator_t::index"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, index) - 12usize];
};
pub type xcb_window_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_window_iterator_t {
    pub data: *mut xcb_window_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_window_iterator_t"][::std::mem::size_of::<xcb_window_iterator_t>() - 16usize];
    ["Alignment of xcb_window_iterator_t"]
        [::std::mem::align_of::<xcb_window_iterator_t>() - 8usize];
    ["Offset of field: xcb_window_iterator_t::data"]
        [::std::mem::offset_of!(xcb_window_iterator_t, data) - 0usize];
    ["Offset of field: xcb_window_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_window_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_window_iterator_t::index"]
        [::std::mem::offset_of!(xcb_window_iterator_t, index) - 12usize];
};
pub type xcb_pixmap_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_pixmap_iterator_t {
    pub data: *mut xcb_pixmap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_pixmap_iterator_t"][::std::mem::size_of::<xcb_pixmap_iterator_t>() - 16usize];
    ["Alignment of xcb_pixmap_iterator_t"]
        [::std::mem::align_of::<xcb_pixmap_iterator_t>() - 8usize];
    ["Offset of field: xcb_pixmap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_pixmap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_pixmap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, index) - 12usize];
};
pub type xcb_cursor_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_cursor_iterator_t {
    pub data: *mut xcb_cursor_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_cursor_iterator_t"][::std::mem::size_of::<xcb_cursor_iterator_t>() - 16usize];
    ["Alignment of xcb_cursor_iterator_t"]
        [::std::mem::align_of::<xcb_cursor_iterator_t>() - 8usize];
    ["Offset of field: xcb_cursor_iterator_t::data"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, data) - 0usize];
    ["Offset of field: xcb_cursor_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_cursor_iterator_t::index"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, index) - 12usize];
};
pub type xcb_font_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_font_iterator_t {
    pub data: *mut xcb_font_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_font_iterator_t"][::std::mem::size_of::<xcb_font_iterator_t>() - 16usize];
    ["Alignment of xcb_font_iterator_t"][::std::mem::align_of::<xcb_font_iterator_t>() - 8usize];
    ["Offset of field: xcb_font_iterator_t::data"]
        [::std::mem::offset_of!(xcb_font_iterator_t, data) - 0usize];
    ["Offset of field: xcb_font_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_font_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_font_iterator_t::index"]
        [::std::mem::offset_of!(xcb_font_iterator_t, index) - 12usize];
};
pub type xcb_gcontext_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_gcontext_iterator_t {
    pub data: *mut xcb_gcontext_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_gcontext_iterator_t"][::std::mem::size_of::<xcb_gcontext_iterator_t>() - 16usize];
    ["Alignment of xcb_gcontext_iterator_t"]
        [::std::mem::align_of::<xcb_gcontext_iterator_t>() - 8usize];
    ["Offset of field: xcb_gcontext_iterator_t::data"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, data) - 0usize];
    ["Offset of field: xcb_gcontext_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_gcontext_iterator_t::index"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, index) - 12usize];
};
pub type xcb_colormap_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_colormap_iterator_t {
    pub data: *mut xcb_colormap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_colormap_iterator_t"][::std::mem::size_of::<xcb_colormap_iterator_t>() - 16usize];
    ["Alignment of xcb_colormap_iterator_t"]
        [::std::mem::align_of::<xcb_colormap_iterator_t>() - 8usize];
    ["Offset of field: xcb_colormap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_colormap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_colormap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, index) - 12usize];
};
pub type xcb_atom_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_atom_iterator_t {
    pub data: *mut xcb_atom_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_atom_iterator_t"][::std::mem::size_of::<xcb_atom_iterator_t>() - 16usize];
    ["Alignment of xcb_atom_iterator_t"][::std::mem::align_of::<xcb_atom_iterator_t>() - 8usize];
    ["Offset of field: xcb_atom_iterator_t::data"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, data) - 0usize];
    ["Offset of field: xcb_atom_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_atom_iterator_t::index"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, index) - 12usize];
};
pub type xcb_drawable_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_drawable_iterator_t {
    pub data: *mut xcb_drawable_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_drawable_iterator_t"][::std::mem::size_of::<xcb_drawable_iterator_t>() - 16usize];
    ["Alignment of xcb_drawable_iterator_t"]
        [::std::mem::align_of::<xcb_drawable_iterator_t>() - 8usize];
    ["Offset of field: xcb_drawable_iterator_t::data"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, data) - 0usize];
    ["Offset of field: xcb_drawable_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_drawable_iterator_t::index"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, index) - 12usize];
};
pub type xcb_fontable_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontable_iterator_t {
    pub data: *mut xcb_fontable_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontable_iterator_t"][::std::mem::size_of::<xcb_fontable_iterator_t>() - 16usize];
    ["Alignment of xcb_fontable_iterator_t"]
        [::std::mem::align_of::<xcb_fontable_iterator_t>() - 8usize];
    ["Offset of field: xcb_fontable_iterator_t::data"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, data) - 0usize];
    ["Offset of field: xcb_fontable_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_fontable_iterator_t::index"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, index) - 12usize];
};
pub type xcb_bool32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_bool32_iterator_t {
    pub data: *mut xcb_bool32_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_bool32_iterator_t"][::std::mem::size_of::<xcb_bool32_iterator_t>() - 16usize];
    ["Alignment of xcb_bool32_iterator_t"]
        [::std::mem::align_of::<xcb_bool32_iterator_t>() - 8usize];
    ["Offset of field: xcb_bool32_iterator_t::data"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, data) - 0usize];
    ["Offset of field: xcb_bool32_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_bool32_iterator_t::index"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, index) - 12usize];
};
pub type xcb_visualid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualid_iterator_t {
    pub data: *mut xcb_visualid_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualid_iterator_t"][::std::mem::size_of::<xcb_visualid_iterator_t>() - 16usize];
    ["Alignment of xcb_visualid_iterator_t"]
        [::std::mem::align_of::<xcb_visualid_iterator_t>() - 8usize];
    ["Offset of field: xcb_visualid_iterator_t::data"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, data) - 0usize];
    ["Offset of field: xcb_visualid_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_visualid_iterator_t::index"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, index) - 12usize];
};
pub type xcb_timestamp_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timestamp_iterator_t {
    pub data: *mut xcb_timestamp_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timestamp_iterator_t"]
        [::std::mem::size_of::<xcb_timestamp_iterator_t>() - 16usize];
    ["Alignment of xcb_timestamp_iterator_t"]
        [::std::mem::align_of::<xcb_timestamp_iterator_t>() - 8usize];
    ["Offset of field: xcb_timestamp_iterator_t::data"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, data) - 0usize];
    ["Offset of field: xcb_timestamp_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_timestamp_iterator_t::index"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, index) - 12usize];
};
pub type xcb_keysym_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keysym_iterator_t {
    pub data: *mut xcb_keysym_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keysym_iterator_t"][::std::mem::size_of::<xcb_keysym_iterator_t>() - 16usize];
    ["Alignment of xcb_keysym_iterator_t"]
        [::std::mem::align_of::<xcb_keysym_iterator_t>() - 8usize];
    ["Offset of field: xcb_keysym_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keysym_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keysym_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, index) - 12usize];
};
pub type xcb_keycode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keycode_iterator_t {
    pub data: *mut xcb_keycode_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keycode_iterator_t"][::std::mem::size_of::<xcb_keycode_iterator_t>() - 16usize];
    ["Alignment of xcb_keycode_iterator_t"]
        [::std::mem::align_of::<xcb_keycode_iterator_t>() - 8usize];
    ["Offset of field: xcb_keycode_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keycode_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keycode_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, index) - 12usize];
};
pub type xcb_keycode32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keycode32_iterator_t {
    pub data: *mut xcb_keycode32_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keycode32_iterator_t"]
        [::std::mem::size_of::<xcb_keycode32_iterator_t>() - 16usize];
    ["Alignment of xcb_keycode32_iterator_t"]
        [::std::mem::align_of::<xcb_keycode32_iterator_t>() - 8usize];
    ["Offset of field: xcb_keycode32_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keycode32_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keycode32_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, index) - 12usize];
};
pub type xcb_button_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_button_iterator_t {
    pub data: *mut xcb_button_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_button_iterator_t"][::std::mem::size_of::<xcb_button_iterator_t>() - 16usize];
    ["Alignment of xcb_button_iterator_t"]
        [::std::mem::align_of::<xcb_button_iterator_t>() - 8usize];
    ["Offset of field: xcb_button_iterator_t::data"]
        [::std::mem::offset_of!(xcb_button_iterator_t, data) - 0usize];
    ["Offset of field: xcb_button_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_button_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_button_iterator_t::index"]
        [::std::mem::offset_of!(xcb_button_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_point_t {
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_point_t"][::std::mem::size_of::<xcb_point_t>() - 4usize];
    ["Alignment of xcb_point_t"][::std::mem::align_of::<xcb_point_t>() - 2usize];
    ["Offset of field: xcb_point_t::x"][::std::mem::offset_of!(xcb_point_t, x) - 0usize];
    ["Offset of field: xcb_point_t::y"][::std::mem::offset_of!(xcb_point_t, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_point_iterator_t {
    pub data: *mut xcb_point_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_point_iterator_t"][::std::mem::size_of::<xcb_point_iterator_t>() - 16usize];
    ["Alignment of xcb_point_iterator_t"][::std::mem::align_of::<xcb_point_iterator_t>() - 8usize];
    ["Offset of field: xcb_point_iterator_t::data"]
        [::std::mem::offset_of!(xcb_point_iterator_t, data) - 0usize];
    ["Offset of field: xcb_point_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_point_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_point_iterator_t::index"]
        [::std::mem::offset_of!(xcb_point_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rectangle_t {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rectangle_t"][::std::mem::size_of::<xcb_rectangle_t>() - 8usize];
    ["Alignment of xcb_rectangle_t"][::std::mem::align_of::<xcb_rectangle_t>() - 2usize];
    ["Offset of field: xcb_rectangle_t::x"][::std::mem::offset_of!(xcb_rectangle_t, x) - 0usize];
    ["Offset of field: xcb_rectangle_t::y"][::std::mem::offset_of!(xcb_rectangle_t, y) - 2usize];
    ["Offset of field: xcb_rectangle_t::width"]
        [::std::mem::offset_of!(xcb_rectangle_t, width) - 4usize];
    ["Offset of field: xcb_rectangle_t::height"]
        [::std::mem::offset_of!(xcb_rectangle_t, height) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rectangle_iterator_t {
    pub data: *mut xcb_rectangle_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rectangle_iterator_t"]
        [::std::mem::size_of::<xcb_rectangle_iterator_t>() - 16usize];
    ["Alignment of xcb_rectangle_iterator_t"]
        [::std::mem::align_of::<xcb_rectangle_iterator_t>() - 8usize];
    ["Offset of field: xcb_rectangle_iterator_t::data"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, data) - 0usize];
    ["Offset of field: xcb_rectangle_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_rectangle_iterator_t::index"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_arc_t {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub angle1: i16,
    pub angle2: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_arc_t"][::std::mem::size_of::<xcb_arc_t>() - 12usize];
    ["Alignment of xcb_arc_t"][::std::mem::align_of::<xcb_arc_t>() - 2usize];
    ["Offset of field: xcb_arc_t::x"][::std::mem::offset_of!(xcb_arc_t, x) - 0usize];
    ["Offset of field: xcb_arc_t::y"][::std::mem::offset_of!(xcb_arc_t, y) - 2usize];
    ["Offset of field: xcb_arc_t::width"][::std::mem::offset_of!(xcb_arc_t, width) - 4usize];
    ["Offset of field: xcb_arc_t::height"][::std::mem::offset_of!(xcb_arc_t, height) - 6usize];
    ["Offset of field: xcb_arc_t::angle1"][::std::mem::offset_of!(xcb_arc_t, angle1) - 8usize];
    ["Offset of field: xcb_arc_t::angle2"][::std::mem::offset_of!(xcb_arc_t, angle2) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_arc_iterator_t {
    pub data: *mut xcb_arc_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_arc_iterator_t"][::std::mem::size_of::<xcb_arc_iterator_t>() - 16usize];
    ["Alignment of xcb_arc_iterator_t"][::std::mem::align_of::<xcb_arc_iterator_t>() - 8usize];
    ["Offset of field: xcb_arc_iterator_t::data"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, data) - 0usize];
    ["Offset of field: xcb_arc_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_arc_iterator_t::index"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_format_t {
    pub depth: u8,
    pub bits_per_pixel: u8,
    pub scanline_pad: u8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_format_t"][::std::mem::size_of::<xcb_format_t>() - 8usize];
    ["Alignment of xcb_format_t"][::std::mem::align_of::<xcb_format_t>() - 1usize];
    ["Offset of field: xcb_format_t::depth"][::std::mem::offset_of!(xcb_format_t, depth) - 0usize];
    ["Offset of field: xcb_format_t::bits_per_pixel"]
        [::std::mem::offset_of!(xcb_format_t, bits_per_pixel) - 1usize];
    ["Offset of field: xcb_format_t::scanline_pad"]
        [::std::mem::offset_of!(xcb_format_t, scanline_pad) - 2usize];
    ["Offset of field: xcb_format_t::pad0"][::std::mem::offset_of!(xcb_format_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_format_iterator_t {
    pub data: *mut xcb_format_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_format_iterator_t"][::std::mem::size_of::<xcb_format_iterator_t>() - 16usize];
    ["Alignment of xcb_format_iterator_t"]
        [::std::mem::align_of::<xcb_format_iterator_t>() - 8usize];
    ["Offset of field: xcb_format_iterator_t::data"]
        [::std::mem::offset_of!(xcb_format_iterator_t, data) - 0usize];
    ["Offset of field: xcb_format_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_format_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_format_iterator_t::index"]
        [::std::mem::offset_of!(xcb_format_iterator_t, index) - 12usize];
};
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_STATIC_GRAY: xcb_visual_class_t = 0;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_GRAY_SCALE: xcb_visual_class_t = 1;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_STATIC_COLOR: xcb_visual_class_t = 2;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_PSEUDO_COLOR: xcb_visual_class_t = 3;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_TRUE_COLOR: xcb_visual_class_t = 4;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_DIRECT_COLOR: xcb_visual_class_t = 5;
pub type xcb_visual_class_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualtype_t {
    pub visual_id: xcb_visualid_t,
    pub _class: u8,
    pub bits_per_rgb_value: u8,
    pub colormap_entries: u16,
    pub red_mask: u32,
    pub green_mask: u32,
    pub blue_mask: u32,
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualtype_t"][::std::mem::size_of::<xcb_visualtype_t>() - 24usize];
    ["Alignment of xcb_visualtype_t"][::std::mem::align_of::<xcb_visualtype_t>() - 4usize];
    ["Offset of field: xcb_visualtype_t::visual_id"]
        [::std::mem::offset_of!(xcb_visualtype_t, visual_id) - 0usize];
    ["Offset of field: xcb_visualtype_t::_class"]
        [::std::mem::offset_of!(xcb_visualtype_t, _class) - 4usize];
    ["Offset of field: xcb_visualtype_t::bits_per_rgb_value"]
        [::std::mem::offset_of!(xcb_visualtype_t, bits_per_rgb_value) - 5usize];
    ["Offset of field: xcb_visualtype_t::colormap_entries"]
        [::std::mem::offset_of!(xcb_visualtype_t, colormap_entries) - 6usize];
    ["Offset of field: xcb_visualtype_t::red_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, red_mask) - 8usize];
    ["Offset of field: xcb_visualtype_t::green_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, green_mask) - 12usize];
    ["Offset of field: xcb_visualtype_t::blue_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, blue_mask) - 16usize];
    ["Offset of field: xcb_visualtype_t::pad0"]
        [::std::mem::offset_of!(xcb_visualtype_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualtype_iterator_t {
    pub data: *mut xcb_visualtype_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualtype_iterator_t"]
        [::std::mem::size_of::<xcb_visualtype_iterator_t>() - 16usize];
    ["Alignment of xcb_visualtype_iterator_t"]
        [::std::mem::align_of::<xcb_visualtype_iterator_t>() - 8usize];
    ["Offset of field: xcb_visualtype_iterator_t::data"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, data) - 0usize];
    ["Offset of field: xcb_visualtype_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_visualtype_iterator_t::index"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_depth_t {
    pub depth: u8,
    pub pad0: u8,
    pub visuals_len: u16,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_depth_t"][::std::mem::size_of::<xcb_depth_t>() - 8usize];
    ["Alignment of xcb_depth_t"][::std::mem::align_of::<xcb_depth_t>() - 2usize];
    ["Offset of field: xcb_depth_t::depth"][::std::mem::offset_of!(xcb_depth_t, depth) - 0usize];
    ["Offset of field: xcb_depth_t::pad0"][::std::mem::offset_of!(xcb_depth_t, pad0) - 1usize];
    ["Offset of field: xcb_depth_t::visuals_len"]
        [::std::mem::offset_of!(xcb_depth_t, visuals_len) - 2usize];
    ["Offset of field: xcb_depth_t::pad1"][::std::mem::offset_of!(xcb_depth_t, pad1) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_depth_iterator_t {
    pub data: *mut xcb_depth_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_depth_iterator_t"][::std::mem::size_of::<xcb_depth_iterator_t>() - 16usize];
    ["Alignment of xcb_depth_iterator_t"][::std::mem::align_of::<xcb_depth_iterator_t>() - 8usize];
    ["Offset of field: xcb_depth_iterator_t::data"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, data) - 0usize];
    ["Offset of field: xcb_depth_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_depth_iterator_t::index"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, index) - 12usize];
};
pub const XCB_EVENT_MASK_NO_EVENT: xcb_event_mask_t = 0;
pub const XCB_EVENT_MASK_KEY_PRESS: xcb_event_mask_t = 1;
pub const XCB_EVENT_MASK_KEY_RELEASE: xcb_event_mask_t = 2;
pub const XCB_EVENT_MASK_BUTTON_PRESS: xcb_event_mask_t = 4;
pub const XCB_EVENT_MASK_BUTTON_RELEASE: xcb_event_mask_t = 8;
pub const XCB_EVENT_MASK_ENTER_WINDOW: xcb_event_mask_t = 16;
pub const XCB_EVENT_MASK_LEAVE_WINDOW: xcb_event_mask_t = 32;
pub const XCB_EVENT_MASK_POINTER_MOTION: xcb_event_mask_t = 64;
pub const XCB_EVENT_MASK_POINTER_MOTION_HINT: xcb_event_mask_t = 128;
pub const XCB_EVENT_MASK_BUTTON_1_MOTION: xcb_event_mask_t = 256;
pub const XCB_EVENT_MASK_BUTTON_2_MOTION: xcb_event_mask_t = 512;
pub const XCB_EVENT_MASK_BUTTON_3_MOTION: xcb_event_mask_t = 1024;
pub const XCB_EVENT_MASK_BUTTON_4_MOTION: xcb_event_mask_t = 2048;
pub const XCB_EVENT_MASK_BUTTON_5_MOTION: xcb_event_mask_t = 4096;
pub const XCB_EVENT_MASK_BUTTON_MOTION: xcb_event_mask_t = 8192;
pub const XCB_EVENT_MASK_KEYMAP_STATE: xcb_event_mask_t = 16384;
pub const XCB_EVENT_MASK_EXPOSURE: xcb_event_mask_t = 32768;
pub const XCB_EVENT_MASK_VISIBILITY_CHANGE: xcb_event_mask_t = 65536;
pub const XCB_EVENT_MASK_STRUCTURE_NOTIFY: xcb_event_mask_t = 131072;
pub const XCB_EVENT_MASK_RESIZE_REDIRECT: xcb_event_mask_t = 262144;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY: xcb_event_mask_t = 524288;
pub const XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT: xcb_event_mask_t = 1048576;
pub const XCB_EVENT_MASK_FOCUS_CHANGE: xcb_event_mask_t = 2097152;
pub const XCB_EVENT_MASK_PROPERTY_CHANGE: xcb_event_mask_t = 4194304;
pub const XCB_EVENT_MASK_COLOR_MAP_CHANGE: xcb_event_mask_t = 8388608;
pub const XCB_EVENT_MASK_OWNER_GRAB_BUTTON: xcb_event_mask_t = 16777216;
pub type xcb_event_mask_t = ::std::os::raw::c_uint;
pub const XCB_BACKING_STORE_NOT_USEFUL: xcb_backing_store_t = 0;
pub const XCB_BACKING_STORE_WHEN_MAPPED: xcb_backing_store_t = 1;
pub const XCB_BACKING_STORE_ALWAYS: xcb_backing_store_t = 2;
pub type xcb_backing_store_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_screen_t {
    pub root: xcb_window_t,
    pub default_colormap: xcb_colormap_t,
    pub white_pixel: u32,
    pub black_pixel: u32,
    pub current_input_masks: u32,
    pub width_in_pixels: u16,
    pub height_in_pixels: u16,
    pub width_in_millimeters: u16,
    pub height_in_millimeters: u16,
    pub min_installed_maps: u16,
    pub max_installed_maps: u16,
    pub root_visual: xcb_visualid_t,
    pub backing_stores: u8,
    pub save_unders: u8,
    pub root_depth: u8,
    pub allowed_depths_len: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_screen_t"][::std::mem::size_of::<xcb_screen_t>() - 40usize];
    ["Alignment of xcb_screen_t"][::std::mem::align_of::<xcb_screen_t>() - 4usize];
    ["Offset of field: xcb_screen_t::root"][::std::mem::offset_of!(xcb_screen_t, root) - 0usize];
    ["Offset of field: xcb_screen_t::default_colormap"]
        [::std::mem::offset_of!(xcb_screen_t, default_colormap) - 4usize];
    ["Offset of field: xcb_screen_t::white_pixel"]
        [::std::mem::offset_of!(xcb_screen_t, white_pixel) - 8usize];
    ["Offset of field: xcb_screen_t::black_pixel"]
        [::std::mem::offset_of!(xcb_screen_t, black_pixel) - 12usize];
    ["Offset of field: xcb_screen_t::current_input_masks"]
        [::std::mem::offset_of!(xcb_screen_t, current_input_masks) - 16usize];
    ["Offset of field: xcb_screen_t::width_in_pixels"]
        [::std::mem::offset_of!(xcb_screen_t, width_in_pixels) - 20usize];
    ["Offset of field: xcb_screen_t::height_in_pixels"]
        [::std::mem::offset_of!(xcb_screen_t, height_in_pixels) - 22usize];
    ["Offset of field: xcb_screen_t::width_in_millimeters"]
        [::std::mem::offset_of!(xcb_screen_t, width_in_millimeters) - 24usize];
    ["Offset of field: xcb_screen_t::height_in_millimeters"]
        [::std::mem::offset_of!(xcb_screen_t, height_in_millimeters) - 26usize];
    ["Offset of field: xcb_screen_t::min_installed_maps"]
        [::std::mem::offset_of!(xcb_screen_t, min_installed_maps) - 28usize];
    ["Offset of field: xcb_screen_t::max_installed_maps"]
        [::std::mem::offset_of!(xcb_screen_t, max_installed_maps) - 30usize];
    ["Offset of field: xcb_screen_t::root_visual"]
        [::std::mem::offset_of!(xcb_screen_t, root_visual) - 32usize];
    ["Offset of field: xcb_screen_t::backing_stores"]
        [::std::mem::offset_of!(xcb_screen_t, backing_stores) - 36usize];
    ["Offset of field: xcb_screen_t::save_unders"]
        [::std::mem::offset_of!(xcb_screen_t, save_unders) - 37usize];
    ["Offset of field: xcb_screen_t::root_depth"]
        [::std::mem::offset_of!(xcb_screen_t, root_depth) - 38usize];
    ["Offset of field: xcb_screen_t::allowed_depths_len"]
        [::std::mem::offset_of!(xcb_screen_t, allowed_depths_len) - 39usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_screen_iterator_t {
    pub data: *mut xcb_screen_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_screen_iterator_t"][::std::mem::size_of::<xcb_screen_iterator_t>() - 16usize];
    ["Alignment of xcb_screen_iterator_t"]
        [::std::mem::align_of::<xcb_screen_iterator_t>() - 8usize];
    ["Offset of field: xcb_screen_iterator_t::data"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, data) - 0usize];
    ["Offset of field: xcb_screen_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_screen_iterator_t::index"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_request_t {
    pub byte_order: u8,
    pub pad0: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub authorization_protocol_name_len: u16,
    pub authorization_protocol_data_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_request_t"][::std::mem::size_of::<xcb_setup_request_t>() - 12usize];
    ["Alignment of xcb_setup_request_t"][::std::mem::align_of::<xcb_setup_request_t>() - 2usize];
    ["Offset of field: xcb_setup_request_t::byte_order"]
        [::std::mem::offset_of!(xcb_setup_request_t, byte_order) - 0usize];
    ["Offset of field: xcb_setup_request_t::pad0"]
        [::std::mem::offset_of!(xcb_setup_request_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_request_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_request_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_request_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_request_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_request_t::authorization_protocol_name_len"]
        [::std::mem::offset_of!(xcb_setup_request_t, authorization_protocol_name_len) - 6usize];
    ["Offset of field: xcb_setup_request_t::authorization_protocol_data_len"]
        [::std::mem::offset_of!(xcb_setup_request_t, authorization_protocol_data_len) - 8usize];
    ["Offset of field: xcb_setup_request_t::pad1"]
        [::std::mem::offset_of!(xcb_setup_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_request_iterator_t {
    pub data: *mut xcb_setup_request_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_request_iterator_t"]
        [::std::mem::size_of::<xcb_setup_request_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_request_iterator_t"]
        [::std::mem::align_of::<xcb_setup_request_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_request_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_request_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_request_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_failed_t {
    pub status: u8,
    pub reason_len: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_failed_t"][::std::mem::size_of::<xcb_setup_failed_t>() - 8usize];
    ["Alignment of xcb_setup_failed_t"][::std::mem::align_of::<xcb_setup_failed_t>() - 2usize];
    ["Offset of field: xcb_setup_failed_t::status"]
        [::std::mem::offset_of!(xcb_setup_failed_t, status) - 0usize];
    ["Offset of field: xcb_setup_failed_t::reason_len"]
        [::std::mem::offset_of!(xcb_setup_failed_t, reason_len) - 1usize];
    ["Offset of field: xcb_setup_failed_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_failed_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_failed_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_failed_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_failed_t::length"]
        [::std::mem::offset_of!(xcb_setup_failed_t, length) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_failed_iterator_t {
    pub data: *mut xcb_setup_failed_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_failed_iterator_t"]
        [::std::mem::size_of::<xcb_setup_failed_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_failed_iterator_t"]
        [::std::mem::align_of::<xcb_setup_failed_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_failed_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_failed_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_failed_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_authenticate_t {
    pub status: u8,
    pub pad0: [u8; 5usize],
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_authenticate_t"]
        [::std::mem::size_of::<xcb_setup_authenticate_t>() - 8usize];
    ["Alignment of xcb_setup_authenticate_t"]
        [::std::mem::align_of::<xcb_setup_authenticate_t>() - 2usize];
    ["Offset of field: xcb_setup_authenticate_t::status"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, status) - 0usize];
    ["Offset of field: xcb_setup_authenticate_t::pad0"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_authenticate_t::length"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, length) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_authenticate_iterator_t {
    pub data: *mut xcb_setup_authenticate_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_authenticate_iterator_t"]
        [::std::mem::size_of::<xcb_setup_authenticate_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_authenticate_iterator_t"]
        [::std::mem::align_of::<xcb_setup_authenticate_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, index) - 12usize];
};
pub const XCB_IMAGE_ORDER_LSB_FIRST: xcb_image_order_t = 0;
pub const XCB_IMAGE_ORDER_MSB_FIRST: xcb_image_order_t = 1;
pub type xcb_image_order_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_t {
    pub status: u8,
    pub pad0: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub length: u16,
    pub release_number: u32,
    pub resource_id_base: u32,
    pub resource_id_mask: u32,
    pub motion_buffer_size: u32,
    pub vendor_len: u16,
    pub maximum_request_length: u16,
    pub roots_len: u8,
    pub pixmap_formats_len: u8,
    pub image_byte_order: u8,
    pub bitmap_format_bit_order: u8,
    pub bitmap_format_scanline_unit: u8,
    pub bitmap_format_scanline_pad: u8,
    pub min_keycode: xcb_keycode_t,
    pub max_keycode: xcb_keycode_t,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_t"][::std::mem::size_of::<xcb_setup_t>() - 40usize];
    ["Alignment of xcb_setup_t"][::std::mem::align_of::<xcb_setup_t>() - 4usize];
    ["Offset of field: xcb_setup_t::status"][::std::mem::offset_of!(xcb_setup_t, status) - 0usize];
    ["Offset of field: xcb_setup_t::pad0"][::std::mem::offset_of!(xcb_setup_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_t::length"][::std::mem::offset_of!(xcb_setup_t, length) - 6usize];
    ["Offset of field: xcb_setup_t::release_number"]
        [::std::mem::offset_of!(xcb_setup_t, release_number) - 8usize];
    ["Offset of field: xcb_setup_t::resource_id_base"]
        [::std::mem::offset_of!(xcb_setup_t, resource_id_base) - 12usize];
    ["Offset of field: xcb_setup_t::resource_id_mask"]
        [::std::mem::offset_of!(xcb_setup_t, resource_id_mask) - 16usize];
    ["Offset of field: xcb_setup_t::motion_buffer_size"]
        [::std::mem::offset_of!(xcb_setup_t, motion_buffer_size) - 20usize];
    ["Offset of field: xcb_setup_t::vendor_len"]
        [::std::mem::offset_of!(xcb_setup_t, vendor_len) - 24usize];
    ["Offset of field: xcb_setup_t::maximum_request_length"]
        [::std::mem::offset_of!(xcb_setup_t, maximum_request_length) - 26usize];
    ["Offset of field: xcb_setup_t::roots_len"]
        [::std::mem::offset_of!(xcb_setup_t, roots_len) - 28usize];
    ["Offset of field: xcb_setup_t::pixmap_formats_len"]
        [::std::mem::offset_of!(xcb_setup_t, pixmap_formats_len) - 29usize];
    ["Offset of field: xcb_setup_t::image_byte_order"]
        [::std::mem::offset_of!(xcb_setup_t, image_byte_order) - 30usize];
    ["Offset of field: xcb_setup_t::bitmap_format_bit_order"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_bit_order) - 31usize];
    ["Offset of field: xcb_setup_t::bitmap_format_scanline_unit"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_scanline_unit) - 32usize];
    ["Offset of field: xcb_setup_t::bitmap_format_scanline_pad"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_scanline_pad) - 33usize];
    ["Offset of field: xcb_setup_t::min_keycode"]
        [::std::mem::offset_of!(xcb_setup_t, min_keycode) - 34usize];
    ["Offset of field: xcb_setup_t::max_keycode"]
        [::std::mem::offset_of!(xcb_setup_t, max_keycode) - 35usize];
    ["Offset of field: xcb_setup_t::pad1"][::std::mem::offset_of!(xcb_setup_t, pad1) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_iterator_t {
    pub data: *mut xcb_setup_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_iterator_t"][::std::mem::size_of::<xcb_setup_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_iterator_t"][::std::mem::align_of::<xcb_setup_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, index) - 12usize];
};
pub const XCB_MOD_MASK_SHIFT: xcb_mod_mask_t = 1;
pub const XCB_MOD_MASK_LOCK: xcb_mod_mask_t = 2;
pub const XCB_MOD_MASK_CONTROL: xcb_mod_mask_t = 4;
pub const XCB_MOD_MASK_1: xcb_mod_mask_t = 8;
pub const XCB_MOD_MASK_2: xcb_mod_mask_t = 16;
pub const XCB_MOD_MASK_3: xcb_mod_mask_t = 32;
pub const XCB_MOD_MASK_4: xcb_mod_mask_t = 64;
pub const XCB_MOD_MASK_5: xcb_mod_mask_t = 128;
pub const XCB_MOD_MASK_ANY: xcb_mod_mask_t = 32768;
pub type xcb_mod_mask_t = ::std::os::raw::c_uint;
pub const XCB_KEY_BUT_MASK_SHIFT: xcb_key_but_mask_t = 1;
pub const XCB_KEY_BUT_MASK_LOCK: xcb_key_but_mask_t = 2;
pub const XCB_KEY_BUT_MASK_CONTROL: xcb_key_but_mask_t = 4;
pub const XCB_KEY_BUT_MASK_MOD_1: xcb_key_but_mask_t = 8;
pub const XCB_KEY_BUT_MASK_MOD_2: xcb_key_but_mask_t = 16;
pub const XCB_KEY_BUT_MASK_MOD_3: xcb_key_but_mask_t = 32;
pub const XCB_KEY_BUT_MASK_MOD_4: xcb_key_but_mask_t = 64;
pub const XCB_KEY_BUT_MASK_MOD_5: xcb_key_but_mask_t = 128;
pub const XCB_KEY_BUT_MASK_BUTTON_1: xcb_key_but_mask_t = 256;
pub const XCB_KEY_BUT_MASK_BUTTON_2: xcb_key_but_mask_t = 512;
pub const XCB_KEY_BUT_MASK_BUTTON_3: xcb_key_but_mask_t = 1024;
pub const XCB_KEY_BUT_MASK_BUTTON_4: xcb_key_but_mask_t = 2048;
pub const XCB_KEY_BUT_MASK_BUTTON_5: xcb_key_but_mask_t = 4096;
pub type xcb_key_but_mask_t = ::std::os::raw::c_uint;
pub const xcb_window_enum_t_XCB_WINDOW_NONE: xcb_window_enum_t = 0;
pub type xcb_window_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_key_press_event_t {
    pub response_type: u8,
    pub detail: xcb_keycode_t,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_key_press_event_t"][::std::mem::size_of::<xcb_key_press_event_t>() - 32usize];
    ["Alignment of xcb_key_press_event_t"]
        [::std::mem::align_of::<xcb_key_press_event_t>() - 4usize];
    ["Offset of field: xcb_key_press_event_t::response_type"]
        [::std::mem::offset_of!(xcb_key_press_event_t, response_type) - 0usize];
    ["Offset of field: xcb_key_press_event_t::detail"]
        [::std::mem::offset_of!(xcb_key_press_event_t, detail) - 1usize];
    ["Offset of field: xcb_key_press_event_t::sequence"]
        [::std::mem::offset_of!(xcb_key_press_event_t, sequence) - 2usize];
    ["Offset of field: xcb_key_press_event_t::time"]
        [::std::mem::offset_of!(xcb_key_press_event_t, time) - 4usize];
    ["Offset of field: xcb_key_press_event_t::root"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root) - 8usize];
    ["Offset of field: xcb_key_press_event_t::event"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event) - 12usize];
    ["Offset of field: xcb_key_press_event_t::child"]
        [::std::mem::offset_of!(xcb_key_press_event_t, child) - 16usize];
    ["Offset of field: xcb_key_press_event_t::root_x"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root_x) - 20usize];
    ["Offset of field: xcb_key_press_event_t::root_y"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root_y) - 22usize];
    ["Offset of field: xcb_key_press_event_t::event_x"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event_x) - 24usize];
    ["Offset of field: xcb_key_press_event_t::event_y"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event_y) - 26usize];
    ["Offset of field: xcb_key_press_event_t::state"]
        [::std::mem::offset_of!(xcb_key_press_event_t, state) - 28usize];
    ["Offset of field: xcb_key_press_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_key_press_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_key_press_event_t::pad0"]
        [::std::mem::offset_of!(xcb_key_press_event_t, pad0) - 31usize];
};
pub type xcb_key_release_event_t = xcb_key_press_event_t;
pub const XCB_BUTTON_MASK_1: xcb_button_mask_t = 256;
pub const XCB_BUTTON_MASK_2: xcb_button_mask_t = 512;
pub const XCB_BUTTON_MASK_3: xcb_button_mask_t = 1024;
pub const XCB_BUTTON_MASK_4: xcb_button_mask_t = 2048;
pub const XCB_BUTTON_MASK_5: xcb_button_mask_t = 4096;
pub const XCB_BUTTON_MASK_ANY: xcb_button_mask_t = 32768;
pub type xcb_button_mask_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_button_press_event_t {
    pub response_type: u8,
    pub detail: xcb_button_t,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_button_press_event_t"]
        [::std::mem::size_of::<xcb_button_press_event_t>() - 32usize];
    ["Alignment of xcb_button_press_event_t"]
        [::std::mem::align_of::<xcb_button_press_event_t>() - 4usize];
    ["Offset of field: xcb_button_press_event_t::response_type"]
        [::std::mem::offset_of!(xcb_button_press_event_t, response_type) - 0usize];
    ["Offset of field: xcb_button_press_event_t::detail"]
        [::std::mem::offset_of!(xcb_button_press_event_t, detail) - 1usize];
    ["Offset of field: xcb_button_press_event_t::sequence"]
        [::std::mem::offset_of!(xcb_button_press_event_t, sequence) - 2usize];
    ["Offset of field: xcb_button_press_event_t::time"]
        [::std::mem::offset_of!(xcb_button_press_event_t, time) - 4usize];
    ["Offset of field: xcb_button_press_event_t::root"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root) - 8usize];
    ["Offset of field: xcb_button_press_event_t::event"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event) - 12usize];
    ["Offset of field: xcb_button_press_event_t::child"]
        [::std::mem::offset_of!(xcb_button_press_event_t, child) - 16usize];
    ["Offset of field: xcb_button_press_event_t::root_x"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root_x) - 20usize];
    ["Offset of field: xcb_button_press_event_t::root_y"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root_y) - 22usize];
    ["Offset of field: xcb_button_press_event_t::event_x"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event_x) - 24usize];
    ["Offset of field: xcb_button_press_event_t::event_y"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event_y) - 26usize];
    ["Offset of field: xcb_button_press_event_t::state"]
        [::std::mem::offset_of!(xcb_button_press_event_t, state) - 28usize];
    ["Offset of field: xcb_button_press_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_button_press_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_button_press_event_t::pad0"]
        [::std::mem::offset_of!(xcb_button_press_event_t, pad0) - 31usize];
};
pub type xcb_button_release_event_t = xcb_button_press_event_t;
pub const xcb_motion_t_XCB_MOTION_NORMAL: xcb_motion_t = 0;
pub const xcb_motion_t_XCB_MOTION_HINT: xcb_motion_t = 1;
pub type xcb_motion_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_motion_notify_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_motion_notify_event_t"]
        [::std::mem::size_of::<xcb_motion_notify_event_t>() - 32usize];
    ["Alignment of xcb_motion_notify_event_t"]
        [::std::mem::align_of::<xcb_motion_notify_event_t>() - 4usize];
    ["Offset of field: xcb_motion_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_motion_notify_event_t::detail"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, detail) - 1usize];
    ["Offset of field: xcb_motion_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_motion_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_motion_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root) - 8usize];
    ["Offset of field: xcb_motion_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event) - 12usize];
    ["Offset of field: xcb_motion_notify_event_t::child"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, child) - 16usize];
    ["Offset of field: xcb_motion_notify_event_t::root_x"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root_x) - 20usize];
    ["Offset of field: xcb_motion_notify_event_t::root_y"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root_y) - 22usize];
    ["Offset of field: xcb_motion_notify_event_t::event_x"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event_x) - 24usize];
    ["Offset of field: xcb_motion_notify_event_t::event_y"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event_y) - 26usize];
    ["Offset of field: xcb_motion_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, state) - 28usize];
    ["Offset of field: xcb_motion_notify_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_motion_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, pad0) - 31usize];
};
pub const XCB_NOTIFY_DETAIL_ANCESTOR: xcb_notify_detail_t = 0;
pub const XCB_NOTIFY_DETAIL_VIRTUAL: xcb_notify_detail_t = 1;
pub const XCB_NOTIFY_DETAIL_INFERIOR: xcb_notify_detail_t = 2;
pub const XCB_NOTIFY_DETAIL_NONLINEAR: xcb_notify_detail_t = 3;
pub const XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL: xcb_notify_detail_t = 4;
pub const XCB_NOTIFY_DETAIL_POINTER: xcb_notify_detail_t = 5;
pub const XCB_NOTIFY_DETAIL_POINTER_ROOT: xcb_notify_detail_t = 6;
pub const XCB_NOTIFY_DETAIL_NONE: xcb_notify_detail_t = 7;
pub type xcb_notify_detail_t = ::std::os::raw::c_uint;
pub const XCB_NOTIFY_MODE_NORMAL: xcb_notify_mode_t = 0;
pub const XCB_NOTIFY_MODE_GRAB: xcb_notify_mode_t = 1;
pub const XCB_NOTIFY_MODE_UNGRAB: xcb_notify_mode_t = 2;
pub const XCB_NOTIFY_MODE_WHILE_GRABBED: xcb_notify_mode_t = 3;
pub type xcb_notify_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_enter_notify_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub mode: u8,
    pub same_screen_focus: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_enter_notify_event_t"]
        [::std::mem::size_of::<xcb_enter_notify_event_t>() - 32usize];
    ["Alignment of xcb_enter_notify_event_t"]
        [::std::mem::align_of::<xcb_enter_notify_event_t>() - 4usize];
    ["Offset of field: xcb_enter_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_enter_notify_event_t::detail"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, detail) - 1usize];
    ["Offset of field: xcb_enter_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_enter_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_enter_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root) - 8usize];
    ["Offset of field: xcb_enter_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event) - 12usize];
    ["Offset of field: xcb_enter_notify_event_t::child"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, child) - 16usize];
    ["Offset of field: xcb_enter_notify_event_t::root_x"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root_x) - 20usize];
    ["Offset of field: xcb_enter_notify_event_t::root_y"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root_y) - 22usize];
    ["Offset of field: xcb_enter_notify_event_t::event_x"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event_x) - 24usize];
    ["Offset of field: xcb_enter_notify_event_t::event_y"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event_y) - 26usize];
    ["Offset of field: xcb_enter_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, state) - 28usize];
    ["Offset of field: xcb_enter_notify_event_t::mode"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, mode) - 30usize];
    ["Offset of field: xcb_enter_notify_event_t::same_screen_focus"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, same_screen_focus) - 31usize];
};
pub type xcb_leave_notify_event_t = xcb_enter_notify_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_focus_in_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub mode: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_focus_in_event_t"][::std::mem::size_of::<xcb_focus_in_event_t>() - 12usize];
    ["Alignment of xcb_focus_in_event_t"][::std::mem::align_of::<xcb_focus_in_event_t>() - 4usize];
    ["Offset of field: xcb_focus_in_event_t::response_type"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, response_type) - 0usize];
    ["Offset of field: xcb_focus_in_event_t::detail"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, detail) - 1usize];
    ["Offset of field: xcb_focus_in_event_t::sequence"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, sequence) - 2usize];
    ["Offset of field: xcb_focus_in_event_t::event"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, event) - 4usize];
    ["Offset of field: xcb_focus_in_event_t::mode"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, mode) - 8usize];
    ["Offset of field: xcb_focus_in_event_t::pad0"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, pad0) - 9usize];
};
pub type xcb_focus_out_event_t = xcb_focus_in_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keymap_notify_event_t {
    pub response_type: u8,
    pub keys: [u8; 31usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keymap_notify_event_t"]
        [::std::mem::size_of::<xcb_keymap_notify_event_t>() - 32usize];
    ["Alignment of xcb_keymap_notify_event_t"]
        [::std::mem::align_of::<xcb_keymap_notify_event_t>() - 1usize];
    ["Offset of field: xcb_keymap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_keymap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_keymap_notify_event_t::keys"]
        [::std::mem::offset_of!(xcb_keymap_notify_event_t, keys) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_expose_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub count: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_expose_event_t"][::std::mem::size_of::<xcb_expose_event_t>() - 20usize];
    ["Alignment of xcb_expose_event_t"][::std::mem::align_of::<xcb_expose_event_t>() - 4usize];
    ["Offset of field: xcb_expose_event_t::response_type"]
        [::std::mem::offset_of!(xcb_expose_event_t, response_type) - 0usize];
    ["Offset of field: xcb_expose_event_t::pad0"]
        [::std::mem::offset_of!(xcb_expose_event_t, pad0) - 1usize];
    ["Offset of field: xcb_expose_event_t::sequence"]
        [::std::mem::offset_of!(xcb_expose_event_t, sequence) - 2usize];
    ["Offset of field: xcb_expose_event_t::window"]
        [::std::mem::offset_of!(xcb_expose_event_t, window) - 4usize];
    ["Offset of field: xcb_expose_event_t::x"]
        [::std::mem::offset_of!(xcb_expose_event_t, x) - 8usize];
    ["Offset of field: xcb_expose_event_t::y"]
        [::std::mem::offset_of!(xcb_expose_event_t, y) - 10usize];
    ["Offset of field: xcb_expose_event_t::width"]
        [::std::mem::offset_of!(xcb_expose_event_t, width) - 12usize];
    ["Offset of field: xcb_expose_event_t::height"]
        [::std::mem::offset_of!(xcb_expose_event_t, height) - 14usize];
    ["Offset of field: xcb_expose_event_t::count"]
        [::std::mem::offset_of!(xcb_expose_event_t, count) - 16usize];
    ["Offset of field: xcb_expose_event_t::pad1"]
        [::std::mem::offset_of!(xcb_expose_event_t, pad1) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_graphics_exposure_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub drawable: xcb_drawable_t,
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub minor_opcode: u16,
    pub count: u16,
    pub major_opcode: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_graphics_exposure_event_t"]
        [::std::mem::size_of::<xcb_graphics_exposure_event_t>() - 24usize];
    ["Alignment of xcb_graphics_exposure_event_t"]
        [::std::mem::align_of::<xcb_graphics_exposure_event_t>() - 4usize];
    ["Offset of field: xcb_graphics_exposure_event_t::response_type"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, response_type) - 0usize];
    ["Offset of field: xcb_graphics_exposure_event_t::pad0"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, pad0) - 1usize];
    ["Offset of field: xcb_graphics_exposure_event_t::sequence"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, sequence) - 2usize];
    ["Offset of field: xcb_graphics_exposure_event_t::drawable"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, drawable) - 4usize];
    ["Offset of field: xcb_graphics_exposure_event_t::x"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, x) - 8usize];
    ["Offset of field: xcb_graphics_exposure_event_t::y"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, y) - 10usize];
    ["Offset of field: xcb_graphics_exposure_event_t::width"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, width) - 12usize];
    ["Offset of field: xcb_graphics_exposure_event_t::height"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, height) - 14usize];
    ["Offset of field: xcb_graphics_exposure_event_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, minor_opcode) - 16usize];
    ["Offset of field: xcb_graphics_exposure_event_t::count"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, count) - 18usize];
    ["Offset of field: xcb_graphics_exposure_event_t::major_opcode"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, major_opcode) - 20usize];
    ["Offset of field: xcb_graphics_exposure_event_t::pad1"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, pad1) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_no_exposure_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub drawable: xcb_drawable_t,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_no_exposure_event_t"][::std::mem::size_of::<xcb_no_exposure_event_t>() - 12usize];
    ["Alignment of xcb_no_exposure_event_t"]
        [::std::mem::align_of::<xcb_no_exposure_event_t>() - 4usize];
    ["Offset of field: xcb_no_exposure_event_t::response_type"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, response_type) - 0usize];
    ["Offset of field: xcb_no_exposure_event_t::pad0"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, pad0) - 1usize];
    ["Offset of field: xcb_no_exposure_event_t::sequence"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, sequence) - 2usize];
    ["Offset of field: xcb_no_exposure_event_t::drawable"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, drawable) - 4usize];
    ["Offset of field: xcb_no_exposure_event_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_no_exposure_event_t::major_opcode"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, major_opcode) - 10usize];
    ["Offset of field: xcb_no_exposure_event_t::pad1"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, pad1) - 11usize];
};
pub const xcb_visibility_t_XCB_VISIBILITY_UNOBSCURED: xcb_visibility_t = 0;
pub const xcb_visibility_t_XCB_VISIBILITY_PARTIALLY_OBSCURED: xcb_visibility_t = 1;
pub const xcb_visibility_t_XCB_VISIBILITY_FULLY_OBSCURED: xcb_visibility_t = 2;
pub type xcb_visibility_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visibility_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub state: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visibility_notify_event_t"]
        [::std::mem::size_of::<xcb_visibility_notify_event_t>() - 12usize];
    ["Alignment of xcb_visibility_notify_event_t"]
        [::std::mem::align_of::<xcb_visibility_notify_event_t>() - 4usize];
    ["Offset of field: xcb_visibility_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_visibility_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_visibility_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_visibility_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_visibility_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, state) - 8usize];
    ["Offset of field: xcb_visibility_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, pad1) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub override_redirect: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_notify_event_t"]
        [::std::mem::size_of::<xcb_create_notify_event_t>() - 24usize];
    ["Alignment of xcb_create_notify_event_t"]
        [::std::mem::align_of::<xcb_create_notify_event_t>() - 4usize];
    ["Offset of field: xcb_create_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_create_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_create_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_create_notify_event_t::parent"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, parent) - 4usize];
    ["Offset of field: xcb_create_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_create_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, x) - 12usize];
    ["Offset of field: xcb_create_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, y) - 14usize];
    ["Offset of field: xcb_create_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, width) - 16usize];
    ["Offset of field: xcb_create_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, height) - 18usize];
    ["Offset of field: xcb_create_notify_event_t::border_width"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, border_width) - 20usize];
    ["Offset of field: xcb_create_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, override_redirect) - 22usize];
    ["Offset of field: xcb_create_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, pad1) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_notify_event_t"]
        [::std::mem::size_of::<xcb_destroy_notify_event_t>() - 12usize];
    ["Alignment of xcb_destroy_notify_event_t"]
        [::std::mem::align_of::<xcb_destroy_notify_event_t>() - 4usize];
    ["Offset of field: xcb_destroy_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_destroy_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_destroy_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_destroy_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, window) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub from_configure: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_notify_event_t"]
        [::std::mem::size_of::<xcb_unmap_notify_event_t>() - 16usize];
    ["Alignment of xcb_unmap_notify_event_t"]
        [::std::mem::align_of::<xcb_unmap_notify_event_t>() - 4usize];
    ["Offset of field: xcb_unmap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_unmap_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_unmap_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_unmap_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_unmap_notify_event_t::from_configure"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, from_configure) - 12usize];
    ["Offset of field: xcb_unmap_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, pad1) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub override_redirect: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_notify_event_t"][::std::mem::size_of::<xcb_map_notify_event_t>() - 16usize];
    ["Alignment of xcb_map_notify_event_t"]
        [::std::mem::align_of::<xcb_map_notify_event_t>() - 4usize];
    ["Offset of field: xcb_map_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_map_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_map_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_map_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_map_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_map_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, override_redirect) - 12usize];
    ["Offset of field: xcb_map_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, pad1) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_request_event_t"][::std::mem::size_of::<xcb_map_request_event_t>() - 12usize];
    ["Alignment of xcb_map_request_event_t"]
        [::std::mem::align_of::<xcb_map_request_event_t>() - 4usize];
    ["Offset of field: xcb_map_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_map_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_map_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_map_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_map_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_map_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_map_request_event_t::parent"]
        [::std::mem::offset_of!(xcb_map_request_event_t, parent) - 4usize];
    ["Offset of field: xcb_map_request_event_t::window"]
        [::std::mem::offset_of!(xcb_map_request_event_t, window) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_reparent_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub override_redirect: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_reparent_notify_event_t"]
        [::std::mem::size_of::<xcb_reparent_notify_event_t>() - 24usize];
    ["Alignment of xcb_reparent_notify_event_t"]
        [::std::mem::align_of::<xcb_reparent_notify_event_t>() - 4usize];
    ["Offset of field: xcb_reparent_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_reparent_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_reparent_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_reparent_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_reparent_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_reparent_notify_event_t::parent"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, parent) - 12usize];
    ["Offset of field: xcb_reparent_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, x) - 16usize];
    ["Offset of field: xcb_reparent_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, y) - 18usize];
    ["Offset of field: xcb_reparent_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, override_redirect) - 20usize];
    ["Offset of field: xcb_reparent_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, pad1) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub above_sibling: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub override_redirect: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_notify_event_t"]
        [::std::mem::size_of::<xcb_configure_notify_event_t>() - 28usize];
    ["Alignment of xcb_configure_notify_event_t"]
        [::std::mem::align_of::<xcb_configure_notify_event_t>() - 4usize];
    ["Offset of field: xcb_configure_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_configure_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_configure_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_configure_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_configure_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_configure_notify_event_t::above_sibling"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, above_sibling) - 12usize];
    ["Offset of field: xcb_configure_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, x) - 16usize];
    ["Offset of field: xcb_configure_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, y) - 18usize];
    ["Offset of field: xcb_configure_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, width) - 20usize];
    ["Offset of field: xcb_configure_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, height) - 22usize];
    ["Offset of field: xcb_configure_notify_event_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, border_width) - 24usize];
    ["Offset of field: xcb_configure_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, override_redirect) - 26usize];
    ["Offset of field: xcb_configure_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, pad1) - 27usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_request_event_t {
    pub response_type: u8,
    pub stack_mode: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub sibling: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub value_mask: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_request_event_t"]
        [::std::mem::size_of::<xcb_configure_request_event_t>() - 28usize];
    ["Alignment of xcb_configure_request_event_t"]
        [::std::mem::align_of::<xcb_configure_request_event_t>() - 4usize];
    ["Offset of field: xcb_configure_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_configure_request_event_t::stack_mode"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, stack_mode) - 1usize];
    ["Offset of field: xcb_configure_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_configure_request_event_t::parent"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, parent) - 4usize];
    ["Offset of field: xcb_configure_request_event_t::window"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, window) - 8usize];
    ["Offset of field: xcb_configure_request_event_t::sibling"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, sibling) - 12usize];
    ["Offset of field: xcb_configure_request_event_t::x"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, x) - 16usize];
    ["Offset of field: xcb_configure_request_event_t::y"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, y) - 18usize];
    ["Offset of field: xcb_configure_request_event_t::width"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, width) - 20usize];
    ["Offset of field: xcb_configure_request_event_t::height"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, height) - 22usize];
    ["Offset of field: xcb_configure_request_event_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, border_width) - 24usize];
    ["Offset of field: xcb_configure_request_event_t::value_mask"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, value_mask) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_gravity_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_gravity_notify_event_t"]
        [::std::mem::size_of::<xcb_gravity_notify_event_t>() - 16usize];
    ["Alignment of xcb_gravity_notify_event_t"]
        [::std::mem::align_of::<xcb_gravity_notify_event_t>() - 4usize];
    ["Offset of field: xcb_gravity_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_gravity_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_gravity_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_gravity_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_gravity_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_gravity_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, x) - 12usize];
    ["Offset of field: xcb_gravity_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_resize_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_resize_request_event_t"]
        [::std::mem::size_of::<xcb_resize_request_event_t>() - 12usize];
    ["Alignment of xcb_resize_request_event_t"]
        [::std::mem::align_of::<xcb_resize_request_event_t>() - 4usize];
    ["Offset of field: xcb_resize_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_resize_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_resize_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_resize_request_event_t::window"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, window) - 4usize];
    ["Offset of field: xcb_resize_request_event_t::width"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, width) - 8usize];
    ["Offset of field: xcb_resize_request_event_t::height"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, height) - 10usize];
};
pub const xcb_place_t_XCB_PLACE_ON_TOP: xcb_place_t = 0;
pub const xcb_place_t_XCB_PLACE_ON_BOTTOM: xcb_place_t = 1;
pub type xcb_place_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_circulate_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub pad1: [u8; 4usize],
    pub place: u8,
    pub pad2: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_circulate_notify_event_t"]
        [::std::mem::size_of::<xcb_circulate_notify_event_t>() - 20usize];
    ["Alignment of xcb_circulate_notify_event_t"]
        [::std::mem::align_of::<xcb_circulate_notify_event_t>() - 4usize];
    ["Offset of field: xcb_circulate_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_circulate_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_circulate_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_circulate_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad1) - 12usize];
    ["Offset of field: xcb_circulate_notify_event_t::place"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, place) - 16usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad2"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad2) - 17usize];
};
pub type xcb_circulate_request_event_t = xcb_circulate_notify_event_t;
pub const xcb_property_t_XCB_PROPERTY_NEW_VALUE: xcb_property_t = 0;
pub const xcb_property_t_XCB_PROPERTY_DELETE: xcb_property_t = 1;
pub type xcb_property_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_property_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub atom: xcb_atom_t,
    pub time: xcb_timestamp_t,
    pub state: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_property_notify_event_t"]
        [::std::mem::size_of::<xcb_property_notify_event_t>() - 20usize];
    ["Alignment of xcb_property_notify_event_t"]
        [::std::mem::align_of::<xcb_property_notify_event_t>() - 4usize];
    ["Offset of field: xcb_property_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_property_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_property_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_property_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_property_notify_event_t::atom"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, atom) - 8usize];
    ["Offset of field: xcb_property_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, time) - 12usize];
    ["Offset of field: xcb_property_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, state) - 16usize];
    ["Offset of field: xcb_property_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, pad1) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_clear_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_clear_event_t"]
        [::std::mem::size_of::<xcb_selection_clear_event_t>() - 16usize];
    ["Alignment of xcb_selection_clear_event_t"]
        [::std::mem::align_of::<xcb_selection_clear_event_t>() - 4usize];
    ["Offset of field: xcb_selection_clear_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_clear_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_clear_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_clear_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_clear_event_t::owner"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, owner) - 8usize];
    ["Offset of field: xcb_selection_clear_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, selection) - 12usize];
};
pub const xcb_time_t_XCB_TIME_CURRENT_TIME: xcb_time_t = 0;
pub type xcb_time_t = ::std::os::raw::c_uint;
pub const XCB_ATOM_NONE: xcb_atom_enum_t = 0;
pub const XCB_ATOM_ANY: xcb_atom_enum_t = 0;
pub const XCB_ATOM_PRIMARY: xcb_atom_enum_t = 1;
pub const XCB_ATOM_SECONDARY: xcb_atom_enum_t = 2;
pub const XCB_ATOM_ARC: xcb_atom_enum_t = 3;
pub const XCB_ATOM_ATOM: xcb_atom_enum_t = 4;
pub const XCB_ATOM_BITMAP: xcb_atom_enum_t = 5;
pub const XCB_ATOM_CARDINAL: xcb_atom_enum_t = 6;
pub const XCB_ATOM_COLORMAP: xcb_atom_enum_t = 7;
pub const XCB_ATOM_CURSOR: xcb_atom_enum_t = 8;
pub const XCB_ATOM_CUT_BUFFER0: xcb_atom_enum_t = 9;
pub const XCB_ATOM_CUT_BUFFER1: xcb_atom_enum_t = 10;
pub const XCB_ATOM_CUT_BUFFER2: xcb_atom_enum_t = 11;
pub const XCB_ATOM_CUT_BUFFER3: xcb_atom_enum_t = 12;
pub const XCB_ATOM_CUT_BUFFER4: xcb_atom_enum_t = 13;
pub const XCB_ATOM_CUT_BUFFER5: xcb_atom_enum_t = 14;
pub const XCB_ATOM_CUT_BUFFER6: xcb_atom_enum_t = 15;
pub const XCB_ATOM_CUT_BUFFER7: xcb_atom_enum_t = 16;
pub const XCB_ATOM_DRAWABLE: xcb_atom_enum_t = 17;
pub const XCB_ATOM_FONT: xcb_atom_enum_t = 18;
pub const XCB_ATOM_INTEGER: xcb_atom_enum_t = 19;
pub const XCB_ATOM_PIXMAP: xcb_atom_enum_t = 20;
pub const XCB_ATOM_POINT: xcb_atom_enum_t = 21;
pub const XCB_ATOM_RECTANGLE: xcb_atom_enum_t = 22;
pub const XCB_ATOM_RESOURCE_MANAGER: xcb_atom_enum_t = 23;
pub const XCB_ATOM_RGB_COLOR_MAP: xcb_atom_enum_t = 24;
pub const XCB_ATOM_RGB_BEST_MAP: xcb_atom_enum_t = 25;
pub const XCB_ATOM_RGB_BLUE_MAP: xcb_atom_enum_t = 26;
pub const XCB_ATOM_RGB_DEFAULT_MAP: xcb_atom_enum_t = 27;
pub const XCB_ATOM_RGB_GRAY_MAP: xcb_atom_enum_t = 28;
pub const XCB_ATOM_RGB_GREEN_MAP: xcb_atom_enum_t = 29;
pub const XCB_ATOM_RGB_RED_MAP: xcb_atom_enum_t = 30;
pub const XCB_ATOM_STRING: xcb_atom_enum_t = 31;
pub const XCB_ATOM_VISUALID: xcb_atom_enum_t = 32;
pub const XCB_ATOM_WINDOW: xcb_atom_enum_t = 33;
pub const XCB_ATOM_WM_COMMAND: xcb_atom_enum_t = 34;
pub const XCB_ATOM_WM_HINTS: xcb_atom_enum_t = 35;
pub const XCB_ATOM_WM_CLIENT_MACHINE: xcb_atom_enum_t = 36;
pub const XCB_ATOM_WM_ICON_NAME: xcb_atom_enum_t = 37;
pub const XCB_ATOM_WM_ICON_SIZE: xcb_atom_enum_t = 38;
pub const XCB_ATOM_WM_NAME: xcb_atom_enum_t = 39;
pub const XCB_ATOM_WM_NORMAL_HINTS: xcb_atom_enum_t = 40;
pub const XCB_ATOM_WM_SIZE_HINTS: xcb_atom_enum_t = 41;
pub const XCB_ATOM_WM_ZOOM_HINTS: xcb_atom_enum_t = 42;
pub const XCB_ATOM_MIN_SPACE: xcb_atom_enum_t = 43;
pub const XCB_ATOM_NORM_SPACE: xcb_atom_enum_t = 44;
pub const XCB_ATOM_MAX_SPACE: xcb_atom_enum_t = 45;
pub const XCB_ATOM_END_SPACE: xcb_atom_enum_t = 46;
pub const XCB_ATOM_SUPERSCRIPT_X: xcb_atom_enum_t = 47;
pub const XCB_ATOM_SUPERSCRIPT_Y: xcb_atom_enum_t = 48;
pub const XCB_ATOM_SUBSCRIPT_X: xcb_atom_enum_t = 49;
pub const XCB_ATOM_SUBSCRIPT_Y: xcb_atom_enum_t = 50;
pub const XCB_ATOM_UNDERLINE_POSITION: xcb_atom_enum_t = 51;
pub const XCB_ATOM_UNDERLINE_THICKNESS: xcb_atom_enum_t = 52;
pub const XCB_ATOM_STRIKEOUT_ASCENT: xcb_atom_enum_t = 53;
pub const XCB_ATOM_STRIKEOUT_DESCENT: xcb_atom_enum_t = 54;
pub const XCB_ATOM_ITALIC_ANGLE: xcb_atom_enum_t = 55;
pub const XCB_ATOM_X_HEIGHT: xcb_atom_enum_t = 56;
pub const XCB_ATOM_QUAD_WIDTH: xcb_atom_enum_t = 57;
pub const XCB_ATOM_WEIGHT: xcb_atom_enum_t = 58;
pub const XCB_ATOM_POINT_SIZE: xcb_atom_enum_t = 59;
pub const XCB_ATOM_RESOLUTION: xcb_atom_enum_t = 60;
pub const XCB_ATOM_COPYRIGHT: xcb_atom_enum_t = 61;
pub const XCB_ATOM_NOTICE: xcb_atom_enum_t = 62;
pub const XCB_ATOM_FONT_NAME: xcb_atom_enum_t = 63;
pub const XCB_ATOM_FAMILY_NAME: xcb_atom_enum_t = 64;
pub const XCB_ATOM_FULL_NAME: xcb_atom_enum_t = 65;
pub const XCB_ATOM_CAP_HEIGHT: xcb_atom_enum_t = 66;
pub const XCB_ATOM_WM_CLASS: xcb_atom_enum_t = 67;
pub const XCB_ATOM_WM_TRANSIENT_FOR: xcb_atom_enum_t = 68;
pub type xcb_atom_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_request_event_t"]
        [::std::mem::size_of::<xcb_selection_request_event_t>() - 28usize];
    ["Alignment of xcb_selection_request_event_t"]
        [::std::mem::align_of::<xcb_selection_request_event_t>() - 4usize];
    ["Offset of field: xcb_selection_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_request_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_request_event_t::owner"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, owner) - 8usize];
    ["Offset of field: xcb_selection_request_event_t::requestor"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, requestor) - 12usize];
    ["Offset of field: xcb_selection_request_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, selection) - 16usize];
    ["Offset of field: xcb_selection_request_event_t::target"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, target) - 20usize];
    ["Offset of field: xcb_selection_request_event_t::property"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, property) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_notify_event_t"]
        [::std::mem::size_of::<xcb_selection_notify_event_t>() - 24usize];
    ["Alignment of xcb_selection_notify_event_t"]
        [::std::mem::align_of::<xcb_selection_notify_event_t>() - 4usize];
    ["Offset of field: xcb_selection_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_notify_event_t::requestor"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, requestor) - 8usize];
    ["Offset of field: xcb_selection_notify_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, selection) - 12usize];
    ["Offset of field: xcb_selection_notify_event_t::target"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, target) - 16usize];
    ["Offset of field: xcb_selection_notify_event_t::property"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, property) - 20usize];
};
pub const xcb_colormap_state_t_XCB_COLORMAP_STATE_UNINSTALLED: xcb_colormap_state_t = 0;
pub const xcb_colormap_state_t_XCB_COLORMAP_STATE_INSTALLED: xcb_colormap_state_t = 1;
pub type xcb_colormap_state_t = ::std::os::raw::c_uint;
pub const xcb_colormap_enum_t_XCB_COLORMAP_NONE: xcb_colormap_enum_t = 0;
pub type xcb_colormap_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_colormap_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub colormap: xcb_colormap_t,
    pub _new: u8,
    pub state: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_colormap_notify_event_t"]
        [::std::mem::size_of::<xcb_colormap_notify_event_t>() - 16usize];
    ["Alignment of xcb_colormap_notify_event_t"]
        [::std::mem::align_of::<xcb_colormap_notify_event_t>() - 4usize];
    ["Offset of field: xcb_colormap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_colormap_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_colormap_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_colormap_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_colormap_notify_event_t::colormap"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, colormap) - 8usize];
    ["Offset of field: xcb_colormap_notify_event_t::_new"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, _new) - 12usize];
    ["Offset of field: xcb_colormap_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, state) - 13usize];
    ["Offset of field: xcb_colormap_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_client_message_data_t {
    pub data8: [u8; 20usize],
    pub data16: [u16; 10usize],
    pub data32: [u32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_data_t"]
        [::std::mem::size_of::<xcb_client_message_data_t>() - 20usize];
    ["Alignment of xcb_client_message_data_t"]
        [::std::mem::align_of::<xcb_client_message_data_t>() - 4usize];
    ["Offset of field: xcb_client_message_data_t::data8"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data8) - 0usize];
    ["Offset of field: xcb_client_message_data_t::data16"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data16) - 0usize];
    ["Offset of field: xcb_client_message_data_t::data32"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_client_message_data_iterator_t {
    pub data: *mut xcb_client_message_data_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_data_iterator_t"]
        [::std::mem::size_of::<xcb_client_message_data_iterator_t>() - 16usize];
    ["Alignment of xcb_client_message_data_iterator_t"]
        [::std::mem::align_of::<xcb_client_message_data_iterator_t>() - 8usize];
    ["Offset of field: xcb_client_message_data_iterator_t::data"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, data) - 0usize];
    ["Offset of field: xcb_client_message_data_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_client_message_data_iterator_t::index"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcb_client_message_event_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub type_: xcb_atom_t,
    pub data: xcb_client_message_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_event_t"]
        [::std::mem::size_of::<xcb_client_message_event_t>() - 32usize];
    ["Alignment of xcb_client_message_event_t"]
        [::std::mem::align_of::<xcb_client_message_event_t>() - 4usize];
    ["Offset of field: xcb_client_message_event_t::response_type"]
        [::std::mem::offset_of!(xcb_client_message_event_t, response_type) - 0usize];
    ["Offset of field: xcb_client_message_event_t::format"]
        [::std::mem::offset_of!(xcb_client_message_event_t, format) - 1usize];
    ["Offset of field: xcb_client_message_event_t::sequence"]
        [::std::mem::offset_of!(xcb_client_message_event_t, sequence) - 2usize];
    ["Offset of field: xcb_client_message_event_t::window"]
        [::std::mem::offset_of!(xcb_client_message_event_t, window) - 4usize];
    ["Offset of field: xcb_client_message_event_t::type_"]
        [::std::mem::offset_of!(xcb_client_message_event_t, type_) - 8usize];
    ["Offset of field: xcb_client_message_event_t::data"]
        [::std::mem::offset_of!(xcb_client_message_event_t, data) - 12usize];
};
pub const xcb_mapping_t_XCB_MAPPING_MODIFIER: xcb_mapping_t = 0;
pub const xcb_mapping_t_XCB_MAPPING_KEYBOARD: xcb_mapping_t = 1;
pub const xcb_mapping_t_XCB_MAPPING_POINTER: xcb_mapping_t = 2;
pub type xcb_mapping_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_mapping_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub request: u8,
    pub first_keycode: xcb_keycode_t,
    pub count: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_mapping_notify_event_t"]
        [::std::mem::size_of::<xcb_mapping_notify_event_t>() - 8usize];
    ["Alignment of xcb_mapping_notify_event_t"]
        [::std::mem::align_of::<xcb_mapping_notify_event_t>() - 2usize];
    ["Offset of field: xcb_mapping_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_mapping_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_mapping_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_mapping_notify_event_t::request"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, request) - 4usize];
    ["Offset of field: xcb_mapping_notify_event_t::first_keycode"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, first_keycode) - 5usize];
    ["Offset of field: xcb_mapping_notify_event_t::count"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, count) - 6usize];
    ["Offset of field: xcb_mapping_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, pad1) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ge_generic_event_t {
    pub response_type: u8,
    pub extension: u8,
    pub sequence: u16,
    pub length: u32,
    pub event_type: u16,
    pub pad0: [u8; 22usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ge_generic_event_t"][::std::mem::size_of::<xcb_ge_generic_event_t>() - 36usize];
    ["Alignment of xcb_ge_generic_event_t"]
        [::std::mem::align_of::<xcb_ge_generic_event_t>() - 4usize];
    ["Offset of field: xcb_ge_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_ge_generic_event_t::extension"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, extension) - 1usize];
    ["Offset of field: xcb_ge_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_ge_generic_event_t::length"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, length) - 4usize];
    ["Offset of field: xcb_ge_generic_event_t::event_type"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, event_type) - 8usize];
    ["Offset of field: xcb_ge_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, pad0) - 10usize];
    ["Offset of field: xcb_ge_generic_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_request_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_request_error_t"][::std::mem::size_of::<xcb_request_error_t>() - 12usize];
    ["Alignment of xcb_request_error_t"][::std::mem::align_of::<xcb_request_error_t>() - 4usize];
    ["Offset of field: xcb_request_error_t::response_type"]
        [::std::mem::offset_of!(xcb_request_error_t, response_type) - 0usize];
    ["Offset of field: xcb_request_error_t::error_code"]
        [::std::mem::offset_of!(xcb_request_error_t, error_code) - 1usize];
    ["Offset of field: xcb_request_error_t::sequence"]
        [::std::mem::offset_of!(xcb_request_error_t, sequence) - 2usize];
    ["Offset of field: xcb_request_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_request_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_request_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_request_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_request_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_request_error_t, major_opcode) - 10usize];
    ["Offset of field: xcb_request_error_t::pad0"]
        [::std::mem::offset_of!(xcb_request_error_t, pad0) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_value_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_value_error_t"][::std::mem::size_of::<xcb_value_error_t>() - 12usize];
    ["Alignment of xcb_value_error_t"][::std::mem::align_of::<xcb_value_error_t>() - 4usize];
    ["Offset of field: xcb_value_error_t::response_type"]
        [::std::mem::offset_of!(xcb_value_error_t, response_type) - 0usize];
    ["Offset of field: xcb_value_error_t::error_code"]
        [::std::mem::offset_of!(xcb_value_error_t, error_code) - 1usize];
    ["Offset of field: xcb_value_error_t::sequence"]
        [::std::mem::offset_of!(xcb_value_error_t, sequence) - 2usize];
    ["Offset of field: xcb_value_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_value_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_value_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_value_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_value_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_value_error_t, major_opcode) - 10usize];
    ["Offset of field: xcb_value_error_t::pad0"]
        [::std::mem::offset_of!(xcb_value_error_t, pad0) - 11usize];
};
pub type xcb_window_error_t = xcb_value_error_t;
pub type xcb_pixmap_error_t = xcb_value_error_t;
pub type xcb_atom_error_t = xcb_value_error_t;
pub type xcb_cursor_error_t = xcb_value_error_t;
pub type xcb_font_error_t = xcb_value_error_t;
pub type xcb_match_error_t = xcb_request_error_t;
pub type xcb_drawable_error_t = xcb_value_error_t;
pub type xcb_access_error_t = xcb_request_error_t;
pub type xcb_alloc_error_t = xcb_request_error_t;
pub type xcb_colormap_error_t = xcb_value_error_t;
pub type xcb_g_context_error_t = xcb_value_error_t;
pub type xcb_id_choice_error_t = xcb_value_error_t;
pub type xcb_name_error_t = xcb_request_error_t;
pub type xcb_length_error_t = xcb_request_error_t;
pub type xcb_implementation_error_t = xcb_request_error_t;
pub const XCB_WINDOW_CLASS_COPY_FROM_PARENT: xcb_window_class_t = 0;
pub const XCB_WINDOW_CLASS_INPUT_OUTPUT: xcb_window_class_t = 1;
pub const XCB_WINDOW_CLASS_INPUT_ONLY: xcb_window_class_t = 2;
pub type xcb_window_class_t = ::std::os::raw::c_uint;
pub const XCB_CW_BACK_PIXMAP: xcb_cw_t = 1;
pub const XCB_CW_BACK_PIXEL: xcb_cw_t = 2;
pub const XCB_CW_BORDER_PIXMAP: xcb_cw_t = 4;
pub const XCB_CW_BORDER_PIXEL: xcb_cw_t = 8;
pub const XCB_CW_BIT_GRAVITY: xcb_cw_t = 16;
pub const XCB_CW_WIN_GRAVITY: xcb_cw_t = 32;
pub const XCB_CW_BACKING_STORE: xcb_cw_t = 64;
pub const XCB_CW_BACKING_PLANES: xcb_cw_t = 128;
pub const XCB_CW_BACKING_PIXEL: xcb_cw_t = 256;
pub const XCB_CW_OVERRIDE_REDIRECT: xcb_cw_t = 512;
pub const XCB_CW_SAVE_UNDER: xcb_cw_t = 1024;
pub const XCB_CW_EVENT_MASK: xcb_cw_t = 2048;
pub const XCB_CW_DONT_PROPAGATE: xcb_cw_t = 4096;
pub const XCB_CW_COLORMAP: xcb_cw_t = 8192;
pub const XCB_CW_CURSOR: xcb_cw_t = 16384;
pub type xcb_cw_t = ::std::os::raw::c_uint;
pub const XCB_BACK_PIXMAP_NONE: xcb_back_pixmap_t = 0;
pub const XCB_BACK_PIXMAP_PARENT_RELATIVE: xcb_back_pixmap_t = 1;
pub type xcb_back_pixmap_t = ::std::os::raw::c_uint;
pub const XCB_GRAVITY_BIT_FORGET: xcb_gravity_t = 0;
pub const XCB_GRAVITY_WIN_UNMAP: xcb_gravity_t = 0;
pub const XCB_GRAVITY_NORTH_WEST: xcb_gravity_t = 1;
pub const XCB_GRAVITY_NORTH: xcb_gravity_t = 2;
pub const XCB_GRAVITY_NORTH_EAST: xcb_gravity_t = 3;
pub const XCB_GRAVITY_WEST: xcb_gravity_t = 4;
pub const XCB_GRAVITY_CENTER: xcb_gravity_t = 5;
pub const XCB_GRAVITY_EAST: xcb_gravity_t = 6;
pub const XCB_GRAVITY_SOUTH_WEST: xcb_gravity_t = 7;
pub const XCB_GRAVITY_SOUTH: xcb_gravity_t = 8;
pub const XCB_GRAVITY_SOUTH_EAST: xcb_gravity_t = 9;
pub const XCB_GRAVITY_STATIC: xcb_gravity_t = 10;
pub type xcb_gravity_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_window_value_list_t {
    pub background_pixmap: xcb_pixmap_t,
    pub background_pixel: u32,
    pub border_pixmap: xcb_pixmap_t,
    pub border_pixel: u32,
    pub bit_gravity: u32,
    pub win_gravity: u32,
    pub backing_store: u32,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub override_redirect: xcb_bool32_t,
    pub save_under: xcb_bool32_t,
    pub event_mask: u32,
    pub do_not_propogate_mask: u32,
    pub colormap: xcb_colormap_t,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_window_value_list_t"]
        [::std::mem::size_of::<xcb_create_window_value_list_t>() - 60usize];
    ["Alignment of xcb_create_window_value_list_t"]
        [::std::mem::align_of::<xcb_create_window_value_list_t>() - 4usize];
    ["Offset of field: xcb_create_window_value_list_t::background_pixmap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, background_pixmap) - 0usize];
    ["Offset of field: xcb_create_window_value_list_t::background_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, background_pixel) - 4usize];
    ["Offset of field: xcb_create_window_value_list_t::border_pixmap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, border_pixmap) - 8usize];
    ["Offset of field: xcb_create_window_value_list_t::border_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, border_pixel) - 12usize];
    ["Offset of field: xcb_create_window_value_list_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, bit_gravity) - 16usize];
    ["Offset of field: xcb_create_window_value_list_t::win_gravity"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, win_gravity) - 20usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_store"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_store) - 24usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_planes"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_planes) - 28usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_pixel) - 32usize];
    ["Offset of field: xcb_create_window_value_list_t::override_redirect"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, override_redirect) - 36usize];
    ["Offset of field: xcb_create_window_value_list_t::save_under"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, save_under) - 40usize];
    ["Offset of field: xcb_create_window_value_list_t::event_mask"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, event_mask) - 44usize];
    ["Offset of field: xcb_create_window_value_list_t::do_not_propogate_mask"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, do_not_propogate_mask) - 48usize];
    ["Offset of field: xcb_create_window_value_list_t::colormap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, colormap) - 52usize];
    ["Offset of field: xcb_create_window_value_list_t::cursor"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, cursor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_window_request_t {
    pub major_opcode: u8,
    pub depth: u8,
    pub length: u16,
    pub wid: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub _class: u16,
    pub visual: xcb_visualid_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_window_request_t"]
        [::std::mem::size_of::<xcb_create_window_request_t>() - 32usize];
    ["Alignment of xcb_create_window_request_t"]
        [::std::mem::align_of::<xcb_create_window_request_t>() - 4usize];
    ["Offset of field: xcb_create_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_window_request_t::depth"]
        [::std::mem::offset_of!(xcb_create_window_request_t, depth) - 1usize];
    ["Offset of field: xcb_create_window_request_t::length"]
        [::std::mem::offset_of!(xcb_create_window_request_t, length) - 2usize];
    ["Offset of field: xcb_create_window_request_t::wid"]
        [::std::mem::offset_of!(xcb_create_window_request_t, wid) - 4usize];
    ["Offset of field: xcb_create_window_request_t::parent"]
        [::std::mem::offset_of!(xcb_create_window_request_t, parent) - 8usize];
    ["Offset of field: xcb_create_window_request_t::x"]
        [::std::mem::offset_of!(xcb_create_window_request_t, x) - 12usize];
    ["Offset of field: xcb_create_window_request_t::y"]
        [::std::mem::offset_of!(xcb_create_window_request_t, y) - 14usize];
    ["Offset of field: xcb_create_window_request_t::width"]
        [::std::mem::offset_of!(xcb_create_window_request_t, width) - 16usize];
    ["Offset of field: xcb_create_window_request_t::height"]
        [::std::mem::offset_of!(xcb_create_window_request_t, height) - 18usize];
    ["Offset of field: xcb_create_window_request_t::border_width"]
        [::std::mem::offset_of!(xcb_create_window_request_t, border_width) - 20usize];
    ["Offset of field: xcb_create_window_request_t::_class"]
        [::std::mem::offset_of!(xcb_create_window_request_t, _class) - 22usize];
    ["Offset of field: xcb_create_window_request_t::visual"]
        [::std::mem::offset_of!(xcb_create_window_request_t, visual) - 24usize];
    ["Offset of field: xcb_create_window_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_create_window_request_t, value_mask) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_window_attributes_value_list_t {
    pub background_pixmap: xcb_pixmap_t,
    pub background_pixel: u32,
    pub border_pixmap: xcb_pixmap_t,
    pub border_pixel: u32,
    pub bit_gravity: u32,
    pub win_gravity: u32,
    pub backing_store: u32,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub override_redirect: xcb_bool32_t,
    pub save_under: xcb_bool32_t,
    pub event_mask: u32,
    pub do_not_propogate_mask: u32,
    pub colormap: xcb_colormap_t,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_window_attributes_value_list_t"]
        [::std::mem::size_of::<xcb_change_window_attributes_value_list_t>() - 60usize];
    ["Alignment of xcb_change_window_attributes_value_list_t"]
        [::std::mem::align_of::<xcb_change_window_attributes_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::background_pixmap"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        background_pixmap
    ) - 0usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::background_pixel"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        background_pixel
    ) - 4usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::border_pixmap"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, border_pixmap) - 8usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::border_pixel"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, border_pixel) - 12usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, bit_gravity) - 16usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::win_gravity"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, win_gravity) - 20usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_store"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_store
    ) - 24usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_planes"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_planes
    ) - 28usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_pixel"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_pixel
    ) - 32usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::override_redirect"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        override_redirect
    ) - 36usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::save_under"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, save_under) - 40usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::event_mask"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, event_mask) - 44usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::do_not_propogate_mask"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        do_not_propogate_mask
    )
        - 48usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::colormap"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, colormap) - 52usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::cursor"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, cursor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_window_attributes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_window_attributes_request_t"]
        [::std::mem::size_of::<xcb_change_window_attributes_request_t>() - 12usize];
    ["Alignment of xcb_change_window_attributes_request_t"]
        [::std::mem::align_of::<xcb_change_window_attributes_request_t>() - 4usize];
    ["Offset of field: xcb_change_window_attributes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_window_attributes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_window_attributes_request_t::length"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, length) - 2usize];
    ["Offset of field: xcb_change_window_attributes_request_t::window"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, window) - 4usize];
    ["Offset of field: xcb_change_window_attributes_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, value_mask) - 8usize];
};
pub const xcb_map_state_t_XCB_MAP_STATE_UNMAPPED: xcb_map_state_t = 0;
pub const xcb_map_state_t_XCB_MAP_STATE_UNVIEWABLE: xcb_map_state_t = 1;
pub const xcb_map_state_t_XCB_MAP_STATE_VIEWABLE: xcb_map_state_t = 2;
pub type xcb_map_state_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_cookie_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_cookie_t>() - 4usize];
    ["Alignment of xcb_get_window_attributes_cookie_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_window_attributes_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_request_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_request_t>() - 8usize];
    ["Alignment of xcb_get_window_attributes_request_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_request_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_window_attributes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_window_attributes_request_t::length"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, length) - 2usize];
    ["Offset of field: xcb_get_window_attributes_request_t::window"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_reply_t {
    pub response_type: u8,
    pub backing_store: u8,
    pub sequence: u16,
    pub length: u32,
    pub visual: xcb_visualid_t,
    pub _class: u16,
    pub bit_gravity: u8,
    pub win_gravity: u8,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub save_under: u8,
    pub map_is_installed: u8,
    pub map_state: u8,
    pub override_redirect: u8,
    pub colormap: xcb_colormap_t,
    pub all_event_masks: u32,
    pub your_event_mask: u32,
    pub do_not_propagate_mask: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_reply_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_reply_t>() - 44usize];
    ["Alignment of xcb_get_window_attributes_reply_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_reply_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_store"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_store) - 1usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::visual"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, visual) - 8usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::_class"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, _class) - 12usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, bit_gravity) - 14usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::win_gravity"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, win_gravity) - 15usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_planes"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_planes) - 16usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_pixel"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_pixel) - 20usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::save_under"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, save_under) - 24usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::map_is_installed"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, map_is_installed) - 25usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::map_state"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, map_state) - 26usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::override_redirect"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, override_redirect) - 27usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::colormap"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, colormap) - 28usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::all_event_masks"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, all_event_masks) - 32usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::your_event_mask"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, your_event_mask) - 36usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::do_not_propagate_mask"][::std::mem::offset_of!(
        xcb_get_window_attributes_reply_t,
        do_not_propagate_mask
    ) - 40usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, pad0) - 42usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_window_request_t"]
        [::std::mem::size_of::<xcb_destroy_window_request_t>() - 8usize];
    ["Alignment of xcb_destroy_window_request_t"]
        [::std::mem::align_of::<xcb_destroy_window_request_t>() - 4usize];
    ["Offset of field: xcb_destroy_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_destroy_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_window_request_t::length"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, length) - 2usize];
    ["Offset of field: xcb_destroy_window_request_t::window"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_subwindows_request_t"]
        [::std::mem::size_of::<xcb_destroy_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_destroy_subwindows_request_t"]
        [::std::mem::align_of::<xcb_destroy_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, window) - 4usize];
};
pub const xcb_set_mode_t_XCB_SET_MODE_INSERT: xcb_set_mode_t = 0;
pub const xcb_set_mode_t_XCB_SET_MODE_DELETE: xcb_set_mode_t = 1;
pub type xcb_set_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_save_set_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_save_set_request_t"]
        [::std::mem::size_of::<xcb_change_save_set_request_t>() - 8usize];
    ["Alignment of xcb_change_save_set_request_t"]
        [::std::mem::align_of::<xcb_change_save_set_request_t>() - 4usize];
    ["Offset of field: xcb_change_save_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_save_set_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_save_set_request_t::length"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, length) - 2usize];
    ["Offset of field: xcb_change_save_set_request_t::window"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_reparent_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_reparent_window_request_t"]
        [::std::mem::size_of::<xcb_reparent_window_request_t>() - 16usize];
    ["Alignment of xcb_reparent_window_request_t"]
        [::std::mem::align_of::<xcb_reparent_window_request_t>() - 4usize];
    ["Offset of field: xcb_reparent_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_reparent_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_reparent_window_request_t::length"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, length) - 2usize];
    ["Offset of field: xcb_reparent_window_request_t::window"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, window) - 4usize];
    ["Offset of field: xcb_reparent_window_request_t::parent"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, parent) - 8usize];
    ["Offset of field: xcb_reparent_window_request_t::x"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, x) - 12usize];
    ["Offset of field: xcb_reparent_window_request_t::y"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_window_request_t"]
        [::std::mem::size_of::<xcb_map_window_request_t>() - 8usize];
    ["Alignment of xcb_map_window_request_t"]
        [::std::mem::align_of::<xcb_map_window_request_t>() - 4usize];
    ["Offset of field: xcb_map_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_map_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_map_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_map_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_map_window_request_t::length"]
        [::std::mem::offset_of!(xcb_map_window_request_t, length) - 2usize];
    ["Offset of field: xcb_map_window_request_t::window"]
        [::std::mem::offset_of!(xcb_map_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_subwindows_request_t"]
        [::std::mem::size_of::<xcb_map_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_map_subwindows_request_t"]
        [::std::mem::align_of::<xcb_map_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_map_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_map_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_map_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_map_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_window_request_t"]
        [::std::mem::size_of::<xcb_unmap_window_request_t>() - 8usize];
    ["Alignment of xcb_unmap_window_request_t"]
        [::std::mem::align_of::<xcb_unmap_window_request_t>() - 4usize];
    ["Offset of field: xcb_unmap_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_unmap_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_window_request_t::length"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, length) - 2usize];
    ["Offset of field: xcb_unmap_window_request_t::window"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_subwindows_request_t"]
        [::std::mem::size_of::<xcb_unmap_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_unmap_subwindows_request_t"]
        [::std::mem::align_of::<xcb_unmap_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, window) - 4usize];
};
pub const XCB_CONFIG_WINDOW_X: xcb_config_window_t = 1;
pub const XCB_CONFIG_WINDOW_Y: xcb_config_window_t = 2;
pub const XCB_CONFIG_WINDOW_WIDTH: xcb_config_window_t = 4;
pub const XCB_CONFIG_WINDOW_HEIGHT: xcb_config_window_t = 8;
pub const XCB_CONFIG_WINDOW_BORDER_WIDTH: xcb_config_window_t = 16;
pub const XCB_CONFIG_WINDOW_SIBLING: xcb_config_window_t = 32;
pub const XCB_CONFIG_WINDOW_STACK_MODE: xcb_config_window_t = 64;
pub type xcb_config_window_t = ::std::os::raw::c_uint;
pub const XCB_STACK_MODE_ABOVE: xcb_stack_mode_t = 0;
pub const XCB_STACK_MODE_BELOW: xcb_stack_mode_t = 1;
pub const XCB_STACK_MODE_TOP_IF: xcb_stack_mode_t = 2;
pub const XCB_STACK_MODE_BOTTOM_IF: xcb_stack_mode_t = 3;
pub const XCB_STACK_MODE_OPPOSITE: xcb_stack_mode_t = 4;
pub type xcb_stack_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_window_value_list_t {
    pub x: i32,
    pub y: i32,
    pub width: u32,
    pub height: u32,
    pub border_width: u32,
    pub sibling: xcb_window_t,
    pub stack_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_window_value_list_t"]
        [::std::mem::size_of::<xcb_configure_window_value_list_t>() - 28usize];
    ["Alignment of xcb_configure_window_value_list_t"]
        [::std::mem::align_of::<xcb_configure_window_value_list_t>() - 4usize];
    ["Offset of field: xcb_configure_window_value_list_t::x"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, x) - 0usize];
    ["Offset of field: xcb_configure_window_value_list_t::y"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, y) - 4usize];
    ["Offset of field: xcb_configure_window_value_list_t::width"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, width) - 8usize];
    ["Offset of field: xcb_configure_window_value_list_t::height"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, height) - 12usize];
    ["Offset of field: xcb_configure_window_value_list_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, border_width) - 16usize];
    ["Offset of field: xcb_configure_window_value_list_t::sibling"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, sibling) - 20usize];
    ["Offset of field: xcb_configure_window_value_list_t::stack_mode"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, stack_mode) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub value_mask: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_window_request_t"]
        [::std::mem::size_of::<xcb_configure_window_request_t>() - 12usize];
    ["Alignment of xcb_configure_window_request_t"]
        [::std::mem::align_of::<xcb_configure_window_request_t>() - 4usize];
    ["Offset of field: xcb_configure_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_configure_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_configure_window_request_t::length"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, length) - 2usize];
    ["Offset of field: xcb_configure_window_request_t::window"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, window) - 4usize];
    ["Offset of field: xcb_configure_window_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, value_mask) - 8usize];
    ["Offset of field: xcb_configure_window_request_t::pad1"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, pad1) - 10usize];
};
pub const xcb_circulate_t_XCB_CIRCULATE_RAISE_LOWEST: xcb_circulate_t = 0;
pub const xcb_circulate_t_XCB_CIRCULATE_LOWER_HIGHEST: xcb_circulate_t = 1;
pub type xcb_circulate_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_circulate_window_request_t {
    pub major_opcode: u8,
    pub direction: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_circulate_window_request_t"]
        [::std::mem::size_of::<xcb_circulate_window_request_t>() - 8usize];
    ["Alignment of xcb_circulate_window_request_t"]
        [::std::mem::align_of::<xcb_circulate_window_request_t>() - 4usize];
    ["Offset of field: xcb_circulate_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_circulate_window_request_t::direction"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, direction) - 1usize];
    ["Offset of field: xcb_circulate_window_request_t::length"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, length) - 2usize];
    ["Offset of field: xcb_circulate_window_request_t::window"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_cookie_t"]
        [::std::mem::size_of::<xcb_get_geometry_cookie_t>() - 4usize];
    ["Alignment of xcb_get_geometry_cookie_t"]
        [::std::mem::align_of::<xcb_get_geometry_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_geometry_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_request_t"]
        [::std::mem::size_of::<xcb_get_geometry_request_t>() - 8usize];
    ["Alignment of xcb_get_geometry_request_t"]
        [::std::mem::align_of::<xcb_get_geometry_request_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_geometry_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_geometry_request_t::length"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, length) - 2usize];
    ["Offset of field: xcb_get_geometry_request_t::drawable"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, drawable) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_reply_t {
    pub response_type: u8,
    pub depth: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_reply_t"]
        [::std::mem::size_of::<xcb_get_geometry_reply_t>() - 24usize];
    ["Alignment of xcb_get_geometry_reply_t"]
        [::std::mem::align_of::<xcb_get_geometry_reply_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_geometry_reply_t::depth"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, depth) - 1usize];
    ["Offset of field: xcb_get_geometry_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_geometry_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_geometry_reply_t::root"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, root) - 8usize];
    ["Offset of field: xcb_get_geometry_reply_t::x"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, x) - 12usize];
    ["Offset of field: xcb_get_geometry_reply_t::y"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, y) - 14usize];
    ["Offset of field: xcb_get_geometry_reply_t::width"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, width) - 16usize];
    ["Offset of field: xcb_get_geometry_reply_t::height"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, height) - 18usize];
    ["Offset of field: xcb_get_geometry_reply_t::border_width"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, border_width) - 20usize];
    ["Offset of field: xcb_get_geometry_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_cookie_t"][::std::mem::size_of::<xcb_query_tree_cookie_t>() - 4usize];
    ["Alignment of xcb_query_tree_cookie_t"]
        [::std::mem::align_of::<xcb_query_tree_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_tree_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_tree_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_request_t"]
        [::std::mem::size_of::<xcb_query_tree_request_t>() - 8usize];
    ["Alignment of xcb_query_tree_request_t"]
        [::std::mem::align_of::<xcb_query_tree_request_t>() - 4usize];
    ["Offset of field: xcb_query_tree_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_tree_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_tree_request_t::length"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, length) - 2usize];
    ["Offset of field: xcb_query_tree_request_t::window"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub parent: xcb_window_t,
    pub children_len: u16,
    pub pad1: [u8; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_reply_t"][::std::mem::size_of::<xcb_query_tree_reply_t>() - 32usize];
    ["Alignment of xcb_query_tree_reply_t"]
        [::std::mem::align_of::<xcb_query_tree_reply_t>() - 4usize];
    ["Offset of field: xcb_query_tree_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_tree_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_tree_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_tree_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_tree_reply_t::root"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, root) - 8usize];
    ["Offset of field: xcb_query_tree_reply_t::parent"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, parent) - 12usize];
    ["Offset of field: xcb_query_tree_reply_t::children_len"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, children_len) - 16usize];
    ["Offset of field: xcb_query_tree_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, pad1) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_cookie_t"]
        [::std::mem::size_of::<xcb_intern_atom_cookie_t>() - 4usize];
    ["Alignment of xcb_intern_atom_cookie_t"]
        [::std::mem::align_of::<xcb_intern_atom_cookie_t>() - 4usize];
    ["Offset of field: xcb_intern_atom_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_intern_atom_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_request_t {
    pub major_opcode: u8,
    pub only_if_exists: u8,
    pub length: u16,
    pub name_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_request_t"]
        [::std::mem::size_of::<xcb_intern_atom_request_t>() - 8usize];
    ["Alignment of xcb_intern_atom_request_t"]
        [::std::mem::align_of::<xcb_intern_atom_request_t>() - 2usize];
    ["Offset of field: xcb_intern_atom_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_intern_atom_request_t::only_if_exists"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, only_if_exists) - 1usize];
    ["Offset of field: xcb_intern_atom_request_t::length"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, length) - 2usize];
    ["Offset of field: xcb_intern_atom_request_t::name_len"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, name_len) - 4usize];
    ["Offset of field: xcb_intern_atom_request_t::pad0"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub atom: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_reply_t"][::std::mem::size_of::<xcb_intern_atom_reply_t>() - 12usize];
    ["Alignment of xcb_intern_atom_reply_t"]
        [::std::mem::align_of::<xcb_intern_atom_reply_t>() - 4usize];
    ["Offset of field: xcb_intern_atom_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_intern_atom_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_intern_atom_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_intern_atom_reply_t::length"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, length) - 4usize];
    ["Offset of field: xcb_intern_atom_reply_t::atom"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, atom) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_cookie_t"]
        [::std::mem::size_of::<xcb_get_atom_name_cookie_t>() - 4usize];
    ["Alignment of xcb_get_atom_name_cookie_t"]
        [::std::mem::align_of::<xcb_get_atom_name_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_atom_name_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub atom: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_request_t"]
        [::std::mem::size_of::<xcb_get_atom_name_request_t>() - 8usize];
    ["Alignment of xcb_get_atom_name_request_t"]
        [::std::mem::align_of::<xcb_get_atom_name_request_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_atom_name_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_atom_name_request_t::length"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, length) - 2usize];
    ["Offset of field: xcb_get_atom_name_request_t::atom"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, atom) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub name_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_reply_t"]
        [::std::mem::size_of::<xcb_get_atom_name_reply_t>() - 32usize];
    ["Alignment of xcb_get_atom_name_reply_t"]
        [::std::mem::align_of::<xcb_get_atom_name_reply_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_atom_name_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_atom_name_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_atom_name_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_atom_name_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, name_len) - 8usize];
    ["Offset of field: xcb_get_atom_name_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, pad1) - 10usize];
};
pub const XCB_PROP_MODE_REPLACE: xcb_prop_mode_t = 0;
pub const XCB_PROP_MODE_PREPEND: xcb_prop_mode_t = 1;
pub const XCB_PROP_MODE_APPEND: xcb_prop_mode_t = 2;
pub type xcb_prop_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_property_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub pad0: [u8; 3usize],
    pub data_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_property_request_t"]
        [::std::mem::size_of::<xcb_change_property_request_t>() - 24usize];
    ["Alignment of xcb_change_property_request_t"]
        [::std::mem::align_of::<xcb_change_property_request_t>() - 4usize];
    ["Offset of field: xcb_change_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_property_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_property_request_t::length"]
        [::std::mem::offset_of!(xcb_change_property_request_t, length) - 2usize];
    ["Offset of field: xcb_change_property_request_t::window"]
        [::std::mem::offset_of!(xcb_change_property_request_t, window) - 4usize];
    ["Offset of field: xcb_change_property_request_t::property"]
        [::std::mem::offset_of!(xcb_change_property_request_t, property) - 8usize];
    ["Offset of field: xcb_change_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_change_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_change_property_request_t::format"]
        [::std::mem::offset_of!(xcb_change_property_request_t, format) - 16usize];
    ["Offset of field: xcb_change_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_property_request_t, pad0) - 17usize];
    ["Offset of field: xcb_change_property_request_t::data_len"]
        [::std::mem::offset_of!(xcb_change_property_request_t, data_len) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_delete_property_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_delete_property_request_t"]
        [::std::mem::size_of::<xcb_delete_property_request_t>() - 12usize];
    ["Alignment of xcb_delete_property_request_t"]
        [::std::mem::align_of::<xcb_delete_property_request_t>() - 4usize];
    ["Offset of field: xcb_delete_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_delete_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, pad0) - 1usize];
    ["Offset of field: xcb_delete_property_request_t::length"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, length) - 2usize];
    ["Offset of field: xcb_delete_property_request_t::window"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, window) - 4usize];
    ["Offset of field: xcb_delete_property_request_t::property"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, property) - 8usize];
};
pub const XCB_GET_PROPERTY_TYPE_ANY: xcb_get_property_type_t = 0;
pub type xcb_get_property_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_cookie_t"]
        [::std::mem::size_of::<xcb_get_property_cookie_t>() - 4usize];
    ["Alignment of xcb_get_property_cookie_t"]
        [::std::mem::align_of::<xcb_get_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_request_t {
    pub major_opcode: u8,
    pub _delete: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_request_t"]
        [::std::mem::size_of::<xcb_get_property_request_t>() - 24usize];
    ["Alignment of xcb_get_property_request_t"]
        [::std::mem::align_of::<xcb_get_property_request_t>() - 4usize];
    ["Offset of field: xcb_get_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_get_property_request_t, _delete) - 1usize];
    ["Offset of field: xcb_get_property_request_t::length"]
        [::std::mem::offset_of!(xcb_get_property_request_t, length) - 2usize];
    ["Offset of field: xcb_get_property_request_t::window"]
        [::std::mem::offset_of!(xcb_get_property_request_t, window) - 4usize];
    ["Offset of field: xcb_get_property_request_t::property"]
        [::std::mem::offset_of!(xcb_get_property_request_t, property) - 8usize];
    ["Offset of field: xcb_get_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_get_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_get_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_get_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_get_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_get_property_request_t, long_length) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub value_len: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_reply_t"]
        [::std::mem::size_of::<xcb_get_property_reply_t>() - 32usize];
    ["Alignment of xcb_get_property_reply_t"]
        [::std::mem::align_of::<xcb_get_property_reply_t>() - 4usize];
    ["Offset of field: xcb_get_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_get_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_get_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_get_property_reply_t::value_len"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, value_len) - 16usize];
    ["Offset of field: xcb_get_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_cookie_t"]
        [::std::mem::size_of::<xcb_list_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_list_properties_cookie_t"]
        [::std::mem::align_of::<xcb_list_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_request_t"]
        [::std::mem::size_of::<xcb_list_properties_request_t>() - 8usize];
    ["Alignment of xcb_list_properties_request_t"]
        [::std::mem::align_of::<xcb_list_properties_request_t>() - 4usize];
    ["Offset of field: xcb_list_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_properties_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_list_properties_request_t::window"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub atoms_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_reply_t"]
        [::std::mem::size_of::<xcb_list_properties_reply_t>() - 32usize];
    ["Alignment of xcb_list_properties_reply_t"]
        [::std::mem::align_of::<xcb_list_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_list_properties_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_properties_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, atoms_len) - 8usize];
    ["Offset of field: xcb_list_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_selection_owner_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_selection_owner_request_t"]
        [::std::mem::size_of::<xcb_set_selection_owner_request_t>() - 16usize];
    ["Alignment of xcb_set_selection_owner_request_t"]
        [::std::mem::align_of::<xcb_set_selection_owner_request_t>() - 4usize];
    ["Offset of field: xcb_set_selection_owner_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_selection_owner_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_selection_owner_request_t::length"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, length) - 2usize];
    ["Offset of field: xcb_set_selection_owner_request_t::owner"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, owner) - 4usize];
    ["Offset of field: xcb_set_selection_owner_request_t::selection"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, selection) - 8usize];
    ["Offset of field: xcb_set_selection_owner_request_t::time"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, time) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_cookie_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_cookie_t>() - 4usize];
    ["Alignment of xcb_get_selection_owner_cookie_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_selection_owner_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub selection: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_request_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_request_t>() - 8usize];
    ["Alignment of xcb_get_selection_owner_request_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_request_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_selection_owner_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_selection_owner_request_t::length"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, length) - 2usize];
    ["Offset of field: xcb_get_selection_owner_request_t::selection"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, selection) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub owner: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_reply_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_reply_t>() - 12usize];
    ["Alignment of xcb_get_selection_owner_reply_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_reply_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::owner"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, owner) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_convert_selection_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_convert_selection_request_t"]
        [::std::mem::size_of::<xcb_convert_selection_request_t>() - 24usize];
    ["Alignment of xcb_convert_selection_request_t"]
        [::std::mem::align_of::<xcb_convert_selection_request_t>() - 4usize];
    ["Offset of field: xcb_convert_selection_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_convert_selection_request_t::pad0"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, pad0) - 1usize];
    ["Offset of field: xcb_convert_selection_request_t::length"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, length) - 2usize];
    ["Offset of field: xcb_convert_selection_request_t::requestor"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, requestor) - 4usize];
    ["Offset of field: xcb_convert_selection_request_t::selection"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, selection) - 8usize];
    ["Offset of field: xcb_convert_selection_request_t::target"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, target) - 12usize];
    ["Offset of field: xcb_convert_selection_request_t::property"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, property) - 16usize];
    ["Offset of field: xcb_convert_selection_request_t::time"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, time) - 20usize];
};
pub const xcb_send_event_dest_t_XCB_SEND_EVENT_DEST_POINTER_WINDOW: xcb_send_event_dest_t = 0;
pub const xcb_send_event_dest_t_XCB_SEND_EVENT_DEST_ITEM_FOCUS: xcb_send_event_dest_t = 1;
pub type xcb_send_event_dest_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_send_event_request_t {
    pub major_opcode: u8,
    pub propagate: u8,
    pub length: u16,
    pub destination: xcb_window_t,
    pub event_mask: u32,
    pub event: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_send_event_request_t"]
        [::std::mem::size_of::<xcb_send_event_request_t>() - 44usize];
    ["Alignment of xcb_send_event_request_t"]
        [::std::mem::align_of::<xcb_send_event_request_t>() - 4usize];
    ["Offset of field: xcb_send_event_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_send_event_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_send_event_request_t::propagate"]
        [::std::mem::offset_of!(xcb_send_event_request_t, propagate) - 1usize];
    ["Offset of field: xcb_send_event_request_t::length"]
        [::std::mem::offset_of!(xcb_send_event_request_t, length) - 2usize];
    ["Offset of field: xcb_send_event_request_t::destination"]
        [::std::mem::offset_of!(xcb_send_event_request_t, destination) - 4usize];
    ["Offset of field: xcb_send_event_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_send_event_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_send_event_request_t::event"]
        [::std::mem::offset_of!(xcb_send_event_request_t, event) - 12usize];
};
pub const XCB_GRAB_MODE_SYNC: xcb_grab_mode_t = 0;
pub const XCB_GRAB_MODE_ASYNC: xcb_grab_mode_t = 1;
pub type xcb_grab_mode_t = ::std::os::raw::c_uint;
pub const XCB_GRAB_STATUS_SUCCESS: xcb_grab_status_t = 0;
pub const XCB_GRAB_STATUS_ALREADY_GRABBED: xcb_grab_status_t = 1;
pub const XCB_GRAB_STATUS_INVALID_TIME: xcb_grab_status_t = 2;
pub const XCB_GRAB_STATUS_NOT_VIEWABLE: xcb_grab_status_t = 3;
pub const XCB_GRAB_STATUS_FROZEN: xcb_grab_status_t = 4;
pub type xcb_grab_status_t = ::std::os::raw::c_uint;
pub const XCB_CURSOR_NONE: xcb_cursor_enum_t = 0;
pub type xcb_cursor_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_cookie_t"]
        [::std::mem::size_of::<xcb_grab_pointer_cookie_t>() - 4usize];
    ["Alignment of xcb_grab_pointer_cookie_t"]
        [::std::mem::align_of::<xcb_grab_pointer_cookie_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_pointer_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub event_mask: u16,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_request_t"]
        [::std::mem::size_of::<xcb_grab_pointer_request_t>() - 24usize];
    ["Alignment of xcb_grab_pointer_request_t"]
        [::std::mem::align_of::<xcb_grab_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_pointer_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_pointer_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_pointer_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_grab_pointer_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, pointer_mode) - 10usize];
    ["Offset of field: xcb_grab_pointer_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, keyboard_mode) - 11usize];
    ["Offset of field: xcb_grab_pointer_request_t::confine_to"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, confine_to) - 12usize];
    ["Offset of field: xcb_grab_pointer_request_t::cursor"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, cursor) - 16usize];
    ["Offset of field: xcb_grab_pointer_request_t::time"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, time) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_reply_t"]
        [::std::mem::size_of::<xcb_grab_pointer_reply_t>() - 8usize];
    ["Alignment of xcb_grab_pointer_reply_t"]
        [::std::mem::align_of::<xcb_grab_pointer_reply_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_grab_pointer_reply_t::status"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, status) - 1usize];
    ["Offset of field: xcb_grab_pointer_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_grab_pointer_reply_t::length"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_pointer_request_t"]
        [::std::mem::size_of::<xcb_ungrab_pointer_request_t>() - 8usize];
    ["Alignment of xcb_ungrab_pointer_request_t"]
        [::std::mem::align_of::<xcb_ungrab_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::time"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, time) - 4usize];
};
pub const xcb_button_index_t_XCB_BUTTON_INDEX_ANY: xcb_button_index_t = 0;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_1: xcb_button_index_t = 1;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_2: xcb_button_index_t = 2;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_3: xcb_button_index_t = 3;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_4: xcb_button_index_t = 4;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_5: xcb_button_index_t = 5;
pub type xcb_button_index_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_button_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub event_mask: u16,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub button: u8,
    pub pad0: u8,
    pub modifiers: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_button_request_t"]
        [::std::mem::size_of::<xcb_grab_button_request_t>() - 24usize];
    ["Alignment of xcb_grab_button_request_t"]
        [::std::mem::align_of::<xcb_grab_button_request_t>() - 4usize];
    ["Offset of field: xcb_grab_button_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_button_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_button_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_button_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_button_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_grab_button_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, pointer_mode) - 10usize];
    ["Offset of field: xcb_grab_button_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, keyboard_mode) - 11usize];
    ["Offset of field: xcb_grab_button_request_t::confine_to"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, confine_to) - 12usize];
    ["Offset of field: xcb_grab_button_request_t::cursor"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, cursor) - 16usize];
    ["Offset of field: xcb_grab_button_request_t::button"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, button) - 20usize];
    ["Offset of field: xcb_grab_button_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, pad0) - 21usize];
    ["Offset of field: xcb_grab_button_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, modifiers) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_button_request_t {
    pub major_opcode: u8,
    pub button: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_button_request_t"]
        [::std::mem::size_of::<xcb_ungrab_button_request_t>() - 12usize];
    ["Alignment of xcb_ungrab_button_request_t"]
        [::std::mem::align_of::<xcb_ungrab_button_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_button_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_button_request_t::button"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, button) - 1usize];
    ["Offset of field: xcb_ungrab_button_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_button_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_ungrab_button_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_ungrab_button_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_active_pointer_grab_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
    pub event_mask: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_active_pointer_grab_request_t"]
        [::std::mem::size_of::<xcb_change_active_pointer_grab_request_t>() - 16usize];
    ["Alignment of xcb_change_active_pointer_grab_request_t"]
        [::std::mem::align_of::<xcb_change_active_pointer_grab_request_t>() - 4usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::length"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, length) - 2usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::cursor"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, cursor) - 4usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::time"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, time) - 8usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, event_mask) - 12usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::pad1"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_cookie_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_cookie_t>() - 4usize];
    ["Alignment of xcb_grab_keyboard_cookie_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_cookie_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_keyboard_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_request_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_request_t>() - 16usize];
    ["Alignment of xcb_grab_keyboard_request_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_request_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_keyboard_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_keyboard_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_keyboard_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_keyboard_request_t::time"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, time) - 8usize];
    ["Offset of field: xcb_grab_keyboard_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, pointer_mode) - 12usize];
    ["Offset of field: xcb_grab_keyboard_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, keyboard_mode) - 13usize];
    ["Offset of field: xcb_grab_keyboard_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_reply_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_reply_t>() - 8usize];
    ["Alignment of xcb_grab_keyboard_reply_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_reply_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::status"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, status) - 1usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::length"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_keyboard_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_keyboard_request_t"]
        [::std::mem::size_of::<xcb_ungrab_keyboard_request_t>() - 8usize];
    ["Alignment of xcb_ungrab_keyboard_request_t"]
        [::std::mem::align_of::<xcb_ungrab_keyboard_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::time"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, time) - 4usize];
};
pub const xcb_grab_t_XCB_GRAB_ANY: xcb_grab_t = 0;
pub type xcb_grab_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_key_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub key: xcb_keycode_t,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_key_request_t"][::std::mem::size_of::<xcb_grab_key_request_t>() - 16usize];
    ["Alignment of xcb_grab_key_request_t"]
        [::std::mem::align_of::<xcb_grab_key_request_t>() - 4usize];
    ["Offset of field: xcb_grab_key_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_key_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_key_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_key_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_key_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_grab_key_request_t::key"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, key) - 10usize];
    ["Offset of field: xcb_grab_key_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, pointer_mode) - 11usize];
    ["Offset of field: xcb_grab_key_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, keyboard_mode) - 12usize];
    ["Offset of field: xcb_grab_key_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, pad0) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_key_request_t {
    pub major_opcode: u8,
    pub key: xcb_keycode_t,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_key_request_t"]
        [::std::mem::size_of::<xcb_ungrab_key_request_t>() - 12usize];
    ["Alignment of xcb_ungrab_key_request_t"]
        [::std::mem::align_of::<xcb_ungrab_key_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_key_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_key_request_t::key"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, key) - 1usize];
    ["Offset of field: xcb_ungrab_key_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_key_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_ungrab_key_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_ungrab_key_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, pad0) - 10usize];
};
pub const XCB_ALLOW_ASYNC_POINTER: xcb_allow_t = 0;
pub const XCB_ALLOW_SYNC_POINTER: xcb_allow_t = 1;
pub const XCB_ALLOW_REPLAY_POINTER: xcb_allow_t = 2;
pub const XCB_ALLOW_ASYNC_KEYBOARD: xcb_allow_t = 3;
pub const XCB_ALLOW_SYNC_KEYBOARD: xcb_allow_t = 4;
pub const XCB_ALLOW_REPLAY_KEYBOARD: xcb_allow_t = 5;
pub const XCB_ALLOW_ASYNC_BOTH: xcb_allow_t = 6;
pub const XCB_ALLOW_SYNC_BOTH: xcb_allow_t = 7;
pub type xcb_allow_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_allow_events_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_allow_events_request_t"]
        [::std::mem::size_of::<xcb_allow_events_request_t>() - 8usize];
    ["Alignment of xcb_allow_events_request_t"]
        [::std::mem::align_of::<xcb_allow_events_request_t>() - 4usize];
    ["Offset of field: xcb_allow_events_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_allow_events_request_t::mode"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, mode) - 1usize];
    ["Offset of field: xcb_allow_events_request_t::length"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, length) - 2usize];
    ["Offset of field: xcb_allow_events_request_t::time"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, time) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_server_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_server_request_t"]
        [::std::mem::size_of::<xcb_grab_server_request_t>() - 4usize];
    ["Alignment of xcb_grab_server_request_t"]
        [::std::mem::align_of::<xcb_grab_server_request_t>() - 2usize];
    ["Offset of field: xcb_grab_server_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_server_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, pad0) - 1usize];
    ["Offset of field: xcb_grab_server_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_server_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_server_request_t"]
        [::std::mem::size_of::<xcb_ungrab_server_request_t>() - 4usize];
    ["Alignment of xcb_ungrab_server_request_t"]
        [::std::mem::align_of::<xcb_ungrab_server_request_t>() - 2usize];
    ["Offset of field: xcb_ungrab_server_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_server_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_server_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_cookie_t"]
        [::std::mem::size_of::<xcb_query_pointer_cookie_t>() - 4usize];
    ["Alignment of xcb_query_pointer_cookie_t"]
        [::std::mem::align_of::<xcb_query_pointer_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_pointer_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_request_t"]
        [::std::mem::size_of::<xcb_query_pointer_request_t>() - 8usize];
    ["Alignment of xcb_query_pointer_request_t"]
        [::std::mem::align_of::<xcb_query_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_query_pointer_request_t::window"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_reply_t {
    pub response_type: u8,
    pub same_screen: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub win_x: i16,
    pub win_y: i16,
    pub mask: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_reply_t"]
        [::std::mem::size_of::<xcb_query_pointer_reply_t>() - 28usize];
    ["Alignment of xcb_query_pointer_reply_t"]
        [::std::mem::align_of::<xcb_query_pointer_reply_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_pointer_reply_t::same_screen"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, same_screen) - 1usize];
    ["Offset of field: xcb_query_pointer_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_pointer_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_pointer_reply_t::root"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root) - 8usize];
    ["Offset of field: xcb_query_pointer_reply_t::child"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, child) - 12usize];
    ["Offset of field: xcb_query_pointer_reply_t::root_x"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root_x) - 16usize];
    ["Offset of field: xcb_query_pointer_reply_t::root_y"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root_y) - 18usize];
    ["Offset of field: xcb_query_pointer_reply_t::win_x"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, win_x) - 20usize];
    ["Offset of field: xcb_query_pointer_reply_t::win_y"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, win_y) - 22usize];
    ["Offset of field: xcb_query_pointer_reply_t::mask"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, mask) - 24usize];
    ["Offset of field: xcb_query_pointer_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timecoord_t {
    pub time: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timecoord_t"][::std::mem::size_of::<xcb_timecoord_t>() - 8usize];
    ["Alignment of xcb_timecoord_t"][::std::mem::align_of::<xcb_timecoord_t>() - 4usize];
    ["Offset of field: xcb_timecoord_t::time"]
        [::std::mem::offset_of!(xcb_timecoord_t, time) - 0usize];
    ["Offset of field: xcb_timecoord_t::x"][::std::mem::offset_of!(xcb_timecoord_t, x) - 4usize];
    ["Offset of field: xcb_timecoord_t::y"][::std::mem::offset_of!(xcb_timecoord_t, y) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timecoord_iterator_t {
    pub data: *mut xcb_timecoord_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timecoord_iterator_t"]
        [::std::mem::size_of::<xcb_timecoord_iterator_t>() - 16usize];
    ["Alignment of xcb_timecoord_iterator_t"]
        [::std::mem::align_of::<xcb_timecoord_iterator_t>() - 8usize];
    ["Offset of field: xcb_timecoord_iterator_t::data"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, data) - 0usize];
    ["Offset of field: xcb_timecoord_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_timecoord_iterator_t::index"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_cookie_t"]
        [::std::mem::size_of::<xcb_get_motion_events_cookie_t>() - 4usize];
    ["Alignment of xcb_get_motion_events_cookie_t"]
        [::std::mem::align_of::<xcb_get_motion_events_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_motion_events_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub start: xcb_timestamp_t,
    pub stop: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_request_t"]
        [::std::mem::size_of::<xcb_get_motion_events_request_t>() - 16usize];
    ["Alignment of xcb_get_motion_events_request_t"]
        [::std::mem::align_of::<xcb_get_motion_events_request_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_motion_events_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_motion_events_request_t::length"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, length) - 2usize];
    ["Offset of field: xcb_get_motion_events_request_t::window"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, window) - 4usize];
    ["Offset of field: xcb_get_motion_events_request_t::start"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, start) - 8usize];
    ["Offset of field: xcb_get_motion_events_request_t::stop"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, stop) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub events_len: u32,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_reply_t"]
        [::std::mem::size_of::<xcb_get_motion_events_reply_t>() - 32usize];
    ["Alignment of xcb_get_motion_events_reply_t"]
        [::std::mem::align_of::<xcb_get_motion_events_reply_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_motion_events_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_motion_events_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_motion_events_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_motion_events_reply_t::events_len"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, events_len) - 8usize];
    ["Offset of field: xcb_get_motion_events_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_cookie_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_cookie_t>() - 4usize];
    ["Alignment of xcb_translate_coordinates_cookie_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_cookie_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_translate_coordinates_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_request_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_request_t>() - 16usize];
    ["Alignment of xcb_translate_coordinates_request_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_request_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_translate_coordinates_request_t::pad0"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, pad0) - 1usize];
    ["Offset of field: xcb_translate_coordinates_request_t::length"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, length) - 2usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_window"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_window) - 4usize];
    ["Offset of field: xcb_translate_coordinates_request_t::dst_window"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, dst_window) - 8usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_x"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_x) - 12usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_y"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_reply_t {
    pub response_type: u8,
    pub same_screen: u8,
    pub sequence: u16,
    pub length: u32,
    pub child: xcb_window_t,
    pub dst_x: i16,
    pub dst_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_reply_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_reply_t>() - 16usize];
    ["Alignment of xcb_translate_coordinates_reply_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_reply_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::same_screen"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, same_screen) - 1usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::length"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, length) - 4usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::child"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, child) - 8usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::dst_x"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, dst_x) - 12usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::dst_y"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, dst_y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_warp_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: i16,
    pub src_y: i16,
    pub src_width: u16,
    pub src_height: u16,
    pub dst_x: i16,
    pub dst_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_warp_pointer_request_t"]
        [::std::mem::size_of::<xcb_warp_pointer_request_t>() - 24usize];
    ["Alignment of xcb_warp_pointer_request_t"]
        [::std::mem::align_of::<xcb_warp_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_warp_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_warp_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_warp_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_window"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_window) - 4usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_window"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_window) - 8usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_x"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_x) - 12usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_y"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_y) - 14usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_width"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_width) - 16usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_height"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_height) - 18usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_y) - 22usize];
};
pub const XCB_INPUT_FOCUS_NONE: xcb_input_focus_t = 0;
pub const XCB_INPUT_FOCUS_POINTER_ROOT: xcb_input_focus_t = 1;
pub const XCB_INPUT_FOCUS_PARENT: xcb_input_focus_t = 2;
pub const XCB_INPUT_FOCUS_FOLLOW_KEYBOARD: xcb_input_focus_t = 3;
pub type xcb_input_focus_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_input_focus_request_t {
    pub major_opcode: u8,
    pub revert_to: u8,
    pub length: u16,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_input_focus_request_t"]
        [::std::mem::size_of::<xcb_set_input_focus_request_t>() - 12usize];
    ["Alignment of xcb_set_input_focus_request_t"]
        [::std::mem::align_of::<xcb_set_input_focus_request_t>() - 4usize];
    ["Offset of field: xcb_set_input_focus_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_input_focus_request_t::revert_to"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, revert_to) - 1usize];
    ["Offset of field: xcb_set_input_focus_request_t::length"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, length) - 2usize];
    ["Offset of field: xcb_set_input_focus_request_t::focus"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, focus) - 4usize];
    ["Offset of field: xcb_set_input_focus_request_t::time"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, time) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_cookie_t"]
        [::std::mem::size_of::<xcb_get_input_focus_cookie_t>() - 4usize];
    ["Alignment of xcb_get_input_focus_cookie_t"]
        [::std::mem::align_of::<xcb_get_input_focus_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_input_focus_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_input_focus_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_request_t"]
        [::std::mem::size_of::<xcb_get_input_focus_request_t>() - 4usize];
    ["Alignment of xcb_get_input_focus_request_t"]
        [::std::mem::align_of::<xcb_get_input_focus_request_t>() - 2usize];
    ["Offset of field: xcb_get_input_focus_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_input_focus_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_input_focus_request_t::length"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_reply_t {
    pub response_type: u8,
    pub revert_to: u8,
    pub sequence: u16,
    pub length: u32,
    pub focus: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_reply_t"]
        [::std::mem::size_of::<xcb_get_input_focus_reply_t>() - 12usize];
    ["Alignment of xcb_get_input_focus_reply_t"]
        [::std::mem::align_of::<xcb_get_input_focus_reply_t>() - 4usize];
    ["Offset of field: xcb_get_input_focus_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_input_focus_reply_t::revert_to"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, revert_to) - 1usize];
    ["Offset of field: xcb_get_input_focus_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_input_focus_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_input_focus_reply_t::focus"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, focus) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_cookie_t"]
        [::std::mem::size_of::<xcb_query_keymap_cookie_t>() - 4usize];
    ["Alignment of xcb_query_keymap_cookie_t"]
        [::std::mem::align_of::<xcb_query_keymap_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_keymap_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_keymap_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_request_t"]
        [::std::mem::size_of::<xcb_query_keymap_request_t>() - 4usize];
    ["Alignment of xcb_query_keymap_request_t"]
        [::std::mem::align_of::<xcb_query_keymap_request_t>() - 2usize];
    ["Offset of field: xcb_query_keymap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_keymap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_keymap_request_t::length"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub keys: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_reply_t"]
        [::std::mem::size_of::<xcb_query_keymap_reply_t>() - 40usize];
    ["Alignment of xcb_query_keymap_reply_t"]
        [::std::mem::align_of::<xcb_query_keymap_reply_t>() - 4usize];
    ["Offset of field: xcb_query_keymap_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_keymap_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_keymap_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_keymap_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_keymap_reply_t::keys"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, keys) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_open_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub fid: xcb_font_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_open_font_request_t"][::std::mem::size_of::<xcb_open_font_request_t>() - 12usize];
    ["Alignment of xcb_open_font_request_t"]
        [::std::mem::align_of::<xcb_open_font_request_t>() - 4usize];
    ["Offset of field: xcb_open_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_open_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_open_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_open_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_open_font_request_t::length"]
        [::std::mem::offset_of!(xcb_open_font_request_t, length) - 2usize];
    ["Offset of field: xcb_open_font_request_t::fid"]
        [::std::mem::offset_of!(xcb_open_font_request_t, fid) - 4usize];
    ["Offset of field: xcb_open_font_request_t::name_len"]
        [::std::mem::offset_of!(xcb_open_font_request_t, name_len) - 8usize];
    ["Offset of field: xcb_open_font_request_t::pad1"]
        [::std::mem::offset_of!(xcb_open_font_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_close_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font: xcb_font_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_close_font_request_t"]
        [::std::mem::size_of::<xcb_close_font_request_t>() - 8usize];
    ["Alignment of xcb_close_font_request_t"]
        [::std::mem::align_of::<xcb_close_font_request_t>() - 4usize];
    ["Offset of field: xcb_close_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_close_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_close_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_close_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_close_font_request_t::length"]
        [::std::mem::offset_of!(xcb_close_font_request_t, length) - 2usize];
    ["Offset of field: xcb_close_font_request_t::font"]
        [::std::mem::offset_of!(xcb_close_font_request_t, font) - 4usize];
};
pub const xcb_font_draw_t_XCB_FONT_DRAW_LEFT_TO_RIGHT: xcb_font_draw_t = 0;
pub const xcb_font_draw_t_XCB_FONT_DRAW_RIGHT_TO_LEFT: xcb_font_draw_t = 1;
pub type xcb_font_draw_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontprop_t {
    pub name: xcb_atom_t,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontprop_t"][::std::mem::size_of::<xcb_fontprop_t>() - 8usize];
    ["Alignment of xcb_fontprop_t"][::std::mem::align_of::<xcb_fontprop_t>() - 4usize];
    ["Offset of field: xcb_fontprop_t::name"]
        [::std::mem::offset_of!(xcb_fontprop_t, name) - 0usize];
    ["Offset of field: xcb_fontprop_t::value"]
        [::std::mem::offset_of!(xcb_fontprop_t, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontprop_iterator_t {
    pub data: *mut xcb_fontprop_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontprop_iterator_t"][::std::mem::size_of::<xcb_fontprop_iterator_t>() - 16usize];
    ["Alignment of xcb_fontprop_iterator_t"]
        [::std::mem::align_of::<xcb_fontprop_iterator_t>() - 8usize];
    ["Offset of field: xcb_fontprop_iterator_t::data"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, data) - 0usize];
    ["Offset of field: xcb_fontprop_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_fontprop_iterator_t::index"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_charinfo_t {
    pub left_side_bearing: i16,
    pub right_side_bearing: i16,
    pub character_width: i16,
    pub ascent: i16,
    pub descent: i16,
    pub attributes: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_charinfo_t"][::std::mem::size_of::<xcb_charinfo_t>() - 12usize];
    ["Alignment of xcb_charinfo_t"][::std::mem::align_of::<xcb_charinfo_t>() - 2usize];
    ["Offset of field: xcb_charinfo_t::left_side_bearing"]
        [::std::mem::offset_of!(xcb_charinfo_t, left_side_bearing) - 0usize];
    ["Offset of field: xcb_charinfo_t::right_side_bearing"]
        [::std::mem::offset_of!(xcb_charinfo_t, right_side_bearing) - 2usize];
    ["Offset of field: xcb_charinfo_t::character_width"]
        [::std::mem::offset_of!(xcb_charinfo_t, character_width) - 4usize];
    ["Offset of field: xcb_charinfo_t::ascent"]
        [::std::mem::offset_of!(xcb_charinfo_t, ascent) - 6usize];
    ["Offset of field: xcb_charinfo_t::descent"]
        [::std::mem::offset_of!(xcb_charinfo_t, descent) - 8usize];
    ["Offset of field: xcb_charinfo_t::attributes"]
        [::std::mem::offset_of!(xcb_charinfo_t, attributes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_charinfo_iterator_t {
    pub data: *mut xcb_charinfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_charinfo_iterator_t"][::std::mem::size_of::<xcb_charinfo_iterator_t>() - 16usize];
    ["Alignment of xcb_charinfo_iterator_t"]
        [::std::mem::align_of::<xcb_charinfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_charinfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_charinfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_charinfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_cookie_t"][::std::mem::size_of::<xcb_query_font_cookie_t>() - 4usize];
    ["Alignment of xcb_query_font_cookie_t"]
        [::std::mem::align_of::<xcb_query_font_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_font_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_font_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font: xcb_fontable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_request_t"]
        [::std::mem::size_of::<xcb_query_font_request_t>() - 8usize];
    ["Alignment of xcb_query_font_request_t"]
        [::std::mem::align_of::<xcb_query_font_request_t>() - 4usize];
    ["Offset of field: xcb_query_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_font_request_t::length"]
        [::std::mem::offset_of!(xcb_query_font_request_t, length) - 2usize];
    ["Offset of field: xcb_query_font_request_t::font"]
        [::std::mem::offset_of!(xcb_query_font_request_t, font) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_bounds: xcb_charinfo_t,
    pub pad1: [u8; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad2: [u8; 4usize],
    pub min_char_or_byte2: u16,
    pub max_char_or_byte2: u16,
    pub default_char: u16,
    pub properties_len: u16,
    pub draw_direction: u8,
    pub min_byte1: u8,
    pub max_byte1: u8,
    pub all_chars_exist: u8,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub char_infos_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_reply_t"][::std::mem::size_of::<xcb_query_font_reply_t>() - 60usize];
    ["Alignment of xcb_query_font_reply_t"]
        [::std::mem::align_of::<xcb_query_font_reply_t>() - 4usize];
    ["Offset of field: xcb_query_font_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_font_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_font_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_font_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_font_reply_t::min_bounds"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_bounds) - 8usize];
    ["Offset of field: xcb_query_font_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad1) - 20usize];
    ["Offset of field: xcb_query_font_reply_t::max_bounds"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_bounds) - 24usize];
    ["Offset of field: xcb_query_font_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad2) - 36usize];
    ["Offset of field: xcb_query_font_reply_t::min_char_or_byte2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_char_or_byte2) - 40usize];
    ["Offset of field: xcb_query_font_reply_t::max_char_or_byte2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_char_or_byte2) - 42usize];
    ["Offset of field: xcb_query_font_reply_t::default_char"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, default_char) - 44usize];
    ["Offset of field: xcb_query_font_reply_t::properties_len"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, properties_len) - 46usize];
    ["Offset of field: xcb_query_font_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, draw_direction) - 48usize];
    ["Offset of field: xcb_query_font_reply_t::min_byte1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_byte1) - 49usize];
    ["Offset of field: xcb_query_font_reply_t::max_byte1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_byte1) - 50usize];
    ["Offset of field: xcb_query_font_reply_t::all_chars_exist"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, all_chars_exist) - 51usize];
    ["Offset of field: xcb_query_font_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, font_ascent) - 52usize];
    ["Offset of field: xcb_query_font_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, font_descent) - 54usize];
    ["Offset of field: xcb_query_font_reply_t::char_infos_len"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, char_infos_len) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_cookie_t"]
        [::std::mem::size_of::<xcb_query_text_extents_cookie_t>() - 4usize];
    ["Alignment of xcb_query_text_extents_cookie_t"]
        [::std::mem::align_of::<xcb_query_text_extents_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_text_extents_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_request_t {
    pub major_opcode: u8,
    pub odd_length: u8,
    pub length: u16,
    pub font: xcb_fontable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_request_t"]
        [::std::mem::size_of::<xcb_query_text_extents_request_t>() - 8usize];
    ["Alignment of xcb_query_text_extents_request_t"]
        [::std::mem::align_of::<xcb_query_text_extents_request_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_text_extents_request_t::odd_length"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, odd_length) - 1usize];
    ["Offset of field: xcb_query_text_extents_request_t::length"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, length) - 2usize];
    ["Offset of field: xcb_query_text_extents_request_t::font"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, font) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_reply_t {
    pub response_type: u8,
    pub draw_direction: u8,
    pub sequence: u16,
    pub length: u32,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub overall_ascent: i16,
    pub overall_descent: i16,
    pub overall_width: i32,
    pub overall_left: i32,
    pub overall_right: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_reply_t"]
        [::std::mem::size_of::<xcb_query_text_extents_reply_t>() - 28usize];
    ["Alignment of xcb_query_text_extents_reply_t"]
        [::std::mem::align_of::<xcb_query_text_extents_reply_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_text_extents_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, draw_direction) - 1usize];
    ["Offset of field: xcb_query_text_extents_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_text_extents_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_text_extents_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, font_ascent) - 8usize];
    ["Offset of field: xcb_query_text_extents_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, font_descent) - 10usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_ascent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_ascent) - 12usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_descent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_descent) - 14usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_width"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_width) - 16usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_left"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_left) - 20usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_right"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_str_t {
    pub name_len: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_str_t"][::std::mem::size_of::<xcb_str_t>() - 1usize];
    ["Alignment of xcb_str_t"][::std::mem::align_of::<xcb_str_t>() - 1usize];
    ["Offset of field: xcb_str_t::name_len"][::std::mem::offset_of!(xcb_str_t, name_len) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_str_iterator_t {
    pub data: *mut xcb_str_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_str_iterator_t"][::std::mem::size_of::<xcb_str_iterator_t>() - 16usize];
    ["Alignment of xcb_str_iterator_t"][::std::mem::align_of::<xcb_str_iterator_t>() - 8usize];
    ["Offset of field: xcb_str_iterator_t::data"]
        [::std::mem::offset_of!(xcb_str_iterator_t, data) - 0usize];
    ["Offset of field: xcb_str_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_str_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_str_iterator_t::index"]
        [::std::mem::offset_of!(xcb_str_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_cookie_t"][::std::mem::size_of::<xcb_list_fonts_cookie_t>() - 4usize];
    ["Alignment of xcb_list_fonts_cookie_t"]
        [::std::mem::align_of::<xcb_list_fonts_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub max_names: u16,
    pub pattern_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_request_t"]
        [::std::mem::size_of::<xcb_list_fonts_request_t>() - 8usize];
    ["Alignment of xcb_list_fonts_request_t"]
        [::std::mem::align_of::<xcb_list_fonts_request_t>() - 2usize];
    ["Offset of field: xcb_list_fonts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_fonts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_request_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, length) - 2usize];
    ["Offset of field: xcb_list_fonts_request_t::max_names"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, max_names) - 4usize];
    ["Offset of field: xcb_list_fonts_request_t::pattern_len"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, pattern_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub names_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_reply_t"][::std::mem::size_of::<xcb_list_fonts_reply_t>() - 32usize];
    ["Alignment of xcb_list_fonts_reply_t"]
        [::std::mem::align_of::<xcb_list_fonts_reply_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_fonts_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_fonts_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_fonts_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, names_len) - 8usize];
    ["Offset of field: xcb_list_fonts_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_cookie_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_cookie_t>() - 4usize];
    ["Alignment of xcb_list_fonts_with_info_cookie_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub max_names: u16,
    pub pattern_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_request_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_request_t>() - 8usize];
    ["Alignment of xcb_list_fonts_with_info_request_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_request_t>() - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, length) - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::max_names"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, max_names) - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::pattern_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, pattern_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_reply_t {
    pub response_type: u8,
    pub name_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_bounds: xcb_charinfo_t,
    pub pad0: [u8; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad1: [u8; 4usize],
    pub min_char_or_byte2: u16,
    pub max_char_or_byte2: u16,
    pub default_char: u16,
    pub properties_len: u16,
    pub draw_direction: u8,
    pub min_byte1: u8,
    pub max_byte1: u8,
    pub all_chars_exist: u8,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub replies_hint: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_reply_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_reply_t>() - 60usize];
    ["Alignment of xcb_list_fonts_with_info_reply_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_reply_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, name_len) - 1usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_bounds"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_bounds) - 8usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, pad0) - 20usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_bounds"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_bounds) - 24usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, pad1) - 36usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_char_or_byte2"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_char_or_byte2) - 40usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_char_or_byte2"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_char_or_byte2) - 42usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::default_char"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, default_char) - 44usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::properties_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, properties_len) - 46usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, draw_direction) - 48usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_byte1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_byte1) - 49usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_byte1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_byte1) - 50usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::all_chars_exist"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, all_chars_exist) - 51usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, font_ascent) - 52usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, font_descent) - 54usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::replies_hint"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, replies_hint) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_font_path_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font_qty: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_font_path_request_t"]
        [::std::mem::size_of::<xcb_set_font_path_request_t>() - 8usize];
    ["Alignment of xcb_set_font_path_request_t"]
        [::std::mem::align_of::<xcb_set_font_path_request_t>() - 2usize];
    ["Offset of field: xcb_set_font_path_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_font_path_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_font_path_request_t::length"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, length) - 2usize];
    ["Offset of field: xcb_set_font_path_request_t::font_qty"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, font_qty) - 4usize];
    ["Offset of field: xcb_set_font_path_request_t::pad1"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_cookie_t"]
        [::std::mem::size_of::<xcb_get_font_path_cookie_t>() - 4usize];
    ["Alignment of xcb_get_font_path_cookie_t"]
        [::std::mem::align_of::<xcb_get_font_path_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_font_path_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_font_path_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_request_t"]
        [::std::mem::size_of::<xcb_get_font_path_request_t>() - 4usize];
    ["Alignment of xcb_get_font_path_request_t"]
        [::std::mem::align_of::<xcb_get_font_path_request_t>() - 2usize];
    ["Offset of field: xcb_get_font_path_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_font_path_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_font_path_request_t::length"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub path_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_reply_t"]
        [::std::mem::size_of::<xcb_get_font_path_reply_t>() - 32usize];
    ["Alignment of xcb_get_font_path_reply_t"]
        [::std::mem::align_of::<xcb_get_font_path_reply_t>() - 4usize];
    ["Offset of field: xcb_get_font_path_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_font_path_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_font_path_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_font_path_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_font_path_reply_t::path_len"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, path_len) - 8usize];
    ["Offset of field: xcb_get_font_path_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_pixmap_request_t {
    pub major_opcode: u8,
    pub depth: u8,
    pub length: u16,
    pub pid: xcb_pixmap_t,
    pub drawable: xcb_drawable_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_pixmap_request_t"]
        [::std::mem::size_of::<xcb_create_pixmap_request_t>() - 16usize];
    ["Alignment of xcb_create_pixmap_request_t"]
        [::std::mem::align_of::<xcb_create_pixmap_request_t>() - 4usize];
    ["Offset of field: xcb_create_pixmap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_pixmap_request_t::depth"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, depth) - 1usize];
    ["Offset of field: xcb_create_pixmap_request_t::length"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, length) - 2usize];
    ["Offset of field: xcb_create_pixmap_request_t::pid"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, pid) - 4usize];
    ["Offset of field: xcb_create_pixmap_request_t::drawable"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, drawable) - 8usize];
    ["Offset of field: xcb_create_pixmap_request_t::width"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, width) - 12usize];
    ["Offset of field: xcb_create_pixmap_request_t::height"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, height) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_pixmap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub pixmap: xcb_pixmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_pixmap_request_t"]
        [::std::mem::size_of::<xcb_free_pixmap_request_t>() - 8usize];
    ["Alignment of xcb_free_pixmap_request_t"]
        [::std::mem::align_of::<xcb_free_pixmap_request_t>() - 4usize];
    ["Offset of field: xcb_free_pixmap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_pixmap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_pixmap_request_t::length"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, length) - 2usize];
    ["Offset of field: xcb_free_pixmap_request_t::pixmap"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, pixmap) - 4usize];
};
pub const XCB_GC_FUNCTION: xcb_gc_t = 1;
pub const XCB_GC_PLANE_MASK: xcb_gc_t = 2;
pub const XCB_GC_FOREGROUND: xcb_gc_t = 4;
pub const XCB_GC_BACKGROUND: xcb_gc_t = 8;
pub const XCB_GC_LINE_WIDTH: xcb_gc_t = 16;
pub const XCB_GC_LINE_STYLE: xcb_gc_t = 32;
pub const XCB_GC_CAP_STYLE: xcb_gc_t = 64;
pub const XCB_GC_JOIN_STYLE: xcb_gc_t = 128;
pub const XCB_GC_FILL_STYLE: xcb_gc_t = 256;
pub const XCB_GC_FILL_RULE: xcb_gc_t = 512;
pub const XCB_GC_TILE: xcb_gc_t = 1024;
pub const XCB_GC_STIPPLE: xcb_gc_t = 2048;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_X: xcb_gc_t = 4096;
pub const XCB_GC_TILE_STIPPLE_ORIGIN_Y: xcb_gc_t = 8192;
pub const XCB_GC_FONT: xcb_gc_t = 16384;
pub const XCB_GC_SUBWINDOW_MODE: xcb_gc_t = 32768;
pub const XCB_GC_GRAPHICS_EXPOSURES: xcb_gc_t = 65536;
pub const XCB_GC_CLIP_ORIGIN_X: xcb_gc_t = 131072;
pub const XCB_GC_CLIP_ORIGIN_Y: xcb_gc_t = 262144;
pub const XCB_GC_CLIP_MASK: xcb_gc_t = 524288;
pub const XCB_GC_DASH_OFFSET: xcb_gc_t = 1048576;
pub const XCB_GC_DASH_LIST: xcb_gc_t = 2097152;
pub const XCB_GC_ARC_MODE: xcb_gc_t = 4194304;
pub type xcb_gc_t = ::std::os::raw::c_uint;
pub const XCB_GX_CLEAR: xcb_gx_t = 0;
pub const XCB_GX_AND: xcb_gx_t = 1;
pub const XCB_GX_AND_REVERSE: xcb_gx_t = 2;
pub const XCB_GX_COPY: xcb_gx_t = 3;
pub const XCB_GX_AND_INVERTED: xcb_gx_t = 4;
pub const XCB_GX_NOOP: xcb_gx_t = 5;
pub const XCB_GX_XOR: xcb_gx_t = 6;
pub const XCB_GX_OR: xcb_gx_t = 7;
pub const XCB_GX_NOR: xcb_gx_t = 8;
pub const XCB_GX_EQUIV: xcb_gx_t = 9;
pub const XCB_GX_INVERT: xcb_gx_t = 10;
pub const XCB_GX_OR_REVERSE: xcb_gx_t = 11;
pub const XCB_GX_COPY_INVERTED: xcb_gx_t = 12;
pub const XCB_GX_OR_INVERTED: xcb_gx_t = 13;
pub const XCB_GX_NAND: xcb_gx_t = 14;
pub const XCB_GX_SET: xcb_gx_t = 15;
pub type xcb_gx_t = ::std::os::raw::c_uint;
pub const XCB_LINE_STYLE_SOLID: xcb_line_style_t = 0;
pub const XCB_LINE_STYLE_ON_OFF_DASH: xcb_line_style_t = 1;
pub const XCB_LINE_STYLE_DOUBLE_DASH: xcb_line_style_t = 2;
pub type xcb_line_style_t = ::std::os::raw::c_uint;
pub const XCB_CAP_STYLE_NOT_LAST: xcb_cap_style_t = 0;
pub const XCB_CAP_STYLE_BUTT: xcb_cap_style_t = 1;
pub const XCB_CAP_STYLE_ROUND: xcb_cap_style_t = 2;
pub const XCB_CAP_STYLE_PROJECTING: xcb_cap_style_t = 3;
pub type xcb_cap_style_t = ::std::os::raw::c_uint;
pub const XCB_JOIN_STYLE_MITER: xcb_join_style_t = 0;
pub const XCB_JOIN_STYLE_ROUND: xcb_join_style_t = 1;
pub const XCB_JOIN_STYLE_BEVEL: xcb_join_style_t = 2;
pub type xcb_join_style_t = ::std::os::raw::c_uint;
pub const XCB_FILL_STYLE_SOLID: xcb_fill_style_t = 0;
pub const XCB_FILL_STYLE_TILED: xcb_fill_style_t = 1;
pub const XCB_FILL_STYLE_STIPPLED: xcb_fill_style_t = 2;
pub const XCB_FILL_STYLE_OPAQUE_STIPPLED: xcb_fill_style_t = 3;
pub type xcb_fill_style_t = ::std::os::raw::c_uint;
pub const XCB_FILL_RULE_EVEN_ODD: xcb_fill_rule_t = 0;
pub const XCB_FILL_RULE_WINDING: xcb_fill_rule_t = 1;
pub type xcb_fill_rule_t = ::std::os::raw::c_uint;
pub const XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN: xcb_subwindow_mode_t = 0;
pub const XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS: xcb_subwindow_mode_t = 1;
pub type xcb_subwindow_mode_t = ::std::os::raw::c_uint;
pub const XCB_ARC_MODE_CHORD: xcb_arc_mode_t = 0;
pub const XCB_ARC_MODE_PIE_SLICE: xcb_arc_mode_t = 1;
pub type xcb_arc_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_gc_value_list_t {
    pub function: u32,
    pub plane_mask: u32,
    pub foreground: u32,
    pub background: u32,
    pub line_width: u32,
    pub line_style: u32,
    pub cap_style: u32,
    pub join_style: u32,
    pub fill_style: u32,
    pub fill_rule: u32,
    pub tile: xcb_pixmap_t,
    pub stipple: xcb_pixmap_t,
    pub tile_stipple_x_origin: i32,
    pub tile_stipple_y_origin: i32,
    pub font: xcb_font_t,
    pub subwindow_mode: u32,
    pub graphics_exposures: xcb_bool32_t,
    pub clip_x_origin: i32,
    pub clip_y_origin: i32,
    pub clip_mask: xcb_pixmap_t,
    pub dash_offset: u32,
    pub dashes: u32,
    pub arc_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_gc_value_list_t"]
        [::std::mem::size_of::<xcb_create_gc_value_list_t>() - 92usize];
    ["Alignment of xcb_create_gc_value_list_t"]
        [::std::mem::align_of::<xcb_create_gc_value_list_t>() - 4usize];
    ["Offset of field: xcb_create_gc_value_list_t::function"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, function) - 0usize];
    ["Offset of field: xcb_create_gc_value_list_t::plane_mask"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, plane_mask) - 4usize];
    ["Offset of field: xcb_create_gc_value_list_t::foreground"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, foreground) - 8usize];
    ["Offset of field: xcb_create_gc_value_list_t::background"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, background) - 12usize];
    ["Offset of field: xcb_create_gc_value_list_t::line_width"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, line_width) - 16usize];
    ["Offset of field: xcb_create_gc_value_list_t::line_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, line_style) - 20usize];
    ["Offset of field: xcb_create_gc_value_list_t::cap_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, cap_style) - 24usize];
    ["Offset of field: xcb_create_gc_value_list_t::join_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, join_style) - 28usize];
    ["Offset of field: xcb_create_gc_value_list_t::fill_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, fill_style) - 32usize];
    ["Offset of field: xcb_create_gc_value_list_t::fill_rule"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, fill_rule) - 36usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile) - 40usize];
    ["Offset of field: xcb_create_gc_value_list_t::stipple"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, stipple) - 44usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile_stipple_x_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile_stipple_x_origin) - 48usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile_stipple_y_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile_stipple_y_origin) - 52usize];
    ["Offset of field: xcb_create_gc_value_list_t::font"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, font) - 56usize];
    ["Offset of field: xcb_create_gc_value_list_t::subwindow_mode"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, subwindow_mode) - 60usize];
    ["Offset of field: xcb_create_gc_value_list_t::graphics_exposures"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, graphics_exposures) - 64usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_x_origin) - 68usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_y_origin) - 72usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_mask"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_mask) - 76usize];
    ["Offset of field: xcb_create_gc_value_list_t::dash_offset"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, dash_offset) - 80usize];
    ["Offset of field: xcb_create_gc_value_list_t::dashes"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, dashes) - 84usize];
    ["Offset of field: xcb_create_gc_value_list_t::arc_mode"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, arc_mode) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_gcontext_t,
    pub drawable: xcb_drawable_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_gc_request_t"][::std::mem::size_of::<xcb_create_gc_request_t>() - 16usize];
    ["Alignment of xcb_create_gc_request_t"]
        [::std::mem::align_of::<xcb_create_gc_request_t>() - 4usize];
    ["Offset of field: xcb_create_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_create_gc_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_gc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, drawable) - 8usize];
    ["Offset of field: xcb_create_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, value_mask) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_gc_value_list_t {
    pub function: u32,
    pub plane_mask: u32,
    pub foreground: u32,
    pub background: u32,
    pub line_width: u32,
    pub line_style: u32,
    pub cap_style: u32,
    pub join_style: u32,
    pub fill_style: u32,
    pub fill_rule: u32,
    pub tile: xcb_pixmap_t,
    pub stipple: xcb_pixmap_t,
    pub tile_stipple_x_origin: i32,
    pub tile_stipple_y_origin: i32,
    pub font: xcb_font_t,
    pub subwindow_mode: u32,
    pub graphics_exposures: xcb_bool32_t,
    pub clip_x_origin: i32,
    pub clip_y_origin: i32,
    pub clip_mask: xcb_pixmap_t,
    pub dash_offset: u32,
    pub dashes: u32,
    pub arc_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_gc_value_list_t"]
        [::std::mem::size_of::<xcb_change_gc_value_list_t>() - 92usize];
    ["Alignment of xcb_change_gc_value_list_t"]
        [::std::mem::align_of::<xcb_change_gc_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_gc_value_list_t::function"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, function) - 0usize];
    ["Offset of field: xcb_change_gc_value_list_t::plane_mask"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, plane_mask) - 4usize];
    ["Offset of field: xcb_change_gc_value_list_t::foreground"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, foreground) - 8usize];
    ["Offset of field: xcb_change_gc_value_list_t::background"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, background) - 12usize];
    ["Offset of field: xcb_change_gc_value_list_t::line_width"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, line_width) - 16usize];
    ["Offset of field: xcb_change_gc_value_list_t::line_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, line_style) - 20usize];
    ["Offset of field: xcb_change_gc_value_list_t::cap_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, cap_style) - 24usize];
    ["Offset of field: xcb_change_gc_value_list_t::join_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, join_style) - 28usize];
    ["Offset of field: xcb_change_gc_value_list_t::fill_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, fill_style) - 32usize];
    ["Offset of field: xcb_change_gc_value_list_t::fill_rule"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, fill_rule) - 36usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile) - 40usize];
    ["Offset of field: xcb_change_gc_value_list_t::stipple"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, stipple) - 44usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile_stipple_x_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile_stipple_x_origin) - 48usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile_stipple_y_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile_stipple_y_origin) - 52usize];
    ["Offset of field: xcb_change_gc_value_list_t::font"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, font) - 56usize];
    ["Offset of field: xcb_change_gc_value_list_t::subwindow_mode"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, subwindow_mode) - 60usize];
    ["Offset of field: xcb_change_gc_value_list_t::graphics_exposures"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, graphics_exposures) - 64usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_x_origin) - 68usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_y_origin) - 72usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_mask"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_mask) - 76usize];
    ["Offset of field: xcb_change_gc_value_list_t::dash_offset"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, dash_offset) - 80usize];
    ["Offset of field: xcb_change_gc_value_list_t::dashes"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, dashes) - 84usize];
    ["Offset of field: xcb_change_gc_value_list_t::arc_mode"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, arc_mode) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_gc_request_t"][::std::mem::size_of::<xcb_change_gc_request_t>() - 12usize];
    ["Alignment of xcb_change_gc_request_t"]
        [::std::mem::align_of::<xcb_change_gc_request_t>() - 4usize];
    ["Offset of field: xcb_change_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_change_gc_request_t::gc"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, gc) - 4usize];
    ["Offset of field: xcb_change_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, value_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_gc: xcb_gcontext_t,
    pub dst_gc: xcb_gcontext_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_gc_request_t"][::std::mem::size_of::<xcb_copy_gc_request_t>() - 16usize];
    ["Alignment of xcb_copy_gc_request_t"]
        [::std::mem::align_of::<xcb_copy_gc_request_t>() - 4usize];
    ["Offset of field: xcb_copy_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_gc_request_t::src_gc"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, src_gc) - 4usize];
    ["Offset of field: xcb_copy_gc_request_t::dst_gc"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, dst_gc) - 8usize];
    ["Offset of field: xcb_copy_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, value_mask) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_dashes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub dash_offset: u16,
    pub dashes_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_dashes_request_t"]
        [::std::mem::size_of::<xcb_set_dashes_request_t>() - 12usize];
    ["Alignment of xcb_set_dashes_request_t"]
        [::std::mem::align_of::<xcb_set_dashes_request_t>() - 4usize];
    ["Offset of field: xcb_set_dashes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_dashes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_dashes_request_t::length"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, length) - 2usize];
    ["Offset of field: xcb_set_dashes_request_t::gc"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, gc) - 4usize];
    ["Offset of field: xcb_set_dashes_request_t::dash_offset"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, dash_offset) - 8usize];
    ["Offset of field: xcb_set_dashes_request_t::dashes_len"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, dashes_len) - 10usize];
};
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_UNSORTED: xcb_clip_ordering_t = 0;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_Y_SORTED: xcb_clip_ordering_t = 1;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_YX_SORTED: xcb_clip_ordering_t = 2;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_YX_BANDED: xcb_clip_ordering_t = 3;
pub type xcb_clip_ordering_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_clip_rectangles_request_t {
    pub major_opcode: u8,
    pub ordering: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub clip_x_origin: i16,
    pub clip_y_origin: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_clip_rectangles_request_t"]
        [::std::mem::size_of::<xcb_set_clip_rectangles_request_t>() - 12usize];
    ["Alignment of xcb_set_clip_rectangles_request_t"]
        [::std::mem::align_of::<xcb_set_clip_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::ordering"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, ordering) - 1usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::gc"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, gc) - 4usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, clip_x_origin) - 8usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, clip_y_origin) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_gc_request_t"][::std::mem::size_of::<xcb_free_gc_request_t>() - 8usize];
    ["Alignment of xcb_free_gc_request_t"]
        [::std::mem::align_of::<xcb_free_gc_request_t>() - 4usize];
    ["Offset of field: xcb_free_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_free_gc_request_t::gc"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, gc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_clear_area_request_t {
    pub major_opcode: u8,
    pub exposures: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_clear_area_request_t"]
        [::std::mem::size_of::<xcb_clear_area_request_t>() - 16usize];
    ["Alignment of xcb_clear_area_request_t"]
        [::std::mem::align_of::<xcb_clear_area_request_t>() - 4usize];
    ["Offset of field: xcb_clear_area_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_clear_area_request_t::exposures"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, exposures) - 1usize];
    ["Offset of field: xcb_clear_area_request_t::length"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, length) - 2usize];
    ["Offset of field: xcb_clear_area_request_t::window"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, window) - 4usize];
    ["Offset of field: xcb_clear_area_request_t::x"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, x) - 8usize];
    ["Offset of field: xcb_clear_area_request_t::y"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, y) - 10usize];
    ["Offset of field: xcb_clear_area_request_t::width"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, width) - 12usize];
    ["Offset of field: xcb_clear_area_request_t::height"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, height) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_area_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: i16,
    pub src_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_area_request_t"][::std::mem::size_of::<xcb_copy_area_request_t>() - 28usize];
    ["Alignment of xcb_copy_area_request_t"]
        [::std::mem::align_of::<xcb_copy_area_request_t>() - 4usize];
    ["Offset of field: xcb_copy_area_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_area_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_area_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_area_request_t::src_drawable"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_drawable) - 4usize];
    ["Offset of field: xcb_copy_area_request_t::dst_drawable"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_drawable) - 8usize];
    ["Offset of field: xcb_copy_area_request_t::gc"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, gc) - 12usize];
    ["Offset of field: xcb_copy_area_request_t::src_x"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_x) - 16usize];
    ["Offset of field: xcb_copy_area_request_t::src_y"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_y) - 18usize];
    ["Offset of field: xcb_copy_area_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_copy_area_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_y) - 22usize];
    ["Offset of field: xcb_copy_area_request_t::width"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, width) - 24usize];
    ["Offset of field: xcb_copy_area_request_t::height"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, height) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_plane_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: i16,
    pub src_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
    pub bit_plane: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_plane_request_t"]
        [::std::mem::size_of::<xcb_copy_plane_request_t>() - 32usize];
    ["Alignment of xcb_copy_plane_request_t"]
        [::std::mem::align_of::<xcb_copy_plane_request_t>() - 4usize];
    ["Offset of field: xcb_copy_plane_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_plane_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_plane_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_plane_request_t::src_drawable"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_drawable) - 4usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_drawable"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_drawable) - 8usize];
    ["Offset of field: xcb_copy_plane_request_t::gc"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, gc) - 12usize];
    ["Offset of field: xcb_copy_plane_request_t::src_x"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_x) - 16usize];
    ["Offset of field: xcb_copy_plane_request_t::src_y"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_y) - 18usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_y) - 22usize];
    ["Offset of field: xcb_copy_plane_request_t::width"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, width) - 24usize];
    ["Offset of field: xcb_copy_plane_request_t::height"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, height) - 26usize];
    ["Offset of field: xcb_copy_plane_request_t::bit_plane"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, bit_plane) - 28usize];
};
pub const XCB_COORD_MODE_ORIGIN: xcb_coord_mode_t = 0;
pub const XCB_COORD_MODE_PREVIOUS: xcb_coord_mode_t = 1;
pub type xcb_coord_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_point_request_t {
    pub major_opcode: u8,
    pub coordinate_mode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_point_request_t"]
        [::std::mem::size_of::<xcb_poly_point_request_t>() - 12usize];
    ["Alignment of xcb_poly_point_request_t"]
        [::std::mem::align_of::<xcb_poly_point_request_t>() - 4usize];
    ["Offset of field: xcb_poly_point_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_point_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, coordinate_mode) - 1usize];
    ["Offset of field: xcb_poly_point_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_point_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_point_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_line_request_t {
    pub major_opcode: u8,
    pub coordinate_mode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_line_request_t"][::std::mem::size_of::<xcb_poly_line_request_t>() - 12usize];
    ["Alignment of xcb_poly_line_request_t"]
        [::std::mem::align_of::<xcb_poly_line_request_t>() - 4usize];
    ["Offset of field: xcb_poly_line_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_line_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, coordinate_mode) - 1usize];
    ["Offset of field: xcb_poly_line_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_line_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_line_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_segment_t {
    pub x1: i16,
    pub y1: i16,
    pub x2: i16,
    pub y2: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_segment_t"][::std::mem::size_of::<xcb_segment_t>() - 8usize];
    ["Alignment of xcb_segment_t"][::std::mem::align_of::<xcb_segment_t>() - 2usize];
    ["Offset of field: xcb_segment_t::x1"][::std::mem::offset_of!(xcb_segment_t, x1) - 0usize];
    ["Offset of field: xcb_segment_t::y1"][::std::mem::offset_of!(xcb_segment_t, y1) - 2usize];
    ["Offset of field: xcb_segment_t::x2"][::std::mem::offset_of!(xcb_segment_t, x2) - 4usize];
    ["Offset of field: xcb_segment_t::y2"][::std::mem::offset_of!(xcb_segment_t, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_segment_iterator_t {
    pub data: *mut xcb_segment_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_segment_iterator_t"][::std::mem::size_of::<xcb_segment_iterator_t>() - 16usize];
    ["Alignment of xcb_segment_iterator_t"]
        [::std::mem::align_of::<xcb_segment_iterator_t>() - 8usize];
    ["Offset of field: xcb_segment_iterator_t::data"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, data) - 0usize];
    ["Offset of field: xcb_segment_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_segment_iterator_t::index"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_segment_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_segment_request_t"]
        [::std::mem::size_of::<xcb_poly_segment_request_t>() - 12usize];
    ["Alignment of xcb_poly_segment_request_t"]
        [::std::mem::align_of::<xcb_poly_segment_request_t>() - 4usize];
    ["Offset of field: xcb_poly_segment_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_segment_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_segment_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_segment_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_segment_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_rectangle_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_rectangle_request_t"]
        [::std::mem::size_of::<xcb_poly_rectangle_request_t>() - 12usize];
    ["Alignment of xcb_poly_rectangle_request_t"]
        [::std::mem::align_of::<xcb_poly_rectangle_request_t>() - 4usize];
    ["Offset of field: xcb_poly_rectangle_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_rectangle_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_rectangle_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_rectangle_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_rectangle_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_arc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_arc_request_t"][::std::mem::size_of::<xcb_poly_arc_request_t>() - 12usize];
    ["Alignment of xcb_poly_arc_request_t"]
        [::std::mem::align_of::<xcb_poly_arc_request_t>() - 4usize];
    ["Offset of field: xcb_poly_arc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_arc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_arc_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_arc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_arc_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, gc) - 8usize];
};
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_COMPLEX: xcb_poly_shape_t = 0;
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_NONCONVEX: xcb_poly_shape_t = 1;
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_CONVEX: xcb_poly_shape_t = 2;
pub type xcb_poly_shape_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fill_poly_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub shape: u8,
    pub coordinate_mode: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fill_poly_request_t"][::std::mem::size_of::<xcb_fill_poly_request_t>() - 16usize];
    ["Alignment of xcb_fill_poly_request_t"]
        [::std::mem::align_of::<xcb_fill_poly_request_t>() - 4usize];
    ["Offset of field: xcb_fill_poly_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_fill_poly_request_t::pad0"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, pad0) - 1usize];
    ["Offset of field: xcb_fill_poly_request_t::length"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, length) - 2usize];
    ["Offset of field: xcb_fill_poly_request_t::drawable"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, drawable) - 4usize];
    ["Offset of field: xcb_fill_poly_request_t::gc"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, gc) - 8usize];
    ["Offset of field: xcb_fill_poly_request_t::shape"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, shape) - 12usize];
    ["Offset of field: xcb_fill_poly_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, coordinate_mode) - 13usize];
    ["Offset of field: xcb_fill_poly_request_t::pad1"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_fill_rectangle_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_fill_rectangle_request_t"]
        [::std::mem::size_of::<xcb_poly_fill_rectangle_request_t>() - 12usize];
    ["Alignment of xcb_poly_fill_rectangle_request_t"]
        [::std::mem::align_of::<xcb_poly_fill_rectangle_request_t>() - 4usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_fill_arc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_fill_arc_request_t"]
        [::std::mem::size_of::<xcb_poly_fill_arc_request_t>() - 12usize];
    ["Alignment of xcb_poly_fill_arc_request_t"]
        [::std::mem::align_of::<xcb_poly_fill_arc_request_t>() - 4usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, gc) - 8usize];
};
pub const XCB_IMAGE_FORMAT_XY_BITMAP: xcb_image_format_t = 0;
pub const XCB_IMAGE_FORMAT_XY_PIXMAP: xcb_image_format_t = 1;
pub const XCB_IMAGE_FORMAT_Z_PIXMAP: xcb_image_format_t = 2;
pub type xcb_image_format_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_put_image_request_t {
    pub major_opcode: u8,
    pub format: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub width: u16,
    pub height: u16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub left_pad: u8,
    pub depth: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_put_image_request_t"][::std::mem::size_of::<xcb_put_image_request_t>() - 24usize];
    ["Alignment of xcb_put_image_request_t"]
        [::std::mem::align_of::<xcb_put_image_request_t>() - 4usize];
    ["Offset of field: xcb_put_image_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_put_image_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_put_image_request_t::format"]
        [::std::mem::offset_of!(xcb_put_image_request_t, format) - 1usize];
    ["Offset of field: xcb_put_image_request_t::length"]
        [::std::mem::offset_of!(xcb_put_image_request_t, length) - 2usize];
    ["Offset of field: xcb_put_image_request_t::drawable"]
        [::std::mem::offset_of!(xcb_put_image_request_t, drawable) - 4usize];
    ["Offset of field: xcb_put_image_request_t::gc"]
        [::std::mem::offset_of!(xcb_put_image_request_t, gc) - 8usize];
    ["Offset of field: xcb_put_image_request_t::width"]
        [::std::mem::offset_of!(xcb_put_image_request_t, width) - 12usize];
    ["Offset of field: xcb_put_image_request_t::height"]
        [::std::mem::offset_of!(xcb_put_image_request_t, height) - 14usize];
    ["Offset of field: xcb_put_image_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_put_image_request_t, dst_x) - 16usize];
    ["Offset of field: xcb_put_image_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_put_image_request_t, dst_y) - 18usize];
    ["Offset of field: xcb_put_image_request_t::left_pad"]
        [::std::mem::offset_of!(xcb_put_image_request_t, left_pad) - 20usize];
    ["Offset of field: xcb_put_image_request_t::depth"]
        [::std::mem::offset_of!(xcb_put_image_request_t, depth) - 21usize];
    ["Offset of field: xcb_put_image_request_t::pad0"]
        [::std::mem::offset_of!(xcb_put_image_request_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_cookie_t"][::std::mem::size_of::<xcb_get_image_cookie_t>() - 4usize];
    ["Alignment of xcb_get_image_cookie_t"]
        [::std::mem::align_of::<xcb_get_image_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_image_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_image_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_request_t {
    pub major_opcode: u8,
    pub format: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub plane_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_request_t"][::std::mem::size_of::<xcb_get_image_request_t>() - 20usize];
    ["Alignment of xcb_get_image_request_t"]
        [::std::mem::align_of::<xcb_get_image_request_t>() - 4usize];
    ["Offset of field: xcb_get_image_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_image_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_image_request_t::format"]
        [::std::mem::offset_of!(xcb_get_image_request_t, format) - 1usize];
    ["Offset of field: xcb_get_image_request_t::length"]
        [::std::mem::offset_of!(xcb_get_image_request_t, length) - 2usize];
    ["Offset of field: xcb_get_image_request_t::drawable"]
        [::std::mem::offset_of!(xcb_get_image_request_t, drawable) - 4usize];
    ["Offset of field: xcb_get_image_request_t::x"]
        [::std::mem::offset_of!(xcb_get_image_request_t, x) - 8usize];
    ["Offset of field: xcb_get_image_request_t::y"]
        [::std::mem::offset_of!(xcb_get_image_request_t, y) - 10usize];
    ["Offset of field: xcb_get_image_request_t::width"]
        [::std::mem::offset_of!(xcb_get_image_request_t, width) - 12usize];
    ["Offset of field: xcb_get_image_request_t::height"]
        [::std::mem::offset_of!(xcb_get_image_request_t, height) - 14usize];
    ["Offset of field: xcb_get_image_request_t::plane_mask"]
        [::std::mem::offset_of!(xcb_get_image_request_t, plane_mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_reply_t {
    pub response_type: u8,
    pub depth: u8,
    pub sequence: u16,
    pub length: u32,
    pub visual: xcb_visualid_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_reply_t"][::std::mem::size_of::<xcb_get_image_reply_t>() - 32usize];
    ["Alignment of xcb_get_image_reply_t"]
        [::std::mem::align_of::<xcb_get_image_reply_t>() - 4usize];
    ["Offset of field: xcb_get_image_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_image_reply_t::depth"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, depth) - 1usize];
    ["Offset of field: xcb_get_image_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_image_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_image_reply_t::visual"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, visual) - 8usize];
    ["Offset of field: xcb_get_image_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_text_8_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_text_8_request_t"]
        [::std::mem::size_of::<xcb_poly_text_8_request_t>() - 16usize];
    ["Alignment of xcb_poly_text_8_request_t"]
        [::std::mem::align_of::<xcb_poly_text_8_request_t>() - 4usize];
    ["Offset of field: xcb_poly_text_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_text_8_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_text_8_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_text_8_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_text_8_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, gc) - 8usize];
    ["Offset of field: xcb_poly_text_8_request_t::x"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, x) - 12usize];
    ["Offset of field: xcb_poly_text_8_request_t::y"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_text_16_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_text_16_request_t"]
        [::std::mem::size_of::<xcb_poly_text_16_request_t>() - 16usize];
    ["Alignment of xcb_poly_text_16_request_t"]
        [::std::mem::align_of::<xcb_poly_text_16_request_t>() - 4usize];
    ["Offset of field: xcb_poly_text_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_text_16_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_text_16_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_text_16_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_text_16_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, gc) - 8usize];
    ["Offset of field: xcb_poly_text_16_request_t::x"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, x) - 12usize];
    ["Offset of field: xcb_poly_text_16_request_t::y"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_image_text_8_request_t {
    pub major_opcode: u8,
    pub string_len: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_image_text_8_request_t"]
        [::std::mem::size_of::<xcb_image_text_8_request_t>() - 16usize];
    ["Alignment of xcb_image_text_8_request_t"]
        [::std::mem::align_of::<xcb_image_text_8_request_t>() - 4usize];
    ["Offset of field: xcb_image_text_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_image_text_8_request_t::string_len"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, string_len) - 1usize];
    ["Offset of field: xcb_image_text_8_request_t::length"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, length) - 2usize];
    ["Offset of field: xcb_image_text_8_request_t::drawable"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, drawable) - 4usize];
    ["Offset of field: xcb_image_text_8_request_t::gc"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, gc) - 8usize];
    ["Offset of field: xcb_image_text_8_request_t::x"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, x) - 12usize];
    ["Offset of field: xcb_image_text_8_request_t::y"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_image_text_16_request_t {
    pub major_opcode: u8,
    pub string_len: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_image_text_16_request_t"]
        [::std::mem::size_of::<xcb_image_text_16_request_t>() - 16usize];
    ["Alignment of xcb_image_text_16_request_t"]
        [::std::mem::align_of::<xcb_image_text_16_request_t>() - 4usize];
    ["Offset of field: xcb_image_text_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_image_text_16_request_t::string_len"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, string_len) - 1usize];
    ["Offset of field: xcb_image_text_16_request_t::length"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, length) - 2usize];
    ["Offset of field: xcb_image_text_16_request_t::drawable"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, drawable) - 4usize];
    ["Offset of field: xcb_image_text_16_request_t::gc"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, gc) - 8usize];
    ["Offset of field: xcb_image_text_16_request_t::x"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, x) - 12usize];
    ["Offset of field: xcb_image_text_16_request_t::y"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, y) - 14usize];
};
pub const xcb_colormap_alloc_t_XCB_COLORMAP_ALLOC_NONE: xcb_colormap_alloc_t = 0;
pub const xcb_colormap_alloc_t_XCB_COLORMAP_ALLOC_ALL: xcb_colormap_alloc_t = 1;
pub type xcb_colormap_alloc_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_colormap_request_t {
    pub major_opcode: u8,
    pub alloc: u8,
    pub length: u16,
    pub mid: xcb_colormap_t,
    pub window: xcb_window_t,
    pub visual: xcb_visualid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_colormap_request_t"]
        [::std::mem::size_of::<xcb_create_colormap_request_t>() - 16usize];
    ["Alignment of xcb_create_colormap_request_t"]
        [::std::mem::align_of::<xcb_create_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_create_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_colormap_request_t::alloc"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, alloc) - 1usize];
    ["Offset of field: xcb_create_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_create_colormap_request_t::mid"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, mid) - 4usize];
    ["Offset of field: xcb_create_colormap_request_t::window"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, window) - 8usize];
    ["Offset of field: xcb_create_colormap_request_t::visual"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, visual) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_colormap_request_t"]
        [::std::mem::size_of::<xcb_free_colormap_request_t>() - 8usize];
    ["Alignment of xcb_free_colormap_request_t"]
        [::std::mem::align_of::<xcb_free_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_free_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_free_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_colormap_and_free_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub mid: xcb_colormap_t,
    pub src_cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_colormap_and_free_request_t"]
        [::std::mem::size_of::<xcb_copy_colormap_and_free_request_t>() - 12usize];
    ["Alignment of xcb_copy_colormap_and_free_request_t"]
        [::std::mem::align_of::<xcb_copy_colormap_and_free_request_t>() - 4usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::mid"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, mid) - 4usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::src_cmap"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, src_cmap) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_install_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_install_colormap_request_t"]
        [::std::mem::size_of::<xcb_install_colormap_request_t>() - 8usize];
    ["Alignment of xcb_install_colormap_request_t"]
        [::std::mem::align_of::<xcb_install_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_install_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_install_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_install_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_install_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_uninstall_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_uninstall_colormap_request_t"]
        [::std::mem::size_of::<xcb_uninstall_colormap_request_t>() - 8usize];
    ["Alignment of xcb_uninstall_colormap_request_t"]
        [::std::mem::align_of::<xcb_uninstall_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_cookie_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_cookie_t>() - 4usize];
    ["Alignment of xcb_list_installed_colormaps_cookie_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_request_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_request_t>() - 8usize];
    ["Alignment of xcb_list_installed_colormaps_request_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_request_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::length"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, length) - 2usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::window"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub cmaps_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_reply_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_reply_t>() - 32usize];
    ["Alignment of xcb_list_installed_colormaps_reply_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_reply_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::cmaps_len"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, cmaps_len) - 8usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_request_t>() - 16usize];
    ["Alignment of xcb_alloc_color_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_request_t::red"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, red) - 8usize];
    ["Offset of field: xcb_alloc_color_request_t::green"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, green) - 10usize];
    ["Offset of field: xcb_alloc_color_request_t::blue"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, blue) - 12usize];
    ["Offset of field: xcb_alloc_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad1: [u8; 2usize],
    pub pixel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_reply_t"][::std::mem::size_of::<xcb_alloc_color_reply_t>() - 20usize];
    ["Alignment of xcb_alloc_color_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_reply_t::red"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, red) - 8usize];
    ["Offset of field: xcb_alloc_color_reply_t::green"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, green) - 10usize];
    ["Offset of field: xcb_alloc_color_reply_t::blue"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, blue) - 12usize];
    ["Offset of field: xcb_alloc_color_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pad1) - 14usize];
    ["Offset of field: xcb_alloc_color_reply_t::pixel"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pixel) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_named_color_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_named_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_request_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_request_t>() - 12usize];
    ["Alignment of xcb_alloc_named_color_request_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_named_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_named_color_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_named_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_named_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, name_len) - 8usize];
    ["Offset of field: xcb_alloc_named_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixel: u32,
    pub exact_red: u16,
    pub exact_green: u16,
    pub exact_blue: u16,
    pub visual_red: u16,
    pub visual_green: u16,
    pub visual_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_reply_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_reply_t>() - 24usize];
    ["Alignment of xcb_alloc_named_color_reply_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::pixel"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, pixel) - 8usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_red"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_red) - 12usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_green"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_green) - 14usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_blue"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_blue) - 16usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_red"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_red) - 18usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_green"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_green) - 20usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_blue"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_blue) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_cells_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_request_t {
    pub major_opcode: u8,
    pub contiguous: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub colors: u16,
    pub planes: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_request_t>() - 12usize];
    ["Alignment of xcb_alloc_color_cells_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::contiguous"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, contiguous) - 1usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::colors"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, colors) - 8usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::planes"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, planes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixels_len: u16,
    pub masks_len: u16,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_reply_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_reply_t>() - 32usize];
    ["Alignment of xcb_alloc_color_cells_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pixels_len"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pixels_len) - 8usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::masks_len"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, masks_len) - 10usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_planes_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_request_t {
    pub major_opcode: u8,
    pub contiguous: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub colors: u16,
    pub reds: u16,
    pub greens: u16,
    pub blues: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_request_t>() - 16usize];
    ["Alignment of xcb_alloc_color_planes_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::contiguous"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, contiguous) - 1usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::colors"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, colors) - 8usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::reds"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, reds) - 10usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::greens"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, greens) - 12usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::blues"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, blues) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixels_len: u16,
    pub pad1: [u8; 2usize],
    pub red_mask: u32,
    pub green_mask: u32,
    pub blue_mask: u32,
    pub pad2: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_reply_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_reply_t>() - 32usize];
    ["Alignment of xcb_alloc_color_planes_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pixels_len"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pixels_len) - 8usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad1) - 10usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::red_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, red_mask) - 12usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::green_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, green_mask) - 16usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::blue_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, blue_mask) - 20usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub plane_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_colors_request_t"]
        [::std::mem::size_of::<xcb_free_colors_request_t>() - 12usize];
    ["Alignment of xcb_free_colors_request_t"]
        [::std::mem::align_of::<xcb_free_colors_request_t>() - 4usize];
    ["Offset of field: xcb_free_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_free_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, cmap) - 4usize];
    ["Offset of field: xcb_free_colors_request_t::plane_mask"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, plane_mask) - 8usize];
};
pub const xcb_color_flag_t_XCB_COLOR_FLAG_RED: xcb_color_flag_t = 1;
pub const xcb_color_flag_t_XCB_COLOR_FLAG_GREEN: xcb_color_flag_t = 2;
pub const xcb_color_flag_t_XCB_COLOR_FLAG_BLUE: xcb_color_flag_t = 4;
pub type xcb_color_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_coloritem_t {
    pub pixel: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub flags: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_coloritem_t"][::std::mem::size_of::<xcb_coloritem_t>() - 12usize];
    ["Alignment of xcb_coloritem_t"][::std::mem::align_of::<xcb_coloritem_t>() - 4usize];
    ["Offset of field: xcb_coloritem_t::pixel"]
        [::std::mem::offset_of!(xcb_coloritem_t, pixel) - 0usize];
    ["Offset of field: xcb_coloritem_t::red"]
        [::std::mem::offset_of!(xcb_coloritem_t, red) - 4usize];
    ["Offset of field: xcb_coloritem_t::green"]
        [::std::mem::offset_of!(xcb_coloritem_t, green) - 6usize];
    ["Offset of field: xcb_coloritem_t::blue"]
        [::std::mem::offset_of!(xcb_coloritem_t, blue) - 8usize];
    ["Offset of field: xcb_coloritem_t::flags"]
        [::std::mem::offset_of!(xcb_coloritem_t, flags) - 10usize];
    ["Offset of field: xcb_coloritem_t::pad0"]
        [::std::mem::offset_of!(xcb_coloritem_t, pad0) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_coloritem_iterator_t {
    pub data: *mut xcb_coloritem_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_coloritem_iterator_t"]
        [::std::mem::size_of::<xcb_coloritem_iterator_t>() - 16usize];
    ["Alignment of xcb_coloritem_iterator_t"]
        [::std::mem::align_of::<xcb_coloritem_iterator_t>() - 8usize];
    ["Offset of field: xcb_coloritem_iterator_t::data"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, data) - 0usize];
    ["Offset of field: xcb_coloritem_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_coloritem_iterator_t::index"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_store_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_store_colors_request_t"]
        [::std::mem::size_of::<xcb_store_colors_request_t>() - 8usize];
    ["Alignment of xcb_store_colors_request_t"]
        [::std::mem::align_of::<xcb_store_colors_request_t>() - 4usize];
    ["Offset of field: xcb_store_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_store_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_store_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_store_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_store_named_color_request_t {
    pub major_opcode: u8,
    pub flags: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub pixel: u32,
    pub name_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_store_named_color_request_t"]
        [::std::mem::size_of::<xcb_store_named_color_request_t>() - 16usize];
    ["Alignment of xcb_store_named_color_request_t"]
        [::std::mem::align_of::<xcb_store_named_color_request_t>() - 4usize];
    ["Offset of field: xcb_store_named_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_store_named_color_request_t::flags"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, flags) - 1usize];
    ["Offset of field: xcb_store_named_color_request_t::length"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, length) - 2usize];
    ["Offset of field: xcb_store_named_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_store_named_color_request_t::pixel"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, pixel) - 8usize];
    ["Offset of field: xcb_store_named_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, name_len) - 12usize];
    ["Offset of field: xcb_store_named_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rgb_t {
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rgb_t"][::std::mem::size_of::<xcb_rgb_t>() - 8usize];
    ["Alignment of xcb_rgb_t"][::std::mem::align_of::<xcb_rgb_t>() - 2usize];
    ["Offset of field: xcb_rgb_t::red"][::std::mem::offset_of!(xcb_rgb_t, red) - 0usize];
    ["Offset of field: xcb_rgb_t::green"][::std::mem::offset_of!(xcb_rgb_t, green) - 2usize];
    ["Offset of field: xcb_rgb_t::blue"][::std::mem::offset_of!(xcb_rgb_t, blue) - 4usize];
    ["Offset of field: xcb_rgb_t::pad0"][::std::mem::offset_of!(xcb_rgb_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rgb_iterator_t {
    pub data: *mut xcb_rgb_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rgb_iterator_t"][::std::mem::size_of::<xcb_rgb_iterator_t>() - 16usize];
    ["Alignment of xcb_rgb_iterator_t"][::std::mem::align_of::<xcb_rgb_iterator_t>() - 8usize];
    ["Offset of field: xcb_rgb_iterator_t::data"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, data) - 0usize];
    ["Offset of field: xcb_rgb_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_rgb_iterator_t::index"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_cookie_t"]
        [::std::mem::size_of::<xcb_query_colors_cookie_t>() - 4usize];
    ["Alignment of xcb_query_colors_cookie_t"]
        [::std::mem::align_of::<xcb_query_colors_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_colors_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_colors_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_request_t"]
        [::std::mem::size_of::<xcb_query_colors_request_t>() - 8usize];
    ["Alignment of xcb_query_colors_request_t"]
        [::std::mem::align_of::<xcb_query_colors_request_t>() - 4usize];
    ["Offset of field: xcb_query_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_query_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub colors_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_reply_t"]
        [::std::mem::size_of::<xcb_query_colors_reply_t>() - 32usize];
    ["Alignment of xcb_query_colors_reply_t"]
        [::std::mem::align_of::<xcb_query_colors_reply_t>() - 4usize];
    ["Offset of field: xcb_query_colors_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_colors_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_colors_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_colors_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_colors_reply_t::colors_len"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, colors_len) - 8usize];
    ["Offset of field: xcb_query_colors_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_cookie_t"]
        [::std::mem::size_of::<xcb_lookup_color_cookie_t>() - 4usize];
    ["Alignment of xcb_lookup_color_cookie_t"]
        [::std::mem::align_of::<xcb_lookup_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_lookup_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_request_t"]
        [::std::mem::size_of::<xcb_lookup_color_request_t>() - 12usize];
    ["Alignment of xcb_lookup_color_request_t"]
        [::std::mem::align_of::<xcb_lookup_color_request_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_lookup_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_lookup_color_request_t::length"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, length) - 2usize];
    ["Offset of field: xcb_lookup_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_lookup_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, name_len) - 8usize];
    ["Offset of field: xcb_lookup_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub exact_red: u16,
    pub exact_green: u16,
    pub exact_blue: u16,
    pub visual_red: u16,
    pub visual_green: u16,
    pub visual_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_reply_t"]
        [::std::mem::size_of::<xcb_lookup_color_reply_t>() - 20usize];
    ["Alignment of xcb_lookup_color_reply_t"]
        [::std::mem::align_of::<xcb_lookup_color_reply_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_lookup_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_lookup_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_lookup_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_red"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_red) - 8usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_green"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_green) - 10usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_blue"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_blue) - 12usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_red"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_red) - 14usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_green"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_green) - 16usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_blue"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_blue) - 18usize];
};
pub const xcb_pixmap_enum_t_XCB_PIXMAP_NONE: xcb_pixmap_enum_t = 0;
pub type xcb_pixmap_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source: xcb_pixmap_t,
    pub mask: xcb_pixmap_t,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_cursor_request_t"]
        [::std::mem::size_of::<xcb_create_cursor_request_t>() - 32usize];
    ["Alignment of xcb_create_cursor_request_t"]
        [::std::mem::align_of::<xcb_create_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_create_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_create_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_cursor_request_t::source"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, source) - 8usize];
    ["Offset of field: xcb_create_cursor_request_t::mask"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, mask) - 12usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_red) - 16usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_green) - 18usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_blue) - 20usize];
    ["Offset of field: xcb_create_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_red) - 22usize];
    ["Offset of field: xcb_create_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_green) - 24usize];
    ["Offset of field: xcb_create_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_blue) - 26usize];
    ["Offset of field: xcb_create_cursor_request_t::x"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, x) - 28usize];
    ["Offset of field: xcb_create_cursor_request_t::y"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, y) - 30usize];
};
pub const xcb_font_enum_t_XCB_FONT_NONE: xcb_font_enum_t = 0;
pub type xcb_font_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_glyph_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source_font: xcb_font_t,
    pub mask_font: xcb_font_t,
    pub source_char: u16,
    pub mask_char: u16,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_glyph_cursor_request_t"]
        [::std::mem::size_of::<xcb_create_glyph_cursor_request_t>() - 32usize];
    ["Alignment of xcb_create_glyph_cursor_request_t"]
        [::std::mem::align_of::<xcb_create_glyph_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::source_font"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, source_font) - 8usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::mask_font"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, mask_font) - 12usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::source_char"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, source_char) - 16usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::mask_char"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, mask_char) - 18usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_red) - 20usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_green) - 22usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_blue) - 24usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_red) - 26usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_green) - 28usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_blue) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_cursor_request_t"]
        [::std::mem::size_of::<xcb_free_cursor_request_t>() - 8usize];
    ["Alignment of xcb_free_cursor_request_t"]
        [::std::mem::align_of::<xcb_free_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_free_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_free_cursor_request_t::cursor"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, cursor) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_recolor_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_recolor_cursor_request_t"]
        [::std::mem::size_of::<xcb_recolor_cursor_request_t>() - 20usize];
    ["Alignment of xcb_recolor_cursor_request_t"]
        [::std::mem::align_of::<xcb_recolor_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_recolor_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_recolor_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_recolor_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_recolor_cursor_request_t::cursor"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, cursor) - 4usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_red) - 8usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_green) - 10usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_blue) - 12usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_red) - 14usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_green) - 16usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_blue) - 18usize];
};
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_LARGEST_CURSOR: xcb_query_shape_of_t = 0;
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_FASTEST_TILE: xcb_query_shape_of_t = 1;
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE: xcb_query_shape_of_t = 2;
pub type xcb_query_shape_of_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_cookie_t"]
        [::std::mem::size_of::<xcb_query_best_size_cookie_t>() - 4usize];
    ["Alignment of xcb_query_best_size_cookie_t"]
        [::std::mem::align_of::<xcb_query_best_size_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_best_size_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_request_t {
    pub major_opcode: u8,
    pub _class: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_request_t"]
        [::std::mem::size_of::<xcb_query_best_size_request_t>() - 12usize];
    ["Alignment of xcb_query_best_size_request_t"]
        [::std::mem::align_of::<xcb_query_best_size_request_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_best_size_request_t::_class"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, _class) - 1usize];
    ["Offset of field: xcb_query_best_size_request_t::length"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, length) - 2usize];
    ["Offset of field: xcb_query_best_size_request_t::drawable"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, drawable) - 4usize];
    ["Offset of field: xcb_query_best_size_request_t::width"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, width) - 8usize];
    ["Offset of field: xcb_query_best_size_request_t::height"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, height) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_reply_t"]
        [::std::mem::size_of::<xcb_query_best_size_reply_t>() - 12usize];
    ["Alignment of xcb_query_best_size_reply_t"]
        [::std::mem::align_of::<xcb_query_best_size_reply_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_best_size_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_best_size_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_best_size_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_best_size_reply_t::width"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, width) - 8usize];
    ["Offset of field: xcb_query_best_size_reply_t::height"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, height) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_cookie_t"]
        [::std::mem::size_of::<xcb_query_extension_cookie_t>() - 4usize];
    ["Alignment of xcb_query_extension_cookie_t"]
        [::std::mem::align_of::<xcb_query_extension_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_extension_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_extension_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_request_t"]
        [::std::mem::size_of::<xcb_query_extension_request_t>() - 8usize];
    ["Alignment of xcb_query_extension_request_t"]
        [::std::mem::align_of::<xcb_query_extension_request_t>() - 2usize];
    ["Offset of field: xcb_query_extension_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_extension_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_extension_request_t::length"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, length) - 2usize];
    ["Offset of field: xcb_query_extension_request_t::name_len"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, name_len) - 4usize];
    ["Offset of field: xcb_query_extension_request_t::pad1"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub present: u8,
    pub major_opcode: u8,
    pub first_event: u8,
    pub first_error: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_reply_t"]
        [::std::mem::size_of::<xcb_query_extension_reply_t>() - 12usize];
    ["Alignment of xcb_query_extension_reply_t"]
        [::std::mem::align_of::<xcb_query_extension_reply_t>() - 4usize];
    ["Offset of field: xcb_query_extension_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_extension_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_extension_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_extension_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_extension_reply_t::present"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, present) - 8usize];
    ["Offset of field: xcb_query_extension_reply_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, major_opcode) - 9usize];
    ["Offset of field: xcb_query_extension_reply_t::first_event"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, first_event) - 10usize];
    ["Offset of field: xcb_query_extension_reply_t::first_error"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, first_error) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_cookie_t"]
        [::std::mem::size_of::<xcb_list_extensions_cookie_t>() - 4usize];
    ["Alignment of xcb_list_extensions_cookie_t"]
        [::std::mem::align_of::<xcb_list_extensions_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_extensions_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_extensions_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_request_t"]
        [::std::mem::size_of::<xcb_list_extensions_request_t>() - 4usize];
    ["Alignment of xcb_list_extensions_request_t"]
        [::std::mem::align_of::<xcb_list_extensions_request_t>() - 2usize];
    ["Offset of field: xcb_list_extensions_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_extensions_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_extensions_request_t::length"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_reply_t {
    pub response_type: u8,
    pub names_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_reply_t"]
        [::std::mem::size_of::<xcb_list_extensions_reply_t>() - 32usize];
    ["Alignment of xcb_list_extensions_reply_t"]
        [::std::mem::align_of::<xcb_list_extensions_reply_t>() - 4usize];
    ["Offset of field: xcb_list_extensions_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_extensions_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, names_len) - 1usize];
    ["Offset of field: xcb_list_extensions_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_extensions_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_extensions_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_mapping_request_t {
    pub major_opcode: u8,
    pub keycode_count: u8,
    pub length: u16,
    pub first_keycode: xcb_keycode_t,
    pub keysyms_per_keycode: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_mapping_request_t"]
        [::std::mem::size_of::<xcb_change_keyboard_mapping_request_t>() - 8usize];
    ["Alignment of xcb_change_keyboard_mapping_request_t"]
        [::std::mem::align_of::<xcb_change_keyboard_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::keycode_count"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, keycode_count) - 1usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, length) - 2usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::first_keycode"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, first_keycode) - 4usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::keysyms_per_keycode"][::std::mem::offset_of!(
        xcb_change_keyboard_mapping_request_t,
        keysyms_per_keycode
    ) - 5usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub first_keycode: xcb_keycode_t,
    pub count: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_request_t>() - 6usize];
    ["Alignment of xcb_get_keyboard_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, length) - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::first_keycode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, first_keycode) - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::count"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, count) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_reply_t {
    pub response_type: u8,
    pub keysyms_per_keycode: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_keyboard_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::keysyms_per_keycode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, keysyms_per_keycode) - 1usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, pad0) - 8usize];
};
pub const xcb_kb_t_XCB_KB_KEY_CLICK_PERCENT: xcb_kb_t = 1;
pub const xcb_kb_t_XCB_KB_BELL_PERCENT: xcb_kb_t = 2;
pub const xcb_kb_t_XCB_KB_BELL_PITCH: xcb_kb_t = 4;
pub const xcb_kb_t_XCB_KB_BELL_DURATION: xcb_kb_t = 8;
pub const xcb_kb_t_XCB_KB_LED: xcb_kb_t = 16;
pub const xcb_kb_t_XCB_KB_LED_MODE: xcb_kb_t = 32;
pub const xcb_kb_t_XCB_KB_KEY: xcb_kb_t = 64;
pub const xcb_kb_t_XCB_KB_AUTO_REPEAT_MODE: xcb_kb_t = 128;
pub type xcb_kb_t = ::std::os::raw::c_uint;
pub const xcb_led_mode_t_XCB_LED_MODE_OFF: xcb_led_mode_t = 0;
pub const xcb_led_mode_t_XCB_LED_MODE_ON: xcb_led_mode_t = 1;
pub type xcb_led_mode_t = ::std::os::raw::c_uint;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_OFF: xcb_auto_repeat_mode_t = 0;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_ON: xcb_auto_repeat_mode_t = 1;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_DEFAULT: xcb_auto_repeat_mode_t = 2;
pub type xcb_auto_repeat_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_control_value_list_t {
    pub key_click_percent: i32,
    pub bell_percent: i32,
    pub bell_pitch: i32,
    pub bell_duration: i32,
    pub led: u32,
    pub led_mode: u32,
    pub key: xcb_keycode32_t,
    pub auto_repeat_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_control_value_list_t"]
        [::std::mem::size_of::<xcb_change_keyboard_control_value_list_t>() - 32usize];
    ["Alignment of xcb_change_keyboard_control_value_list_t"]
        [::std::mem::align_of::<xcb_change_keyboard_control_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::key_click_percent"][::std::mem::offset_of!(
        xcb_change_keyboard_control_value_list_t,
        key_click_percent
    ) - 0usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_percent"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_percent) - 4usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_pitch"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_pitch) - 8usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_duration"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_duration) - 12usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::led"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, led) - 16usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::led_mode"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, led_mode) - 20usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::key"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, key) - 24usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::auto_repeat_mode"][::std::mem::offset_of!(
        xcb_change_keyboard_control_value_list_t,
        auto_repeat_mode
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_control_request_t"]
        [::std::mem::size_of::<xcb_change_keyboard_control_request_t>() - 8usize];
    ["Alignment of xcb_change_keyboard_control_request_t"]
        [::std::mem::align_of::<xcb_change_keyboard_control_request_t>() - 4usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::length"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, length) - 2usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, value_mask) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_cookie_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_cookie_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_control_cookie_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_control_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_request_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_request_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_control_request_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_request_t>() - 2usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_reply_t {
    pub response_type: u8,
    pub global_auto_repeat: u8,
    pub sequence: u16,
    pub length: u32,
    pub led_mask: u32,
    pub key_click_percent: u8,
    pub bell_percent: u8,
    pub bell_pitch: u16,
    pub bell_duration: u16,
    pub pad0: [u8; 2usize],
    pub auto_repeats: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_reply_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_reply_t>() - 52usize];
    ["Alignment of xcb_get_keyboard_control_reply_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_reply_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::global_auto_repeat"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, global_auto_repeat) - 1usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::led_mask"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, led_mask) - 8usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::key_click_percent"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, key_click_percent) - 12usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_percent"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_percent) - 13usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_pitch"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_pitch) - 14usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_duration"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_duration) - 16usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, pad0) - 18usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::auto_repeats"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, auto_repeats) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_bell_request_t {
    pub major_opcode: u8,
    pub percent: i8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_bell_request_t"][::std::mem::size_of::<xcb_bell_request_t>() - 4usize];
    ["Alignment of xcb_bell_request_t"][::std::mem::align_of::<xcb_bell_request_t>() - 2usize];
    ["Offset of field: xcb_bell_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_bell_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_bell_request_t::percent"]
        [::std::mem::offset_of!(xcb_bell_request_t, percent) - 1usize];
    ["Offset of field: xcb_bell_request_t::length"]
        [::std::mem::offset_of!(xcb_bell_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_pointer_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub acceleration_numerator: i16,
    pub acceleration_denominator: i16,
    pub threshold: i16,
    pub do_acceleration: u8,
    pub do_threshold: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_pointer_control_request_t"]
        [::std::mem::size_of::<xcb_change_pointer_control_request_t>() - 12usize];
    ["Alignment of xcb_change_pointer_control_request_t"]
        [::std::mem::align_of::<xcb_change_pointer_control_request_t>() - 2usize];
    ["Offset of field: xcb_change_pointer_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_pointer_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_pointer_control_request_t::length"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, length) - 2usize];
    ["Offset of field: xcb_change_pointer_control_request_t::acceleration_numerator"][::std::mem::offset_of!(
        xcb_change_pointer_control_request_t,
        acceleration_numerator
    ) - 4usize];
    ["Offset of field: xcb_change_pointer_control_request_t::acceleration_denominator"][::std::mem::offset_of!(
        xcb_change_pointer_control_request_t,
        acceleration_denominator
    ) - 6usize];
    ["Offset of field: xcb_change_pointer_control_request_t::threshold"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, threshold) - 8usize];
    ["Offset of field: xcb_change_pointer_control_request_t::do_acceleration"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, do_acceleration) - 10usize];
    ["Offset of field: xcb_change_pointer_control_request_t::do_threshold"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, do_threshold) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_cookie_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_cookie_t>() - 4usize];
    ["Alignment of xcb_get_pointer_control_cookie_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_control_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_control_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_request_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_request_t>() - 4usize];
    ["Alignment of xcb_get_pointer_control_request_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_request_t>() - 2usize];
    ["Offset of field: xcb_get_pointer_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_pointer_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_control_request_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub acceleration_numerator: u16,
    pub acceleration_denominator: u16,
    pub threshold: u16,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_reply_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_reply_t>() - 32usize];
    ["Alignment of xcb_get_pointer_control_reply_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_reply_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::acceleration_numerator"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, acceleration_numerator) - 8usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::acceleration_denominator"][::std::mem::offset_of!(
        xcb_get_pointer_control_reply_t,
        acceleration_denominator
    ) - 10usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::threshold"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, threshold) - 12usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, pad1) - 14usize];
};
pub const xcb_blanking_t_XCB_BLANKING_NOT_PREFERRED: xcb_blanking_t = 0;
pub const xcb_blanking_t_XCB_BLANKING_PREFERRED: xcb_blanking_t = 1;
pub const xcb_blanking_t_XCB_BLANKING_DEFAULT: xcb_blanking_t = 2;
pub type xcb_blanking_t = ::std::os::raw::c_uint;
pub const xcb_exposures_t_XCB_EXPOSURES_NOT_ALLOWED: xcb_exposures_t = 0;
pub const xcb_exposures_t_XCB_EXPOSURES_ALLOWED: xcb_exposures_t = 1;
pub const xcb_exposures_t_XCB_EXPOSURES_DEFAULT: xcb_exposures_t = 2;
pub type xcb_exposures_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_screen_saver_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub timeout: i16,
    pub interval: i16,
    pub prefer_blanking: u8,
    pub allow_exposures: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_set_screen_saver_request_t>() - 10usize];
    ["Alignment of xcb_set_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_set_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_set_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_screen_saver_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, length) - 2usize];
    ["Offset of field: xcb_set_screen_saver_request_t::timeout"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, timeout) - 4usize];
    ["Offset of field: xcb_set_screen_saver_request_t::interval"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, interval) - 6usize];
    ["Offset of field: xcb_set_screen_saver_request_t::prefer_blanking"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, prefer_blanking) - 8usize];
    ["Offset of field: xcb_set_screen_saver_request_t::allow_exposures"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, allow_exposures) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_cookie_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_cookie_t>() - 4usize];
    ["Alignment of xcb_get_screen_saver_cookie_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_screen_saver_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_screen_saver_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_request_t>() - 4usize];
    ["Alignment of xcb_get_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_get_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_screen_saver_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timeout: u16,
    pub interval: u16,
    pub prefer_blanking: u8,
    pub allow_exposures: u8,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_reply_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_reply_t>() - 32usize];
    ["Alignment of xcb_get_screen_saver_reply_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_reply_t>() - 4usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::timeout"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, timeout) - 8usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::interval"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, interval) - 10usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::prefer_blanking"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, prefer_blanking) - 12usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::allow_exposures"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, allow_exposures) - 13usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, pad1) - 14usize];
};
pub const xcb_host_mode_t_XCB_HOST_MODE_INSERT: xcb_host_mode_t = 0;
pub const xcb_host_mode_t_XCB_HOST_MODE_DELETE: xcb_host_mode_t = 1;
pub type xcb_host_mode_t = ::std::os::raw::c_uint;
pub const xcb_family_t_XCB_FAMILY_INTERNET: xcb_family_t = 0;
pub const xcb_family_t_XCB_FAMILY_DECNET: xcb_family_t = 1;
pub const xcb_family_t_XCB_FAMILY_CHAOS: xcb_family_t = 2;
pub const xcb_family_t_XCB_FAMILY_SERVER_INTERPRETED: xcb_family_t = 5;
pub const xcb_family_t_XCB_FAMILY_INTERNET_6: xcb_family_t = 6;
pub type xcb_family_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_hosts_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub family: u8,
    pub pad0: u8,
    pub address_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_hosts_request_t"]
        [::std::mem::size_of::<xcb_change_hosts_request_t>() - 8usize];
    ["Alignment of xcb_change_hosts_request_t"]
        [::std::mem::align_of::<xcb_change_hosts_request_t>() - 2usize];
    ["Offset of field: xcb_change_hosts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_hosts_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_hosts_request_t::length"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, length) - 2usize];
    ["Offset of field: xcb_change_hosts_request_t::family"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, family) - 4usize];
    ["Offset of field: xcb_change_hosts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, pad0) - 5usize];
    ["Offset of field: xcb_change_hosts_request_t::address_len"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, address_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_host_t {
    pub family: u8,
    pub pad0: u8,
    pub address_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_host_t"][::std::mem::size_of::<xcb_host_t>() - 4usize];
    ["Alignment of xcb_host_t"][::std::mem::align_of::<xcb_host_t>() - 2usize];
    ["Offset of field: xcb_host_t::family"][::std::mem::offset_of!(xcb_host_t, family) - 0usize];
    ["Offset of field: xcb_host_t::pad0"][::std::mem::offset_of!(xcb_host_t, pad0) - 1usize];
    ["Offset of field: xcb_host_t::address_len"]
        [::std::mem::offset_of!(xcb_host_t, address_len) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_host_iterator_t {
    pub data: *mut xcb_host_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_host_iterator_t"][::std::mem::size_of::<xcb_host_iterator_t>() - 16usize];
    ["Alignment of xcb_host_iterator_t"][::std::mem::align_of::<xcb_host_iterator_t>() - 8usize];
    ["Offset of field: xcb_host_iterator_t::data"]
        [::std::mem::offset_of!(xcb_host_iterator_t, data) - 0usize];
    ["Offset of field: xcb_host_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_host_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_host_iterator_t::index"]
        [::std::mem::offset_of!(xcb_host_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_cookie_t"][::std::mem::size_of::<xcb_list_hosts_cookie_t>() - 4usize];
    ["Alignment of xcb_list_hosts_cookie_t"]
        [::std::mem::align_of::<xcb_list_hosts_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_hosts_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_hosts_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_request_t"]
        [::std::mem::size_of::<xcb_list_hosts_request_t>() - 4usize];
    ["Alignment of xcb_list_hosts_request_t"]
        [::std::mem::align_of::<xcb_list_hosts_request_t>() - 2usize];
    ["Offset of field: xcb_list_hosts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_hosts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_hosts_request_t::length"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_reply_t {
    pub response_type: u8,
    pub mode: u8,
    pub sequence: u16,
    pub length: u32,
    pub hosts_len: u16,
    pub pad0: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_reply_t"][::std::mem::size_of::<xcb_list_hosts_reply_t>() - 32usize];
    ["Alignment of xcb_list_hosts_reply_t"]
        [::std::mem::align_of::<xcb_list_hosts_reply_t>() - 4usize];
    ["Offset of field: xcb_list_hosts_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_hosts_reply_t::mode"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, mode) - 1usize];
    ["Offset of field: xcb_list_hosts_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_hosts_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_hosts_reply_t::hosts_len"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, hosts_len) - 8usize];
    ["Offset of field: xcb_list_hosts_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, pad0) - 10usize];
};
pub const xcb_access_control_t_XCB_ACCESS_CONTROL_DISABLE: xcb_access_control_t = 0;
pub const xcb_access_control_t_XCB_ACCESS_CONTROL_ENABLE: xcb_access_control_t = 1;
pub type xcb_access_control_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_access_control_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_access_control_request_t"]
        [::std::mem::size_of::<xcb_set_access_control_request_t>() - 4usize];
    ["Alignment of xcb_set_access_control_request_t"]
        [::std::mem::align_of::<xcb_set_access_control_request_t>() - 2usize];
    ["Offset of field: xcb_set_access_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_access_control_request_t::mode"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, mode) - 1usize];
    ["Offset of field: xcb_set_access_control_request_t::length"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, length) - 2usize];
};
pub const xcb_close_down_t_XCB_CLOSE_DOWN_DESTROY_ALL: xcb_close_down_t = 0;
pub const xcb_close_down_t_XCB_CLOSE_DOWN_RETAIN_PERMANENT: xcb_close_down_t = 1;
pub const xcb_close_down_t_XCB_CLOSE_DOWN_RETAIN_TEMPORARY: xcb_close_down_t = 2;
pub type xcb_close_down_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_close_down_mode_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_close_down_mode_request_t"]
        [::std::mem::size_of::<xcb_set_close_down_mode_request_t>() - 4usize];
    ["Alignment of xcb_set_close_down_mode_request_t"]
        [::std::mem::align_of::<xcb_set_close_down_mode_request_t>() - 2usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, mode) - 1usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, length) - 2usize];
};
pub const xcb_kill_t_XCB_KILL_ALL_TEMPORARY: xcb_kill_t = 0;
pub type xcb_kill_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_kill_client_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub resource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_kill_client_request_t"]
        [::std::mem::size_of::<xcb_kill_client_request_t>() - 8usize];
    ["Alignment of xcb_kill_client_request_t"]
        [::std::mem::align_of::<xcb_kill_client_request_t>() - 4usize];
    ["Offset of field: xcb_kill_client_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_kill_client_request_t::pad0"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, pad0) - 1usize];
    ["Offset of field: xcb_kill_client_request_t::length"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, length) - 2usize];
    ["Offset of field: xcb_kill_client_request_t::resource"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, resource) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rotate_properties_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub atoms_len: u16,
    pub delta: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rotate_properties_request_t"]
        [::std::mem::size_of::<xcb_rotate_properties_request_t>() - 12usize];
    ["Alignment of xcb_rotate_properties_request_t"]
        [::std::mem::align_of::<xcb_rotate_properties_request_t>() - 4usize];
    ["Offset of field: xcb_rotate_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_rotate_properties_request_t::pad0"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, pad0) - 1usize];
    ["Offset of field: xcb_rotate_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_rotate_properties_request_t::window"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, window) - 4usize];
    ["Offset of field: xcb_rotate_properties_request_t::atoms_len"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, atoms_len) - 8usize];
    ["Offset of field: xcb_rotate_properties_request_t::delta"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, delta) - 10usize];
};
pub const xcb_screen_saver_t_XCB_SCREEN_SAVER_RESET: xcb_screen_saver_t = 0;
pub const xcb_screen_saver_t_XCB_SCREEN_SAVER_ACTIVE: xcb_screen_saver_t = 1;
pub type xcb_screen_saver_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_force_screen_saver_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_force_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_force_screen_saver_request_t>() - 4usize];
    ["Alignment of xcb_force_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_force_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_force_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_force_screen_saver_request_t::mode"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, mode) - 1usize];
    ["Offset of field: xcb_force_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, length) - 2usize];
};
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_SUCCESS: xcb_mapping_status_t = 0;
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_BUSY: xcb_mapping_status_t = 1;
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_FAILURE: xcb_mapping_status_t = 2;
pub type xcb_mapping_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_set_pointer_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_set_pointer_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_request_t {
    pub major_opcode: u8,
    pub map_len: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_request_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_request_t>() - 4usize];
    ["Alignment of xcb_set_pointer_mapping_request_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::map_len"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, map_len) - 1usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_reply_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_reply_t>() - 8usize];
    ["Alignment of xcb_set_pointer_mapping_reply_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::status"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, status) - 1usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_pointer_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_request_t>() - 4usize];
    ["Alignment of xcb_get_pointer_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_reply_t {
    pub response_type: u8,
    pub map_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_pointer_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::map_len"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, map_len) - 1usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, pad0) - 8usize];
};
pub const xcb_map_index_t_XCB_MAP_INDEX_SHIFT: xcb_map_index_t = 0;
pub const xcb_map_index_t_XCB_MAP_INDEX_LOCK: xcb_map_index_t = 1;
pub const xcb_map_index_t_XCB_MAP_INDEX_CONTROL: xcb_map_index_t = 2;
pub const xcb_map_index_t_XCB_MAP_INDEX_1: xcb_map_index_t = 3;
pub const xcb_map_index_t_XCB_MAP_INDEX_2: xcb_map_index_t = 4;
pub const xcb_map_index_t_XCB_MAP_INDEX_3: xcb_map_index_t = 5;
pub const xcb_map_index_t_XCB_MAP_INDEX_4: xcb_map_index_t = 6;
pub const xcb_map_index_t_XCB_MAP_INDEX_5: xcb_map_index_t = 7;
pub type xcb_map_index_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_set_modifier_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_set_modifier_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_request_t {
    pub major_opcode: u8,
    pub keycodes_per_modifier: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_request_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_request_t>() - 4usize];
    ["Alignment of xcb_set_modifier_mapping_request_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::keycodes_per_modifier"][::std::mem::offset_of!(
        xcb_set_modifier_mapping_request_t,
        keycodes_per_modifier
    ) - 1usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_reply_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_reply_t>() - 8usize];
    ["Alignment of xcb_set_modifier_mapping_reply_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::status"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, status) - 1usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_modifier_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_request_t>() - 4usize];
    ["Alignment of xcb_get_modifier_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_reply_t {
    pub response_type: u8,
    pub keycodes_per_modifier: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_modifier_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::keycodes_per_modifier"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, keycodes_per_modifier) - 1usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_no_operation_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_no_operation_request_t"]
        [::std::mem::size_of::<xcb_no_operation_request_t>() - 4usize];
    ["Alignment of xcb_no_operation_request_t"]
        [::std::mem::align_of::<xcb_no_operation_request_t>() - 2usize];
    ["Offset of field: xcb_no_operation_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_no_operation_request_t::pad0"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, pad0) - 1usize];
    ["Offset of field: xcb_no_operation_request_t::length"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, length) - 2usize];
};
unsafe extern "C" {
    pub fn xcb_char2b_next(i: *mut xcb_char2b_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_char2b_end(i: xcb_char2b_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_window_next(i: *mut xcb_window_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_window_end(i: xcb_window_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_pixmap_next(i: *mut xcb_pixmap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_pixmap_end(i: xcb_pixmap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_cursor_next(i: *mut xcb_cursor_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_cursor_end(i: xcb_cursor_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_font_next(i: *mut xcb_font_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_font_end(i: xcb_font_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_gcontext_next(i: *mut xcb_gcontext_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_gcontext_end(i: xcb_gcontext_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_colormap_next(i: *mut xcb_colormap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_colormap_end(i: xcb_colormap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_atom_next(i: *mut xcb_atom_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_atom_end(i: xcb_atom_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_drawable_next(i: *mut xcb_drawable_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_drawable_end(i: xcb_drawable_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_fontable_next(i: *mut xcb_fontable_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_fontable_end(i: xcb_fontable_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_bool32_next(i: *mut xcb_bool32_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_bool32_end(i: xcb_bool32_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_visualid_next(i: *mut xcb_visualid_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_visualid_end(i: xcb_visualid_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_timestamp_next(i: *mut xcb_timestamp_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_timestamp_end(i: xcb_timestamp_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keysym_next(i: *mut xcb_keysym_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keysym_end(i: xcb_keysym_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keycode_next(i: *mut xcb_keycode_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keycode_end(i: xcb_keycode_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keycode32_next(i: *mut xcb_keycode32_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keycode32_end(i: xcb_keycode32_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_button_next(i: *mut xcb_button_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_button_end(i: xcb_button_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_point_next(i: *mut xcb_point_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_point_end(i: xcb_point_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_rectangle_next(i: *mut xcb_rectangle_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_rectangle_end(i: xcb_rectangle_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_arc_next(i: *mut xcb_arc_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_arc_end(i: xcb_arc_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_format_next(i: *mut xcb_format_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_format_end(i: xcb_format_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_visualtype_next(i: *mut xcb_visualtype_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_visualtype_end(i: xcb_visualtype_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_depth_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals(R: *const xcb_depth_t) -> *mut xcb_visualtype_t;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals_length(R: *const xcb_depth_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals_iterator(R: *const xcb_depth_t) -> xcb_visualtype_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_depth_next(i: *mut xcb_depth_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_depth_end(i: xcb_depth_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_screen_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_screen_allowed_depths_length(R: *const xcb_screen_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_screen_allowed_depths_iterator(R: *const xcb_screen_t) -> xcb_depth_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_screen_next(i: *mut xcb_screen_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_screen_end(i: xcb_screen_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name(
        R: *const xcb_setup_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name_length(
        R: *const xcb_setup_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name_end(
        R: *const xcb_setup_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data(
        R: *const xcb_setup_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data_length(
        R: *const xcb_setup_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data_end(
        R: *const xcb_setup_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_next(i: *mut xcb_setup_request_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_request_end(i: xcb_setup_request_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_sizeof(_buffer: *const ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason(R: *const xcb_setup_failed_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason_length(R: *const xcb_setup_failed_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason_end(R: *const xcb_setup_failed_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_next(i: *mut xcb_setup_failed_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_failed_end(i: xcb_setup_failed_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason(
        R: *const xcb_setup_authenticate_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason_length(
        R: *const xcb_setup_authenticate_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason_end(
        R: *const xcb_setup_authenticate_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_next(i: *mut xcb_setup_authenticate_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_end(
        i: xcb_setup_authenticate_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor(R: *const xcb_setup_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor_end(R: *const xcb_setup_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats(R: *const xcb_setup_t) -> *mut xcb_format_t;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats_iterator(R: *const xcb_setup_t) -> xcb_format_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_roots_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_roots_iterator(R: *const xcb_setup_t) -> xcb_screen_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_next(i: *mut xcb_setup_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_end(i: xcb_setup_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_client_message_data_next(i: *mut xcb_client_message_data_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_client_message_data_end(
        i: xcb_client_message_data_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_create_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_create_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_aux_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const xcb_create_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_aux(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const xcb_create_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list(
        R: *const xcb_create_window_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_window_attributes_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_window_attributes_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_aux_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const xcb_change_window_attributes_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_aux(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const xcb_change_window_attributes_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list(
        R: *const xcb_change_window_attributes_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_window_attributes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_window_attributes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_window_attributes_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_window_attributes_reply_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_subwindows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_save_set_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_save_set(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_reparent_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_reparent_window(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_subwindows(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_subwindows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u16,
        _aux: *const xcb_configure_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u16,
        _aux: *mut xcb_configure_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_aux_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const xcb_configure_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_aux(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const xcb_configure_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list(
        R: *const xcb_configure_window_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_circulate_window_checked(
        c: *mut xcb_connection_t,
        direction: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_circulate_window(
        c: *mut xcb_connection_t,
        direction: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_get_geometry_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry_unchecked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_get_geometry_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_geometry_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_geometry_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_tree(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_tree_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_tree_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children(R: *const xcb_query_tree_reply_t) -> *mut xcb_window_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children_length(
        R: *const xcb_query_tree_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children_end(R: *const xcb_query_tree_reply_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_tree_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_tree_reply_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_intern_atom(
        c: *mut xcb_connection_t,
        only_if_exists: u8,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_unchecked(
        c: *mut xcb_connection_t,
        only_if_exists: u8,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_intern_atom_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_intern_atom_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name(
        c: *mut xcb_connection_t,
        atom: xcb_atom_t,
    ) -> xcb_get_atom_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_unchecked(
        c: *mut xcb_connection_t,
        atom: xcb_atom_t,
    ) -> xcb_get_atom_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name(
        R: *const xcb_get_atom_name_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name_length(
        R: *const xcb_get_atom_name_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name_end(
        R: *const xcb_get_atom_name_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_atom_name_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_atom_name_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_property_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        data_len: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_property(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        data_len: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_property_data(
        R: *const xcb_change_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_property_data_length(
        R: *const xcb_change_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_property_data_end(
        R: *const xcb_change_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_delete_property_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_delete_property(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_sizeof(_buffer: *const ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_property(
        c: *mut xcb_connection_t,
        _delete: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_unchecked(
        c: *mut xcb_connection_t,
        _delete: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_value(
        R: *const xcb_get_property_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_property_value_length(
        R: *const xcb_get_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_property_value_end(R: *const xcb_get_property_reply_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_properties(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms(R: *const xcb_list_properties_reply_t) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms_length(
        R: *const xcb_list_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms_end(
        R: *const xcb_list_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_selection_owner_checked(
        c: *mut xcb_connection_t,
        owner: xcb_window_t,
        selection: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_selection_owner(
        c: *mut xcb_connection_t,
        owner: xcb_window_t,
        selection: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner(
        c: *mut xcb_connection_t,
        selection: xcb_atom_t,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner_unchecked(
        c: *mut xcb_connection_t,
        selection: xcb_atom_t,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_selection_owner_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_selection_owner_reply_t;
}
unsafe extern "C" {
    pub fn xcb_convert_selection_checked(
        c: *mut xcb_connection_t,
        requestor: xcb_window_t,
        selection: xcb_atom_t,
        target: xcb_atom_t,
        property: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_convert_selection(
        c: *mut xcb_connection_t,
        requestor: xcb_window_t,
        selection: xcb_atom_t,
        target: xcb_atom_t,
        property: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_send_event_checked(
        c: *mut xcb_connection_t,
        propagate: u8,
        destination: xcb_window_t,
        event_mask: u32,
        event: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_send_event(
        c: *mut xcb_connection_t,
        propagate: u8,
        destination: xcb_window_t,
        event_mask: u32,
        event: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
    ) -> xcb_grab_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer_unchecked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
    ) -> xcb_grab_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_grab_pointer_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_grab_pointer_reply_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_pointer_checked(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_pointer(c: *mut xcb_connection_t, time: xcb_timestamp_t)
    -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_button_checked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        button: u8,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_button(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        button: u8,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_button_checked(
        c: *mut xcb_connection_t,
        button: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_button(
        c: *mut xcb_connection_t,
        button: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_active_pointer_grab_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
        event_mask: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_active_pointer_grab(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
        event_mask: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        time: xcb_timestamp_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_grab_keyboard_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard_unchecked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        time: xcb_timestamp_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_grab_keyboard_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_grab_keyboard_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_grab_keyboard_reply_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_keyboard_checked(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_keyboard(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_key_checked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
        key: xcb_keycode_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_key(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
        key: xcb_keycode_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_key_checked(
        c: *mut xcb_connection_t,
        key: xcb_keycode_t,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_key(
        c: *mut xcb_connection_t,
        key: xcb_keycode_t,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_allow_events_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_allow_events(
        c: *mut xcb_connection_t,
        mode: u8,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_server_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_server_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_pointer_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_pointer_reply_t;
}
unsafe extern "C" {
    pub fn xcb_timecoord_next(i: *mut xcb_timecoord_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_timecoord_end(i: xcb_timecoord_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        start: xcb_timestamp_t,
        stop: xcb_timestamp_t,
    ) -> xcb_get_motion_events_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        start: xcb_timestamp_t,
        stop: xcb_timestamp_t,
    ) -> xcb_get_motion_events_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events(
        R: *const xcb_get_motion_events_reply_t,
    ) -> *mut xcb_timecoord_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events_length(
        R: *const xcb_get_motion_events_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events_iterator(
        R: *const xcb_get_motion_events_reply_t,
    ) -> xcb_timecoord_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_motion_events_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_motion_events_reply_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
    ) -> xcb_translate_coordinates_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates_unchecked(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
    ) -> xcb_translate_coordinates_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_translate_coordinates_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_translate_coordinates_reply_t;
}
unsafe extern "C" {
    pub fn xcb_warp_pointer_checked(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
        src_width: u16,
        src_height: u16,
        dst_x: i16,
        dst_y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_warp_pointer(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
        src_width: u16,
        src_height: u16,
        dst_x: i16,
        dst_y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_input_focus_checked(
        c: *mut xcb_connection_t,
        revert_to: u8,
        focus: xcb_window_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_input_focus(
        c: *mut xcb_connection_t,
        revert_to: u8,
        focus: xcb_window_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus(c: *mut xcb_connection_t) -> xcb_get_input_focus_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus_unchecked(c: *mut xcb_connection_t) -> xcb_get_input_focus_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_input_focus_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_input_focus_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap(c: *mut xcb_connection_t) -> xcb_query_keymap_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap_unchecked(c: *mut xcb_connection_t) -> xcb_query_keymap_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_keymap_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_keymap_reply_t;
}
unsafe extern "C" {
    pub fn xcb_open_font_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_open_font_checked(
        c: *mut xcb_connection_t,
        fid: xcb_font_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_open_font(
        c: *mut xcb_connection_t,
        fid: xcb_font_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_open_font_name(R: *const xcb_open_font_request_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_open_font_name_length(R: *const xcb_open_font_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_open_font_name_end(R: *const xcb_open_font_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_close_font_checked(c: *mut xcb_connection_t, font: xcb_font_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_close_font(c: *mut xcb_connection_t, font: xcb_font_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fontprop_next(i: *mut xcb_fontprop_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_fontprop_end(i: xcb_fontprop_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_charinfo_next(i: *mut xcb_charinfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_charinfo_end(i: xcb_charinfo_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
    ) -> xcb_query_font_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_unchecked(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
    ) -> xcb_query_font_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties(R: *const xcb_query_font_reply_t) -> *mut xcb_fontprop_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties_length(
        R: *const xcb_query_font_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties_iterator(
        R: *const xcb_query_font_reply_t,
    ) -> xcb_fontprop_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos(R: *const xcb_query_font_reply_t) -> *mut xcb_charinfo_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos_length(
        R: *const xcb_query_font_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos_iterator(
        R: *const xcb_query_font_reply_t,
    ) -> xcb_charinfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_font_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_font_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        string_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
        string_len: u32,
        string: *const xcb_char2b_t,
    ) -> xcb_query_text_extents_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_unchecked(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
        string_len: u32,
        string: *const xcb_char2b_t,
    ) -> xcb_query_text_extents_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_text_extents_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_text_extents_reply_t;
}
unsafe extern "C" {
    pub fn xcb_str_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_str_name(R: *const xcb_str_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_str_name_length(R: *const xcb_str_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_str_name_end(R: *const xcb_str_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_str_next(i: *mut xcb_str_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_str_end(i: xcb_str_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_unchecked(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_names_length(R: *const xcb_list_fonts_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_names_iterator(R: *const xcb_list_fonts_reply_t) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_fonts_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_fonts_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_with_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_unchecked(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_with_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> *mut xcb_fontprop_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties_length(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties_iterator(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> xcb_fontprop_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name_length(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name_end(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_fonts_with_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_fonts_with_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_checked(
        c: *mut xcb_connection_t,
        font_qty: u16,
        font: *const xcb_str_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path(
        c: *mut xcb_connection_t,
        font_qty: u16,
        font: *const xcb_str_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_font_length(
        R: *const xcb_set_font_path_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_font_iterator(
        R: *const xcb_set_font_path_request_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_font_path(c: *mut xcb_connection_t) -> xcb_get_font_path_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_unchecked(c: *mut xcb_connection_t) -> xcb_get_font_path_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_path_length(
        R: *const xcb_get_font_path_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_path_iterator(
        R: *const xcb_get_font_path_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_font_path_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_font_path_reply_t;
}
unsafe extern "C" {
    pub fn xcb_create_pixmap_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        pid: xcb_pixmap_t,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_pixmap(
        c: *mut xcb_connection_t,
        depth: u8,
        pid: xcb_pixmap_t,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_pixmap_checked(
        c: *mut xcb_connection_t,
        pixmap: xcb_pixmap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_pixmap(c: *mut xcb_connection_t, pixmap: xcb_pixmap_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_create_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_create_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_checked(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_aux_checked(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const xcb_create_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_aux(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const xcb_create_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list(
        R: *const xcb_create_gc_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_aux_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const xcb_change_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_aux(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const xcb_change_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list(
        R: *const xcb_change_gc_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_copy_gc_checked(
        c: *mut xcb_connection_t,
        src_gc: xcb_gcontext_t,
        dst_gc: xcb_gcontext_t,
        value_mask: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_gc(
        c: *mut xcb_connection_t,
        src_gc: xcb_gcontext_t,
        dst_gc: xcb_gcontext_t,
        value_mask: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        dash_offset: u16,
        dashes_len: u16,
        dashes: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        dash_offset: u16,
        dashes_len: u16,
        dashes: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes(R: *const xcb_set_dashes_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes_length(
        R: *const xcb_set_dashes_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes_end(R: *const xcb_set_dashes_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_checked(
        c: *mut xcb_connection_t,
        ordering: u8,
        gc: xcb_gcontext_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles(
        c: *mut xcb_connection_t,
        ordering: u8,
        gc: xcb_gcontext_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles_length(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles_iterator(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_free_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_clear_area_checked(
        c: *mut xcb_connection_t,
        exposures: u8,
        window: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_clear_area(
        c: *mut xcb_connection_t,
        exposures: u8,
        window: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_area_checked(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_area(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_plane_checked(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
        bit_plane: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_plane(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
        bit_plane: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_point_checked(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points(R: *const xcb_poly_point_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points_length(
        R: *const xcb_poly_point_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points_iterator(
        R: *const xcb_poly_point_request_t,
    ) -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_line_checked(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points(R: *const xcb_poly_line_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points_length(R: *const xcb_poly_line_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points_iterator(R: *const xcb_poly_line_request_t)
    -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_segment_next(i: *mut xcb_segment_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_segment_end(i: xcb_segment_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        segments_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        segments_len: u32,
        segments: *const xcb_segment_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        segments_len: u32,
        segments: *const xcb_segment_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments(R: *const xcb_poly_segment_request_t) -> *mut xcb_segment_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments_length(
        R: *const xcb_poly_segment_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments_iterator(
        R: *const xcb_poly_segment_request_t,
    ) -> xcb_segment_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles(
        R: *const xcb_poly_rectangle_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles_length(
        R: *const xcb_poly_rectangle_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles_iterator(
        R: *const xcb_poly_rectangle_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        arcs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs(R: *const xcb_poly_arc_request_t) -> *mut xcb_arc_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs_length(R: *const xcb_poly_arc_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs_iterator(R: *const xcb_poly_arc_request_t) -> xcb_arc_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        shape: u8,
        coordinate_mode: u8,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        shape: u8,
        coordinate_mode: u8,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points(R: *const xcb_fill_poly_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points_length(R: *const xcb_fill_poly_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points_iterator(R: *const xcb_fill_poly_request_t)
    -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles_length(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles_iterator(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        arcs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs(R: *const xcb_poly_fill_arc_request_t) -> *mut xcb_arc_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs_length(
        R: *const xcb_poly_fill_arc_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs_iterator(
        R: *const xcb_poly_fill_arc_request_t,
    ) -> xcb_arc_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_put_image_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_put_image_checked(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        width: u16,
        height: u16,
        dst_x: i16,
        dst_y: i16,
        left_pad: u8,
        depth: u8,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_put_image(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        width: u16,
        height: u16,
        dst_x: i16,
        dst_y: i16,
        left_pad: u8,
        depth: u8,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_put_image_data(R: *const xcb_put_image_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_put_image_data_length(R: *const xcb_put_image_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_put_image_data_end(R: *const xcb_put_image_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_image(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        plane_mask: u32,
    ) -> xcb_get_image_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_unchecked(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        plane_mask: u32,
    ) -> xcb_get_image_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_data(R: *const xcb_get_image_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_get_image_data_length(R: *const xcb_get_image_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_image_data_end(R: *const xcb_get_image_reply_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_image_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_image_reply_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items(R: *const xcb_poly_text_8_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items_length(
        R: *const xcb_poly_text_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items_end(R: *const xcb_poly_text_8_request_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items(R: *const xcb_poly_text_16_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items_length(
        R: *const xcb_poly_text_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items_end(
        R: *const xcb_poly_text_16_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_sizeof(_buffer: *const ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_checked(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string(
        R: *const xcb_image_text_8_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string_length(
        R: *const xcb_image_text_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string_end(
        R: *const xcb_image_text_8_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_checked(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const xcb_char2b_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const xcb_char2b_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string(R: *const xcb_image_text_16_request_t) -> *mut xcb_char2b_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string_length(
        R: *const xcb_image_text_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string_iterator(
        R: *const xcb_image_text_16_request_t,
    ) -> xcb_char2b_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_create_colormap_checked(
        c: *mut xcb_connection_t,
        alloc: u8,
        mid: xcb_colormap_t,
        window: xcb_window_t,
        visual: xcb_visualid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_colormap(
        c: *mut xcb_connection_t,
        alloc: u8,
        mid: xcb_colormap_t,
        window: xcb_window_t,
        visual: xcb_visualid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colormap(c: *mut xcb_connection_t, cmap: xcb_colormap_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_colormap_and_free_checked(
        c: *mut xcb_connection_t,
        mid: xcb_colormap_t,
        src_cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_colormap_and_free(
        c: *mut xcb_connection_t,
        mid: xcb_colormap_t,
        src_cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_install_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_install_colormap(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_uninstall_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_uninstall_colormap(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_installed_colormaps_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_installed_colormaps_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> *mut xcb_colormap_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps_length(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps_end(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_installed_colormaps_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_installed_colormaps_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        red: u16,
        green: u16,
        blue: u16,
    ) -> xcb_alloc_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        red: u16,
        green: u16,
        blue: u16,
    ) -> xcb_alloc_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_alloc_named_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_alloc_named_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_named_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_named_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        planes: u16,
    ) -> xcb_alloc_color_cells_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_unchecked(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        planes: u16,
    ) -> xcb_alloc_color_cells_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels(R: *const xcb_alloc_color_cells_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels_length(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels_end(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks(R: *const xcb_alloc_color_cells_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks_length(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks_end(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_cells_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_cells_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        reds: u16,
        greens: u16,
        blues: u16,
    ) -> xcb_alloc_color_planes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_unchecked(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        reds: u16,
        greens: u16,
        blues: u16,
    ) -> xcb_alloc_color_planes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels(R: *const xcb_alloc_color_planes_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels_length(
        R: *const xcb_alloc_color_planes_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels_end(
        R: *const xcb_alloc_color_planes_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_planes_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_planes_reply_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        pixels_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_free_colors_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        plane_mask: u32,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        plane_mask: u32,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels(R: *const xcb_free_colors_request_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels_length(
        R: *const xcb_free_colors_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels_end(
        R: *const xcb_free_colors_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_coloritem_next(i: *mut xcb_coloritem_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_coloritem_end(i: xcb_coloritem_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_colors_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        items_len: u32,
        items: *const xcb_coloritem_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        items_len: u32,
        items: *const xcb_coloritem_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items(R: *const xcb_store_colors_request_t) -> *mut xcb_coloritem_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items_length(
        R: *const xcb_store_colors_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items_iterator(
        R: *const xcb_store_colors_request_t,
    ) -> xcb_coloritem_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_checked(
        c: *mut xcb_connection_t,
        flags: u8,
        cmap: xcb_colormap_t,
        pixel: u32,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color(
        c: *mut xcb_connection_t,
        flags: u8,
        cmap: xcb_colormap_t,
        pixel: u32,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name(
        R: *const xcb_store_named_color_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name_length(
        R: *const xcb_store_named_color_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name_end(
        R: *const xcb_store_named_color_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_rgb_next(i: *mut xcb_rgb_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_rgb_end(i: xcb_rgb_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        pixels_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_query_colors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_query_colors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors(R: *const xcb_query_colors_reply_t) -> *mut xcb_rgb_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors_length(
        R: *const xcb_query_colors_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors_iterator(
        R: *const xcb_query_colors_reply_t,
    ) -> xcb_rgb_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_colors_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_colors_reply_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_sizeof(_buffer: *const ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_lookup_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_lookup_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_lookup_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_lookup_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_lookup_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_create_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_pixmap_t,
        mask: xcb_pixmap_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_pixmap_t,
        mask: xcb_pixmap_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_glyph_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source_font: xcb_font_t,
        mask_font: xcb_font_t,
        source_char: u16,
        mask_char: u16,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_glyph_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source_font: xcb_font_t,
        mask_font: xcb_font_t,
        source_char: u16,
        mask_char: u16,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_cursor_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_recolor_cursor_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_recolor_cursor(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size(
        c: *mut xcb_connection_t,
        _class: u8,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_query_best_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size_unchecked(
        c: *mut xcb_connection_t,
        _class: u8,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_query_best_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_best_size_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_best_size_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_extension(
        c: *mut xcb_connection_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_query_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_unchecked(
        c: *mut xcb_connection_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_query_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_extension_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_extension_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_extensions(c: *mut xcb_connection_t) -> xcb_list_extensions_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_unchecked(c: *mut xcb_connection_t) -> xcb_list_extensions_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_names_length(
        R: *const xcb_list_extensions_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_names_iterator(
        R: *const xcb_list_extensions_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_extensions_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_extensions_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_checked(
        c: *mut xcb_connection_t,
        keycode_count: u8,
        first_keycode: xcb_keycode_t,
        keysyms_per_keycode: u8,
        keysyms: *const xcb_keysym_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping(
        c: *mut xcb_connection_t,
        keycode_count: u8,
        first_keycode: xcb_keycode_t,
        keysyms_per_keycode: u8,
        keysyms: *const xcb_keysym_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> *mut xcb_keysym_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms_length(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms_end(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping(
        c: *mut xcb_connection_t,
        first_keycode: xcb_keycode_t,
        count: u8,
    ) -> xcb_get_keyboard_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_unchecked(
        c: *mut xcb_connection_t,
        first_keycode: xcb_keycode_t,
        count: u8,
    ) -> xcb_get_keyboard_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> *mut xcb_keysym_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms_length(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms_end(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_keyboard_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_keyboard_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_keyboard_control_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_keyboard_control_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_checked(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_aux_checked(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const xcb_change_keyboard_control_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_aux(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const xcb_change_keyboard_control_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list(
        R: *const xcb_change_keyboard_control_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control(c: *mut xcb_connection_t) -> xcb_get_keyboard_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_keyboard_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_keyboard_control_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_keyboard_control_reply_t;
}
unsafe extern "C" {
    pub fn xcb_bell_checked(c: *mut xcb_connection_t, percent: i8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_bell(c: *mut xcb_connection_t, percent: i8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_pointer_control_checked(
        c: *mut xcb_connection_t,
        acceleration_numerator: i16,
        acceleration_denominator: i16,
        threshold: i16,
        do_acceleration: u8,
        do_threshold: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_pointer_control(
        c: *mut xcb_connection_t,
        acceleration_numerator: i16,
        acceleration_denominator: i16,
        threshold: i16,
        do_acceleration: u8,
        do_threshold: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control(c: *mut xcb_connection_t) -> xcb_get_pointer_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_pointer_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_pointer_control_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_pointer_control_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_screen_saver_checked(
        c: *mut xcb_connection_t,
        timeout: i16,
        interval: i16,
        prefer_blanking: u8,
        allow_exposures: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_screen_saver(
        c: *mut xcb_connection_t,
        timeout: i16,
        interval: i16,
        prefer_blanking: u8,
        allow_exposures: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver(c: *mut xcb_connection_t) -> xcb_get_screen_saver_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_screen_saver_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_screen_saver_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_screen_saver_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_sizeof(_buffer: *const ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        family: u8,
        address_len: u16,
        address: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts(
        c: *mut xcb_connection_t,
        mode: u8,
        family: u8,
        address_len: u16,
        address: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address(R: *const xcb_change_hosts_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address_length(
        R: *const xcb_change_hosts_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address_end(
        R: *const xcb_change_hosts_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_host_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_host_address(R: *const xcb_host_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_host_address_length(R: *const xcb_host_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_host_address_end(R: *const xcb_host_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_host_next(i: *mut xcb_host_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_host_end(i: xcb_host_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_hosts(c: *mut xcb_connection_t) -> xcb_list_hosts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_unchecked(c: *mut xcb_connection_t) -> xcb_list_hosts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_hosts_length(R: *const xcb_list_hosts_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_hosts_iterator(R: *const xcb_list_hosts_reply_t) -> xcb_host_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_hosts_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_hosts_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_access_control_checked(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_access_control(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_close_down_mode_checked(c: *mut xcb_connection_t, mode: u8)
    -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_close_down_mode(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_kill_client_checked(c: *mut xcb_connection_t, resource: u32) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_kill_client(c: *mut xcb_connection_t, resource: u32) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        atoms_len: u16,
        delta: i16,
        atoms: *const xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        atoms_len: u16,
        delta: i16,
        atoms: *const xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms(
        R: *const xcb_rotate_properties_request_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms_length(
        R: *const xcb_rotate_properties_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms_end(
        R: *const xcb_rotate_properties_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_force_screen_saver_checked(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_force_screen_saver(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping(
        c: *mut xcb_connection_t,
        map_len: u8,
        map: *const u8,
    ) -> xcb_set_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_unchecked(
        c: *mut xcb_connection_t,
        map_len: u8,
        map: *const u8,
    ) -> xcb_set_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_set_pointer_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_set_pointer_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping(c: *mut xcb_connection_t) -> xcb_get_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map(R: *const xcb_get_pointer_mapping_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map_length(
        R: *const xcb_get_pointer_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map_end(
        R: *const xcb_get_pointer_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_pointer_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_pointer_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping(
        c: *mut xcb_connection_t,
        keycodes_per_modifier: u8,
        keycodes: *const xcb_keycode_t,
    ) -> xcb_set_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_unchecked(
        c: *mut xcb_connection_t,
        keycodes_per_modifier: u8,
        keycodes: *const xcb_keycode_t,
    ) -> xcb_set_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_set_modifier_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_set_modifier_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping(c: *mut xcb_connection_t) -> xcb_get_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> *mut xcb_keycode_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes_length(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes_end(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_modifier_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_modifier_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_no_operation_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_no_operation(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_auth_info_t {
    pub namelen: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub datalen: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_auth_info_t"][::std::mem::size_of::<xcb_auth_info_t>() - 32usize];
    ["Alignment of xcb_auth_info_t"][::std::mem::align_of::<xcb_auth_info_t>() - 8usize];
    ["Offset of field: xcb_auth_info_t::namelen"]
        [::std::mem::offset_of!(xcb_auth_info_t, namelen) - 0usize];
    ["Offset of field: xcb_auth_info_t::name"]
        [::std::mem::offset_of!(xcb_auth_info_t, name) - 8usize];
    ["Offset of field: xcb_auth_info_t::datalen"]
        [::std::mem::offset_of!(xcb_auth_info_t, datalen) - 16usize];
    ["Offset of field: xcb_auth_info_t::data"]
        [::std::mem::offset_of!(xcb_auth_info_t, data) - 24usize];
};
unsafe extern "C" {
    pub fn xcb_flush(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_maximum_request_length(c: *mut xcb_connection_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_prefetch_maximum_request_length(c: *mut xcb_connection_t);
}
unsafe extern "C" {
    pub fn xcb_wait_for_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_poll_for_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_poll_for_queued_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_special_event {
    _unused: [u8; 0],
}
pub type xcb_special_event_t = xcb_special_event;
unsafe extern "C" {
    pub fn xcb_poll_for_special_event(
        c: *mut xcb_connection_t,
        se: *mut xcb_special_event_t,
    ) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_wait_for_special_event(
        c: *mut xcb_connection_t,
        se: *mut xcb_special_event_t,
    ) -> *mut xcb_generic_event_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_extension_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn xcb_register_for_special_xge(
        c: *mut xcb_connection_t,
        ext: *mut xcb_extension_t,
        eid: u32,
        stamp: *mut u32,
    ) -> *mut xcb_special_event_t;
}
unsafe extern "C" {
    pub fn xcb_unregister_for_special_event(c: *mut xcb_connection_t, se: *mut xcb_special_event_t);
}
unsafe extern "C" {
    pub fn xcb_request_check(
        c: *mut xcb_connection_t,
        cookie: xcb_void_cookie_t,
    ) -> *mut xcb_generic_error_t;
}
unsafe extern "C" {
    pub fn xcb_discard_reply(c: *mut xcb_connection_t, sequence: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn xcb_discard_reply64(c: *mut xcb_connection_t, sequence: u64);
}
unsafe extern "C" {
    pub fn xcb_get_extension_data(
        c: *mut xcb_connection_t,
        ext: *mut xcb_extension_t,
    ) -> *const xcb_query_extension_reply_t;
}
unsafe extern "C" {
    pub fn xcb_prefetch_extension_data(c: *mut xcb_connection_t, ext: *mut xcb_extension_t);
}
unsafe extern "C" {
    pub fn xcb_get_setup(c: *mut xcb_connection_t) -> *const xcb_setup_t;
}
unsafe extern "C" {
    pub fn xcb_get_file_descriptor(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connection_has_error(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connect_to_fd(
        fd: ::std::os::raw::c_int,
        auth_info: *mut xcb_auth_info_t,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_disconnect(c: *mut xcb_connection_t);
}
unsafe extern "C" {
    pub fn xcb_parse_display(
        name: *const ::std::os::raw::c_char,
        host: *mut *mut ::std::os::raw::c_char,
        display: *mut ::std::os::raw::c_int,
        screen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connect(
        displayname: *const ::std::os::raw::c_char,
        screenp: *mut ::std::os::raw::c_int,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_connect_to_display_with_auth_info(
        display: *const ::std::os::raw::c_char,
        auth: *mut xcb_auth_info_t,
        screen: *mut ::std::os::raw::c_int,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_generate_id(c: *mut xcb_connection_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_total_read(c: *mut xcb_connection_t) -> u64;
}
unsafe extern "C" {
    pub fn xcb_total_written(c: *mut xcb_connection_t) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_text_property_reply_t {
    pub _reply: *mut xcb_get_property_reply_t,
    pub encoding: xcb_atom_t,
    pub name_len: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub format: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_text_property_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_text_property_reply_t>() - 32usize];
    ["Alignment of xcb_icccm_get_text_property_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_text_property_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, _reply) - 0usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::encoding"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, encoding) - 8usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, name_len) - 12usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::name"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, name) - 16usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, format) - 24usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_reply_wipe(prop: *mut xcb_icccm_get_text_property_reply_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_name_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_icon_name_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_icon_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_colormap_windows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
        list_len: u32,
        list: *const xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_colormap_windows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
        list_len: u32,
        list: *const xcb_window_t,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_colormap_windows_reply_t {
    pub windows_len: u32,
    pub windows: *mut xcb_window_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_colormap_windows_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_colormap_windows_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_colormap_windows_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_colormap_windows_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::windows_len"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, windows_len) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::windows"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, windows) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_from_reply(
        reply: *mut xcb_get_property_reply_t,
        colormap_windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_reply_wipe(
        windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_client_machine_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_client_machine(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_class_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        class_len: u32,
        class_name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_class(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        class_len: u32,
        class_name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_class_reply_t {
    pub instance_name: *mut ::std::os::raw::c_char,
    pub class_name: *mut ::std::os::raw::c_char,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_class_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_class_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_class_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_class_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::instance_name"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, instance_name) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::class_name"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, class_name) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_from_reply(
        prop: *mut xcb_icccm_get_wm_class_reply_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_wm_class_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_reply_wipe(prop: *mut xcb_icccm_get_wm_class_reply_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_transient_for_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        transient_for_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_transient_for(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        transient_for_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_from_reply(
        prop: *mut xcb_window_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
pub const XCB_ICCCM_SIZE_HINT_US_POSITION:
    xcb_icccm_size_hints_flags_t = 1;
pub const XCB_ICCCM_SIZE_HINT_US_SIZE: xcb_icccm_size_hints_flags_t =
    2;
pub const XCB_ICCCM_SIZE_HINT_P_POSITION:
    xcb_icccm_size_hints_flags_t = 4;
pub const XCB_ICCCM_SIZE_HINT_P_SIZE: xcb_icccm_size_hints_flags_t = 8;
pub const XCB_ICCCM_SIZE_HINT_P_MIN_SIZE:
    xcb_icccm_size_hints_flags_t = 16;
pub const XCB_ICCCM_SIZE_HINT_P_MAX_SIZE:
    xcb_icccm_size_hints_flags_t = 32;
pub const XCB_ICCCM_SIZE_HINT_P_RESIZE_INC:
    xcb_icccm_size_hints_flags_t = 64;
pub const XCB_ICCCM_SIZE_HINT_P_ASPECT: xcb_icccm_size_hints_flags_t =
    128;
pub const XCB_ICCCM_SIZE_HINT_BASE_SIZE: xcb_icccm_size_hints_flags_t =
    256;
pub const XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY:
    xcb_icccm_size_hints_flags_t = 512;
pub type xcb_icccm_size_hints_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_size_hints_t {
    pub flags: u32,
    pub x: i32,
    pub y: i32,
    pub width: i32,
    pub height: i32,
    pub min_width: i32,
    pub min_height: i32,
    pub max_width: i32,
    pub max_height: i32,
    pub width_inc: i32,
    pub height_inc: i32,
    pub min_aspect_num: i32,
    pub min_aspect_den: i32,
    pub max_aspect_num: i32,
    pub max_aspect_den: i32,
    pub base_width: i32,
    pub base_height: i32,
    pub win_gravity: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_size_hints_t"][::std::mem::size_of::<xcb_size_hints_t>() - 72usize];
    ["Alignment of xcb_size_hints_t"][::std::mem::align_of::<xcb_size_hints_t>() - 4usize];
    ["Offset of field: xcb_size_hints_t::flags"]
        [::std::mem::offset_of!(xcb_size_hints_t, flags) - 0usize];
    ["Offset of field: xcb_size_hints_t::x"][::std::mem::offset_of!(xcb_size_hints_t, x) - 4usize];
    ["Offset of field: xcb_size_hints_t::y"][::std::mem::offset_of!(xcb_size_hints_t, y) - 8usize];
    ["Offset of field: xcb_size_hints_t::width"]
        [::std::mem::offset_of!(xcb_size_hints_t, width) - 12usize];
    ["Offset of field: xcb_size_hints_t::height"]
        [::std::mem::offset_of!(xcb_size_hints_t, height) - 16usize];
    ["Offset of field: xcb_size_hints_t::min_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_width) - 20usize];
    ["Offset of field: xcb_size_hints_t::min_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_height) - 24usize];
    ["Offset of field: xcb_size_hints_t::max_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_width) - 28usize];
    ["Offset of field: xcb_size_hints_t::max_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_height) - 32usize];
    ["Offset of field: xcb_size_hints_t::width_inc"]
        [::std::mem::offset_of!(xcb_size_hints_t, width_inc) - 36usize];
    ["Offset of field: xcb_size_hints_t::height_inc"]
        [::std::mem::offset_of!(xcb_size_hints_t, height_inc) - 40usize];
    ["Offset of field: xcb_size_hints_t::min_aspect_num"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_aspect_num) - 44usize];
    ["Offset of field: xcb_size_hints_t::min_aspect_den"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_aspect_den) - 48usize];
    ["Offset of field: xcb_size_hints_t::max_aspect_num"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_aspect_num) - 52usize];
    ["Offset of field: xcb_size_hints_t::max_aspect_den"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_aspect_den) - 56usize];
    ["Offset of field: xcb_size_hints_t::base_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, base_width) - 60usize];
    ["Offset of field: xcb_size_hints_t::base_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, base_height) - 64usize];
    ["Offset of field: xcb_size_hints_t::win_gravity"]
        [::std::mem::offset_of!(xcb_size_hints_t, win_gravity) - 68usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_position(
        hints: *mut xcb_size_hints_t,
        user_specified: ::std::os::raw::c_int,
        x: i32,
        y: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_size(
        hints: *mut xcb_size_hints_t,
        user_specified: ::std::os::raw::c_int,
        width: i32,
        height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_min_size(
        hints: *mut xcb_size_hints_t,
        min_width: i32,
        min_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_max_size(
        hints: *mut xcb_size_hints_t,
        max_width: i32,
        max_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_resize_inc(
        hints: *mut xcb_size_hints_t,
        width_inc: i32,
        height_inc: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_aspect(
        hints: *mut xcb_size_hints_t,
        min_aspect_num: i32,
        min_aspect_den: i32,
        max_aspect_num: i32,
        max_aspect_den: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_base_size(
        hints: *mut xcb_size_hints_t,
        base_width: i32,
        base_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_win_gravity(
        hints: *mut xcb_size_hints_t,
        win_gravity: xcb_gravity_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_size_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_size_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_size_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_normal_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_normal_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_from_reply(
        hints: *mut xcb_size_hints_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_size_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_wm_hints_t {
    pub flags: i32,
    pub input: u32,
    pub initial_state: i32,
    pub icon_pixmap: xcb_pixmap_t,
    pub icon_window: xcb_window_t,
    pub icon_x: i32,
    pub icon_y: i32,
    pub icon_mask: xcb_pixmap_t,
    pub window_group: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_wm_hints_t"][::std::mem::size_of::<xcb_icccm_wm_hints_t>() - 36usize];
    ["Alignment of xcb_icccm_wm_hints_t"][::std::mem::align_of::<xcb_icccm_wm_hints_t>() - 4usize];
    ["Offset of field: xcb_icccm_wm_hints_t::flags"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, flags) - 0usize];
    ["Offset of field: xcb_icccm_wm_hints_t::input"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, input) - 4usize];
    ["Offset of field: xcb_icccm_wm_hints_t::initial_state"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, initial_state) - 8usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_pixmap"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_pixmap) - 12usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_window"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_window) - 16usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_x"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_x) - 20usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_y"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_y) - 24usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_mask"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_mask) - 28usize];
    ["Offset of field: xcb_icccm_wm_hints_t::window_group"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, window_group) - 32usize];
};
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_WITHDRAWN: xcb_icccm_wm_state_t = 0;
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_NORMAL: xcb_icccm_wm_state_t = 1;
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_ICONIC: xcb_icccm_wm_state_t = 3;
pub type xcb_icccm_wm_state_t = ::std::os::raw::c_uint;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_INPUT: xcb_icccm_wm_t = 1;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_STATE: xcb_icccm_wm_t = 2;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_PIXMAP: xcb_icccm_wm_t = 4;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_WINDOW: xcb_icccm_wm_t = 8;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_POSITION: xcb_icccm_wm_t = 16;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_MASK: xcb_icccm_wm_t = 32;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_WINDOW_GROUP: xcb_icccm_wm_t = 64;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_X_URGENCY: xcb_icccm_wm_t = 256;
pub type xcb_icccm_wm_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_get_urgency(hints: *mut xcb_icccm_wm_hints_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_input(hints: *mut xcb_icccm_wm_hints_t, input: u8);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_iconic(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_normal(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_withdrawn(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_none(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_pixmap(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_pixmap: xcb_pixmap_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_mask(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_mask: xcb_pixmap_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_window(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_window: xcb_window_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_window_group(
        hints: *mut xcb_icccm_wm_hints_t,
        window_group: xcb_window_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_urgency(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_icccm_wm_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_icccm_wm_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_from_reply(
        hints: *mut xcb_icccm_wm_hints_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_icccm_wm_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_protocols_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocols: xcb_atom_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_protocols(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocols: xcb_atom_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_protocols_reply_t {
    pub atoms_len: u32,
    pub atoms: *mut xcb_atom_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_protocols_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_protocols_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_protocols_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_protocols_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, atoms_len) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::atoms"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, atoms) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocol_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocol_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_from_reply(
        reply: *mut xcb_get_property_reply_t,
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_reply_wipe(
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_cursor_context_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn xcb_cursor_context_new(
        conn: *mut xcb_connection_t,
        screen: *mut xcb_screen_t,
        ctx: *mut *mut xcb_cursor_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_cursor_load_cursor(
        ctx: *mut xcb_cursor_context_t,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_cursor_t;
}
unsafe extern "C" {
    pub fn xcb_cursor_context_free(ctx: *mut xcb_cursor_context_t);
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_connection_t {
    pub connection: *mut xcb_connection_t,
    pub screens: *mut *mut xcb_screen_t,
    pub nb_screens: ::std::os::raw::c_int,
    pub _NET_WM_CM_Sn: *mut xcb_atom_t,
    pub _NET_SUPPORTED: xcb_atom_t,
    pub _NET_CLIENT_LIST: xcb_atom_t,
    pub _NET_CLIENT_LIST_STACKING: xcb_atom_t,
    pub _NET_NUMBER_OF_DESKTOPS: xcb_atom_t,
    pub _NET_DESKTOP_GEOMETRY: xcb_atom_t,
    pub _NET_DESKTOP_VIEWPORT: xcb_atom_t,
    pub _NET_CURRENT_DESKTOP: xcb_atom_t,
    pub _NET_DESKTOP_NAMES: xcb_atom_t,
    pub _NET_ACTIVE_WINDOW: xcb_atom_t,
    pub _NET_WORKAREA: xcb_atom_t,
    pub _NET_SUPPORTING_WM_CHECK: xcb_atom_t,
    pub _NET_VIRTUAL_ROOTS: xcb_atom_t,
    pub _NET_DESKTOP_LAYOUT: xcb_atom_t,
    pub _NET_SHOWING_DESKTOP: xcb_atom_t,
    pub _NET_CLOSE_WINDOW: xcb_atom_t,
    pub _NET_MOVERESIZE_WINDOW: xcb_atom_t,
    pub _NET_WM_MOVERESIZE: xcb_atom_t,
    pub _NET_RESTACK_WINDOW: xcb_atom_t,
    pub _NET_REQUEST_FRAME_EXTENTS: xcb_atom_t,
    pub _NET_WM_NAME: xcb_atom_t,
    pub _NET_WM_VISIBLE_NAME: xcb_atom_t,
    pub _NET_WM_ICON_NAME: xcb_atom_t,
    pub _NET_WM_VISIBLE_ICON_NAME: xcb_atom_t,
    pub _NET_WM_DESKTOP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE: xcb_atom_t,
    pub _NET_WM_STATE: xcb_atom_t,
    pub _NET_WM_ALLOWED_ACTIONS: xcb_atom_t,
    pub _NET_WM_STRUT: xcb_atom_t,
    pub _NET_WM_STRUT_PARTIAL: xcb_atom_t,
    pub _NET_WM_ICON_GEOMETRY: xcb_atom_t,
    pub _NET_WM_ICON: xcb_atom_t,
    pub _NET_WM_PID: xcb_atom_t,
    pub _NET_WM_HANDLED_ICONS: xcb_atom_t,
    pub _NET_WM_USER_TIME: xcb_atom_t,
    pub _NET_WM_USER_TIME_WINDOW: xcb_atom_t,
    pub _NET_FRAME_EXTENTS: xcb_atom_t,
    pub _NET_WM_PING: xcb_atom_t,
    pub _NET_WM_SYNC_REQUEST: xcb_atom_t,
    pub _NET_WM_SYNC_REQUEST_COUNTER: xcb_atom_t,
    pub _NET_WM_FULLSCREEN_MONITORS: xcb_atom_t,
    pub _NET_WM_FULL_PLACEMENT: xcb_atom_t,
    pub UTF8_STRING: xcb_atom_t,
    pub WM_PROTOCOLS: xcb_atom_t,
    pub MANAGER: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DESKTOP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DOCK: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_TOOLBAR: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_UTILITY: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_SPLASH: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DIALOG: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DROPDOWN_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_POPUP_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_TOOLTIP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_NOTIFICATION: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_COMBO: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DND: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_NORMAL: xcb_atom_t,
    pub _NET_WM_STATE_MODAL: xcb_atom_t,
    pub _NET_WM_STATE_STICKY: xcb_atom_t,
    pub _NET_WM_STATE_MAXIMIZED_VERT: xcb_atom_t,
    pub _NET_WM_STATE_MAXIMIZED_HORZ: xcb_atom_t,
    pub _NET_WM_STATE_SHADED: xcb_atom_t,
    pub _NET_WM_STATE_SKIP_TASKBAR: xcb_atom_t,
    pub _NET_WM_STATE_SKIP_PAGER: xcb_atom_t,
    pub _NET_WM_STATE_HIDDEN: xcb_atom_t,
    pub _NET_WM_STATE_FULLSCREEN: xcb_atom_t,
    pub _NET_WM_STATE_ABOVE: xcb_atom_t,
    pub _NET_WM_STATE_BELOW: xcb_atom_t,
    pub _NET_WM_STATE_DEMANDS_ATTENTION: xcb_atom_t,
    pub _NET_WM_ACTION_MOVE: xcb_atom_t,
    pub _NET_WM_ACTION_RESIZE: xcb_atom_t,
    pub _NET_WM_ACTION_MINIMIZE: xcb_atom_t,
    pub _NET_WM_ACTION_SHADE: xcb_atom_t,
    pub _NET_WM_ACTION_STICK: xcb_atom_t,
    pub _NET_WM_ACTION_MAXIMIZE_HORZ: xcb_atom_t,
    pub _NET_WM_ACTION_MAXIMIZE_VERT: xcb_atom_t,
    pub _NET_WM_ACTION_FULLSCREEN: xcb_atom_t,
    pub _NET_WM_ACTION_CHANGE_DESKTOP: xcb_atom_t,
    pub _NET_WM_ACTION_CLOSE: xcb_atom_t,
    pub _NET_WM_ACTION_ABOVE: xcb_atom_t,
    pub _NET_WM_ACTION_BELOW: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_connection_t"][::std::mem::size_of::<xcb_ewmh_connection_t>() - 360usize];
    ["Alignment of xcb_ewmh_connection_t"]
        [::std::mem::align_of::<xcb_ewmh_connection_t>() - 8usize];
    ["Offset of field: xcb_ewmh_connection_t::connection"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, connection) - 0usize];
    ["Offset of field: xcb_ewmh_connection_t::screens"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, screens) - 8usize];
    ["Offset of field: xcb_ewmh_connection_t::nb_screens"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, nb_screens) - 16usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_CM_Sn"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_CM_Sn) - 24usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SUPPORTED"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SUPPORTED) - 32usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLIENT_LIST"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLIENT_LIST) - 36usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLIENT_LIST_STACKING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLIENT_LIST_STACKING) - 40usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_NUMBER_OF_DESKTOPS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_NUMBER_OF_DESKTOPS) - 44usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_GEOMETRY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_GEOMETRY) - 48usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_VIEWPORT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_VIEWPORT) - 52usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CURRENT_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CURRENT_DESKTOP) - 56usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_NAMES"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_NAMES) - 60usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_ACTIVE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_ACTIVE_WINDOW) - 64usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WORKAREA"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WORKAREA) - 68usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SUPPORTING_WM_CHECK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SUPPORTING_WM_CHECK) - 72usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_VIRTUAL_ROOTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_VIRTUAL_ROOTS) - 76usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_LAYOUT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_LAYOUT) - 80usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SHOWING_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SHOWING_DESKTOP) - 84usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLOSE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLOSE_WINDOW) - 88usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_MOVERESIZE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_MOVERESIZE_WINDOW) - 92usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_MOVERESIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_MOVERESIZE) - 96usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_RESTACK_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_RESTACK_WINDOW) - 100usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_REQUEST_FRAME_EXTENTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_REQUEST_FRAME_EXTENTS) - 104usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_NAME) - 108usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_VISIBLE_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_VISIBLE_NAME) - 112usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON_NAME) - 116usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_VISIBLE_ICON_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_VISIBLE_ICON_NAME) - 120usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_DESKTOP) - 124usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE) - 128usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE) - 132usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ALLOWED_ACTIONS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ALLOWED_ACTIONS) - 136usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STRUT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STRUT) - 140usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STRUT_PARTIAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STRUT_PARTIAL) - 144usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON_GEOMETRY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON_GEOMETRY) - 148usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON) - 152usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_PID"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_PID) - 156usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_HANDLED_ICONS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_HANDLED_ICONS) - 160usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_USER_TIME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_USER_TIME) - 164usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_USER_TIME_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_USER_TIME_WINDOW) - 168usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_FRAME_EXTENTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_FRAME_EXTENTS) - 172usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_PING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_PING) - 176usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_SYNC_REQUEST"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_SYNC_REQUEST) - 180usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_SYNC_REQUEST_COUNTER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_SYNC_REQUEST_COUNTER) - 184usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_FULLSCREEN_MONITORS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_FULLSCREEN_MONITORS) - 188usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_FULL_PLACEMENT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_FULL_PLACEMENT) - 192usize];
    ["Offset of field: xcb_ewmh_connection_t::UTF8_STRING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, UTF8_STRING) - 196usize];
    ["Offset of field: xcb_ewmh_connection_t::WM_PROTOCOLS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, WM_PROTOCOLS) - 200usize];
    ["Offset of field: xcb_ewmh_connection_t::MANAGER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, MANAGER) - 204usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DESKTOP) - 208usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DOCK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DOCK) - 212usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_TOOLBAR"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_TOOLBAR) - 216usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_MENU"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_MENU) - 220usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_UTILITY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_UTILITY) - 224usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_SPLASH"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_SPLASH) - 228usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DIALOG"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DIALOG) - 232usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DROPDOWN_MENU"][::std::mem::offset_of!(
        xcb_ewmh_connection_t,
        _NET_WM_WINDOW_TYPE_DROPDOWN_MENU
    ) - 236usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_POPUP_MENU"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_POPUP_MENU) - 240usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_TOOLTIP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_TOOLTIP) - 244usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_NOTIFICATION"][::std::mem::offset_of!(
        xcb_ewmh_connection_t,
        _NET_WM_WINDOW_TYPE_NOTIFICATION
    ) - 248usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_COMBO"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_COMBO) - 252usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DND"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DND) - 256usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_NORMAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_NORMAL) - 260usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MODAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MODAL) - 264usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_STICKY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_STICKY) - 268usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MAXIMIZED_VERT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MAXIMIZED_VERT) - 272usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MAXIMIZED_HORZ"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MAXIMIZED_HORZ) - 276usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SHADED"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SHADED) - 280usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SKIP_TASKBAR"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SKIP_TASKBAR) - 284usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SKIP_PAGER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SKIP_PAGER) - 288usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_HIDDEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_HIDDEN) - 292usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_FULLSCREEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_FULLSCREEN) - 296usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_ABOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_ABOVE) - 300usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_BELOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_BELOW) - 304usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_DEMANDS_ATTENTION"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_DEMANDS_ATTENTION) - 308usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MOVE) - 312usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_RESIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_RESIZE) - 316usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MINIMIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MINIMIZE) - 320usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_SHADE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_SHADE) - 324usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_STICK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_STICK) - 328usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MAXIMIZE_HORZ"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MAXIMIZE_HORZ) - 332usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MAXIMIZE_VERT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MAXIMIZE_VERT) - 336usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_FULLSCREEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_FULLSCREEN) - 340usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_CHANGE_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_CHANGE_DESKTOP) - 344usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_CLOSE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_CLOSE) - 348usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_ABOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_ABOVE) - 352usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_BELOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_BELOW) - 356usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_atoms_reply_t {
    pub atoms_len: u32,
    pub atoms: *mut xcb_atom_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_atoms_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_atoms_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_atoms_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_atoms_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, atoms_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::atoms"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, atoms) - 8usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_windows_reply_t {
    pub windows_len: u32,
    pub windows: *mut xcb_window_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_windows_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_windows_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_windows_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_windows_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::windows_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, windows_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::windows"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, windows) - 8usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_utf8_strings_reply_t {
    pub strings_len: u32,
    pub strings: *mut ::std::os::raw::c_char,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_utf8_strings_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_utf8_strings_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_utf8_strings_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_utf8_strings_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::strings_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, strings_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::strings"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, strings) - 8usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_coordinates_t {
    pub x: u32,
    pub y: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_coordinates_t"][::std::mem::size_of::<xcb_ewmh_coordinates_t>() - 8usize];
    ["Alignment of xcb_ewmh_coordinates_t"]
        [::std::mem::align_of::<xcb_ewmh_coordinates_t>() - 4usize];
    ["Offset of field: xcb_ewmh_coordinates_t::x"]
        [::std::mem::offset_of!(xcb_ewmh_coordinates_t, x) - 0usize];
    ["Offset of field: xcb_ewmh_coordinates_t::y"]
        [::std::mem::offset_of!(xcb_ewmh_coordinates_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_desktop_viewport_reply_t {
    pub desktop_viewport_len: u32,
    pub desktop_viewport: *mut xcb_ewmh_coordinates_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_desktop_viewport_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_desktop_viewport_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_desktop_viewport_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_desktop_viewport_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::desktop_viewport_len"][::std::mem::offset_of!(
        xcb_ewmh_get_desktop_viewport_reply_t,
        desktop_viewport_len
    ) - 0usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::desktop_viewport"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_viewport_reply_t, desktop_viewport) - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_viewport_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_geometry_t {
    pub x: u32,
    pub y: u32,
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_geometry_t"][::std::mem::size_of::<xcb_ewmh_geometry_t>() - 16usize];
    ["Alignment of xcb_ewmh_geometry_t"][::std::mem::align_of::<xcb_ewmh_geometry_t>() - 4usize];
    ["Offset of field: xcb_ewmh_geometry_t::x"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, x) - 0usize];
    ["Offset of field: xcb_ewmh_geometry_t::y"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, y) - 4usize];
    ["Offset of field: xcb_ewmh_geometry_t::width"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, width) - 8usize];
    ["Offset of field: xcb_ewmh_geometry_t::height"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_workarea_reply_t {
    pub workarea_len: u32,
    pub workarea: *mut xcb_ewmh_geometry_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_workarea_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_workarea_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_workarea_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_workarea_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::workarea_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, workarea_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::workarea"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, workarea) - 8usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, _reply) - 16usize];
};
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_NONE:
    xcb_ewmh_client_source_type_t = 0;
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_NORMAL:
    xcb_ewmh_client_source_type_t = 1;
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_OTHER:
    xcb_ewmh_client_source_type_t = 2;
pub type xcb_ewmh_client_source_type_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_desktop_layout_orientation_t_XCB_EWMH_WM_ORIENTATION_HORZ:
    xcb_ewmh_desktop_layout_orientation_t = 0;
pub const xcb_ewmh_desktop_layout_orientation_t_XCB_EWMH_WM_ORIENTATION_VERT:
    xcb_ewmh_desktop_layout_orientation_t = 1;
pub type xcb_ewmh_desktop_layout_orientation_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_TOPLEFT:
    xcb_ewmh_desktop_layout_starting_corner_t = 0;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_TOPRIGHT:
    xcb_ewmh_desktop_layout_starting_corner_t = 1;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_BOTTOMRIGHT:
    xcb_ewmh_desktop_layout_starting_corner_t = 2;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_BOTTOMLEFT:
    xcb_ewmh_desktop_layout_starting_corner_t = 3;
pub type xcb_ewmh_desktop_layout_starting_corner_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_desktop_layout_reply_t {
    pub orientation: u32,
    pub columns: u32,
    pub rows: u32,
    pub starting_corner: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_desktop_layout_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_desktop_layout_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_desktop_layout_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_desktop_layout_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::orientation"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, orientation) - 0usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::columns"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, columns) - 4usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::rows"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, rows) - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::starting_corner"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, starting_corner) - 12usize];
};
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_X:
    xcb_ewmh_moveresize_window_opt_flags_t = 256;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_Y:
    xcb_ewmh_moveresize_window_opt_flags_t = 512;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_WIDTH:
    xcb_ewmh_moveresize_window_opt_flags_t = 1024;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_HEIGHT:
    xcb_ewmh_moveresize_window_opt_flags_t = 2048;
pub type xcb_ewmh_moveresize_window_opt_flags_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOPLEFT:
    xcb_ewmh_moveresize_direction_t = 0;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOP:
    xcb_ewmh_moveresize_direction_t = 1;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOPRIGHT:
    xcb_ewmh_moveresize_direction_t = 2;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_RIGHT:
    xcb_ewmh_moveresize_direction_t = 3;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOMRIGHT:
    xcb_ewmh_moveresize_direction_t = 4;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOM:
    xcb_ewmh_moveresize_direction_t = 5;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOMLEFT:
    xcb_ewmh_moveresize_direction_t = 6;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_LEFT:
    xcb_ewmh_moveresize_direction_t = 7;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_MOVE:
    xcb_ewmh_moveresize_direction_t = 8;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_KEYBOARD:
    xcb_ewmh_moveresize_direction_t = 9;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_MOVE_KEYBOARD:
    xcb_ewmh_moveresize_direction_t = 10;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_CANCEL:
    xcb_ewmh_moveresize_direction_t = 11;
pub type xcb_ewmh_moveresize_direction_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_REMOVE: xcb_ewmh_wm_state_action_t = 0;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_ADD: xcb_ewmh_wm_state_action_t = 1;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_TOGGLE: xcb_ewmh_wm_state_action_t = 2;
pub type xcb_ewmh_wm_state_action_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_wm_strut_partial_t {
    pub left: u32,
    pub right: u32,
    pub top: u32,
    pub bottom: u32,
    pub left_start_y: u32,
    pub left_end_y: u32,
    pub right_start_y: u32,
    pub right_end_y: u32,
    pub top_start_x: u32,
    pub top_end_x: u32,
    pub bottom_start_x: u32,
    pub bottom_end_x: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_wm_strut_partial_t"]
        [::std::mem::size_of::<xcb_ewmh_wm_strut_partial_t>() - 48usize];
    ["Alignment of xcb_ewmh_wm_strut_partial_t"]
        [::std::mem::align_of::<xcb_ewmh_wm_strut_partial_t>() - 4usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left) - 0usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right) - 4usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top) - 8usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom) - 12usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left_start_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left_start_y) - 16usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left_end_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left_end_y) - 20usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right_start_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right_start_y) - 24usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right_end_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right_end_y) - 28usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top_start_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top_start_x) - 32usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top_end_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top_end_x) - 36usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom_start_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom_start_x) - 40usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom_end_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom_end_x) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_wm_icon_iterator_t {
    pub width: u32,
    pub height: u32,
    pub data: *mut u32,
    pub rem: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_wm_icon_iterator_t"]
        [::std::mem::size_of::<xcb_ewmh_wm_icon_iterator_t>() - 24usize];
    ["Alignment of xcb_ewmh_wm_icon_iterator_t"]
        [::std::mem::align_of::<xcb_ewmh_wm_icon_iterator_t>() - 8usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::width"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, width) - 0usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::height"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, height) - 4usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::data"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, data) - 8usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, rem) - 16usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::index"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, index) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_wm_icon_reply_t {
    pub num_icons: ::std::os::raw::c_uint,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_wm_icon_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_wm_icon_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_wm_icon_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_wm_icon_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_wm_icon_reply_t::num_icons"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_icon_reply_t, num_icons) - 0usize];
    ["Offset of field: xcb_ewmh_get_wm_icon_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_icon_reply_t, _reply) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_extents_reply_t {
    pub left: u32,
    pub right: u32,
    pub top: u32,
    pub bottom: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_extents_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_extents_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_extents_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_extents_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, left) - 0usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, right) - 4usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, top) - 8usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, bottom) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_wm_fullscreen_monitors_reply_t {
    pub top: u32,
    pub bottom: u32,
    pub left: u32,
    pub right: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_wm_fullscreen_monitors_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_wm_fullscreen_monitors_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_wm_fullscreen_monitors_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_wm_fullscreen_monitors_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, top) - 0usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, bottom) - 4usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, left) - 8usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, right) - 12usize];
};
unsafe extern "C" {
    pub fn xcb_ewmh_init_atoms(
        c: *mut xcb_connection_t,
        ewmh: *mut xcb_ewmh_connection_t,
    ) -> *mut xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_init_atoms_replies(
        ewmh: *mut xcb_ewmh_connection_t,
        ewmh_cookies: *mut xcb_intern_atom_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_client_message(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        dest: xcb_window_t,
        atom: xcb_atom_t,
        data_len: u32,
        data: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_window_from_reply(
        window: *mut xcb_window_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_window_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        window: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_cardinal_from_reply(
        cardinal: *mut u32,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_cardinal_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        cardinal: *mut u32,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_from_reply(
        atoms: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        atoms: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_reply_wipe(data: *mut xcb_ewmh_get_atoms_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_from_reply(
        atoms: *mut xcb_ewmh_get_windows_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_from_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        data: *mut xcb_ewmh_get_utf8_strings_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        data: *mut xcb_ewmh_get_utf8_strings_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        atoms: *mut xcb_ewmh_get_windows_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_reply_wipe(data: *mut xcb_ewmh_get_windows_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_reply_wipe(data: *mut xcb_ewmh_get_utf8_strings_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supported(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supported_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supported_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supported(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_stacking(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_stacking_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_stacking_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_stacking(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_number_of_desktops(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        number_of_desktops: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_number_of_desktops_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        number_of_desktops: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_number_of_desktops_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_number_of_desktops(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_geometry_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_from_reply(
        width: *mut u32,
        height: *mut u32,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        width: *mut u32,
        height: *mut u32,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_coordinates_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_viewport_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_coordinates_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        x: u32,
        y: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_from_reply(
        vp: *mut xcb_ewmh_get_desktop_viewport_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        vp: *mut xcb_ewmh_get_desktop_viewport_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_reply_wipe(r: *mut xcb_ewmh_get_desktop_viewport_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_current_desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_current_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_current_desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_current_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_desktop: u32,
        timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_names(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_names_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_names_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_names(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_active_window_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_activate: xcb_window_t,
        source_indication: xcb_ewmh_client_source_type_t,
        timestamp: xcb_timestamp_t,
        current_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_active_window_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_workarea(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_geometry_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_workarea_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_geometry_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_from_reply(
        wa: *mut xcb_ewmh_get_workarea_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        wa: *mut xcb_ewmh_get_workarea_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_reply_wipe(r: *mut xcb_ewmh_get_workarea_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supporting_wm_check(
        ewmh: *mut xcb_ewmh_connection_t,
        parent_window: xcb_window_t,
        child_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supporting_wm_check_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        parent_window: xcb_window_t,
        child_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supporting_wm_check_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supporting_wm_check(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_virtual_roots(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_virtual_roots_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_virtual_roots_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_virtual_roots(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_layout(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        orientation: xcb_ewmh_desktop_layout_orientation_t,
        columns: u32,
        rows: u32,
        starting_corner: xcb_ewmh_desktop_layout_starting_corner_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_layout_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        orientation: xcb_ewmh_desktop_layout_orientation_t,
        columns: u32,
        rows: u32,
        starting_corner: xcb_ewmh_desktop_layout_starting_corner_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_from_reply(
        desktop_layouts: *mut xcb_ewmh_get_desktop_layout_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        desktop_layouts: *mut xcb_ewmh_get_desktop_layout_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_showing_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_showing_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_showing_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_showing_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_close_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_close: xcb_window_t,
        timestamp: xcb_timestamp_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_moveresize_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        moveresize_window: xcb_window_t,
        gravity: xcb_gravity_t,
        source_indication: xcb_ewmh_client_source_type_t,
        flags: xcb_ewmh_moveresize_window_opt_flags_t,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_wm_moveresize(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        moveresize_window: xcb_window_t,
        x_root: u32,
        y_root: u32,
        direction: xcb_ewmh_moveresize_direction_t,
        button: xcb_button_index_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_restack_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_restack: xcb_window_t,
        sibling_window: xcb_window_t,
        detail: xcb_stack_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_icon_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_icon_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        client_window: xcb_window_t,
        new_desktop: u32,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_window_type(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_window_type_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_state_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        client_window: xcb_window_t,
        action: xcb_ewmh_wm_state_action_t,
        first_property: xcb_atom_t,
        second_property: xcb_atom_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_allowed_actions(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_allowed_actions_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_from_reply(
        struts: *mut xcb_ewmh_get_extents_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        struts: *mut xcb_ewmh_get_extents_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_partial(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_strut: xcb_ewmh_wm_strut_partial_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_partial_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_strut: xcb_ewmh_wm_strut_partial_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_from_reply(
        struts: *mut xcb_ewmh_wm_strut_partial_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        struts: *mut xcb_ewmh_wm_strut_partial_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_geometry_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_from_reply(
        icons: *mut xcb_ewmh_geometry_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        icons: *mut xcb_ewmh_geometry_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_append_wm_icon_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        width: u32,
        height: u32,
        img_len: u32,
        img: *mut u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_append_wm_icon(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        width: u32,
        height: u32,
        img_len: u32,
        img: *mut u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_from_reply(
        wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_iterator(
        wm_icon: *const xcb_ewmh_get_wm_icon_reply_t,
    ) -> xcb_ewmh_wm_icon_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_length(
        wm_icon: *const xcb_ewmh_get_wm_icon_reply_t,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_next(iterator: *mut xcb_ewmh_wm_icon_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_reply_wipe(wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_pid(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_pid_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_pid_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_pid(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_handled_icons(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        handled_icons: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_handled_icons_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        handled_icons: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_handled_icons_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_handled_icons(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        xtime: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_window(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        xtime: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_window_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_window_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_window(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_frame_extents(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_frame_extents_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_from_reply(
        frame_extents: *mut xcb_ewmh_get_extents_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        frame_extents: *mut xcb_ewmh_get_extents_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_wm_ping(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_sync_request_counter(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_sync_request_counter_atom: xcb_atom_t,
        low: u32,
        high: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_sync_request_counter_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_sync_request_counter_atom: xcb_atom_t,
        low: u32,
        high: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_from_reply(
        counter: *mut u64,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        counter: *mut u64,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_wm_sync_request(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_protocols_atom: xcb_atom_t,
        wm_sync_request_atom: xcb_atom_t,
        timestamp: xcb_timestamp_t,
        counter: u64,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_fullscreen_monitors_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_from_reply(
        monitors: *mut xcb_ewmh_get_wm_fullscreen_monitors_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        monitors: *mut xcb_ewmh_get_wm_fullscreen_monitors_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_cm_owner(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        owner: xcb_window_t,
        timestamp: xcb_timestamp_t,
        selection_data1: u32,
        selection_data2: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_cm_owner_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        owner: xcb_window_t,
        timestamp: xcb_timestamp_t,
        selection_data1: u32,
        selection_data2: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_from_reply(
        owner: *mut xcb_window_t,
        r: *mut xcb_get_selection_owner_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_selection_owner_cookie_t,
        owner: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub static mut xcb_render_id: xcb_extension_t;
}
pub const xcb_render_pict_type_t_XCB_RENDER_PICT_TYPE_INDEXED: xcb_render_pict_type_t = 0;
pub const xcb_render_pict_type_t_XCB_RENDER_PICT_TYPE_DIRECT: xcb_render_pict_type_t = 1;
pub type xcb_render_pict_type_t = ::std::os::raw::c_uint;
pub const xcb_render_picture_enum_t_XCB_RENDER_PICTURE_NONE: xcb_render_picture_enum_t = 0;
pub type xcb_render_picture_enum_t = ::std::os::raw::c_uint;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CLEAR: xcb_render_pict_op_t = 0;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SRC: xcb_render_pict_op_t = 1;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DST: xcb_render_pict_op_t = 2;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVER: xcb_render_pict_op_t = 3;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVER_REVERSE: xcb_render_pict_op_t = 4;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_IN: xcb_render_pict_op_t = 5;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_IN_REVERSE: xcb_render_pict_op_t = 6;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OUT: xcb_render_pict_op_t = 7;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OUT_REVERSE: xcb_render_pict_op_t = 8;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ATOP: xcb_render_pict_op_t = 9;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ATOP_REVERSE: xcb_render_pict_op_t = 10;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_XOR: xcb_render_pict_op_t = 11;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ADD: xcb_render_pict_op_t = 12;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SATURATE: xcb_render_pict_op_t = 13;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_CLEAR: xcb_render_pict_op_t = 16;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_SRC: xcb_render_pict_op_t = 17;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_DST: xcb_render_pict_op_t = 18;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OVER: xcb_render_pict_op_t = 19;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE: xcb_render_pict_op_t = 20;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_IN: xcb_render_pict_op_t = 21;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE: xcb_render_pict_op_t = 22;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OUT: xcb_render_pict_op_t = 23;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE: xcb_render_pict_op_t = 24;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_ATOP: xcb_render_pict_op_t = 25;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE: xcb_render_pict_op_t = 26;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_XOR: xcb_render_pict_op_t = 27;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_CLEAR: xcb_render_pict_op_t = 32;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_SRC: xcb_render_pict_op_t = 33;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_DST: xcb_render_pict_op_t = 34;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OVER: xcb_render_pict_op_t = 35;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE: xcb_render_pict_op_t = 36;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_IN: xcb_render_pict_op_t = 37;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE: xcb_render_pict_op_t = 38;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OUT: xcb_render_pict_op_t = 39;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE: xcb_render_pict_op_t = 40;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_ATOP: xcb_render_pict_op_t = 41;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE: xcb_render_pict_op_t = 42;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_XOR: xcb_render_pict_op_t = 43;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_MULTIPLY: xcb_render_pict_op_t = 48;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SCREEN: xcb_render_pict_op_t = 49;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVERLAY: xcb_render_pict_op_t = 50;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DARKEN: xcb_render_pict_op_t = 51;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_LIGHTEN: xcb_render_pict_op_t = 52;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_COLOR_DODGE: xcb_render_pict_op_t = 53;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_COLOR_BURN: xcb_render_pict_op_t = 54;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HARD_LIGHT: xcb_render_pict_op_t = 55;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SOFT_LIGHT: xcb_render_pict_op_t = 56;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DIFFERENCE: xcb_render_pict_op_t = 57;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_EXCLUSION: xcb_render_pict_op_t = 58;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_HUE: xcb_render_pict_op_t = 59;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_SATURATION: xcb_render_pict_op_t = 60;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_COLOR: xcb_render_pict_op_t = 61;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_LUMINOSITY: xcb_render_pict_op_t = 62;
pub type xcb_render_pict_op_t = ::std::os::raw::c_uint;
pub const xcb_render_poly_edge_t_XCB_RENDER_POLY_EDGE_SHARP: xcb_render_poly_edge_t = 0;
pub const xcb_render_poly_edge_t_XCB_RENDER_POLY_EDGE_SMOOTH: xcb_render_poly_edge_t = 1;
pub type xcb_render_poly_edge_t = ::std::os::raw::c_uint;
pub const xcb_render_poly_mode_t_XCB_RENDER_POLY_MODE_PRECISE: xcb_render_poly_mode_t = 0;
pub const xcb_render_poly_mode_t_XCB_RENDER_POLY_MODE_IMPRECISE: xcb_render_poly_mode_t = 1;
pub type xcb_render_poly_mode_t = ::std::os::raw::c_uint;
pub const xcb_render_cp_t_XCB_RENDER_CP_REPEAT: xcb_render_cp_t = 1;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_MAP: xcb_render_cp_t = 2;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_X_ORIGIN: xcb_render_cp_t = 4;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_Y_ORIGIN: xcb_render_cp_t = 8;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_X_ORIGIN: xcb_render_cp_t = 16;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_Y_ORIGIN: xcb_render_cp_t = 32;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_MASK: xcb_render_cp_t = 64;
pub const xcb_render_cp_t_XCB_RENDER_CP_GRAPHICS_EXPOSURE: xcb_render_cp_t = 128;
pub const xcb_render_cp_t_XCB_RENDER_CP_SUBWINDOW_MODE: xcb_render_cp_t = 256;
pub const xcb_render_cp_t_XCB_RENDER_CP_POLY_EDGE: xcb_render_cp_t = 512;
pub const xcb_render_cp_t_XCB_RENDER_CP_POLY_MODE: xcb_render_cp_t = 1024;
pub const xcb_render_cp_t_XCB_RENDER_CP_DITHER: xcb_render_cp_t = 2048;
pub const xcb_render_cp_t_XCB_RENDER_CP_COMPONENT_ALPHA: xcb_render_cp_t = 4096;
pub type xcb_render_cp_t = ::std::os::raw::c_uint;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_UNKNOWN: xcb_render_sub_pixel_t = 0;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB: xcb_render_sub_pixel_t = 1;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR: xcb_render_sub_pixel_t = 2;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_VERTICAL_RGB: xcb_render_sub_pixel_t = 3;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_VERTICAL_BGR: xcb_render_sub_pixel_t = 4;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_NONE: xcb_render_sub_pixel_t = 5;
pub type xcb_render_sub_pixel_t = ::std::os::raw::c_uint;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_NONE: xcb_render_repeat_t = 0;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_NORMAL: xcb_render_repeat_t = 1;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_PAD: xcb_render_repeat_t = 2;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_REFLECT: xcb_render_repeat_t = 3;
pub type xcb_render_repeat_t = ::std::os::raw::c_uint;
pub type xcb_render_glyph_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_iterator_t {
    pub data: *mut xcb_render_glyph_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyph_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyph_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyph_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyph_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyph_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyph_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, index) - 12usize];
};
pub type xcb_render_glyphset_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphset_iterator_t {
    pub data: *mut xcb_render_glyphset_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphset_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyphset_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyphset_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyphset_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, index) - 12usize];
};
pub type xcb_render_picture_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_picture_iterator_t {
    pub data: *mut xcb_render_picture_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_picture_iterator_t"]
        [::std::mem::size_of::<xcb_render_picture_iterator_t>() - 16usize];
    ["Alignment of xcb_render_picture_iterator_t"]
        [::std::mem::align_of::<xcb_render_picture_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_picture_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_picture_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_picture_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, index) - 12usize];
};
pub type xcb_render_pictformat_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictformat_iterator_t {
    pub data: *mut xcb_render_pictformat_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictformat_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictformat_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictformat_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictformat_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, index) - 12usize];
};
pub type xcb_render_fixed_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_fixed_iterator_t {
    pub data: *mut xcb_render_fixed_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_fixed_iterator_t"]
        [::std::mem::size_of::<xcb_render_fixed_iterator_t>() - 16usize];
    ["Alignment of xcb_render_fixed_iterator_t"]
        [::std::mem::align_of::<xcb_render_fixed_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_fixed_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_fixed_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_fixed_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pict_format_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pict_format_error_t"]
        [::std::mem::size_of::<xcb_render_pict_format_error_t>() - 12usize];
    ["Alignment of xcb_render_pict_format_error_t"]
        [::std::mem::align_of::<xcb_render_pict_format_error_t>() - 4usize];
    ["Offset of field: xcb_render_pict_format_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_pict_format_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_pict_format_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_pict_format_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_pict_format_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_pict_format_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_picture_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_picture_error_t"]
        [::std::mem::size_of::<xcb_render_picture_error_t>() - 12usize];
    ["Alignment of xcb_render_picture_error_t"]
        [::std::mem::align_of::<xcb_render_picture_error_t>() - 4usize];
    ["Offset of field: xcb_render_picture_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_picture_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_picture_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_picture_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_picture_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_picture_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pict_op_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pict_op_error_t"]
        [::std::mem::size_of::<xcb_render_pict_op_error_t>() - 12usize];
    ["Alignment of xcb_render_pict_op_error_t"]
        [::std::mem::align_of::<xcb_render_pict_op_error_t>() - 4usize];
    ["Offset of field: xcb_render_pict_op_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_pict_op_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_pict_op_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_pict_op_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_pict_op_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_pict_op_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_set_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_set_error_t"]
        [::std::mem::size_of::<xcb_render_glyph_set_error_t>() - 12usize];
    ["Alignment of xcb_render_glyph_set_error_t"]
        [::std::mem::align_of::<xcb_render_glyph_set_error_t>() - 4usize];
    ["Offset of field: xcb_render_glyph_set_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_glyph_set_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_glyph_set_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_glyph_set_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_glyph_set_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_glyph_set_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_error_t"]
        [::std::mem::size_of::<xcb_render_glyph_error_t>() - 12usize];
    ["Alignment of xcb_render_glyph_error_t"]
        [::std::mem::align_of::<xcb_render_glyph_error_t>() - 4usize];
    ["Offset of field: xcb_render_glyph_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_glyph_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_glyph_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_glyph_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_glyph_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_glyph_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_directformat_t {
    pub red_shift: u16,
    pub red_mask: u16,
    pub green_shift: u16,
    pub green_mask: u16,
    pub blue_shift: u16,
    pub blue_mask: u16,
    pub alpha_shift: u16,
    pub alpha_mask: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_directformat_t"]
        [::std::mem::size_of::<xcb_render_directformat_t>() - 16usize];
    ["Alignment of xcb_render_directformat_t"]
        [::std::mem::align_of::<xcb_render_directformat_t>() - 2usize];
    ["Offset of field: xcb_render_directformat_t::red_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, red_shift) - 0usize];
    ["Offset of field: xcb_render_directformat_t::red_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, red_mask) - 2usize];
    ["Offset of field: xcb_render_directformat_t::green_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, green_shift) - 4usize];
    ["Offset of field: xcb_render_directformat_t::green_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, green_mask) - 6usize];
    ["Offset of field: xcb_render_directformat_t::blue_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, blue_shift) - 8usize];
    ["Offset of field: xcb_render_directformat_t::blue_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, blue_mask) - 10usize];
    ["Offset of field: xcb_render_directformat_t::alpha_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, alpha_shift) - 12usize];
    ["Offset of field: xcb_render_directformat_t::alpha_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, alpha_mask) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_directformat_iterator_t {
    pub data: *mut xcb_render_directformat_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_directformat_iterator_t"]
        [::std::mem::size_of::<xcb_render_directformat_iterator_t>() - 16usize];
    ["Alignment of xcb_render_directformat_iterator_t"]
        [::std::mem::align_of::<xcb_render_directformat_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_directformat_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_directformat_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_directformat_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictforminfo_t {
    pub id: xcb_render_pictformat_t,
    pub type_: u8,
    pub depth: u8,
    pub pad0: [u8; 2usize],
    pub direct: xcb_render_directformat_t,
    pub colormap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictforminfo_t"]
        [::std::mem::size_of::<xcb_render_pictforminfo_t>() - 28usize];
    ["Alignment of xcb_render_pictforminfo_t"]
        [::std::mem::align_of::<xcb_render_pictforminfo_t>() - 4usize];
    ["Offset of field: xcb_render_pictforminfo_t::id"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, id) - 0usize];
    ["Offset of field: xcb_render_pictforminfo_t::type_"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, type_) - 4usize];
    ["Offset of field: xcb_render_pictforminfo_t::depth"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, depth) - 5usize];
    ["Offset of field: xcb_render_pictforminfo_t::pad0"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, pad0) - 6usize];
    ["Offset of field: xcb_render_pictforminfo_t::direct"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, direct) - 8usize];
    ["Offset of field: xcb_render_pictforminfo_t::colormap"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, colormap) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictforminfo_iterator_t {
    pub data: *mut xcb_render_pictforminfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictforminfo_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictforminfo_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictforminfo_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictforminfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictvisual_t {
    pub visual: xcb_visualid_t,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictvisual_t"][::std::mem::size_of::<xcb_render_pictvisual_t>() - 8usize];
    ["Alignment of xcb_render_pictvisual_t"]
        [::std::mem::align_of::<xcb_render_pictvisual_t>() - 4usize];
    ["Offset of field: xcb_render_pictvisual_t::visual"]
        [::std::mem::offset_of!(xcb_render_pictvisual_t, visual) - 0usize];
    ["Offset of field: xcb_render_pictvisual_t::format"]
        [::std::mem::offset_of!(xcb_render_pictvisual_t, format) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictvisual_iterator_t {
    pub data: *mut xcb_render_pictvisual_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictvisual_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictvisual_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictvisual_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictvisual_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictdepth_t {
    pub depth: u8,
    pub pad0: u8,
    pub num_visuals: u16,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictdepth_t"][::std::mem::size_of::<xcb_render_pictdepth_t>() - 8usize];
    ["Alignment of xcb_render_pictdepth_t"]
        [::std::mem::align_of::<xcb_render_pictdepth_t>() - 2usize];
    ["Offset of field: xcb_render_pictdepth_t::depth"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, depth) - 0usize];
    ["Offset of field: xcb_render_pictdepth_t::pad0"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, pad0) - 1usize];
    ["Offset of field: xcb_render_pictdepth_t::num_visuals"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, num_visuals) - 2usize];
    ["Offset of field: xcb_render_pictdepth_t::pad1"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, pad1) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictdepth_iterator_t {
    pub data: *mut xcb_render_pictdepth_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictdepth_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictdepth_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictdepth_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictdepth_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictscreen_t {
    pub num_depths: u32,
    pub fallback: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictscreen_t"][::std::mem::size_of::<xcb_render_pictscreen_t>() - 8usize];
    ["Alignment of xcb_render_pictscreen_t"]
        [::std::mem::align_of::<xcb_render_pictscreen_t>() - 4usize];
    ["Offset of field: xcb_render_pictscreen_t::num_depths"]
        [::std::mem::offset_of!(xcb_render_pictscreen_t, num_depths) - 0usize];
    ["Offset of field: xcb_render_pictscreen_t::fallback"]
        [::std::mem::offset_of!(xcb_render_pictscreen_t, fallback) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictscreen_iterator_t {
    pub data: *mut xcb_render_pictscreen_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictscreen_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictscreen_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictscreen_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictscreen_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_indexvalue_t {
    pub pixel: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub alpha: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_indexvalue_t"][::std::mem::size_of::<xcb_render_indexvalue_t>() - 12usize];
    ["Alignment of xcb_render_indexvalue_t"]
        [::std::mem::align_of::<xcb_render_indexvalue_t>() - 4usize];
    ["Offset of field: xcb_render_indexvalue_t::pixel"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, pixel) - 0usize];
    ["Offset of field: xcb_render_indexvalue_t::red"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, red) - 4usize];
    ["Offset of field: xcb_render_indexvalue_t::green"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, green) - 6usize];
    ["Offset of field: xcb_render_indexvalue_t::blue"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, blue) - 8usize];
    ["Offset of field: xcb_render_indexvalue_t::alpha"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, alpha) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_indexvalue_iterator_t {
    pub data: *mut xcb_render_indexvalue_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_indexvalue_iterator_t"]
        [::std::mem::size_of::<xcb_render_indexvalue_iterator_t>() - 16usize];
    ["Alignment of xcb_render_indexvalue_iterator_t"]
        [::std::mem::align_of::<xcb_render_indexvalue_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_color_t {
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub alpha: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_color_t"][::std::mem::size_of::<xcb_render_color_t>() - 8usize];
    ["Alignment of xcb_render_color_t"][::std::mem::align_of::<xcb_render_color_t>() - 2usize];
    ["Offset of field: xcb_render_color_t::red"]
        [::std::mem::offset_of!(xcb_render_color_t, red) - 0usize];
    ["Offset of field: xcb_render_color_t::green"]
        [::std::mem::offset_of!(xcb_render_color_t, green) - 2usize];
    ["Offset of field: xcb_render_color_t::blue"]
        [::std::mem::offset_of!(xcb_render_color_t, blue) - 4usize];
    ["Offset of field: xcb_render_color_t::alpha"]
        [::std::mem::offset_of!(xcb_render_color_t, alpha) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_color_iterator_t {
    pub data: *mut xcb_render_color_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_color_iterator_t"]
        [::std::mem::size_of::<xcb_render_color_iterator_t>() - 16usize];
    ["Alignment of xcb_render_color_iterator_t"]
        [::std::mem::align_of::<xcb_render_color_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_color_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_color_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_color_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pointfix_t {
    pub x: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pointfix_t"][::std::mem::size_of::<xcb_render_pointfix_t>() - 8usize];
    ["Alignment of xcb_render_pointfix_t"]
        [::std::mem::align_of::<xcb_render_pointfix_t>() - 4usize];
    ["Offset of field: xcb_render_pointfix_t::x"]
        [::std::mem::offset_of!(xcb_render_pointfix_t, x) - 0usize];
    ["Offset of field: xcb_render_pointfix_t::y"]
        [::std::mem::offset_of!(xcb_render_pointfix_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pointfix_iterator_t {
    pub data: *mut xcb_render_pointfix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pointfix_iterator_t"]
        [::std::mem::size_of::<xcb_render_pointfix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pointfix_iterator_t"]
        [::std::mem::align_of::<xcb_render_pointfix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_linefix_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_linefix_t"][::std::mem::size_of::<xcb_render_linefix_t>() - 16usize];
    ["Alignment of xcb_render_linefix_t"][::std::mem::align_of::<xcb_render_linefix_t>() - 4usize];
    ["Offset of field: xcb_render_linefix_t::p1"]
        [::std::mem::offset_of!(xcb_render_linefix_t, p1) - 0usize];
    ["Offset of field: xcb_render_linefix_t::p2"]
        [::std::mem::offset_of!(xcb_render_linefix_t, p2) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_linefix_iterator_t {
    pub data: *mut xcb_render_linefix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_linefix_iterator_t"]
        [::std::mem::size_of::<xcb_render_linefix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_linefix_iterator_t"]
        [::std::mem::align_of::<xcb_render_linefix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_linefix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_linefix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_linefix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangle_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub p3: xcb_render_pointfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangle_t"][::std::mem::size_of::<xcb_render_triangle_t>() - 24usize];
    ["Alignment of xcb_render_triangle_t"]
        [::std::mem::align_of::<xcb_render_triangle_t>() - 4usize];
    ["Offset of field: xcb_render_triangle_t::p1"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p1) - 0usize];
    ["Offset of field: xcb_render_triangle_t::p2"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p2) - 8usize];
    ["Offset of field: xcb_render_triangle_t::p3"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p3) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangle_iterator_t {
    pub data: *mut xcb_render_triangle_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangle_iterator_t"]
        [::std::mem::size_of::<xcb_render_triangle_iterator_t>() - 16usize];
    ["Alignment of xcb_render_triangle_iterator_t"]
        [::std::mem::align_of::<xcb_render_triangle_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_triangle_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_triangle_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_triangle_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoid_t {
    pub top: xcb_render_fixed_t,
    pub bottom: xcb_render_fixed_t,
    pub left: xcb_render_linefix_t,
    pub right: xcb_render_linefix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoid_t"][::std::mem::size_of::<xcb_render_trapezoid_t>() - 40usize];
    ["Alignment of xcb_render_trapezoid_t"]
        [::std::mem::align_of::<xcb_render_trapezoid_t>() - 4usize];
    ["Offset of field: xcb_render_trapezoid_t::top"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, top) - 0usize];
    ["Offset of field: xcb_render_trapezoid_t::bottom"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, bottom) - 4usize];
    ["Offset of field: xcb_render_trapezoid_t::left"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, left) - 8usize];
    ["Offset of field: xcb_render_trapezoid_t::right"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoid_iterator_t {
    pub data: *mut xcb_render_trapezoid_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoid_iterator_t"]
        [::std::mem::size_of::<xcb_render_trapezoid_iterator_t>() - 16usize];
    ["Alignment of xcb_render_trapezoid_iterator_t"]
        [::std::mem::align_of::<xcb_render_trapezoid_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphinfo_t {
    pub width: u16,
    pub height: u16,
    pub x: i16,
    pub y: i16,
    pub x_off: i16,
    pub y_off: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphinfo_t"][::std::mem::size_of::<xcb_render_glyphinfo_t>() - 12usize];
    ["Alignment of xcb_render_glyphinfo_t"]
        [::std::mem::align_of::<xcb_render_glyphinfo_t>() - 2usize];
    ["Offset of field: xcb_render_glyphinfo_t::width"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, width) - 0usize];
    ["Offset of field: xcb_render_glyphinfo_t::height"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, height) - 2usize];
    ["Offset of field: xcb_render_glyphinfo_t::x"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, x) - 4usize];
    ["Offset of field: xcb_render_glyphinfo_t::y"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, y) - 6usize];
    ["Offset of field: xcb_render_glyphinfo_t::x_off"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, x_off) - 8usize];
    ["Offset of field: xcb_render_glyphinfo_t::y_off"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, y_off) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphinfo_iterator_t {
    pub data: *mut xcb_render_glyphinfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphinfo_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyphinfo_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyphinfo_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyphinfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_version_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_version_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_version_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_version_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub client_major_version: u32,
    pub client_minor_version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_request_t"]
        [::std::mem::size_of::<xcb_render_query_version_request_t>() - 12usize];
    ["Alignment of xcb_render_query_version_request_t"]
        [::std::mem::align_of::<xcb_render_query_version_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_version_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_version_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_version_request_t::client_major_version"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, client_major_version) - 4usize];
    ["Offset of field: xcb_render_query_version_request_t::client_minor_version"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, client_minor_version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub major_version: u32,
    pub minor_version: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_reply_t"]
        [::std::mem::size_of::<xcb_render_query_version_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_version_reply_t"]
        [::std::mem::align_of::<xcb_render_query_version_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_version_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_version_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_version_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_version_reply_t::major_version"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, major_version) - 8usize];
    ["Offset of field: xcb_render_query_version_reply_t::minor_version"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, minor_version) - 12usize];
    ["Offset of field: xcb_render_query_version_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_formats_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_request_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_request_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_formats_request_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_request_t>() - 2usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_formats: u32,
    pub num_screens: u32,
    pub num_depths: u32,
    pub num_visuals: u32,
    pub num_subpixel: u32,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_reply_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_pict_formats_reply_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_formats"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_formats) - 8usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_screens"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_screens) - 12usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_depths"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_depths) - 16usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_visuals"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_visuals) - 20usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_subpixel"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_subpixel) - 24usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, pad1) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_index_values_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_request_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_request_t>() - 8usize];
    ["Alignment of xcb_render_query_pict_index_values_request_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::format"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_request_t, format) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_values: u32,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_reply_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_pict_index_values_reply_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::response_type"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::num_values"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, num_values) - 8usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_picture_value_list_t {
    pub repeat: u32,
    pub alphamap: xcb_render_picture_t,
    pub alphaxorigin: i32,
    pub alphayorigin: i32,
    pub clipxorigin: i32,
    pub clipyorigin: i32,
    pub clipmask: xcb_pixmap_t,
    pub graphicsexposure: u32,
    pub subwindowmode: u32,
    pub polyedge: u32,
    pub polymode: u32,
    pub dither: xcb_atom_t,
    pub componentalpha: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_picture_value_list_t"]
        [::std::mem::size_of::<xcb_render_create_picture_value_list_t>() - 52usize];
    ["Alignment of xcb_render_create_picture_value_list_t"]
        [::std::mem::align_of::<xcb_render_create_picture_value_list_t>() - 4usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::repeat"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, repeat) - 0usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphamap"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphamap) - 4usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphaxorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphaxorigin) - 8usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphayorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphayorigin) - 12usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipxorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipxorigin) - 16usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipyorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipyorigin) - 20usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipmask"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipmask) - 24usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::graphicsexposure"][::std::mem::offset_of!(
        xcb_render_create_picture_value_list_t,
        graphicsexposure
    ) - 28usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::subwindowmode"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, subwindowmode) - 32usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::polyedge"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, polyedge) - 36usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::polymode"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, polymode) - 40usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::dither"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, dither) - 44usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::componentalpha"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, componentalpha) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub pid: xcb_render_picture_t,
    pub drawable: xcb_drawable_t,
    pub format: xcb_render_pictformat_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_picture_request_t"]
        [::std::mem::size_of::<xcb_render_create_picture_request_t>() - 20usize];
    ["Alignment of xcb_render_create_picture_request_t"]
        [::std::mem::align_of::<xcb_render_create_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_picture_request_t::pid"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, pid) - 4usize];
    ["Offset of field: xcb_render_create_picture_request_t::drawable"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, drawable) - 8usize];
    ["Offset of field: xcb_render_create_picture_request_t::format"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, format) - 12usize];
    ["Offset of field: xcb_render_create_picture_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, value_mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_change_picture_value_list_t {
    pub repeat: u32,
    pub alphamap: xcb_render_picture_t,
    pub alphaxorigin: i32,
    pub alphayorigin: i32,
    pub clipxorigin: i32,
    pub clipyorigin: i32,
    pub clipmask: xcb_pixmap_t,
    pub graphicsexposure: u32,
    pub subwindowmode: u32,
    pub polyedge: u32,
    pub polymode: u32,
    pub dither: xcb_atom_t,
    pub componentalpha: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_change_picture_value_list_t"]
        [::std::mem::size_of::<xcb_render_change_picture_value_list_t>() - 52usize];
    ["Alignment of xcb_render_change_picture_value_list_t"]
        [::std::mem::align_of::<xcb_render_change_picture_value_list_t>() - 4usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::repeat"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, repeat) - 0usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphamap"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphamap) - 4usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphaxorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphaxorigin) - 8usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphayorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphayorigin) - 12usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipxorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipxorigin) - 16usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipyorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipyorigin) - 20usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipmask"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipmask) - 24usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::graphicsexposure"][::std::mem::offset_of!(
        xcb_render_change_picture_value_list_t,
        graphicsexposure
    ) - 28usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::subwindowmode"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, subwindowmode) - 32usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::polyedge"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, polyedge) - 36usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::polymode"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, polymode) - 40usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::dither"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, dither) - 44usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::componentalpha"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, componentalpha) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_change_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_change_picture_request_t"]
        [::std::mem::size_of::<xcb_render_change_picture_request_t>() - 12usize];
    ["Alignment of xcb_render_change_picture_request_t"]
        [::std::mem::align_of::<xcb_render_change_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_change_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_change_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_change_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_change_picture_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_change_picture_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, value_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_clip_rectangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub clip_x_origin: i16,
    pub clip_y_origin: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_clip_rectangles_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_clip_rectangles_request_t>() - 12usize];
    ["Alignment of xcb_render_set_picture_clip_rectangles_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_clip_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_clip_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::picture"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        picture
    ) - 4usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::clip_x_origin"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        clip_x_origin
    )
        - 8usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::clip_y_origin"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        clip_y_origin
    )
        - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_picture_request_t"]
        [::std::mem::size_of::<xcb_render_free_picture_request_t>() - 8usize];
    ["Alignment of xcb_render_free_picture_request_t"]
        [::std::mem::align_of::<xcb_render_free_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_picture_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, picture) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub mask: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub src_x: i16,
    pub src_y: i16,
    pub mask_x: i16,
    pub mask_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_request_t"]
        [::std::mem::size_of::<xcb_render_composite_request_t>() - 36usize];
    ["Alignment of xcb_render_composite_request_t"]
        [::std::mem::align_of::<xcb_render_composite_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_request_t::mask"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask) - 12usize];
    ["Offset of field: xcb_render_composite_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst) - 16usize];
    ["Offset of field: xcb_render_composite_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_composite_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src_y) - 22usize];
    ["Offset of field: xcb_render_composite_request_t::mask_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask_x) - 24usize];
    ["Offset of field: xcb_render_composite_request_t::mask_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask_y) - 26usize];
    ["Offset of field: xcb_render_composite_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst_x) - 28usize];
    ["Offset of field: xcb_render_composite_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst_y) - 30usize];
    ["Offset of field: xcb_render_composite_request_t::width"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, width) - 32usize];
    ["Offset of field: xcb_render_composite_request_t::height"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, height) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoids_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoids_request_t"]
        [::std::mem::size_of::<xcb_render_trapezoids_request_t>() - 24usize];
    ["Alignment of xcb_render_trapezoids_request_t"]
        [::std::mem::align_of::<xcb_render_trapezoids_request_t>() - 4usize];
    ["Offset of field: xcb_render_trapezoids_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_trapezoids_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_trapezoids_request_t::length"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, length) - 2usize];
    ["Offset of field: xcb_render_trapezoids_request_t::op"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, op) - 4usize];
    ["Offset of field: xcb_render_trapezoids_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src) - 8usize];
    ["Offset of field: xcb_render_trapezoids_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_trapezoids_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangles_request_t"]
        [::std::mem::size_of::<xcb_render_triangles_request_t>() - 24usize];
    ["Alignment of xcb_render_triangles_request_t"]
        [::std::mem::align_of::<xcb_render_triangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_triangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_triangles_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_triangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_triangles_request_t::op"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, op) - 4usize];
    ["Offset of field: xcb_render_triangles_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_triangles_request_t::src"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src) - 8usize];
    ["Offset of field: xcb_render_triangles_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_triangles_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_triangles_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_triangles_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_tri_strip_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_tri_strip_request_t"]
        [::std::mem::size_of::<xcb_render_tri_strip_request_t>() - 24usize];
    ["Alignment of xcb_render_tri_strip_request_t"]
        [::std::mem::align_of::<xcb_render_tri_strip_request_t>() - 4usize];
    ["Offset of field: xcb_render_tri_strip_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_tri_strip_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_tri_strip_request_t::length"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, length) - 2usize];
    ["Offset of field: xcb_render_tri_strip_request_t::op"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, op) - 4usize];
    ["Offset of field: xcb_render_tri_strip_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src) - 8usize];
    ["Offset of field: xcb_render_tri_strip_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_tri_strip_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_tri_fan_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_tri_fan_request_t"]
        [::std::mem::size_of::<xcb_render_tri_fan_request_t>() - 24usize];
    ["Alignment of xcb_render_tri_fan_request_t"]
        [::std::mem::align_of::<xcb_render_tri_fan_request_t>() - 4usize];
    ["Offset of field: xcb_render_tri_fan_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_tri_fan_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_tri_fan_request_t::length"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, length) - 2usize];
    ["Offset of field: xcb_render_tri_fan_request_t::op"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, op) - 4usize];
    ["Offset of field: xcb_render_tri_fan_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src) - 8usize];
    ["Offset of field: xcb_render_tri_fan_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_tri_fan_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub gsid: xcb_render_glyphset_t,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_create_glyph_set_request_t>() - 12usize];
    ["Alignment of xcb_render_create_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_create_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::gsid"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, gsid) - 4usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::format"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, format) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_reference_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub gsid: xcb_render_glyphset_t,
    pub existing: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_reference_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_reference_glyph_set_request_t>() - 12usize];
    ["Alignment of xcb_render_reference_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_reference_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::gsid"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, gsid) - 4usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::existing"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, existing) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_free_glyph_set_request_t>() - 8usize];
    ["Alignment of xcb_render_free_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_free_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, glyphset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_add_glyphs_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
    pub glyphs_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_add_glyphs_request_t"]
        [::std::mem::size_of::<xcb_render_add_glyphs_request_t>() - 12usize];
    ["Alignment of xcb_render_add_glyphs_request_t"]
        [::std::mem::align_of::<xcb_render_add_glyphs_request_t>() - 4usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::length"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, length) - 2usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, glyphset) - 4usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::glyphs_len"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, glyphs_len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_glyphs_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_glyphs_request_t"]
        [::std::mem::size_of::<xcb_render_free_glyphs_request_t>() - 8usize];
    ["Alignment of xcb_render_free_glyphs_request_t"]
        [::std::mem::align_of::<xcb_render_free_glyphs_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, glyphset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_8_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_8_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_8_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_8_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_8_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_16_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_16_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_16_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_16_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_16_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_32_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_32_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_32_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_32_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_32_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_fill_rectangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub dst: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_fill_rectangles_request_t"]
        [::std::mem::size_of::<xcb_render_fill_rectangles_request_t>() - 20usize];
    ["Alignment of xcb_render_fill_rectangles_request_t"]
        [::std::mem::align_of::<xcb_render_fill_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::op"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, op) - 4usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, dst) - 8usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::color"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, color) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_cursor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source: xcb_render_picture_t,
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_cursor_request_t"]
        [::std::mem::size_of::<xcb_render_create_cursor_request_t>() - 16usize];
    ["Alignment of xcb_render_create_cursor_request_t"]
        [::std::mem::align_of::<xcb_render_create_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_cursor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_render_create_cursor_request_t::source"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, source) - 8usize];
    ["Offset of field: xcb_render_create_cursor_request_t::x"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, x) - 12usize];
    ["Offset of field: xcb_render_create_cursor_request_t::y"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_transform_t {
    pub matrix11: xcb_render_fixed_t,
    pub matrix12: xcb_render_fixed_t,
    pub matrix13: xcb_render_fixed_t,
    pub matrix21: xcb_render_fixed_t,
    pub matrix22: xcb_render_fixed_t,
    pub matrix23: xcb_render_fixed_t,
    pub matrix31: xcb_render_fixed_t,
    pub matrix32: xcb_render_fixed_t,
    pub matrix33: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_transform_t"][::std::mem::size_of::<xcb_render_transform_t>() - 36usize];
    ["Alignment of xcb_render_transform_t"]
        [::std::mem::align_of::<xcb_render_transform_t>() - 4usize];
    ["Offset of field: xcb_render_transform_t::matrix11"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix11) - 0usize];
    ["Offset of field: xcb_render_transform_t::matrix12"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix12) - 4usize];
    ["Offset of field: xcb_render_transform_t::matrix13"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix13) - 8usize];
    ["Offset of field: xcb_render_transform_t::matrix21"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix21) - 12usize];
    ["Offset of field: xcb_render_transform_t::matrix22"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix22) - 16usize];
    ["Offset of field: xcb_render_transform_t::matrix23"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix23) - 20usize];
    ["Offset of field: xcb_render_transform_t::matrix31"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix31) - 24usize];
    ["Offset of field: xcb_render_transform_t::matrix32"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix32) - 28usize];
    ["Offset of field: xcb_render_transform_t::matrix33"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix33) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_transform_iterator_t {
    pub data: *mut xcb_render_transform_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_transform_iterator_t"]
        [::std::mem::size_of::<xcb_render_transform_iterator_t>() - 16usize];
    ["Alignment of xcb_render_transform_iterator_t"]
        [::std::mem::align_of::<xcb_render_transform_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_transform_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_transform_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_transform_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub transform: xcb_render_transform_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_transform_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_transform_request_t>() - 44usize];
    ["Alignment of xcb_render_set_picture_transform_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_transform_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::transform"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, transform) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_filters_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_filters_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_filters_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_filters_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_request_t"]
        [::std::mem::size_of::<xcb_render_query_filters_request_t>() - 8usize];
    ["Alignment of xcb_render_query_filters_request_t"]
        [::std::mem::align_of::<xcb_render_query_filters_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_filters_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_filters_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_filters_request_t::drawable"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, drawable) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_aliases: u32,
    pub num_filters: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_reply_t"]
        [::std::mem::size_of::<xcb_render_query_filters_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_filters_reply_t"]
        [::std::mem::align_of::<xcb_render_query_filters_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_filters_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_filters_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_filters_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_filters_reply_t::num_aliases"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, num_aliases) - 8usize];
    ["Offset of field: xcb_render_query_filters_reply_t::num_filters"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, num_filters) - 12usize];
    ["Offset of field: xcb_render_query_filters_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_filter_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub filter_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_filter_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_filter_request_t>() - 12usize];
    ["Alignment of xcb_render_set_picture_filter_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_filter_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::filter_len"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, filter_len) - 8usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_animcursorelt_t {
    pub cursor: xcb_cursor_t,
    pub delay: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_animcursorelt_t"]
        [::std::mem::size_of::<xcb_render_animcursorelt_t>() - 8usize];
    ["Alignment of xcb_render_animcursorelt_t"]
        [::std::mem::align_of::<xcb_render_animcursorelt_t>() - 4usize];
    ["Offset of field: xcb_render_animcursorelt_t::cursor"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_t, cursor) - 0usize];
    ["Offset of field: xcb_render_animcursorelt_t::delay"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_t, delay) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_animcursorelt_iterator_t {
    pub data: *mut xcb_render_animcursorelt_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_animcursorelt_iterator_t"]
        [::std::mem::size_of::<xcb_render_animcursorelt_iterator_t>() - 16usize];
    ["Alignment of xcb_render_animcursorelt_iterator_t"]
        [::std::mem::align_of::<xcb_render_animcursorelt_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_anim_cursor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_anim_cursor_request_t"]
        [::std::mem::size_of::<xcb_render_create_anim_cursor_request_t>() - 8usize];
    ["Alignment of xcb_render_create_anim_cursor_request_t"]
        [::std::mem::align_of::<xcb_render_create_anim_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, cid) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_spanfix_t {
    pub l: xcb_render_fixed_t,
    pub r: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_spanfix_t"][::std::mem::size_of::<xcb_render_spanfix_t>() - 12usize];
    ["Alignment of xcb_render_spanfix_t"][::std::mem::align_of::<xcb_render_spanfix_t>() - 4usize];
    ["Offset of field: xcb_render_spanfix_t::l"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, l) - 0usize];
    ["Offset of field: xcb_render_spanfix_t::r"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, r) - 4usize];
    ["Offset of field: xcb_render_spanfix_t::y"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_spanfix_iterator_t {
    pub data: *mut xcb_render_spanfix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_spanfix_iterator_t"]
        [::std::mem::size_of::<xcb_render_spanfix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_spanfix_iterator_t"]
        [::std::mem::align_of::<xcb_render_spanfix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trap_t {
    pub top: xcb_render_spanfix_t,
    pub bot: xcb_render_spanfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trap_t"][::std::mem::size_of::<xcb_render_trap_t>() - 24usize];
    ["Alignment of xcb_render_trap_t"][::std::mem::align_of::<xcb_render_trap_t>() - 4usize];
    ["Offset of field: xcb_render_trap_t::top"]
        [::std::mem::offset_of!(xcb_render_trap_t, top) - 0usize];
    ["Offset of field: xcb_render_trap_t::bot"]
        [::std::mem::offset_of!(xcb_render_trap_t, bot) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trap_iterator_t {
    pub data: *mut xcb_render_trap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trap_iterator_t"]
        [::std::mem::size_of::<xcb_render_trap_iterator_t>() - 16usize];
    ["Alignment of xcb_render_trap_iterator_t"]
        [::std::mem::align_of::<xcb_render_trap_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_trap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_trap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_trap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_add_traps_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub x_off: i16,
    pub y_off: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_add_traps_request_t"]
        [::std::mem::size_of::<xcb_render_add_traps_request_t>() - 12usize];
    ["Alignment of xcb_render_add_traps_request_t"]
        [::std::mem::align_of::<xcb_render_add_traps_request_t>() - 4usize];
    ["Offset of field: xcb_render_add_traps_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_add_traps_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_add_traps_request_t::length"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, length) - 2usize];
    ["Offset of field: xcb_render_add_traps_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_add_traps_request_t::x_off"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, x_off) - 8usize];
    ["Offset of field: xcb_render_add_traps_request_t::y_off"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, y_off) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_solid_fill_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_solid_fill_request_t"]
        [::std::mem::size_of::<xcb_render_create_solid_fill_request_t>() - 16usize];
    ["Alignment of xcb_render_create_solid_fill_request_t"]
        [::std::mem::align_of::<xcb_render_create_solid_fill_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::color"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, color) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_linear_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_linear_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_linear_gradient_request_t>() - 28usize];
    ["Alignment of xcb_render_create_linear_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_linear_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_linear_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_linear_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::p1"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, p1) - 8usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::p2"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, p2) - 16usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, num_stops) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_radial_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub inner: xcb_render_pointfix_t,
    pub outer: xcb_render_pointfix_t,
    pub inner_radius: xcb_render_fixed_t,
    pub outer_radius: xcb_render_fixed_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_radial_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_radial_gradient_request_t>() - 36usize];
    ["Alignment of xcb_render_create_radial_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_radial_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::inner"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, inner) - 8usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::outer"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, outer) - 16usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::inner_radius"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        inner_radius
    ) - 24usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::outer_radius"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        outer_radius
    ) - 28usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, num_stops) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_conical_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub center: xcb_render_pointfix_t,
    pub angle: xcb_render_fixed_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_conical_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_conical_gradient_request_t>() - 24usize];
    ["Alignment of xcb_render_create_conical_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_conical_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_conical_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_conical_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::center"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, center) - 8usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::angle"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, angle) - 16usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, num_stops) - 20usize];
};
unsafe extern "C" {
    pub fn xcb_render_glyph_next(i: *mut xcb_render_glyph_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyph_end(i: xcb_render_glyph_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_glyphset_next(i: *mut xcb_render_glyphset_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyphset_end(i: xcb_render_glyphset_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_picture_next(i: *mut xcb_render_picture_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_picture_end(i: xcb_render_picture_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictformat_next(i: *mut xcb_render_pictformat_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictformat_end(i: xcb_render_pictformat_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_fixed_next(i: *mut xcb_render_fixed_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_fixed_end(i: xcb_render_fixed_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_directformat_next(i: *mut xcb_render_directformat_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_directformat_end(
        i: xcb_render_directformat_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictforminfo_next(i: *mut xcb_render_pictforminfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictforminfo_end(
        i: xcb_render_pictforminfo_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictvisual_next(i: *mut xcb_render_pictvisual_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictvisual_end(i: xcb_render_pictvisual_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals(
        R: *const xcb_render_pictdepth_t,
    ) -> *mut xcb_render_pictvisual_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals_length(
        R: *const xcb_render_pictdepth_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals_iterator(
        R: *const xcb_render_pictdepth_t,
    ) -> xcb_render_pictvisual_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_next(i: *mut xcb_render_pictdepth_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_end(i: xcb_render_pictdepth_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_depths_length(
        R: *const xcb_render_pictscreen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_depths_iterator(
        R: *const xcb_render_pictscreen_t,
    ) -> xcb_render_pictdepth_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_next(i: *mut xcb_render_pictscreen_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_end(i: xcb_render_pictscreen_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_indexvalue_next(i: *mut xcb_render_indexvalue_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_indexvalue_end(i: xcb_render_indexvalue_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_color_next(i: *mut xcb_render_color_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_color_end(i: xcb_render_color_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pointfix_next(i: *mut xcb_render_pointfix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pointfix_end(i: xcb_render_pointfix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_linefix_next(i: *mut xcb_render_linefix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_linefix_end(i: xcb_render_linefix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangle_next(i: *mut xcb_render_triangle_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_triangle_end(i: xcb_render_triangle_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoid_next(i: *mut xcb_render_trapezoid_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_trapezoid_end(i: xcb_render_trapezoid_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_glyphinfo_next(i: *mut xcb_render_glyphinfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyphinfo_end(i: xcb_render_glyphinfo_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version(
        c: *mut xcb_connection_t,
        client_major_version: u32,
        client_minor_version: u32,
    ) -> xcb_render_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version_unchecked(
        c: *mut xcb_connection_t,
        client_major_version: u32,
        client_minor_version: u32,
    ) -> xcb_render_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_version_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_version_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats(
        c: *mut xcb_connection_t,
    ) -> xcb_render_query_pict_formats_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_render_query_pict_formats_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> *mut xcb_render_pictforminfo_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats_iterator(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_render_pictforminfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_screens_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_screens_iterator(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_render_pictscreen_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels_end(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_pict_formats_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_pict_formats_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values(
        c: *mut xcb_connection_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_render_query_pict_index_values_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_unchecked(
        c: *mut xcb_connection_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_render_query_pict_index_values_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> *mut xcb_render_indexvalue_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values_length(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values_iterator(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> xcb_render_indexvalue_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_pict_index_values_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_pict_index_values_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_render_create_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_render_create_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_checked(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_aux_checked(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const xcb_render_create_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_aux(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const xcb_render_create_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list(
        R: *const xcb_render_create_picture_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_render_change_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_render_change_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_aux_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const xcb_render_change_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_aux(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const xcb_render_change_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list(
        R: *const xcb_render_change_picture_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles_length(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles_iterator(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_picture_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_picture(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        mask: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        src_x: i16,
        src_y: i16,
        mask_x: i16,
        mask_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        mask: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        src_x: i16,
        src_y: i16,
        mask_x: i16,
        mask_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        traps_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        traps_len: u32,
        traps: *const xcb_render_trapezoid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        traps_len: u32,
        traps: *const xcb_render_trapezoid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps(
        R: *const xcb_render_trapezoids_request_t,
    ) -> *mut xcb_render_trapezoid_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps_length(
        R: *const xcb_render_trapezoids_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps_iterator(
        R: *const xcb_render_trapezoids_request_t,
    ) -> xcb_render_trapezoid_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        triangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        triangles_len: u32,
        triangles: *const xcb_render_triangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        triangles_len: u32,
        triangles: *const xcb_render_triangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles(
        R: *const xcb_render_triangles_request_t,
    ) -> *mut xcb_render_triangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles_length(
        R: *const xcb_render_triangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles_iterator(
        R: *const xcb_render_triangles_request_t,
    ) -> xcb_render_triangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points(
        R: *const xcb_render_tri_strip_request_t,
    ) -> *mut xcb_render_pointfix_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points_length(
        R: *const xcb_render_tri_strip_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points_iterator(
        R: *const xcb_render_tri_strip_request_t,
    ) -> xcb_render_pointfix_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points(
        R: *const xcb_render_tri_fan_request_t,
    ) -> *mut xcb_render_pointfix_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points_length(
        R: *const xcb_render_tri_fan_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points_iterator(
        R: *const xcb_render_tri_fan_request_t,
    ) -> xcb_render_pointfix_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_glyph_set_checked(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_glyph_set(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_reference_glyph_set_checked(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        existing: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_reference_glyph_set(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        existing: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyph_set_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyph_set(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphids: *const u32,
        glyphs: *const xcb_render_glyphinfo_t,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphids: *const u32,
        glyphs: *const xcb_render_glyphinfo_t,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids(R: *const xcb_render_add_glyphs_request_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids_end(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> *mut xcb_render_glyphinfo_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs_iterator(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_render_glyphinfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data(R: *const xcb_render_add_glyphs_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data_end(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphs: *const xcb_render_glyph_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphs: *const xcb_render_glyph_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> *mut xcb_render_glyph_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs_length(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs_end(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rects_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_checked(
        c: *mut xcb_connection_t,
        op: u8,
        dst: xcb_render_picture_t,
        color: xcb_render_color_t,
        rects_len: u32,
        rects: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles(
        c: *mut xcb_connection_t,
        op: u8,
        dst: xcb_render_picture_t,
        color: xcb_render_color_t,
        rects_len: u32,
        rects: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects_length(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects_iterator(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_render_picture_t,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_render_picture_t,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_transform_next(i: *mut xcb_render_transform_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_transform_end(i: xcb_render_transform_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_transform_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        transform: xcb_render_transform_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_transform(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        transform: xcb_render_transform_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_render_query_filters_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_unchecked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_render_query_filters_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases(R: *const xcb_render_query_filters_reply_t)
    -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases_length(
        R: *const xcb_render_query_filters_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases_end(
        R: *const xcb_render_query_filters_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_filters_length(
        R: *const xcb_render_query_filters_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_filters_iterator(
        R: *const xcb_render_query_filters_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_filters_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_filters_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        filter_len: u16,
        filter: *const ::std::os::raw::c_char,
        values_len: u32,
        values: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        filter_len: u16,
        filter: *const ::std::os::raw::c_char,
        values_len: u32,
        values: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter_length(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter_end(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values_length(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values_end(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_animcursorelt_next(i: *mut xcb_render_animcursorelt_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_animcursorelt_end(
        i: xcb_render_animcursorelt_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        cursors_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        cursors_len: u32,
        cursors: *const xcb_render_animcursorelt_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        cursors_len: u32,
        cursors: *const xcb_render_animcursorelt_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> *mut xcb_render_animcursorelt_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors_length(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors_iterator(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> xcb_render_animcursorelt_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_spanfix_next(i: *mut xcb_render_spanfix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_spanfix_end(i: xcb_render_spanfix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_trap_next(i: *mut xcb_render_trap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_trap_end(i: xcb_render_trap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        traps_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        x_off: i16,
        y_off: i16,
        traps_len: u32,
        traps: *const xcb_render_trap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        x_off: i16,
        y_off: i16,
        traps_len: u32,
        traps: *const xcb_render_trap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps(
        R: *const xcb_render_add_traps_request_t,
    ) -> *mut xcb_render_trap_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps_length(
        R: *const xcb_render_add_traps_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps_iterator(
        R: *const xcb_render_add_traps_request_t,
    ) -> xcb_render_trap_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_solid_fill_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        color: xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_solid_fill(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        color: xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        p1: xcb_render_pointfix_t,
        p2: xcb_render_pointfix_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        p1: xcb_render_pointfix_t,
        p2: xcb_render_pointfix_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops_length(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops_end(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors_length(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors_iterator(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        inner: xcb_render_pointfix_t,
        outer: xcb_render_pointfix_t,
        inner_radius: xcb_render_fixed_t,
        outer_radius: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        inner: xcb_render_pointfix_t,
        outer: xcb_render_pointfix_t,
        inner_radius: xcb_render_fixed_t,
        outer_radius: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops_length(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops_end(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors_length(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors_iterator(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        center: xcb_render_pointfix_t,
        angle: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        center: xcb_render_pointfix_t,
        angle: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops_length(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops_end(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors_length(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors_iterator(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub static mut xcb_randr_id: xcb_extension_t;
}
pub type xcb_randr_mode_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_iterator_t {
    pub data: *mut xcb_randr_mode_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_iterator_t"]
        [::std::mem::size_of::<xcb_randr_mode_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_mode_iterator_t"]
        [::std::mem::align_of::<xcb_randr_mode_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_mode_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_mode_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_mode_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, index) - 12usize];
};
pub type xcb_randr_crtc_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_iterator_t {
    pub data: *mut xcb_randr_crtc_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_iterator_t"]
        [::std::mem::size_of::<xcb_randr_crtc_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_crtc_iterator_t"]
        [::std::mem::align_of::<xcb_randr_crtc_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, index) - 12usize];
};
pub type xcb_randr_output_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_iterator_t {
    pub data: *mut xcb_randr_output_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, index) - 12usize];
};
pub type xcb_randr_provider_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_iterator_t {
    pub data: *mut xcb_randr_provider_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, index) - 12usize];
};
pub type xcb_randr_lease_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_iterator_t {
    pub data: *mut xcb_randr_lease_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_iterator_t"]
        [::std::mem::size_of::<xcb_randr_lease_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_lease_iterator_t"]
        [::std::mem::align_of::<xcb_randr_lease_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_lease_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_lease_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_lease_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_output_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_output_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_output_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_output_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_output_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_output_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_output_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_output_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_output_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_output_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_output_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_crtc_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_crtc_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_crtc_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_crtc_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_crtc_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_mode_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_mode_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_mode_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_mode_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_mode_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_provider_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_provider_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_provider_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_provider_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_provider_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, major_opcode) - 10usize];
};
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_0: xcb_randr_rotation_t = 1;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_90: xcb_randr_rotation_t = 2;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_180: xcb_randr_rotation_t = 4;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_270: xcb_randr_rotation_t = 8;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_REFLECT_X: xcb_randr_rotation_t = 16;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_REFLECT_Y: xcb_randr_rotation_t = 32;
pub type xcb_randr_rotation_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_size_t {
    pub width: u16,
    pub height: u16,
    pub mwidth: u16,
    pub mheight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_size_t"][::std::mem::size_of::<xcb_randr_screen_size_t>() - 8usize];
    ["Alignment of xcb_randr_screen_size_t"]
        [::std::mem::align_of::<xcb_randr_screen_size_t>() - 2usize];
    ["Offset of field: xcb_randr_screen_size_t::width"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, width) - 0usize];
    ["Offset of field: xcb_randr_screen_size_t::height"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, height) - 2usize];
    ["Offset of field: xcb_randr_screen_size_t::mwidth"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, mwidth) - 4usize];
    ["Offset of field: xcb_randr_screen_size_t::mheight"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, mheight) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_size_iterator_t {
    pub data: *mut xcb_randr_screen_size_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_size_iterator_t"]
        [::std::mem::size_of::<xcb_randr_screen_size_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_screen_size_iterator_t"]
        [::std::mem::align_of::<xcb_randr_screen_size_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_refresh_rates_t {
    pub nRates: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_refresh_rates_t"]
        [::std::mem::size_of::<xcb_randr_refresh_rates_t>() - 2usize];
    ["Alignment of xcb_randr_refresh_rates_t"]
        [::std::mem::align_of::<xcb_randr_refresh_rates_t>() - 2usize];
    ["Offset of field: xcb_randr_refresh_rates_t::nRates"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_t, nRates) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_refresh_rates_iterator_t {
    pub data: *mut xcb_randr_refresh_rates_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_refresh_rates_iterator_t"]
        [::std::mem::size_of::<xcb_randr_refresh_rates_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_refresh_rates_iterator_t"]
        [::std::mem::align_of::<xcb_randr_refresh_rates_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_version_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_version_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_version_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_version_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub major_version: u32,
    pub minor_version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_request_t"]
        [::std::mem::size_of::<xcb_randr_query_version_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_version_request_t"]
        [::std::mem::align_of::<xcb_randr_query_version_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_query_version_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_query_version_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_version_request_t::major_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, major_version) - 4usize];
    ["Offset of field: xcb_randr_query_version_request_t::minor_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, minor_version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub major_version: u32,
    pub minor_version: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_version_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_version_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_version_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_version_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_version_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_version_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_version_reply_t::major_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, major_version) - 8usize];
    ["Offset of field: xcb_randr_query_version_reply_t::minor_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, minor_version) - 12usize];
    ["Offset of field: xcb_randr_query_version_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, pad1) - 16usize];
};
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_SUCCESS: xcb_randr_set_config_t = 0;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME: xcb_randr_set_config_t =
    1;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_INVALID_TIME: xcb_randr_set_config_t = 2;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_FAILED: xcb_randr_set_config_t = 3;
pub type xcb_randr_set_config_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_screen_config_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub sizeID: u16,
    pub rotation: u16,
    pub rate: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_request_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_request_t>() - 24usize];
    ["Alignment of xcb_randr_set_screen_config_request_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, sizeID) - 16usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, rotation) - 18usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::rate"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, rate) - 20usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub new_timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub subpixel_order: u16,
    pub pad0: [u8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_reply_t>() - 32usize];
    ["Alignment of xcb_randr_set_screen_config_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::new_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, new_timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::root"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, root) - 16usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, subpixel_order) - 20usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, pad0) - 22usize];
};
pub const XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE: xcb_randr_notify_mask_t = 1;
pub const XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE: xcb_randr_notify_mask_t = 2;
pub const XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE: xcb_randr_notify_mask_t = 4;
pub const XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY: xcb_randr_notify_mask_t =
    8;
pub const XCB_RANDR_NOTIFY_MASK_PROVIDER_CHANGE: xcb_randr_notify_mask_t =
    16;
pub const XCB_RANDR_NOTIFY_MASK_PROVIDER_PROPERTY: xcb_randr_notify_mask_t =
    32;
pub const XCB_RANDR_NOTIFY_MASK_RESOURCE_CHANGE: xcb_randr_notify_mask_t =
    64;
pub const XCB_RANDR_NOTIFY_MASK_LEASE: xcb_randr_notify_mask_t = 128;
pub type xcb_randr_notify_mask_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_select_input_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub enable: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_select_input_request_t"]
        [::std::mem::size_of::<xcb_randr_select_input_request_t>() - 12usize];
    ["Alignment of xcb_randr_select_input_request_t"]
        [::std::mem::align_of::<xcb_randr_select_input_request_t>() - 4usize];
    ["Offset of field: xcb_randr_select_input_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_select_input_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_select_input_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_select_input_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_select_input_request_t::enable"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, enable) - 8usize];
    ["Offset of field: xcb_randr_select_input_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_reply_t {
    pub response_type: u8,
    pub rotations: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub nSizes: u16,
    pub sizeID: u16,
    pub rotation: u16,
    pub rate: u16,
    pub nInfo: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rotations"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rotations) - 1usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::root"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, root) - 8usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, config_timestamp) - 16usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::nSizes"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, nSizes) - 20usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, sizeID) - 22usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rate"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rate) - 26usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::nInfo"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, nInfo) - 28usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, pad0) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_size_range_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_size_range_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_width: u16,
    pub min_height: u16,
    pub max_width: u16,
    pub max_height: u16,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_size_range_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::min_width"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, min_width) - 8usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::min_height"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, min_height) - 10usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::max_width"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, max_width) - 12usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::max_height"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, max_height) - 14usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_size_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub width: u16,
    pub height: u16,
    pub mm_width: u32,
    pub mm_height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_size_request_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_size_request_t>() - 20usize];
    ["Alignment of xcb_randr_set_screen_size_request_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_size_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::width"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, width) - 8usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::height"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, height) - 10usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::mm_width"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, mm_width) - 12usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::mm_height"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, mm_height) - 16usize];
};
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSYNC_POSITIVE: xcb_randr_mode_flag_t = 1;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSYNC_NEGATIVE: xcb_randr_mode_flag_t = 2;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_VSYNC_POSITIVE: xcb_randr_mode_flag_t = 4;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_VSYNC_NEGATIVE: xcb_randr_mode_flag_t = 8;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_INTERLACE: xcb_randr_mode_flag_t = 16;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_DOUBLE_SCAN: xcb_randr_mode_flag_t = 32;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC: xcb_randr_mode_flag_t = 64;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC_POSITIVE: xcb_randr_mode_flag_t = 128;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC_NEGATIVE: xcb_randr_mode_flag_t = 256;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSKEW_PRESENT: xcb_randr_mode_flag_t = 512;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_BCAST: xcb_randr_mode_flag_t = 1024;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_PIXEL_MULTIPLEX: xcb_randr_mode_flag_t = 2048;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_DOUBLE_CLOCK: xcb_randr_mode_flag_t = 4096;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HALVE_CLOCK: xcb_randr_mode_flag_t = 8192;
pub type xcb_randr_mode_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_info_t {
    pub id: u32,
    pub width: u16,
    pub height: u16,
    pub dot_clock: u32,
    pub hsync_start: u16,
    pub hsync_end: u16,
    pub htotal: u16,
    pub hskew: u16,
    pub vsync_start: u16,
    pub vsync_end: u16,
    pub vtotal: u16,
    pub name_len: u16,
    pub mode_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_info_t"][::std::mem::size_of::<xcb_randr_mode_info_t>() - 32usize];
    ["Alignment of xcb_randr_mode_info_t"]
        [::std::mem::align_of::<xcb_randr_mode_info_t>() - 4usize];
    ["Offset of field: xcb_randr_mode_info_t::id"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, id) - 0usize];
    ["Offset of field: xcb_randr_mode_info_t::width"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, width) - 4usize];
    ["Offset of field: xcb_randr_mode_info_t::height"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, height) - 6usize];
    ["Offset of field: xcb_randr_mode_info_t::dot_clock"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, dot_clock) - 8usize];
    ["Offset of field: xcb_randr_mode_info_t::hsync_start"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hsync_start) - 12usize];
    ["Offset of field: xcb_randr_mode_info_t::hsync_end"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hsync_end) - 14usize];
    ["Offset of field: xcb_randr_mode_info_t::htotal"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, htotal) - 16usize];
    ["Offset of field: xcb_randr_mode_info_t::hskew"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hskew) - 18usize];
    ["Offset of field: xcb_randr_mode_info_t::vsync_start"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vsync_start) - 20usize];
    ["Offset of field: xcb_randr_mode_info_t::vsync_end"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vsync_end) - 22usize];
    ["Offset of field: xcb_randr_mode_info_t::vtotal"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vtotal) - 24usize];
    ["Offset of field: xcb_randr_mode_info_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, name_len) - 26usize];
    ["Offset of field: xcb_randr_mode_info_t::mode_flags"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, mode_flags) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_info_iterator_t {
    pub data: *mut xcb_randr_mode_info_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_info_iterator_t"]
        [::std::mem::size_of::<xcb_randr_mode_info_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_mode_info_iterator_t"]
        [::std::mem::align_of::<xcb_randr_mode_info_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_resources_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_resources_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_modes: u16,
    pub names_len: u16,
    pub pad1: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_resources_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_reply_t,
        config_timestamp
    ) - 12usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_crtcs) - 16usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_outputs) - 18usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_modes"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_modes) - 20usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, names_len) - 22usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, pad1) - 24usize];
};
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_CONNECTED: xcb_randr_connection_t = 0;
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_DISCONNECTED: xcb_randr_connection_t = 1;
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_UNKNOWN: xcb_randr_connection_t = 2;
pub type xcb_randr_connection_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_output_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub crtc: xcb_randr_crtc_t,
    pub mm_width: u32,
    pub mm_height: u32,
    pub connection: u8,
    pub subpixel_order: u8,
    pub num_crtcs: u16,
    pub num_modes: u16,
    pub num_preferred: u16,
    pub num_clones: u16,
    pub name_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_reply_t>() - 36usize];
    ["Alignment of xcb_randr_get_output_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, crtc) - 12usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::mm_width"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, mm_width) - 16usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::mm_height"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, mm_height) - 20usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::connection"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, connection) - 24usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, subpixel_order) - 25usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_crtcs) - 26usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_modes"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_modes) - 28usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_preferred"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_preferred) - 30usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_clones"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_clones) - 32usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, name_len) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_cookie_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_list_output_properties_cookie_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_request_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_request_t>() - 8usize];
    ["Alignment of xcb_randr_list_output_properties_request_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_request_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, output) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_atoms: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_reply_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_reply_t>() - 32usize];
    ["Alignment of xcb_randr_list_output_properties_reply_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::num_atoms"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, num_atoms) - 8usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_output_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending: u8,
    pub range: u8,
    pub immutable: u8,
    pub pad1: [u8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_output_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pending"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pending) - 8usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::range"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, range) - 9usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::immutable"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, immutable) - 10usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pad1) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_configure_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub pending: u8,
    pub range: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_configure_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_configure_output_property_request_t>() - 16usize];
    ["Alignment of xcb_randr_configure_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_configure_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_output_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_output_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, pending) - 12usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::range"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, range) - 13usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_change_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub mode: u8,
    pub pad0: [u8; 2usize],
    pub num_units: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_change_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_change_output_property_request_t>() - 24usize];
    ["Alignment of xcb_randr_change_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_change_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::format"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, format) - 16usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, mode) - 17usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::num_units"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, num_units) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_output_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
    pub _delete: u8,
    pub pending: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_request_t>() - 28usize];
    ["Alignment of xcb_randr_get_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, long_length) - 20usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, _delete) - 24usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, pending) - 25usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub num_items: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_output_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, num_items) - 16usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_cookie_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_create_mode_cookie_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_mode_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub mode_info: xcb_randr_mode_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_request_t>() - 40usize];
    ["Alignment of xcb_randr_create_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_create_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_create_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_create_mode_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_create_mode_request_t::mode_info"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, mode_info) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub mode: xcb_randr_mode_t,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_reply_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_reply_t>() - 32usize];
    ["Alignment of xcb_randr_create_mode_reply_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::mode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, mode) - 8usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_destroy_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_destroy_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_destroy_mode_request_t>() - 8usize];
    ["Alignment of xcb_randr_destroy_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_destroy_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, mode) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_add_output_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_add_output_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_add_output_mode_request_t>() - 12usize];
    ["Alignment of xcb_randr_add_output_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_add_output_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, mode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_output_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_output_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_output_mode_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_output_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_output_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, mode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_crtc_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub rotations: u16,
    pub num_outputs: u16,
    pub num_possible_outputs: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::x"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, x) - 12usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::y"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, y) - 14usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::width"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, width) - 16usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::height"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, height) - 18usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::mode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, mode) - 20usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::rotations"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, rotations) - 26usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, num_outputs) - 28usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::num_possible_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, num_possible_outputs) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_crtc_config_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_request_t>() - 28usize];
    ["Alignment of xcb_randr_set_crtc_config_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::x"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, x) - 16usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::y"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, y) - 18usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, mode) - 20usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_reply_t>() - 32usize];
    ["Alignment of xcb_randr_set_crtc_config_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub size: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::size"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, size) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_gamma_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_gamma_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub size: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_gamma_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::size"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, size) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_gamma_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub size: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_gamma_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_gamma_request_t>() - 12usize];
    ["Alignment of xcb_randr_set_crtc_gamma_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_gamma_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::size"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, size) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_resources_current_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_cookie_t::sequence"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_cookie_t,
        sequence
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_resources_current_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_modes: u16,
    pub names_len: u16,
    pub pad1: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_resources_current_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::response_type"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        timestamp
    ) - 8usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        config_timestamp
    )
        - 12usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_crtcs"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_crtcs
    ) - 16usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_outputs"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_outputs
    ) - 18usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_modes"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_modes
    ) - 20usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::names_len"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        names_len
    ) - 22usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, pad1) - 24usize];
};
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_UNIT: xcb_randr_transform_t = 1;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_SCALE_UP: xcb_randr_transform_t = 2;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_SCALE_DOWN: xcb_randr_transform_t = 4;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_PROJECTIVE: xcb_randr_transform_t = 8;
pub type xcb_randr_transform_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub transform: xcb_render_transform_t,
    pub filter_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_transform_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_transform_request_t>() - 48usize];
    ["Alignment of xcb_randr_set_crtc_transform_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_transform_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::transform"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, transform) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::filter_len"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, filter_len) - 44usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, pad0) - 46usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_transform_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_transform_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending_transform: xcb_render_transform_t,
    pub has_transforms: u8,
    pub pad1: [u8; 3usize],
    pub current_transform: xcb_render_transform_t,
    pub pad2: [u8; 4usize],
    pub pending_len: u16,
    pub pending_nparams: u16,
    pub current_len: u16,
    pub current_nparams: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_reply_t>() - 96usize];
    ["Alignment of xcb_randr_get_crtc_transform_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_transform"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_transform) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::has_transforms"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, has_transforms) - 44usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad1) - 45usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_transform"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_transform) - 48usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad2) - 84usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_len"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_len) - 88usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_nparams"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_nparams) - 90usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_len"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_len) - 92usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_nparams"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_nparams) - 94usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_panning_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_panning_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_request_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_panning_request_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_panning_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_panning_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_panning_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub left: u16,
    pub top: u16,
    pub width: u16,
    pub height: u16,
    pub track_left: u16,
    pub track_top: u16,
    pub track_width: u16,
    pub track_height: u16,
    pub border_left: i16,
    pub border_top: i16,
    pub border_right: i16,
    pub border_bottom: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_reply_t>() - 36usize];
    ["Alignment of xcb_randr_get_panning_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, left) - 12usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, top) - 14usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::width"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, width) - 16usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::height"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, height) - 18usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_left) - 20usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_top) - 22usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_width"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_width) - 24usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_height"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_height) - 26usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_left) - 28usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_top) - 30usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_right"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_right) - 32usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_bottom"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_bottom) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_panning_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_panning_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub left: u16,
    pub top: u16,
    pub width: u16,
    pub height: u16,
    pub track_left: u16,
    pub track_top: u16,
    pub track_width: u16,
    pub track_height: u16,
    pub border_left: i16,
    pub border_top: i16,
    pub border_right: i16,
    pub border_bottom: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_request_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_request_t>() - 36usize];
    ["Alignment of xcb_randr_set_panning_request_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_panning_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_panning_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_panning_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_panning_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_panning_request_t::left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, left) - 12usize];
    ["Offset of field: xcb_randr_set_panning_request_t::top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, top) - 14usize];
    ["Offset of field: xcb_randr_set_panning_request_t::width"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, width) - 16usize];
    ["Offset of field: xcb_randr_set_panning_request_t::height"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, height) - 18usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_left) - 20usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_top) - 22usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_width"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_width) - 24usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_height"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_height) - 26usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_left) - 28usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_top) - 30usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_right"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_right) - 32usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_bottom"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_bottom) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_reply_t>() - 12usize];
    ["Alignment of xcb_randr_set_panning_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_output_primary_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_output_primary_request_t"]
        [::std::mem::size_of::<xcb_randr_set_output_primary_request_t>() - 12usize];
    ["Alignment of xcb_randr_set_output_primary_request_t"]
        [::std::mem::align_of::<xcb_randr_set_output_primary_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, output) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_primary_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_output_primary_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_reply_t>() - 12usize];
    ["Alignment of xcb_randr_get_output_primary_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, output) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_providers_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_providers_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_request_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_providers_request_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_providers_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_providers_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_providers_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub num_providers: u16,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_providers_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::num_providers"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, num_providers) - 12usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, pad1) - 14usize];
};
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OUTPUT:
    xcb_randr_provider_capability_t = 1;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SINK_OUTPUT:
    xcb_randr_provider_capability_t = 2;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OFFLOAD:
    xcb_randr_provider_capability_t = 4;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SINK_OFFLOAD:
    xcb_randr_provider_capability_t = 8;
pub type xcb_randr_provider_capability_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_provider_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_provider_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub capabilities: u32,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_associated_providers: u16,
    pub name_len: u16,
    pub pad0: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_provider_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::capabilities"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, capabilities) - 12usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, num_crtcs) - 16usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, num_outputs) - 18usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_associated_providers"][::std::mem::offset_of!(
        xcb_randr_get_provider_info_reply_t,
        num_associated_providers
    ) - 20usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, name_len) - 22usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, pad0) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_provider_offload_sink_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub sink_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_provider_offload_sink_request_t"]
        [::std::mem::size_of::<xcb_randr_set_provider_offload_sink_request_t>() - 16usize];
    ["Alignment of xcb_randr_set_provider_offload_sink_request_t"]
        [::std::mem::align_of::<xcb_randr_set_provider_offload_sink_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_provider_offload_sink_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_set_provider_offload_sink_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::sink_provider"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        sink_provider
    ) - 8usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        config_timestamp
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_provider_output_source_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub source_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_provider_output_source_request_t"]
        [::std::mem::size_of::<xcb_randr_set_provider_output_source_request_t>() - 16usize];
    ["Alignment of xcb_randr_set_provider_output_source_request_t"]
        [::std::mem::align_of::<xcb_randr_set_provider_output_source_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_provider_output_source_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_set_provider_output_source_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::source_provider"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        source_provider
    )
        - 8usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        config_timestamp
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_cookie_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_list_provider_properties_cookie_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_request_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_request_t>() - 8usize];
    ["Alignment of xcb_randr_list_provider_properties_request_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_request_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_request_t, provider) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_atoms: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_reply_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_reply_t>() - 32usize];
    ["Alignment of xcb_randr_list_provider_properties_reply_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::response_type"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::num_atoms"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, num_atoms) - 8usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_provider_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_query_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_query_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending: u8,
    pub range: u8,
    pub immutable: u8,
    pub pad1: [u8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_provider_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pending"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pending) - 8usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::range"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, range) - 9usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::immutable"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, immutable) - 10usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pad1) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_configure_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub pending: u8,
    pub range: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_configure_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_configure_provider_property_request_t>() - 16usize];
    ["Alignment of xcb_randr_configure_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_configure_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::provider"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        provider
    ) - 4usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::property"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        property
    ) - 8usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::pending"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        pending
    ) - 12usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::range"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, range) - 13usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_change_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub mode: u8,
    pub pad0: [u8; 2usize],
    pub num_items: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_change_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_change_provider_property_request_t>() - 24usize];
    ["Alignment of xcb_randr_change_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_change_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_change_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_change_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::format"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, format) - 16usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, mode) - 17usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, num_items) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_provider_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_delete_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_delete_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_provider_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
    pub _delete: u8,
    pub pending: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_request_t>() - 28usize];
    ["Alignment of xcb_randr_get_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, long_length) - 20usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, _delete) - 24usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, pending) - 25usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub num_items: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_provider_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, num_items) - 16usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_change_notify_event_t {
    pub response_type: u8,
    pub rotation: u8,
    pub sequence: u16,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub request_window: xcb_window_t,
    pub sizeID: u16,
    pub subpixel_order: u16,
    pub width: u16,
    pub height: u16,
    pub mwidth: u16,
    pub mheight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_change_notify_event_t"]
        [::std::mem::size_of::<xcb_randr_screen_change_notify_event_t>() - 32usize];
    ["Alignment of xcb_randr_screen_change_notify_event_t"]
        [::std::mem::align_of::<xcb_randr_screen_change_notify_event_t>() - 4usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, rotation) - 1usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, timestamp) - 4usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, config_timestamp) - 8usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, root) - 12usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::request_window"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, request_window) - 16usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, sizeID) - 20usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, subpixel_order) - 22usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, width) - 24usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, height) - 26usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::mwidth"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, mwidth) - 28usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::mheight"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, mheight) - 30usize];
};
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_CRTC_CHANGE: xcb_randr_notify_t = 0;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_OUTPUT_CHANGE: xcb_randr_notify_t = 1;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_OUTPUT_PROPERTY: xcb_randr_notify_t = 2;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_PROVIDER_CHANGE: xcb_randr_notify_t = 3;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_PROVIDER_PROPERTY: xcb_randr_notify_t = 4;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_RESOURCE_CHANGE: xcb_randr_notify_t = 5;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_LEASE: xcb_randr_notify_t = 6;
pub type xcb_randr_notify_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub pad0: [u8; 2usize],
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_change_t"][::std::mem::size_of::<xcb_randr_crtc_change_t>() - 28usize];
    ["Alignment of xcb_randr_crtc_change_t"]
        [::std::mem::align_of::<xcb_randr_crtc_change_t>() - 4usize];
    ["Offset of field: xcb_randr_crtc_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_crtc_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_crtc_change_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, crtc) - 8usize];
    ["Offset of field: xcb_randr_crtc_change_t::mode"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, mode) - 12usize];
    ["Offset of field: xcb_randr_crtc_change_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, rotation) - 16usize];
    ["Offset of field: xcb_randr_crtc_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_crtc_change_t::x"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, x) - 20usize];
    ["Offset of field: xcb_randr_crtc_change_t::y"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, y) - 22usize];
    ["Offset of field: xcb_randr_crtc_change_t::width"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, width) - 24usize];
    ["Offset of field: xcb_randr_crtc_change_t::height"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, height) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_change_iterator_t {
    pub data: *mut xcb_randr_crtc_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_crtc_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_crtc_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_crtc_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_change_t {
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub connection: u8,
    pub subpixel_order: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_change_t"]
        [::std::mem::size_of::<xcb_randr_output_change_t>() - 28usize];
    ["Alignment of xcb_randr_output_change_t"]
        [::std::mem::align_of::<xcb_randr_output_change_t>() - 4usize];
    ["Offset of field: xcb_randr_output_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_output_change_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, config_timestamp) - 4usize];
    ["Offset of field: xcb_randr_output_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, window) - 8usize];
    ["Offset of field: xcb_randr_output_change_t::output"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, output) - 12usize];
    ["Offset of field: xcb_randr_output_change_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, crtc) - 16usize];
    ["Offset of field: xcb_randr_output_change_t::mode"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, mode) - 20usize];
    ["Offset of field: xcb_randr_output_change_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_output_change_t::connection"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, connection) - 26usize];
    ["Offset of field: xcb_randr_output_change_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, subpixel_order) - 27usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_change_iterator_t {
    pub data: *mut xcb_randr_output_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_property_t {
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub status: u8,
    pub pad0: [u8; 11usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_property_t"]
        [::std::mem::size_of::<xcb_randr_output_property_t>() - 28usize];
    ["Alignment of xcb_randr_output_property_t"]
        [::std::mem::align_of::<xcb_randr_output_property_t>() - 4usize];
    ["Offset of field: xcb_randr_output_property_t::window"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, window) - 0usize];
    ["Offset of field: xcb_randr_output_property_t::output"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, output) - 4usize];
    ["Offset of field: xcb_randr_output_property_t::atom"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, atom) - 8usize];
    ["Offset of field: xcb_randr_output_property_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_output_property_t::status"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, status) - 16usize];
    ["Offset of field: xcb_randr_output_property_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, pad0) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_property_iterator_t {
    pub data: *mut xcb_randr_output_property_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_property_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_property_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_property_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_property_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub pad0: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_change_t"]
        [::std::mem::size_of::<xcb_randr_provider_change_t>() - 28usize];
    ["Alignment of xcb_randr_provider_change_t"]
        [::std::mem::align_of::<xcb_randr_provider_change_t>() - 4usize];
    ["Offset of field: xcb_randr_provider_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_provider_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_provider_change_t::provider"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, provider) - 8usize];
    ["Offset of field: xcb_randr_provider_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_change_iterator_t {
    pub data: *mut xcb_randr_provider_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_property_t {
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub state: u8,
    pub pad0: [u8; 11usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_property_t"]
        [::std::mem::size_of::<xcb_randr_provider_property_t>() - 28usize];
    ["Alignment of xcb_randr_provider_property_t"]
        [::std::mem::align_of::<xcb_randr_provider_property_t>() - 4usize];
    ["Offset of field: xcb_randr_provider_property_t::window"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, window) - 0usize];
    ["Offset of field: xcb_randr_provider_property_t::provider"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, provider) - 4usize];
    ["Offset of field: xcb_randr_provider_property_t::atom"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, atom) - 8usize];
    ["Offset of field: xcb_randr_provider_property_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_provider_property_t::state"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, state) - 16usize];
    ["Offset of field: xcb_randr_provider_property_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, pad0) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_property_iterator_t {
    pub data: *mut xcb_randr_provider_property_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_property_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_property_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_property_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_property_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_resource_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_resource_change_t"]
        [::std::mem::size_of::<xcb_randr_resource_change_t>() - 28usize];
    ["Alignment of xcb_randr_resource_change_t"]
        [::std::mem::align_of::<xcb_randr_resource_change_t>() - 4usize];
    ["Offset of field: xcb_randr_resource_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_resource_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_resource_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_resource_change_iterator_t {
    pub data: *mut xcb_randr_resource_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_resource_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_resource_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_resource_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_resource_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_monitor_info_t {
    pub name: xcb_atom_t,
    pub primary: u8,
    pub automatic: u8,
    pub nOutput: u16,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub width_in_millimeters: u32,
    pub height_in_millimeters: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_monitor_info_t"]
        [::std::mem::size_of::<xcb_randr_monitor_info_t>() - 24usize];
    ["Alignment of xcb_randr_monitor_info_t"]
        [::std::mem::align_of::<xcb_randr_monitor_info_t>() - 4usize];
    ["Offset of field: xcb_randr_monitor_info_t::name"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, name) - 0usize];
    ["Offset of field: xcb_randr_monitor_info_t::primary"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, primary) - 4usize];
    ["Offset of field: xcb_randr_monitor_info_t::automatic"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, automatic) - 5usize];
    ["Offset of field: xcb_randr_monitor_info_t::nOutput"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, nOutput) - 6usize];
    ["Offset of field: xcb_randr_monitor_info_t::x"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, x) - 8usize];
    ["Offset of field: xcb_randr_monitor_info_t::y"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, y) - 10usize];
    ["Offset of field: xcb_randr_monitor_info_t::width"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, width) - 12usize];
    ["Offset of field: xcb_randr_monitor_info_t::height"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, height) - 14usize];
    ["Offset of field: xcb_randr_monitor_info_t::width_in_millimeters"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, width_in_millimeters) - 16usize];
    ["Offset of field: xcb_randr_monitor_info_t::height_in_millimeters"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, height_in_millimeters) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_monitor_info_iterator_t {
    pub data: *mut xcb_randr_monitor_info_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_monitor_info_iterator_t"]
        [::std::mem::size_of::<xcb_randr_monitor_info_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_monitor_info_iterator_t"]
        [::std::mem::align_of::<xcb_randr_monitor_info_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_monitors_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub get_active: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_request_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_monitors_request_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::get_active"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, get_active) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub nMonitors: u32,
    pub nOutputs: u32,
    pub pad1: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_monitors_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::nMonitors"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, nMonitors) - 12usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::nOutputs"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, nOutputs) - 16usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, pad1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_monitor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_monitor_request_t"]
        [::std::mem::size_of::<xcb_randr_set_monitor_request_t>() - 8usize];
    ["Alignment of xcb_randr_set_monitor_request_t"]
        [::std::mem::align_of::<xcb_randr_set_monitor_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_monitor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub name: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_monitor_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_monitor_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_monitor_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_monitor_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::name"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_cookie_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_create_lease_cookie_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_lease_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub lid: xcb_randr_lease_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_request_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_request_t>() - 16usize];
    ["Alignment of xcb_randr_create_lease_request_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_request_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_create_lease_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_create_lease_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_create_lease_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_create_lease_request_t::lid"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, lid) - 8usize];
    ["Offset of field: xcb_randr_create_lease_request_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, num_crtcs) - 12usize];
    ["Offset of field: xcb_randr_create_lease_request_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, num_outputs) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_reply_t {
    pub response_type: u8,
    pub nfd: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_reply_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_reply_t>() - 32usize];
    ["Alignment of xcb_randr_create_lease_reply_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::nfd"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, nfd) - 1usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_free_lease_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub lid: xcb_randr_lease_t,
    pub terminate: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_free_lease_request_t"]
        [::std::mem::size_of::<xcb_randr_free_lease_request_t>() - 12usize];
    ["Alignment of xcb_randr_free_lease_request_t"]
        [::std::mem::align_of::<xcb_randr_free_lease_request_t>() - 4usize];
    ["Offset of field: xcb_randr_free_lease_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_free_lease_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_free_lease_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_free_lease_request_t::lid"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, lid) - 4usize];
    ["Offset of field: xcb_randr_free_lease_request_t::terminate"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, terminate) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_notify_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub lease: xcb_randr_lease_t,
    pub created: u8,
    pub pad0: [u8; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_notify_t"]
        [::std::mem::size_of::<xcb_randr_lease_notify_t>() - 28usize];
    ["Alignment of xcb_randr_lease_notify_t"]
        [::std::mem::align_of::<xcb_randr_lease_notify_t>() - 4usize];
    ["Offset of field: xcb_randr_lease_notify_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_lease_notify_t::window"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, window) - 4usize];
    ["Offset of field: xcb_randr_lease_notify_t::lease"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, lease) - 8usize];
    ["Offset of field: xcb_randr_lease_notify_t::created"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, created) - 12usize];
    ["Offset of field: xcb_randr_lease_notify_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, pad0) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_notify_iterator_t {
    pub data: *mut xcb_randr_lease_notify_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_notify_iterator_t"]
        [::std::mem::size_of::<xcb_randr_lease_notify_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_lease_notify_iterator_t"]
        [::std::mem::align_of::<xcb_randr_lease_notify_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_randr_notify_data_t {
    pub cc: xcb_randr_crtc_change_t,
    pub oc: xcb_randr_output_change_t,
    pub op: xcb_randr_output_property_t,
    pub pc: xcb_randr_provider_change_t,
    pub pp: xcb_randr_provider_property_t,
    pub rc: xcb_randr_resource_change_t,
    pub lc: xcb_randr_lease_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_data_t"][::std::mem::size_of::<xcb_randr_notify_data_t>() - 28usize];
    ["Alignment of xcb_randr_notify_data_t"]
        [::std::mem::align_of::<xcb_randr_notify_data_t>() - 4usize];
    ["Offset of field: xcb_randr_notify_data_t::cc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, cc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::oc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, oc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::op"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, op) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::pc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, pc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::pp"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, pp) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::rc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, rc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::lc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, lc) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_notify_data_iterator_t {
    pub data: *mut xcb_randr_notify_data_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_data_iterator_t"]
        [::std::mem::size_of::<xcb_randr_notify_data_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_notify_data_iterator_t"]
        [::std::mem::align_of::<xcb_randr_notify_data_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcb_randr_notify_event_t {
    pub response_type: u8,
    pub subCode: u8,
    pub sequence: u16,
    pub u: xcb_randr_notify_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_event_t"]
        [::std::mem::size_of::<xcb_randr_notify_event_t>() - 32usize];
    ["Alignment of xcb_randr_notify_event_t"]
        [::std::mem::align_of::<xcb_randr_notify_event_t>() - 4usize];
    ["Offset of field: xcb_randr_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_notify_event_t::subCode"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, subCode) - 1usize];
    ["Offset of field: xcb_randr_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_notify_event_t::u"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, u) - 4usize];
};
unsafe extern "C" {
    pub fn xcb_randr_mode_next(i: *mut xcb_randr_mode_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_mode_end(i: xcb_randr_mode_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_next(i: *mut xcb_randr_crtc_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_end(i: xcb_randr_crtc_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_next(i: *mut xcb_randr_output_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_end(i: xcb_randr_output_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_next(i: *mut xcb_randr_provider_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_end(i: xcb_randr_provider_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_lease_next(i: *mut xcb_randr_lease_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_lease_end(i: xcb_randr_lease_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_screen_size_next(i: *mut xcb_randr_screen_size_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_screen_size_end(i: xcb_randr_screen_size_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates(R: *const xcb_randr_refresh_rates_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates_length(
        R: *const xcb_randr_refresh_rates_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates_end(
        R: *const xcb_randr_refresh_rates_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_next(i: *mut xcb_randr_refresh_rates_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_end(
        i: xcb_randr_refresh_rates_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version(
        c: *mut xcb_connection_t,
        major_version: u32,
        minor_version: u32,
    ) -> xcb_randr_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version_unchecked(
        c: *mut xcb_connection_t,
        major_version: u32,
        minor_version: u32,
    ) -> xcb_randr_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_version_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_version_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        sizeID: u16,
        rotation: u16,
        rate: u16,
    ) -> xcb_randr_set_screen_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        sizeID: u16,
        rotation: u16,
        rate: u16,
    ) -> xcb_randr_set_screen_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_screen_config_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_screen_config_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_select_input_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        enable: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_select_input(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        enable: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> *mut xcb_randr_screen_size_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes_length(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes_iterator(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> xcb_randr_screen_size_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_rates_length(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_rates_iterator(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> xcb_randr_refresh_rates_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_size_range_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_size_range_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_size_range_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_size_range_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_size_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        width: u16,
        height: u16,
        mm_width: u32,
        mm_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_size(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        width: u16,
        height: u16,
        mm_width: u32,
        mm_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_mode_info_next(i: *mut xcb_randr_mode_info_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_mode_info_end(i: xcb_randr_mode_info_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_mode_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes_iterator(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_randr_mode_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_resources_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_resources_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_output_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_output_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_mode_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name(R: *const xcb_randr_get_output_info_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
    ) -> xcb_randr_list_output_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
    ) -> xcb_randr_list_output_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms_length(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms_end(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_list_output_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_list_output_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values_length(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values_end(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_output_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_output_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values_length(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values_end(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_units: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_units: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data_length(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data_end(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data_length(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data_end(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        name_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        mode_info: xcb_randr_mode_info_t,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_randr_create_mode_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        mode_info: xcb_randr_mode_info_t,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_randr_create_mode_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_create_mode_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_create_mode_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_destroy_mode_checked(
        c: *mut xcb_connection_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_destroy_mode(
        c: *mut xcb_connection_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_add_output_mode_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_add_output_mode(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_mode_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_mode(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_crtc_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_crtc_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs_length(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs_end(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible_length(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible_end(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        outputs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        x: i16,
        y: i16,
        mode: xcb_randr_mode_t,
        rotation: u16,
        outputs_len: u32,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_set_crtc_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        x: i16,
        y: i16,
        mode: xcb_randr_mode_t,
        rotation: u16,
        outputs_len: u32,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_set_crtc_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_crtc_config_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_crtc_config_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_gamma_size_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_gamma_size_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_gamma_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_gamma_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_checked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        size: u16,
        red: *const u16,
        green: *const u16,
        blue: *const u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        size: u16,
        red: *const u16,
        green: *const u16,
        blue: *const u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red(R: *const xcb_randr_set_crtc_gamma_request_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green(R: *const xcb_randr_set_crtc_gamma_request_t)
    -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue(R: *const xcb_randr_set_crtc_gamma_request_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_current_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_current_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_mode_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes_iterator(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_randr_mode_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_resources_current_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_resources_current_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        filter_params_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_checked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        transform: xcb_render_transform_t,
        filter_len: u16,
        filter_name: *const ::std::os::raw::c_char,
        filter_params_len: u32,
        filter_params: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        transform: xcb_render_transform_t,
        filter_len: u16,
        filter_name: *const ::std::os::raw::c_char,
        filter_params_len: u32,
        filter_params: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name_length(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name_end(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params_length(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params_end(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_transform_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_transform_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_transform_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_transform_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_panning_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_panning_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        left: u16,
        top: u16,
        width: u16,
        height: u16,
        track_left: u16,
        track_top: u16,
        track_width: u16,
        track_height: u16,
        border_left: i16,
        border_top: i16,
        border_right: i16,
        border_bottom: i16,
    ) -> xcb_randr_set_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        left: u16,
        top: u16,
        width: u16,
        height: u16,
        track_left: u16,
        track_top: u16,
        track_width: u16,
        track_height: u16,
        border_left: i16,
        border_top: i16,
        border_right: i16,
        border_bottom: i16,
    ) -> xcb_randr_set_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_panning_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_panning_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_output_primary_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        output: xcb_randr_output_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_output_primary(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        output: xcb_randr_output_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_output_primary_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_output_primary_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_primary_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_primary_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_providers_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_providers_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> *mut xcb_randr_provider_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers_length(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers_end(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_providers_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_providers_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_provider_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_provider_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_provider_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_provider_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_provider_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_offload_sink_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        sink_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_offload_sink(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        sink_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_output_source_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        source_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_output_source(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        source_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
    ) -> xcb_randr_list_provider_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
    ) -> xcb_randr_list_provider_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms_length(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms_end(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_list_provider_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_list_provider_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values_length(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values_end(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_provider_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_provider_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values_length(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values_end(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_items: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_items: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data_length(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data_end(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data_length(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data_end(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_provider_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_provider_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_change_next(i: *mut xcb_randr_crtc_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_change_end(i: xcb_randr_crtc_change_iterator_t)
    -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_change_next(i: *mut xcb_randr_output_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_change_end(
        i: xcb_randr_output_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_property_next(i: *mut xcb_randr_output_property_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_property_end(
        i: xcb_randr_output_property_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_change_next(i: *mut xcb_randr_provider_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_change_end(
        i: xcb_randr_provider_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_property_next(i: *mut xcb_randr_provider_property_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_property_end(
        i: xcb_randr_provider_property_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_resource_change_next(i: *mut xcb_randr_resource_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_resource_change_end(
        i: xcb_randr_resource_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs(
        R: *const xcb_randr_monitor_info_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs_length(
        R: *const xcb_randr_monitor_info_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs_end(
        R: *const xcb_randr_monitor_info_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_next(i: *mut xcb_randr_monitor_info_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_end(
        i: xcb_randr_monitor_info_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        get_active: u8,
    ) -> xcb_randr_get_monitors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        get_active: u8,
    ) -> xcb_randr_get_monitors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_monitors_length(
        R: *const xcb_randr_get_monitors_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_monitors_iterator(
        R: *const xcb_randr_get_monitors_reply_t,
    ) -> xcb_randr_monitor_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_monitors_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_monitors_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        monitorinfo: *mut xcb_randr_monitor_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        monitorinfo: *mut xcb_randr_monitor_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_monitorinfo(
        R: *const xcb_randr_set_monitor_request_t,
    ) -> *mut xcb_randr_monitor_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_monitor_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        name: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_monitor(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        name: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        lid: xcb_randr_lease_t,
        num_crtcs: u16,
        num_outputs: u16,
        crtcs: *const xcb_randr_crtc_t,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_create_lease_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        lid: xcb_randr_lease_t,
        num_crtcs: u16,
        num_outputs: u16,
        crtcs: *const xcb_randr_crtc_t,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_create_lease_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_create_lease_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_create_lease_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_reply_fds(
        c: *mut xcb_connection_t,
        reply: *mut xcb_randr_create_lease_reply_t,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_free_lease_checked(
        c: *mut xcb_connection_t,
        lid: xcb_randr_lease_t,
        terminate: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_free_lease(
        c: *mut xcb_connection_t,
        lid: xcb_randr_lease_t,
        terminate: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_lease_notify_next(i: *mut xcb_randr_lease_notify_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_lease_notify_end(
        i: xcb_randr_lease_notify_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_notify_data_next(i: *mut xcb_randr_notify_data_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_notify_data_end(i: xcb_randr_notify_data_iterator_t)
    -> xcb_generic_iterator_t;
}
pub type XID = ::std::os::raw::c_ulong;
pub type Mask = ::std::os::raw::c_ulong;
pub type Atom = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Time = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = ::std::os::raw::c_uchar;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    pub fn _Xmblen(
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XExtData {
    pub number: ::std::os::raw::c_int,
    pub next: *mut _XExtData,
    pub free_private: ::std::option::Option<
        unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
    >,
    pub private_data: XPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XExtData"][::std::mem::size_of::<_XExtData>() - 32usize];
    ["Alignment of _XExtData"][::std::mem::align_of::<_XExtData>() - 8usize];
    ["Offset of field: _XExtData::number"][::std::mem::offset_of!(_XExtData, number) - 0usize];
    ["Offset of field: _XExtData::next"][::std::mem::offset_of!(_XExtData, next) - 8usize];
    ["Offset of field: _XExtData::free_private"]
        [::std::mem::offset_of!(_XExtData, free_private) - 16usize];
    ["Offset of field: _XExtData::private_data"]
        [::std::mem::offset_of!(_XExtData, private_data) - 24usize];
};
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExtCodes {
    pub extension: ::std::os::raw::c_int,
    pub major_opcode: ::std::os::raw::c_int,
    pub first_event: ::std::os::raw::c_int,
    pub first_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExtCodes"][::std::mem::size_of::<XExtCodes>() - 16usize];
    ["Alignment of XExtCodes"][::std::mem::align_of::<XExtCodes>() - 4usize];
    ["Offset of field: XExtCodes::extension"]
        [::std::mem::offset_of!(XExtCodes, extension) - 0usize];
    ["Offset of field: XExtCodes::major_opcode"]
        [::std::mem::offset_of!(XExtCodes, major_opcode) - 4usize];
    ["Offset of field: XExtCodes::first_event"]
        [::std::mem::offset_of!(XExtCodes, first_event) - 8usize];
    ["Offset of field: XExtCodes::first_error"]
        [::std::mem::offset_of!(XExtCodes, first_error) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPixmapFormatValues {
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPixmapFormatValues"][::std::mem::size_of::<XPixmapFormatValues>() - 12usize];
    ["Alignment of XPixmapFormatValues"][::std::mem::align_of::<XPixmapFormatValues>() - 4usize];
    ["Offset of field: XPixmapFormatValues::depth"]
        [::std::mem::offset_of!(XPixmapFormatValues, depth) - 0usize];
    ["Offset of field: XPixmapFormatValues::bits_per_pixel"]
        [::std::mem::offset_of!(XPixmapFormatValues, bits_per_pixel) - 4usize];
    ["Offset of field: XPixmapFormatValues::scanline_pad"]
        [::std::mem::offset_of!(XPixmapFormatValues, scanline_pad) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGCValues {
    pub function: ::std::os::raw::c_int,
    pub plane_mask: ::std::os::raw::c_ulong,
    pub foreground: ::std::os::raw::c_ulong,
    pub background: ::std::os::raw::c_ulong,
    pub line_width: ::std::os::raw::c_int,
    pub line_style: ::std::os::raw::c_int,
    pub cap_style: ::std::os::raw::c_int,
    pub join_style: ::std::os::raw::c_int,
    pub fill_style: ::std::os::raw::c_int,
    pub fill_rule: ::std::os::raw::c_int,
    pub arc_mode: ::std::os::raw::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::std::os::raw::c_int,
    pub ts_y_origin: ::std::os::raw::c_int,
    pub font: Font,
    pub subwindow_mode: ::std::os::raw::c_int,
    pub graphics_exposures: ::std::os::raw::c_int,
    pub clip_x_origin: ::std::os::raw::c_int,
    pub clip_y_origin: ::std::os::raw::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::std::os::raw::c_int,
    pub dashes: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGCValues"][::std::mem::size_of::<XGCValues>() - 128usize];
    ["Alignment of XGCValues"][::std::mem::align_of::<XGCValues>() - 8usize];
    ["Offset of field: XGCValues::function"][::std::mem::offset_of!(XGCValues, function) - 0usize];
    ["Offset of field: XGCValues::plane_mask"]
        [::std::mem::offset_of!(XGCValues, plane_mask) - 8usize];
    ["Offset of field: XGCValues::foreground"]
        [::std::mem::offset_of!(XGCValues, foreground) - 16usize];
    ["Offset of field: XGCValues::background"]
        [::std::mem::offset_of!(XGCValues, background) - 24usize];
    ["Offset of field: XGCValues::line_width"]
        [::std::mem::offset_of!(XGCValues, line_width) - 32usize];
    ["Offset of field: XGCValues::line_style"]
        [::std::mem::offset_of!(XGCValues, line_style) - 36usize];
    ["Offset of field: XGCValues::cap_style"]
        [::std::mem::offset_of!(XGCValues, cap_style) - 40usize];
    ["Offset of field: XGCValues::join_style"]
        [::std::mem::offset_of!(XGCValues, join_style) - 44usize];
    ["Offset of field: XGCValues::fill_style"]
        [::std::mem::offset_of!(XGCValues, fill_style) - 48usize];
    ["Offset of field: XGCValues::fill_rule"]
        [::std::mem::offset_of!(XGCValues, fill_rule) - 52usize];
    ["Offset of field: XGCValues::arc_mode"][::std::mem::offset_of!(XGCValues, arc_mode) - 56usize];
    ["Offset of field: XGCValues::tile"][::std::mem::offset_of!(XGCValues, tile) - 64usize];
    ["Offset of field: XGCValues::stipple"][::std::mem::offset_of!(XGCValues, stipple) - 72usize];
    ["Offset of field: XGCValues::ts_x_origin"]
        [::std::mem::offset_of!(XGCValues, ts_x_origin) - 80usize];
    ["Offset of field: XGCValues::ts_y_origin"]
        [::std::mem::offset_of!(XGCValues, ts_y_origin) - 84usize];
    ["Offset of field: XGCValues::font"][::std::mem::offset_of!(XGCValues, font) - 88usize];
    ["Offset of field: XGCValues::subwindow_mode"]
        [::std::mem::offset_of!(XGCValues, subwindow_mode) - 96usize];
    ["Offset of field: XGCValues::graphics_exposures"]
        [::std::mem::offset_of!(XGCValues, graphics_exposures) - 100usize];
    ["Offset of field: XGCValues::clip_x_origin"]
        [::std::mem::offset_of!(XGCValues, clip_x_origin) - 104usize];
    ["Offset of field: XGCValues::clip_y_origin"]
        [::std::mem::offset_of!(XGCValues, clip_y_origin) - 108usize];
    ["Offset of field: XGCValues::clip_mask"]
        [::std::mem::offset_of!(XGCValues, clip_mask) - 112usize];
    ["Offset of field: XGCValues::dash_offset"]
        [::std::mem::offset_of!(XGCValues, dash_offset) - 120usize];
    ["Offset of field: XGCValues::dashes"][::std::mem::offset_of!(XGCValues, dashes) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGC {
    _unused: [u8; 0],
}
pub type GC = *mut _XGC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visual {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub bits_per_rgb: ::std::os::raw::c_int,
    pub map_entries: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Visual"][::std::mem::size_of::<Visual>() - 56usize];
    ["Alignment of Visual"][::std::mem::align_of::<Visual>() - 8usize];
    ["Offset of field: Visual::ext_data"][::std::mem::offset_of!(Visual, ext_data) - 0usize];
    ["Offset of field: Visual::visualid"][::std::mem::offset_of!(Visual, visualid) - 8usize];
    ["Offset of field: Visual::class"][::std::mem::offset_of!(Visual, class) - 16usize];
    ["Offset of field: Visual::red_mask"][::std::mem::offset_of!(Visual, red_mask) - 24usize];
    ["Offset of field: Visual::green_mask"][::std::mem::offset_of!(Visual, green_mask) - 32usize];
    ["Offset of field: Visual::blue_mask"][::std::mem::offset_of!(Visual, blue_mask) - 40usize];
    ["Offset of field: Visual::bits_per_rgb"]
        [::std::mem::offset_of!(Visual, bits_per_rgb) - 48usize];
    ["Offset of field: Visual::map_entries"][::std::mem::offset_of!(Visual, map_entries) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Depth {
    pub depth: ::std::os::raw::c_int,
    pub nvisuals: ::std::os::raw::c_int,
    pub visuals: *mut Visual,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Depth"][::std::mem::size_of::<Depth>() - 16usize];
    ["Alignment of Depth"][::std::mem::align_of::<Depth>() - 8usize];
    ["Offset of field: Depth::depth"][::std::mem::offset_of!(Depth, depth) - 0usize];
    ["Offset of field: Depth::nvisuals"][::std::mem::offset_of!(Depth, nvisuals) - 4usize];
    ["Offset of field: Depth::visuals"][::std::mem::offset_of!(Depth, visuals) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Screen {
    pub ext_data: *mut XExtData,
    pub display: *mut _XDisplay,
    pub root: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mwidth: ::std::os::raw::c_int,
    pub mheight: ::std::os::raw::c_int,
    pub ndepths: ::std::os::raw::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::std::os::raw::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::std::os::raw::c_ulong,
    pub black_pixel: ::std::os::raw::c_ulong,
    pub max_maps: ::std::os::raw::c_int,
    pub min_maps: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub save_unders: ::std::os::raw::c_int,
    pub root_input_mask: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Screen"][::std::mem::size_of::<Screen>() - 128usize];
    ["Alignment of Screen"][::std::mem::align_of::<Screen>() - 8usize];
    ["Offset of field: Screen::ext_data"][::std::mem::offset_of!(Screen, ext_data) - 0usize];
    ["Offset of field: Screen::display"][::std::mem::offset_of!(Screen, display) - 8usize];
    ["Offset of field: Screen::root"][::std::mem::offset_of!(Screen, root) - 16usize];
    ["Offset of field: Screen::width"][::std::mem::offset_of!(Screen, width) - 24usize];
    ["Offset of field: Screen::height"][::std::mem::offset_of!(Screen, height) - 28usize];
    ["Offset of field: Screen::mwidth"][::std::mem::offset_of!(Screen, mwidth) - 32usize];
    ["Offset of field: Screen::mheight"][::std::mem::offset_of!(Screen, mheight) - 36usize];
    ["Offset of field: Screen::ndepths"][::std::mem::offset_of!(Screen, ndepths) - 40usize];
    ["Offset of field: Screen::depths"][::std::mem::offset_of!(Screen, depths) - 48usize];
    ["Offset of field: Screen::root_depth"][::std::mem::offset_of!(Screen, root_depth) - 56usize];
    ["Offset of field: Screen::root_visual"][::std::mem::offset_of!(Screen, root_visual) - 64usize];
    ["Offset of field: Screen::default_gc"][::std::mem::offset_of!(Screen, default_gc) - 72usize];
    ["Offset of field: Screen::cmap"][::std::mem::offset_of!(Screen, cmap) - 80usize];
    ["Offset of field: Screen::white_pixel"][::std::mem::offset_of!(Screen, white_pixel) - 88usize];
    ["Offset of field: Screen::black_pixel"][::std::mem::offset_of!(Screen, black_pixel) - 96usize];
    ["Offset of field: Screen::max_maps"][::std::mem::offset_of!(Screen, max_maps) - 104usize];
    ["Offset of field: Screen::min_maps"][::std::mem::offset_of!(Screen, min_maps) - 108usize];
    ["Offset of field: Screen::backing_store"]
        [::std::mem::offset_of!(Screen, backing_store) - 112usize];
    ["Offset of field: Screen::save_unders"]
        [::std::mem::offset_of!(Screen, save_unders) - 116usize];
    ["Offset of field: Screen::root_input_mask"]
        [::std::mem::offset_of!(Screen, root_input_mask) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScreenFormat {
    pub ext_data: *mut XExtData,
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenFormat"][::std::mem::size_of::<ScreenFormat>() - 24usize];
    ["Alignment of ScreenFormat"][::std::mem::align_of::<ScreenFormat>() - 8usize];
    ["Offset of field: ScreenFormat::ext_data"]
        [::std::mem::offset_of!(ScreenFormat, ext_data) - 0usize];
    ["Offset of field: ScreenFormat::depth"][::std::mem::offset_of!(ScreenFormat, depth) - 8usize];
    ["Offset of field: ScreenFormat::bits_per_pixel"]
        [::std::mem::offset_of!(ScreenFormat, bits_per_pixel) - 12usize];
    ["Offset of field: ScreenFormat::scanline_pad"]
        [::std::mem::offset_of!(ScreenFormat, scanline_pad) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSetWindowAttributes {
    pub background_pixmap: Pixmap,
    pub background_pixel: ::std::os::raw::c_ulong,
    pub border_pixmap: Pixmap,
    pub border_pixel: ::std::os::raw::c_ulong,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub cursor: Cursor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSetWindowAttributes"][::std::mem::size_of::<XSetWindowAttributes>() - 112usize];
    ["Alignment of XSetWindowAttributes"][::std::mem::align_of::<XSetWindowAttributes>() - 8usize];
    ["Offset of field: XSetWindowAttributes::background_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixmap) - 0usize];
    ["Offset of field: XSetWindowAttributes::background_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixel) - 8usize];
    ["Offset of field: XSetWindowAttributes::border_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixmap) - 16usize];
    ["Offset of field: XSetWindowAttributes::border_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixel) - 24usize];
    ["Offset of field: XSetWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, bit_gravity) - 32usize];
    ["Offset of field: XSetWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, win_gravity) - 36usize];
    ["Offset of field: XSetWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_store) - 40usize];
    ["Offset of field: XSetWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_planes) - 48usize];
    ["Offset of field: XSetWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_pixel) - 56usize];
    ["Offset of field: XSetWindowAttributes::save_under"]
        [::std::mem::offset_of!(XSetWindowAttributes, save_under) - 64usize];
    ["Offset of field: XSetWindowAttributes::event_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, event_mask) - 72usize];
    ["Offset of field: XSetWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, do_not_propagate_mask) - 80usize];
    ["Offset of field: XSetWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XSetWindowAttributes, override_redirect) - 88usize];
    ["Offset of field: XSetWindowAttributes::colormap"]
        [::std::mem::offset_of!(XSetWindowAttributes, colormap) - 96usize];
    ["Offset of field: XSetWindowAttributes::cursor"]
        [::std::mem::offset_of!(XSetWindowAttributes, cursor) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowAttributes {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub visual: *mut Visual,
    pub root: Window,
    pub class: ::std::os::raw::c_int,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub map_installed: ::std::os::raw::c_int,
    pub map_state: ::std::os::raw::c_int,
    pub all_event_masks: ::std::os::raw::c_long,
    pub your_event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub screen: *mut Screen,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowAttributes"][::std::mem::size_of::<XWindowAttributes>() - 136usize];
    ["Alignment of XWindowAttributes"][::std::mem::align_of::<XWindowAttributes>() - 8usize];
    ["Offset of field: XWindowAttributes::x"]
        [::std::mem::offset_of!(XWindowAttributes, x) - 0usize];
    ["Offset of field: XWindowAttributes::y"]
        [::std::mem::offset_of!(XWindowAttributes, y) - 4usize];
    ["Offset of field: XWindowAttributes::width"]
        [::std::mem::offset_of!(XWindowAttributes, width) - 8usize];
    ["Offset of field: XWindowAttributes::height"]
        [::std::mem::offset_of!(XWindowAttributes, height) - 12usize];
    ["Offset of field: XWindowAttributes::border_width"]
        [::std::mem::offset_of!(XWindowAttributes, border_width) - 16usize];
    ["Offset of field: XWindowAttributes::depth"]
        [::std::mem::offset_of!(XWindowAttributes, depth) - 20usize];
    ["Offset of field: XWindowAttributes::visual"]
        [::std::mem::offset_of!(XWindowAttributes, visual) - 24usize];
    ["Offset of field: XWindowAttributes::root"]
        [::std::mem::offset_of!(XWindowAttributes, root) - 32usize];
    ["Offset of field: XWindowAttributes::class"]
        [::std::mem::offset_of!(XWindowAttributes, class) - 40usize];
    ["Offset of field: XWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, bit_gravity) - 44usize];
    ["Offset of field: XWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, win_gravity) - 48usize];
    ["Offset of field: XWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XWindowAttributes, backing_store) - 52usize];
    ["Offset of field: XWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XWindowAttributes, backing_planes) - 56usize];
    ["Offset of field: XWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XWindowAttributes, backing_pixel) - 64usize];
    ["Offset of field: XWindowAttributes::save_under"]
        [::std::mem::offset_of!(XWindowAttributes, save_under) - 72usize];
    ["Offset of field: XWindowAttributes::colormap"]
        [::std::mem::offset_of!(XWindowAttributes, colormap) - 80usize];
    ["Offset of field: XWindowAttributes::map_installed"]
        [::std::mem::offset_of!(XWindowAttributes, map_installed) - 88usize];
    ["Offset of field: XWindowAttributes::map_state"]
        [::std::mem::offset_of!(XWindowAttributes, map_state) - 92usize];
    ["Offset of field: XWindowAttributes::all_event_masks"]
        [::std::mem::offset_of!(XWindowAttributes, all_event_masks) - 96usize];
    ["Offset of field: XWindowAttributes::your_event_mask"]
        [::std::mem::offset_of!(XWindowAttributes, your_event_mask) - 104usize];
    ["Offset of field: XWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XWindowAttributes, do_not_propagate_mask) - 112usize];
    ["Offset of field: XWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XWindowAttributes, override_redirect) - 120usize];
    ["Offset of field: XWindowAttributes::screen"]
        [::std::mem::offset_of!(XWindowAttributes, screen) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XHostAddress {
    pub family: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub address: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XHostAddress"][::std::mem::size_of::<XHostAddress>() - 16usize];
    ["Alignment of XHostAddress"][::std::mem::align_of::<XHostAddress>() - 8usize];
    ["Offset of field: XHostAddress::family"]
        [::std::mem::offset_of!(XHostAddress, family) - 0usize];
    ["Offset of field: XHostAddress::length"]
        [::std::mem::offset_of!(XHostAddress, length) - 4usize];
    ["Offset of field: XHostAddress::address"]
        [::std::mem::offset_of!(XHostAddress, address) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XServerInterpretedAddress {
    pub typelength: ::std::os::raw::c_int,
    pub valuelength: ::std::os::raw::c_int,
    pub type_: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XServerInterpretedAddress"]
        [::std::mem::size_of::<XServerInterpretedAddress>() - 24usize];
    ["Alignment of XServerInterpretedAddress"]
        [::std::mem::align_of::<XServerInterpretedAddress>() - 8usize];
    ["Offset of field: XServerInterpretedAddress::typelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, typelength) - 0usize];
    ["Offset of field: XServerInterpretedAddress::valuelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, valuelength) - 4usize];
    ["Offset of field: XServerInterpretedAddress::type_"]
        [::std::mem::offset_of!(XServerInterpretedAddress, type_) - 8usize];
    ["Offset of field: XServerInterpretedAddress::value"]
        [::std::mem::offset_of!(XServerInterpretedAddress, value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub xoffset: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub bytes_per_line: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub obdata: XPointer,
    pub f: _XImage_funcs,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage_funcs {
    pub create_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XDisplay,
            arg2: *mut Visual,
            arg3: ::std::os::raw::c_uint,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_char,
            arg7: ::std::os::raw::c_uint,
            arg8: ::std::os::raw::c_uint,
            arg9: ::std::os::raw::c_int,
            arg10: ::std::os::raw::c_int,
        ) -> *mut _XImage,
    >,
    pub destroy_image:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int>,
    pub get_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub put_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub sub_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: ::std::os::raw::c_uint,
        ) -> *mut _XImage,
    >,
    pub add_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage_funcs"][::std::mem::size_of::<_XImage_funcs>() - 48usize];
    ["Alignment of _XImage_funcs"][::std::mem::align_of::<_XImage_funcs>() - 8usize];
    ["Offset of field: _XImage_funcs::create_image"]
        [::std::mem::offset_of!(_XImage_funcs, create_image) - 0usize];
    ["Offset of field: _XImage_funcs::destroy_image"]
        [::std::mem::offset_of!(_XImage_funcs, destroy_image) - 8usize];
    ["Offset of field: _XImage_funcs::get_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, get_pixel) - 16usize];
    ["Offset of field: _XImage_funcs::put_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, put_pixel) - 24usize];
    ["Offset of field: _XImage_funcs::sub_image"]
        [::std::mem::offset_of!(_XImage_funcs, sub_image) - 32usize];
    ["Offset of field: _XImage_funcs::add_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, add_pixel) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage"][::std::mem::size_of::<_XImage>() - 136usize];
    ["Alignment of _XImage"][::std::mem::align_of::<_XImage>() - 8usize];
    ["Offset of field: _XImage::width"][::std::mem::offset_of!(_XImage, width) - 0usize];
    ["Offset of field: _XImage::height"][::std::mem::offset_of!(_XImage, height) - 4usize];
    ["Offset of field: _XImage::xoffset"][::std::mem::offset_of!(_XImage, xoffset) - 8usize];
    ["Offset of field: _XImage::format"][::std::mem::offset_of!(_XImage, format) - 12usize];
    ["Offset of field: _XImage::data"][::std::mem::offset_of!(_XImage, data) - 16usize];
    ["Offset of field: _XImage::byte_order"][::std::mem::offset_of!(_XImage, byte_order) - 24usize];
    ["Offset of field: _XImage::bitmap_unit"]
        [::std::mem::offset_of!(_XImage, bitmap_unit) - 28usize];
    ["Offset of field: _XImage::bitmap_bit_order"]
        [::std::mem::offset_of!(_XImage, bitmap_bit_order) - 32usize];
    ["Offset of field: _XImage::bitmap_pad"][::std::mem::offset_of!(_XImage, bitmap_pad) - 36usize];
    ["Offset of field: _XImage::depth"][::std::mem::offset_of!(_XImage, depth) - 40usize];
    ["Offset of field: _XImage::bytes_per_line"]
        [::std::mem::offset_of!(_XImage, bytes_per_line) - 44usize];
    ["Offset of field: _XImage::bits_per_pixel"]
        [::std::mem::offset_of!(_XImage, bits_per_pixel) - 48usize];
    ["Offset of field: _XImage::red_mask"][::std::mem::offset_of!(_XImage, red_mask) - 56usize];
    ["Offset of field: _XImage::green_mask"][::std::mem::offset_of!(_XImage, green_mask) - 64usize];
    ["Offset of field: _XImage::blue_mask"][::std::mem::offset_of!(_XImage, blue_mask) - 72usize];
    ["Offset of field: _XImage::obdata"][::std::mem::offset_of!(_XImage, obdata) - 80usize];
    ["Offset of field: _XImage::f"][::std::mem::offset_of!(_XImage, f) - 88usize];
};
pub type XImage = _XImage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowChanges {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub sibling: Window,
    pub stack_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowChanges"][::std::mem::size_of::<XWindowChanges>() - 40usize];
    ["Alignment of XWindowChanges"][::std::mem::align_of::<XWindowChanges>() - 8usize];
    ["Offset of field: XWindowChanges::x"][::std::mem::offset_of!(XWindowChanges, x) - 0usize];
    ["Offset of field: XWindowChanges::y"][::std::mem::offset_of!(XWindowChanges, y) - 4usize];
    ["Offset of field: XWindowChanges::width"]
        [::std::mem::offset_of!(XWindowChanges, width) - 8usize];
    ["Offset of field: XWindowChanges::height"]
        [::std::mem::offset_of!(XWindowChanges, height) - 12usize];
    ["Offset of field: XWindowChanges::border_width"]
        [::std::mem::offset_of!(XWindowChanges, border_width) - 16usize];
    ["Offset of field: XWindowChanges::sibling"]
        [::std::mem::offset_of!(XWindowChanges, sibling) - 24usize];
    ["Offset of field: XWindowChanges::stack_mode"]
        [::std::mem::offset_of!(XWindowChanges, stack_mode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColor {
    pub pixel: ::std::os::raw::c_ulong,
    pub red: ::std::os::raw::c_ushort,
    pub green: ::std::os::raw::c_ushort,
    pub blue: ::std::os::raw::c_ushort,
    pub flags: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColor"][::std::mem::size_of::<XColor>() - 16usize];
    ["Alignment of XColor"][::std::mem::align_of::<XColor>() - 8usize];
    ["Offset of field: XColor::pixel"][::std::mem::offset_of!(XColor, pixel) - 0usize];
    ["Offset of field: XColor::red"][::std::mem::offset_of!(XColor, red) - 8usize];
    ["Offset of field: XColor::green"][::std::mem::offset_of!(XColor, green) - 10usize];
    ["Offset of field: XColor::blue"][::std::mem::offset_of!(XColor, blue) - 12usize];
    ["Offset of field: XColor::flags"][::std::mem::offset_of!(XColor, flags) - 14usize];
    ["Offset of field: XColor::pad"][::std::mem::offset_of!(XColor, pad) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSegment {
    pub x1: ::std::os::raw::c_short,
    pub y1: ::std::os::raw::c_short,
    pub x2: ::std::os::raw::c_short,
    pub y2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSegment"][::std::mem::size_of::<XSegment>() - 8usize];
    ["Alignment of XSegment"][::std::mem::align_of::<XSegment>() - 2usize];
    ["Offset of field: XSegment::x1"][::std::mem::offset_of!(XSegment, x1) - 0usize];
    ["Offset of field: XSegment::y1"][::std::mem::offset_of!(XSegment, y1) - 2usize];
    ["Offset of field: XSegment::x2"][::std::mem::offset_of!(XSegment, x2) - 4usize];
    ["Offset of field: XSegment::y2"][::std::mem::offset_of!(XSegment, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPoint {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPoint"][::std::mem::size_of::<XPoint>() - 4usize];
    ["Alignment of XPoint"][::std::mem::align_of::<XPoint>() - 2usize];
    ["Offset of field: XPoint::x"][::std::mem::offset_of!(XPoint, x) - 0usize];
    ["Offset of field: XPoint::y"][::std::mem::offset_of!(XPoint, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRectangle {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRectangle"][::std::mem::size_of::<XRectangle>() - 8usize];
    ["Alignment of XRectangle"][::std::mem::align_of::<XRectangle>() - 2usize];
    ["Offset of field: XRectangle::x"][::std::mem::offset_of!(XRectangle, x) - 0usize];
    ["Offset of field: XRectangle::y"][::std::mem::offset_of!(XRectangle, y) - 2usize];
    ["Offset of field: XRectangle::width"][::std::mem::offset_of!(XRectangle, width) - 4usize];
    ["Offset of field: XRectangle::height"][::std::mem::offset_of!(XRectangle, height) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XArc {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub angle1: ::std::os::raw::c_short,
    pub angle2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XArc"][::std::mem::size_of::<XArc>() - 12usize];
    ["Alignment of XArc"][::std::mem::align_of::<XArc>() - 2usize];
    ["Offset of field: XArc::x"][::std::mem::offset_of!(XArc, x) - 0usize];
    ["Offset of field: XArc::y"][::std::mem::offset_of!(XArc, y) - 2usize];
    ["Offset of field: XArc::width"][::std::mem::offset_of!(XArc, width) - 4usize];
    ["Offset of field: XArc::height"][::std::mem::offset_of!(XArc, height) - 6usize];
    ["Offset of field: XArc::angle1"][::std::mem::offset_of!(XArc, angle1) - 8usize];
    ["Offset of field: XArc::angle2"][::std::mem::offset_of!(XArc, angle2) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardControl {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_int,
    pub bell_duration: ::std::os::raw::c_int,
    pub led: ::std::os::raw::c_int,
    pub led_mode: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub auto_repeat_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardControl"][::std::mem::size_of::<XKeyboardControl>() - 32usize];
    ["Alignment of XKeyboardControl"][::std::mem::align_of::<XKeyboardControl>() - 4usize];
    ["Offset of field: XKeyboardControl::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardControl, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardControl::bell_percent"]
        [::std::mem::offset_of!(XKeyboardControl, bell_percent) - 4usize];
    ["Offset of field: XKeyboardControl::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardControl, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardControl::bell_duration"]
        [::std::mem::offset_of!(XKeyboardControl, bell_duration) - 12usize];
    ["Offset of field: XKeyboardControl::led"]
        [::std::mem::offset_of!(XKeyboardControl, led) - 16usize];
    ["Offset of field: XKeyboardControl::led_mode"]
        [::std::mem::offset_of!(XKeyboardControl, led_mode) - 20usize];
    ["Offset of field: XKeyboardControl::key"]
        [::std::mem::offset_of!(XKeyboardControl, key) - 24usize];
    ["Offset of field: XKeyboardControl::auto_repeat_mode"]
        [::std::mem::offset_of!(XKeyboardControl, auto_repeat_mode) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardState {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_uint,
    pub bell_duration: ::std::os::raw::c_uint,
    pub led_mask: ::std::os::raw::c_ulong,
    pub global_auto_repeat: ::std::os::raw::c_int,
    pub auto_repeats: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardState"][::std::mem::size_of::<XKeyboardState>() - 64usize];
    ["Alignment of XKeyboardState"][::std::mem::align_of::<XKeyboardState>() - 8usize];
    ["Offset of field: XKeyboardState::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardState, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardState::bell_percent"]
        [::std::mem::offset_of!(XKeyboardState, bell_percent) - 4usize];
    ["Offset of field: XKeyboardState::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardState, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardState::bell_duration"]
        [::std::mem::offset_of!(XKeyboardState, bell_duration) - 12usize];
    ["Offset of field: XKeyboardState::led_mask"]
        [::std::mem::offset_of!(XKeyboardState, led_mask) - 16usize];
    ["Offset of field: XKeyboardState::global_auto_repeat"]
        [::std::mem::offset_of!(XKeyboardState, global_auto_repeat) - 24usize];
    ["Offset of field: XKeyboardState::auto_repeats"]
        [::std::mem::offset_of!(XKeyboardState, auto_repeats) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTimeCoord {
    pub time: Time,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTimeCoord"][::std::mem::size_of::<XTimeCoord>() - 16usize];
    ["Alignment of XTimeCoord"][::std::mem::align_of::<XTimeCoord>() - 8usize];
    ["Offset of field: XTimeCoord::time"][::std::mem::offset_of!(XTimeCoord, time) - 0usize];
    ["Offset of field: XTimeCoord::x"][::std::mem::offset_of!(XTimeCoord, x) - 8usize];
    ["Offset of field: XTimeCoord::y"][::std::mem::offset_of!(XTimeCoord, y) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XModifierKeymap {
    pub max_keypermod: ::std::os::raw::c_int,
    pub modifiermap: *mut KeyCode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XModifierKeymap"][::std::mem::size_of::<XModifierKeymap>() - 16usize];
    ["Alignment of XModifierKeymap"][::std::mem::align_of::<XModifierKeymap>() - 8usize];
    ["Offset of field: XModifierKeymap::max_keypermod"]
        [::std::mem::offset_of!(XModifierKeymap, max_keypermod) - 0usize];
    ["Offset of field: XModifierKeymap::modifiermap"]
        [::std::mem::offset_of!(XModifierKeymap, modifiermap) - 8usize];
};
pub type XDisplay = _XDisplay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XrmHashBucketRec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub ext_data: *mut XExtData,
    pub private1: *mut _XPrivate,
    pub fd: ::std::os::raw::c_int,
    pub private2: ::std::os::raw::c_int,
    pub proto_major_version: ::std::os::raw::c_int,
    pub proto_minor_version: ::std::os::raw::c_int,
    pub vendor: *mut ::std::os::raw::c_char,
    pub private3: XID,
    pub private4: XID,
    pub private5: XID,
    pub private6: ::std::os::raw::c_int,
    pub resource_alloc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID>,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub nformats: ::std::os::raw::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub private8: ::std::os::raw::c_int,
    pub release: ::std::os::raw::c_int,
    pub private9: *mut _XPrivate,
    pub private10: *mut _XPrivate,
    pub qlen: ::std::os::raw::c_int,
    pub last_request_read: ::std::os::raw::c_ulong,
    pub request: ::std::os::raw::c_ulong,
    pub private11: XPointer,
    pub private12: XPointer,
    pub private13: XPointer,
    pub private14: XPointer,
    pub max_request_size: ::std::os::raw::c_uint,
    pub db: *mut _XrmHashBucketRec,
    pub private15:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int>,
    pub display_name: *mut ::std::os::raw::c_char,
    pub default_screen: ::std::os::raw::c_int,
    pub nscreens: ::std::os::raw::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::std::os::raw::c_ulong,
    pub private16: ::std::os::raw::c_ulong,
    pub min_keycode: ::std::os::raw::c_int,
    pub max_keycode: ::std::os::raw::c_int,
    pub private17: XPointer,
    pub private18: XPointer,
    pub private19: ::std::os::raw::c_int,
    pub xdefaults: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_11"][::std::mem::size_of::<_bindgen_ty_11>() - 296usize];
    ["Alignment of _bindgen_ty_11"][::std::mem::align_of::<_bindgen_ty_11>() - 8usize];
    ["Offset of field: _bindgen_ty_11::ext_data"]
        [::std::mem::offset_of!(_bindgen_ty_11, ext_data) - 0usize];
    ["Offset of field: _bindgen_ty_11::private1"]
        [::std::mem::offset_of!(_bindgen_ty_11, private1) - 8usize];
    ["Offset of field: _bindgen_ty_11::fd"][::std::mem::offset_of!(_bindgen_ty_11, fd) - 16usize];
    ["Offset of field: _bindgen_ty_11::private2"]
        [::std::mem::offset_of!(_bindgen_ty_11, private2) - 20usize];
    ["Offset of field: _bindgen_ty_11::proto_major_version"]
        [::std::mem::offset_of!(_bindgen_ty_11, proto_major_version) - 24usize];
    ["Offset of field: _bindgen_ty_11::proto_minor_version"]
        [::std::mem::offset_of!(_bindgen_ty_11, proto_minor_version) - 28usize];
    ["Offset of field: _bindgen_ty_11::vendor"]
        [::std::mem::offset_of!(_bindgen_ty_11, vendor) - 32usize];
    ["Offset of field: _bindgen_ty_11::private3"]
        [::std::mem::offset_of!(_bindgen_ty_11, private3) - 40usize];
    ["Offset of field: _bindgen_ty_11::private4"]
        [::std::mem::offset_of!(_bindgen_ty_11, private4) - 48usize];
    ["Offset of field: _bindgen_ty_11::private5"]
        [::std::mem::offset_of!(_bindgen_ty_11, private5) - 56usize];
    ["Offset of field: _bindgen_ty_11::private6"]
        [::std::mem::offset_of!(_bindgen_ty_11, private6) - 64usize];
    ["Offset of field: _bindgen_ty_11::resource_alloc"]
        [::std::mem::offset_of!(_bindgen_ty_11, resource_alloc) - 72usize];
    ["Offset of field: _bindgen_ty_11::byte_order"]
        [::std::mem::offset_of!(_bindgen_ty_11, byte_order) - 80usize];
    ["Offset of field: _bindgen_ty_11::bitmap_unit"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_unit) - 84usize];
    ["Offset of field: _bindgen_ty_11::bitmap_pad"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_pad) - 88usize];
    ["Offset of field: _bindgen_ty_11::bitmap_bit_order"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_bit_order) - 92usize];
    ["Offset of field: _bindgen_ty_11::nformats"]
        [::std::mem::offset_of!(_bindgen_ty_11, nformats) - 96usize];
    ["Offset of field: _bindgen_ty_11::pixmap_format"]
        [::std::mem::offset_of!(_bindgen_ty_11, pixmap_format) - 104usize];
    ["Offset of field: _bindgen_ty_11::private8"]
        [::std::mem::offset_of!(_bindgen_ty_11, private8) - 112usize];
    ["Offset of field: _bindgen_ty_11::release"]
        [::std::mem::offset_of!(_bindgen_ty_11, release) - 116usize];
    ["Offset of field: _bindgen_ty_11::private9"]
        [::std::mem::offset_of!(_bindgen_ty_11, private9) - 120usize];
    ["Offset of field: _bindgen_ty_11::private10"]
        [::std::mem::offset_of!(_bindgen_ty_11, private10) - 128usize];
    ["Offset of field: _bindgen_ty_11::qlen"]
        [::std::mem::offset_of!(_bindgen_ty_11, qlen) - 136usize];
    ["Offset of field: _bindgen_ty_11::last_request_read"]
        [::std::mem::offset_of!(_bindgen_ty_11, last_request_read) - 144usize];
    ["Offset of field: _bindgen_ty_11::request"]
        [::std::mem::offset_of!(_bindgen_ty_11, request) - 152usize];
    ["Offset of field: _bindgen_ty_11::private11"]
        [::std::mem::offset_of!(_bindgen_ty_11, private11) - 160usize];
    ["Offset of field: _bindgen_ty_11::private12"]
        [::std::mem::offset_of!(_bindgen_ty_11, private12) - 168usize];
    ["Offset of field: _bindgen_ty_11::private13"]
        [::std::mem::offset_of!(_bindgen_ty_11, private13) - 176usize];
    ["Offset of field: _bindgen_ty_11::private14"]
        [::std::mem::offset_of!(_bindgen_ty_11, private14) - 184usize];
    ["Offset of field: _bindgen_ty_11::max_request_size"]
        [::std::mem::offset_of!(_bindgen_ty_11, max_request_size) - 192usize];
    ["Offset of field: _bindgen_ty_11::db"][::std::mem::offset_of!(_bindgen_ty_11, db) - 200usize];
    ["Offset of field: _bindgen_ty_11::private15"]
        [::std::mem::offset_of!(_bindgen_ty_11, private15) - 208usize];
    ["Offset of field: _bindgen_ty_11::display_name"]
        [::std::mem::offset_of!(_bindgen_ty_11, display_name) - 216usize];
    ["Offset of field: _bindgen_ty_11::default_screen"]
        [::std::mem::offset_of!(_bindgen_ty_11, default_screen) - 224usize];
    ["Offset of field: _bindgen_ty_11::nscreens"]
        [::std::mem::offset_of!(_bindgen_ty_11, nscreens) - 228usize];
    ["Offset of field: _bindgen_ty_11::screens"]
        [::std::mem::offset_of!(_bindgen_ty_11, screens) - 232usize];
    ["Offset of field: _bindgen_ty_11::motion_buffer"]
        [::std::mem::offset_of!(_bindgen_ty_11, motion_buffer) - 240usize];
    ["Offset of field: _bindgen_ty_11::private16"]
        [::std::mem::offset_of!(_bindgen_ty_11, private16) - 248usize];
    ["Offset of field: _bindgen_ty_11::min_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_11, min_keycode) - 256usize];
    ["Offset of field: _bindgen_ty_11::max_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_11, max_keycode) - 260usize];
    ["Offset of field: _bindgen_ty_11::private17"]
        [::std::mem::offset_of!(_bindgen_ty_11, private17) - 264usize];
    ["Offset of field: _bindgen_ty_11::private18"]
        [::std::mem::offset_of!(_bindgen_ty_11, private18) - 272usize];
    ["Offset of field: _bindgen_ty_11::private19"]
        [::std::mem::offset_of!(_bindgen_ty_11, private19) - 280usize];
    ["Offset of field: _bindgen_ty_11::xdefaults"]
        [::std::mem::offset_of!(_bindgen_ty_11, xdefaults) - 288usize];
};
pub type _XPrivDisplay = *mut _bindgen_ty_11;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyEvent"][::std::mem::size_of::<XKeyEvent>() - 96usize];
    ["Alignment of XKeyEvent"][::std::mem::align_of::<XKeyEvent>() - 8usize];
    ["Offset of field: XKeyEvent::type_"][::std::mem::offset_of!(XKeyEvent, type_) - 0usize];
    ["Offset of field: XKeyEvent::serial"][::std::mem::offset_of!(XKeyEvent, serial) - 8usize];
    ["Offset of field: XKeyEvent::send_event"]
        [::std::mem::offset_of!(XKeyEvent, send_event) - 16usize];
    ["Offset of field: XKeyEvent::display"][::std::mem::offset_of!(XKeyEvent, display) - 24usize];
    ["Offset of field: XKeyEvent::window"][::std::mem::offset_of!(XKeyEvent, window) - 32usize];
    ["Offset of field: XKeyEvent::root"][::std::mem::offset_of!(XKeyEvent, root) - 40usize];
    ["Offset of field: XKeyEvent::subwindow"]
        [::std::mem::offset_of!(XKeyEvent, subwindow) - 48usize];
    ["Offset of field: XKeyEvent::time"][::std::mem::offset_of!(XKeyEvent, time) - 56usize];
    ["Offset of field: XKeyEvent::x"][::std::mem::offset_of!(XKeyEvent, x) - 64usize];
    ["Offset of field: XKeyEvent::y"][::std::mem::offset_of!(XKeyEvent, y) - 68usize];
    ["Offset of field: XKeyEvent::x_root"][::std::mem::offset_of!(XKeyEvent, x_root) - 72usize];
    ["Offset of field: XKeyEvent::y_root"][::std::mem::offset_of!(XKeyEvent, y_root) - 76usize];
    ["Offset of field: XKeyEvent::state"][::std::mem::offset_of!(XKeyEvent, state) - 80usize];
    ["Offset of field: XKeyEvent::keycode"][::std::mem::offset_of!(XKeyEvent, keycode) - 84usize];
    ["Offset of field: XKeyEvent::same_screen"]
        [::std::mem::offset_of!(XKeyEvent, same_screen) - 88usize];
};
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonEvent"][::std::mem::size_of::<XButtonEvent>() - 96usize];
    ["Alignment of XButtonEvent"][::std::mem::align_of::<XButtonEvent>() - 8usize];
    ["Offset of field: XButtonEvent::type_"][::std::mem::offset_of!(XButtonEvent, type_) - 0usize];
    ["Offset of field: XButtonEvent::serial"]
        [::std::mem::offset_of!(XButtonEvent, serial) - 8usize];
    ["Offset of field: XButtonEvent::send_event"]
        [::std::mem::offset_of!(XButtonEvent, send_event) - 16usize];
    ["Offset of field: XButtonEvent::display"]
        [::std::mem::offset_of!(XButtonEvent, display) - 24usize];
    ["Offset of field: XButtonEvent::window"]
        [::std::mem::offset_of!(XButtonEvent, window) - 32usize];
    ["Offset of field: XButtonEvent::root"][::std::mem::offset_of!(XButtonEvent, root) - 40usize];
    ["Offset of field: XButtonEvent::subwindow"]
        [::std::mem::offset_of!(XButtonEvent, subwindow) - 48usize];
    ["Offset of field: XButtonEvent::time"][::std::mem::offset_of!(XButtonEvent, time) - 56usize];
    ["Offset of field: XButtonEvent::x"][::std::mem::offset_of!(XButtonEvent, x) - 64usize];
    ["Offset of field: XButtonEvent::y"][::std::mem::offset_of!(XButtonEvent, y) - 68usize];
    ["Offset of field: XButtonEvent::x_root"]
        [::std::mem::offset_of!(XButtonEvent, x_root) - 72usize];
    ["Offset of field: XButtonEvent::y_root"]
        [::std::mem::offset_of!(XButtonEvent, y_root) - 76usize];
    ["Offset of field: XButtonEvent::state"][::std::mem::offset_of!(XButtonEvent, state) - 80usize];
    ["Offset of field: XButtonEvent::button"]
        [::std::mem::offset_of!(XButtonEvent, button) - 84usize];
    ["Offset of field: XButtonEvent::same_screen"]
        [::std::mem::offset_of!(XButtonEvent, same_screen) - 88usize];
};
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMotionEvent"][::std::mem::size_of::<XMotionEvent>() - 96usize];
    ["Alignment of XMotionEvent"][::std::mem::align_of::<XMotionEvent>() - 8usize];
    ["Offset of field: XMotionEvent::type_"][::std::mem::offset_of!(XMotionEvent, type_) - 0usize];
    ["Offset of field: XMotionEvent::serial"]
        [::std::mem::offset_of!(XMotionEvent, serial) - 8usize];
    ["Offset of field: XMotionEvent::send_event"]
        [::std::mem::offset_of!(XMotionEvent, send_event) - 16usize];
    ["Offset of field: XMotionEvent::display"]
        [::std::mem::offset_of!(XMotionEvent, display) - 24usize];
    ["Offset of field: XMotionEvent::window"]
        [::std::mem::offset_of!(XMotionEvent, window) - 32usize];
    ["Offset of field: XMotionEvent::root"][::std::mem::offset_of!(XMotionEvent, root) - 40usize];
    ["Offset of field: XMotionEvent::subwindow"]
        [::std::mem::offset_of!(XMotionEvent, subwindow) - 48usize];
    ["Offset of field: XMotionEvent::time"][::std::mem::offset_of!(XMotionEvent, time) - 56usize];
    ["Offset of field: XMotionEvent::x"][::std::mem::offset_of!(XMotionEvent, x) - 64usize];
    ["Offset of field: XMotionEvent::y"][::std::mem::offset_of!(XMotionEvent, y) - 68usize];
    ["Offset of field: XMotionEvent::x_root"]
        [::std::mem::offset_of!(XMotionEvent, x_root) - 72usize];
    ["Offset of field: XMotionEvent::y_root"]
        [::std::mem::offset_of!(XMotionEvent, y_root) - 76usize];
    ["Offset of field: XMotionEvent::state"][::std::mem::offset_of!(XMotionEvent, state) - 80usize];
    ["Offset of field: XMotionEvent::is_hint"]
        [::std::mem::offset_of!(XMotionEvent, is_hint) - 84usize];
    ["Offset of field: XMotionEvent::same_screen"]
        [::std::mem::offset_of!(XMotionEvent, same_screen) - 88usize];
};
pub type XPointerMovedEvent = XMotionEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCrossingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub same_screen: ::std::os::raw::c_int,
    pub focus: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCrossingEvent"][::std::mem::size_of::<XCrossingEvent>() - 104usize];
    ["Alignment of XCrossingEvent"][::std::mem::align_of::<XCrossingEvent>() - 8usize];
    ["Offset of field: XCrossingEvent::type_"]
        [::std::mem::offset_of!(XCrossingEvent, type_) - 0usize];
    ["Offset of field: XCrossingEvent::serial"]
        [::std::mem::offset_of!(XCrossingEvent, serial) - 8usize];
    ["Offset of field: XCrossingEvent::send_event"]
        [::std::mem::offset_of!(XCrossingEvent, send_event) - 16usize];
    ["Offset of field: XCrossingEvent::display"]
        [::std::mem::offset_of!(XCrossingEvent, display) - 24usize];
    ["Offset of field: XCrossingEvent::window"]
        [::std::mem::offset_of!(XCrossingEvent, window) - 32usize];
    ["Offset of field: XCrossingEvent::root"]
        [::std::mem::offset_of!(XCrossingEvent, root) - 40usize];
    ["Offset of field: XCrossingEvent::subwindow"]
        [::std::mem::offset_of!(XCrossingEvent, subwindow) - 48usize];
    ["Offset of field: XCrossingEvent::time"]
        [::std::mem::offset_of!(XCrossingEvent, time) - 56usize];
    ["Offset of field: XCrossingEvent::x"][::std::mem::offset_of!(XCrossingEvent, x) - 64usize];
    ["Offset of field: XCrossingEvent::y"][::std::mem::offset_of!(XCrossingEvent, y) - 68usize];
    ["Offset of field: XCrossingEvent::x_root"]
        [::std::mem::offset_of!(XCrossingEvent, x_root) - 72usize];
    ["Offset of field: XCrossingEvent::y_root"]
        [::std::mem::offset_of!(XCrossingEvent, y_root) - 76usize];
    ["Offset of field: XCrossingEvent::mode"]
        [::std::mem::offset_of!(XCrossingEvent, mode) - 80usize];
    ["Offset of field: XCrossingEvent::detail"]
        [::std::mem::offset_of!(XCrossingEvent, detail) - 84usize];
    ["Offset of field: XCrossingEvent::same_screen"]
        [::std::mem::offset_of!(XCrossingEvent, same_screen) - 88usize];
    ["Offset of field: XCrossingEvent::focus"]
        [::std::mem::offset_of!(XCrossingEvent, focus) - 92usize];
    ["Offset of field: XCrossingEvent::state"]
        [::std::mem::offset_of!(XCrossingEvent, state) - 96usize];
};
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFocusChangeEvent"][::std::mem::size_of::<XFocusChangeEvent>() - 48usize];
    ["Alignment of XFocusChangeEvent"][::std::mem::align_of::<XFocusChangeEvent>() - 8usize];
    ["Offset of field: XFocusChangeEvent::type_"]
        [::std::mem::offset_of!(XFocusChangeEvent, type_) - 0usize];
    ["Offset of field: XFocusChangeEvent::serial"]
        [::std::mem::offset_of!(XFocusChangeEvent, serial) - 8usize];
    ["Offset of field: XFocusChangeEvent::send_event"]
        [::std::mem::offset_of!(XFocusChangeEvent, send_event) - 16usize];
    ["Offset of field: XFocusChangeEvent::display"]
        [::std::mem::offset_of!(XFocusChangeEvent, display) - 24usize];
    ["Offset of field: XFocusChangeEvent::window"]
        [::std::mem::offset_of!(XFocusChangeEvent, window) - 32usize];
    ["Offset of field: XFocusChangeEvent::mode"]
        [::std::mem::offset_of!(XFocusChangeEvent, mode) - 40usize];
    ["Offset of field: XFocusChangeEvent::detail"]
        [::std::mem::offset_of!(XFocusChangeEvent, detail) - 44usize];
};
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeymapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub key_vector: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeymapEvent"][::std::mem::size_of::<XKeymapEvent>() - 72usize];
    ["Alignment of XKeymapEvent"][::std::mem::align_of::<XKeymapEvent>() - 8usize];
    ["Offset of field: XKeymapEvent::type_"][::std::mem::offset_of!(XKeymapEvent, type_) - 0usize];
    ["Offset of field: XKeymapEvent::serial"]
        [::std::mem::offset_of!(XKeymapEvent, serial) - 8usize];
    ["Offset of field: XKeymapEvent::send_event"]
        [::std::mem::offset_of!(XKeymapEvent, send_event) - 16usize];
    ["Offset of field: XKeymapEvent::display"]
        [::std::mem::offset_of!(XKeymapEvent, display) - 24usize];
    ["Offset of field: XKeymapEvent::window"]
        [::std::mem::offset_of!(XKeymapEvent, window) - 32usize];
    ["Offset of field: XKeymapEvent::key_vector"]
        [::std::mem::offset_of!(XKeymapEvent, key_vector) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExposeEvent"][::std::mem::size_of::<XExposeEvent>() - 64usize];
    ["Alignment of XExposeEvent"][::std::mem::align_of::<XExposeEvent>() - 8usize];
    ["Offset of field: XExposeEvent::type_"][::std::mem::offset_of!(XExposeEvent, type_) - 0usize];
    ["Offset of field: XExposeEvent::serial"]
        [::std::mem::offset_of!(XExposeEvent, serial) - 8usize];
    ["Offset of field: XExposeEvent::send_event"]
        [::std::mem::offset_of!(XExposeEvent, send_event) - 16usize];
    ["Offset of field: XExposeEvent::display"]
        [::std::mem::offset_of!(XExposeEvent, display) - 24usize];
    ["Offset of field: XExposeEvent::window"]
        [::std::mem::offset_of!(XExposeEvent, window) - 32usize];
    ["Offset of field: XExposeEvent::x"][::std::mem::offset_of!(XExposeEvent, x) - 40usize];
    ["Offset of field: XExposeEvent::y"][::std::mem::offset_of!(XExposeEvent, y) - 44usize];
    ["Offset of field: XExposeEvent::width"][::std::mem::offset_of!(XExposeEvent, width) - 48usize];
    ["Offset of field: XExposeEvent::height"]
        [::std::mem::offset_of!(XExposeEvent, height) - 52usize];
    ["Offset of field: XExposeEvent::count"][::std::mem::offset_of!(XExposeEvent, count) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGraphicsExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub drawable: Drawable,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGraphicsExposeEvent"][::std::mem::size_of::<XGraphicsExposeEvent>() - 72usize];
    ["Alignment of XGraphicsExposeEvent"][::std::mem::align_of::<XGraphicsExposeEvent>() - 8usize];
    ["Offset of field: XGraphicsExposeEvent::type_"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, type_) - 0usize];
    ["Offset of field: XGraphicsExposeEvent::serial"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, serial) - 8usize];
    ["Offset of field: XGraphicsExposeEvent::send_event"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, send_event) - 16usize];
    ["Offset of field: XGraphicsExposeEvent::display"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, display) - 24usize];
    ["Offset of field: XGraphicsExposeEvent::drawable"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, drawable) - 32usize];
    ["Offset of field: XGraphicsExposeEvent::x"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, x) - 40usize];
    ["Offset of field: XGraphicsExposeEvent::y"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, y) - 44usize];
    ["Offset of field: XGraphicsExposeEvent::width"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, width) - 48usize];
    ["Offset of field: XGraphicsExposeEvent::height"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, height) - 52usize];
    ["Offset of field: XGraphicsExposeEvent::count"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, count) - 56usize];
    ["Offset of field: XGraphicsExposeEvent::major_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, major_code) - 60usize];
    ["Offset of field: XGraphicsExposeEvent::minor_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, minor_code) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XNoExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub drawable: Drawable,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XNoExposeEvent"][::std::mem::size_of::<XNoExposeEvent>() - 48usize];
    ["Alignment of XNoExposeEvent"][::std::mem::align_of::<XNoExposeEvent>() - 8usize];
    ["Offset of field: XNoExposeEvent::type_"]
        [::std::mem::offset_of!(XNoExposeEvent, type_) - 0usize];
    ["Offset of field: XNoExposeEvent::serial"]
        [::std::mem::offset_of!(XNoExposeEvent, serial) - 8usize];
    ["Offset of field: XNoExposeEvent::send_event"]
        [::std::mem::offset_of!(XNoExposeEvent, send_event) - 16usize];
    ["Offset of field: XNoExposeEvent::display"]
        [::std::mem::offset_of!(XNoExposeEvent, display) - 24usize];
    ["Offset of field: XNoExposeEvent::drawable"]
        [::std::mem::offset_of!(XNoExposeEvent, drawable) - 32usize];
    ["Offset of field: XNoExposeEvent::major_code"]
        [::std::mem::offset_of!(XNoExposeEvent, major_code) - 40usize];
    ["Offset of field: XNoExposeEvent::minor_code"]
        [::std::mem::offset_of!(XNoExposeEvent, minor_code) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XVisibilityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XVisibilityEvent"][::std::mem::size_of::<XVisibilityEvent>() - 48usize];
    ["Alignment of XVisibilityEvent"][::std::mem::align_of::<XVisibilityEvent>() - 8usize];
    ["Offset of field: XVisibilityEvent::type_"]
        [::std::mem::offset_of!(XVisibilityEvent, type_) - 0usize];
    ["Offset of field: XVisibilityEvent::serial"]
        [::std::mem::offset_of!(XVisibilityEvent, serial) - 8usize];
    ["Offset of field: XVisibilityEvent::send_event"]
        [::std::mem::offset_of!(XVisibilityEvent, send_event) - 16usize];
    ["Offset of field: XVisibilityEvent::display"]
        [::std::mem::offset_of!(XVisibilityEvent, display) - 24usize];
    ["Offset of field: XVisibilityEvent::window"]
        [::std::mem::offset_of!(XVisibilityEvent, window) - 32usize];
    ["Offset of field: XVisibilityEvent::state"]
        [::std::mem::offset_of!(XVisibilityEvent, state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCreateWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCreateWindowEvent"][::std::mem::size_of::<XCreateWindowEvent>() - 72usize];
    ["Alignment of XCreateWindowEvent"][::std::mem::align_of::<XCreateWindowEvent>() - 8usize];
    ["Offset of field: XCreateWindowEvent::type_"]
        [::std::mem::offset_of!(XCreateWindowEvent, type_) - 0usize];
    ["Offset of field: XCreateWindowEvent::serial"]
        [::std::mem::offset_of!(XCreateWindowEvent, serial) - 8usize];
    ["Offset of field: XCreateWindowEvent::send_event"]
        [::std::mem::offset_of!(XCreateWindowEvent, send_event) - 16usize];
    ["Offset of field: XCreateWindowEvent::display"]
        [::std::mem::offset_of!(XCreateWindowEvent, display) - 24usize];
    ["Offset of field: XCreateWindowEvent::parent"]
        [::std::mem::offset_of!(XCreateWindowEvent, parent) - 32usize];
    ["Offset of field: XCreateWindowEvent::window"]
        [::std::mem::offset_of!(XCreateWindowEvent, window) - 40usize];
    ["Offset of field: XCreateWindowEvent::x"]
        [::std::mem::offset_of!(XCreateWindowEvent, x) - 48usize];
    ["Offset of field: XCreateWindowEvent::y"]
        [::std::mem::offset_of!(XCreateWindowEvent, y) - 52usize];
    ["Offset of field: XCreateWindowEvent::width"]
        [::std::mem::offset_of!(XCreateWindowEvent, width) - 56usize];
    ["Offset of field: XCreateWindowEvent::height"]
        [::std::mem::offset_of!(XCreateWindowEvent, height) - 60usize];
    ["Offset of field: XCreateWindowEvent::border_width"]
        [::std::mem::offset_of!(XCreateWindowEvent, border_width) - 64usize];
    ["Offset of field: XCreateWindowEvent::override_redirect"]
        [::std::mem::offset_of!(XCreateWindowEvent, override_redirect) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDestroyWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDestroyWindowEvent"][::std::mem::size_of::<XDestroyWindowEvent>() - 48usize];
    ["Alignment of XDestroyWindowEvent"][::std::mem::align_of::<XDestroyWindowEvent>() - 8usize];
    ["Offset of field: XDestroyWindowEvent::type_"]
        [::std::mem::offset_of!(XDestroyWindowEvent, type_) - 0usize];
    ["Offset of field: XDestroyWindowEvent::serial"]
        [::std::mem::offset_of!(XDestroyWindowEvent, serial) - 8usize];
    ["Offset of field: XDestroyWindowEvent::send_event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, send_event) - 16usize];
    ["Offset of field: XDestroyWindowEvent::display"]
        [::std::mem::offset_of!(XDestroyWindowEvent, display) - 24usize];
    ["Offset of field: XDestroyWindowEvent::event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, event) - 32usize];
    ["Offset of field: XDestroyWindowEvent::window"]
        [::std::mem::offset_of!(XDestroyWindowEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XUnmapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XUnmapEvent"][::std::mem::size_of::<XUnmapEvent>() - 56usize];
    ["Alignment of XUnmapEvent"][::std::mem::align_of::<XUnmapEvent>() - 8usize];
    ["Offset of field: XUnmapEvent::type_"][::std::mem::offset_of!(XUnmapEvent, type_) - 0usize];
    ["Offset of field: XUnmapEvent::serial"][::std::mem::offset_of!(XUnmapEvent, serial) - 8usize];
    ["Offset of field: XUnmapEvent::send_event"]
        [::std::mem::offset_of!(XUnmapEvent, send_event) - 16usize];
    ["Offset of field: XUnmapEvent::display"]
        [::std::mem::offset_of!(XUnmapEvent, display) - 24usize];
    ["Offset of field: XUnmapEvent::event"][::std::mem::offset_of!(XUnmapEvent, event) - 32usize];
    ["Offset of field: XUnmapEvent::window"][::std::mem::offset_of!(XUnmapEvent, window) - 40usize];
    ["Offset of field: XUnmapEvent::from_configure"]
        [::std::mem::offset_of!(XUnmapEvent, from_configure) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapEvent"][::std::mem::size_of::<XMapEvent>() - 56usize];
    ["Alignment of XMapEvent"][::std::mem::align_of::<XMapEvent>() - 8usize];
    ["Offset of field: XMapEvent::type_"][::std::mem::offset_of!(XMapEvent, type_) - 0usize];
    ["Offset of field: XMapEvent::serial"][::std::mem::offset_of!(XMapEvent, serial) - 8usize];
    ["Offset of field: XMapEvent::send_event"]
        [::std::mem::offset_of!(XMapEvent, send_event) - 16usize];
    ["Offset of field: XMapEvent::display"][::std::mem::offset_of!(XMapEvent, display) - 24usize];
    ["Offset of field: XMapEvent::event"][::std::mem::offset_of!(XMapEvent, event) - 32usize];
    ["Offset of field: XMapEvent::window"][::std::mem::offset_of!(XMapEvent, window) - 40usize];
    ["Offset of field: XMapEvent::override_redirect"]
        [::std::mem::offset_of!(XMapEvent, override_redirect) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub parent: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapRequestEvent"][::std::mem::size_of::<XMapRequestEvent>() - 48usize];
    ["Alignment of XMapRequestEvent"][::std::mem::align_of::<XMapRequestEvent>() - 8usize];
    ["Offset of field: XMapRequestEvent::type_"]
        [::std::mem::offset_of!(XMapRequestEvent, type_) - 0usize];
    ["Offset of field: XMapRequestEvent::serial"]
        [::std::mem::offset_of!(XMapRequestEvent, serial) - 8usize];
    ["Offset of field: XMapRequestEvent::send_event"]
        [::std::mem::offset_of!(XMapRequestEvent, send_event) - 16usize];
    ["Offset of field: XMapRequestEvent::display"]
        [::std::mem::offset_of!(XMapRequestEvent, display) - 24usize];
    ["Offset of field: XMapRequestEvent::parent"]
        [::std::mem::offset_of!(XMapRequestEvent, parent) - 32usize];
    ["Offset of field: XMapRequestEvent::window"]
        [::std::mem::offset_of!(XMapRequestEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XReparentEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XReparentEvent"][::std::mem::size_of::<XReparentEvent>() - 72usize];
    ["Alignment of XReparentEvent"][::std::mem::align_of::<XReparentEvent>() - 8usize];
    ["Offset of field: XReparentEvent::type_"]
        [::std::mem::offset_of!(XReparentEvent, type_) - 0usize];
    ["Offset of field: XReparentEvent::serial"]
        [::std::mem::offset_of!(XReparentEvent, serial) - 8usize];
    ["Offset of field: XReparentEvent::send_event"]
        [::std::mem::offset_of!(XReparentEvent, send_event) - 16usize];
    ["Offset of field: XReparentEvent::display"]
        [::std::mem::offset_of!(XReparentEvent, display) - 24usize];
    ["Offset of field: XReparentEvent::event"]
        [::std::mem::offset_of!(XReparentEvent, event) - 32usize];
    ["Offset of field: XReparentEvent::window"]
        [::std::mem::offset_of!(XReparentEvent, window) - 40usize];
    ["Offset of field: XReparentEvent::parent"]
        [::std::mem::offset_of!(XReparentEvent, parent) - 48usize];
    ["Offset of field: XReparentEvent::x"][::std::mem::offset_of!(XReparentEvent, x) - 56usize];
    ["Offset of field: XReparentEvent::y"][::std::mem::offset_of!(XReparentEvent, y) - 60usize];
    ["Offset of field: XReparentEvent::override_redirect"]
        [::std::mem::offset_of!(XReparentEvent, override_redirect) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureEvent"][::std::mem::size_of::<XConfigureEvent>() - 88usize];
    ["Alignment of XConfigureEvent"][::std::mem::align_of::<XConfigureEvent>() - 8usize];
    ["Offset of field: XConfigureEvent::type_"]
        [::std::mem::offset_of!(XConfigureEvent, type_) - 0usize];
    ["Offset of field: XConfigureEvent::serial"]
        [::std::mem::offset_of!(XConfigureEvent, serial) - 8usize];
    ["Offset of field: XConfigureEvent::send_event"]
        [::std::mem::offset_of!(XConfigureEvent, send_event) - 16usize];
    ["Offset of field: XConfigureEvent::display"]
        [::std::mem::offset_of!(XConfigureEvent, display) - 24usize];
    ["Offset of field: XConfigureEvent::event"]
        [::std::mem::offset_of!(XConfigureEvent, event) - 32usize];
    ["Offset of field: XConfigureEvent::window"]
        [::std::mem::offset_of!(XConfigureEvent, window) - 40usize];
    ["Offset of field: XConfigureEvent::x"][::std::mem::offset_of!(XConfigureEvent, x) - 48usize];
    ["Offset of field: XConfigureEvent::y"][::std::mem::offset_of!(XConfigureEvent, y) - 52usize];
    ["Offset of field: XConfigureEvent::width"]
        [::std::mem::offset_of!(XConfigureEvent, width) - 56usize];
    ["Offset of field: XConfigureEvent::height"]
        [::std::mem::offset_of!(XConfigureEvent, height) - 60usize];
    ["Offset of field: XConfigureEvent::border_width"]
        [::std::mem::offset_of!(XConfigureEvent, border_width) - 64usize];
    ["Offset of field: XConfigureEvent::above"]
        [::std::mem::offset_of!(XConfigureEvent, above) - 72usize];
    ["Offset of field: XConfigureEvent::override_redirect"]
        [::std::mem::offset_of!(XConfigureEvent, override_redirect) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGravityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGravityEvent"][::std::mem::size_of::<XGravityEvent>() - 56usize];
    ["Alignment of XGravityEvent"][::std::mem::align_of::<XGravityEvent>() - 8usize];
    ["Offset of field: XGravityEvent::type_"]
        [::std::mem::offset_of!(XGravityEvent, type_) - 0usize];
    ["Offset of field: XGravityEvent::serial"]
        [::std::mem::offset_of!(XGravityEvent, serial) - 8usize];
    ["Offset of field: XGravityEvent::send_event"]
        [::std::mem::offset_of!(XGravityEvent, send_event) - 16usize];
    ["Offset of field: XGravityEvent::display"]
        [::std::mem::offset_of!(XGravityEvent, display) - 24usize];
    ["Offset of field: XGravityEvent::event"]
        [::std::mem::offset_of!(XGravityEvent, event) - 32usize];
    ["Offset of field: XGravityEvent::window"]
        [::std::mem::offset_of!(XGravityEvent, window) - 40usize];
    ["Offset of field: XGravityEvent::x"][::std::mem::offset_of!(XGravityEvent, x) - 48usize];
    ["Offset of field: XGravityEvent::y"][::std::mem::offset_of!(XGravityEvent, y) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XResizeRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XResizeRequestEvent"][::std::mem::size_of::<XResizeRequestEvent>() - 48usize];
    ["Alignment of XResizeRequestEvent"][::std::mem::align_of::<XResizeRequestEvent>() - 8usize];
    ["Offset of field: XResizeRequestEvent::type_"]
        [::std::mem::offset_of!(XResizeRequestEvent, type_) - 0usize];
    ["Offset of field: XResizeRequestEvent::serial"]
        [::std::mem::offset_of!(XResizeRequestEvent, serial) - 8usize];
    ["Offset of field: XResizeRequestEvent::send_event"]
        [::std::mem::offset_of!(XResizeRequestEvent, send_event) - 16usize];
    ["Offset of field: XResizeRequestEvent::display"]
        [::std::mem::offset_of!(XResizeRequestEvent, display) - 24usize];
    ["Offset of field: XResizeRequestEvent::window"]
        [::std::mem::offset_of!(XResizeRequestEvent, window) - 32usize];
    ["Offset of field: XResizeRequestEvent::width"]
        [::std::mem::offset_of!(XResizeRequestEvent, width) - 40usize];
    ["Offset of field: XResizeRequestEvent::height"]
        [::std::mem::offset_of!(XResizeRequestEvent, height) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub detail: ::std::os::raw::c_int,
    pub value_mask: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureRequestEvent"][::std::mem::size_of::<XConfigureRequestEvent>() - 96usize];
    ["Alignment of XConfigureRequestEvent"]
        [::std::mem::align_of::<XConfigureRequestEvent>() - 8usize];
    ["Offset of field: XConfigureRequestEvent::type_"]
        [::std::mem::offset_of!(XConfigureRequestEvent, type_) - 0usize];
    ["Offset of field: XConfigureRequestEvent::serial"]
        [::std::mem::offset_of!(XConfigureRequestEvent, serial) - 8usize];
    ["Offset of field: XConfigureRequestEvent::send_event"]
        [::std::mem::offset_of!(XConfigureRequestEvent, send_event) - 16usize];
    ["Offset of field: XConfigureRequestEvent::display"]
        [::std::mem::offset_of!(XConfigureRequestEvent, display) - 24usize];
    ["Offset of field: XConfigureRequestEvent::parent"]
        [::std::mem::offset_of!(XConfigureRequestEvent, parent) - 32usize];
    ["Offset of field: XConfigureRequestEvent::window"]
        [::std::mem::offset_of!(XConfigureRequestEvent, window) - 40usize];
    ["Offset of field: XConfigureRequestEvent::x"]
        [::std::mem::offset_of!(XConfigureRequestEvent, x) - 48usize];
    ["Offset of field: XConfigureRequestEvent::y"]
        [::std::mem::offset_of!(XConfigureRequestEvent, y) - 52usize];
    ["Offset of field: XConfigureRequestEvent::width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, width) - 56usize];
    ["Offset of field: XConfigureRequestEvent::height"]
        [::std::mem::offset_of!(XConfigureRequestEvent, height) - 60usize];
    ["Offset of field: XConfigureRequestEvent::border_width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, border_width) - 64usize];
    ["Offset of field: XConfigureRequestEvent::above"]
        [::std::mem::offset_of!(XConfigureRequestEvent, above) - 72usize];
    ["Offset of field: XConfigureRequestEvent::detail"]
        [::std::mem::offset_of!(XConfigureRequestEvent, detail) - 80usize];
    ["Offset of field: XConfigureRequestEvent::value_mask"]
        [::std::mem::offset_of!(XConfigureRequestEvent, value_mask) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub event: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateEvent"][::std::mem::size_of::<XCirculateEvent>() - 56usize];
    ["Alignment of XCirculateEvent"][::std::mem::align_of::<XCirculateEvent>() - 8usize];
    ["Offset of field: XCirculateEvent::type_"]
        [::std::mem::offset_of!(XCirculateEvent, type_) - 0usize];
    ["Offset of field: XCirculateEvent::serial"]
        [::std::mem::offset_of!(XCirculateEvent, serial) - 8usize];
    ["Offset of field: XCirculateEvent::send_event"]
        [::std::mem::offset_of!(XCirculateEvent, send_event) - 16usize];
    ["Offset of field: XCirculateEvent::display"]
        [::std::mem::offset_of!(XCirculateEvent, display) - 24usize];
    ["Offset of field: XCirculateEvent::event"]
        [::std::mem::offset_of!(XCirculateEvent, event) - 32usize];
    ["Offset of field: XCirculateEvent::window"]
        [::std::mem::offset_of!(XCirculateEvent, window) - 40usize];
    ["Offset of field: XCirculateEvent::place"]
        [::std::mem::offset_of!(XCirculateEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub parent: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateRequestEvent"][::std::mem::size_of::<XCirculateRequestEvent>() - 56usize];
    ["Alignment of XCirculateRequestEvent"]
        [::std::mem::align_of::<XCirculateRequestEvent>() - 8usize];
    ["Offset of field: XCirculateRequestEvent::type_"]
        [::std::mem::offset_of!(XCirculateRequestEvent, type_) - 0usize];
    ["Offset of field: XCirculateRequestEvent::serial"]
        [::std::mem::offset_of!(XCirculateRequestEvent, serial) - 8usize];
    ["Offset of field: XCirculateRequestEvent::send_event"]
        [::std::mem::offset_of!(XCirculateRequestEvent, send_event) - 16usize];
    ["Offset of field: XCirculateRequestEvent::display"]
        [::std::mem::offset_of!(XCirculateRequestEvent, display) - 24usize];
    ["Offset of field: XCirculateRequestEvent::parent"]
        [::std::mem::offset_of!(XCirculateRequestEvent, parent) - 32usize];
    ["Offset of field: XCirculateRequestEvent::window"]
        [::std::mem::offset_of!(XCirculateRequestEvent, window) - 40usize];
    ["Offset of field: XCirculateRequestEvent::place"]
        [::std::mem::offset_of!(XCirculateRequestEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPropertyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPropertyEvent"][::std::mem::size_of::<XPropertyEvent>() - 64usize];
    ["Alignment of XPropertyEvent"][::std::mem::align_of::<XPropertyEvent>() - 8usize];
    ["Offset of field: XPropertyEvent::type_"]
        [::std::mem::offset_of!(XPropertyEvent, type_) - 0usize];
    ["Offset of field: XPropertyEvent::serial"]
        [::std::mem::offset_of!(XPropertyEvent, serial) - 8usize];
    ["Offset of field: XPropertyEvent::send_event"]
        [::std::mem::offset_of!(XPropertyEvent, send_event) - 16usize];
    ["Offset of field: XPropertyEvent::display"]
        [::std::mem::offset_of!(XPropertyEvent, display) - 24usize];
    ["Offset of field: XPropertyEvent::window"]
        [::std::mem::offset_of!(XPropertyEvent, window) - 32usize];
    ["Offset of field: XPropertyEvent::atom"]
        [::std::mem::offset_of!(XPropertyEvent, atom) - 40usize];
    ["Offset of field: XPropertyEvent::time"]
        [::std::mem::offset_of!(XPropertyEvent, time) - 48usize];
    ["Offset of field: XPropertyEvent::state"]
        [::std::mem::offset_of!(XPropertyEvent, state) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionClearEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionClearEvent"][::std::mem::size_of::<XSelectionClearEvent>() - 56usize];
    ["Alignment of XSelectionClearEvent"][::std::mem::align_of::<XSelectionClearEvent>() - 8usize];
    ["Offset of field: XSelectionClearEvent::type_"]
        [::std::mem::offset_of!(XSelectionClearEvent, type_) - 0usize];
    ["Offset of field: XSelectionClearEvent::serial"]
        [::std::mem::offset_of!(XSelectionClearEvent, serial) - 8usize];
    ["Offset of field: XSelectionClearEvent::send_event"]
        [::std::mem::offset_of!(XSelectionClearEvent, send_event) - 16usize];
    ["Offset of field: XSelectionClearEvent::display"]
        [::std::mem::offset_of!(XSelectionClearEvent, display) - 24usize];
    ["Offset of field: XSelectionClearEvent::window"]
        [::std::mem::offset_of!(XSelectionClearEvent, window) - 32usize];
    ["Offset of field: XSelectionClearEvent::selection"]
        [::std::mem::offset_of!(XSelectionClearEvent, selection) - 40usize];
    ["Offset of field: XSelectionClearEvent::time"]
        [::std::mem::offset_of!(XSelectionClearEvent, time) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionRequestEvent"][::std::mem::size_of::<XSelectionRequestEvent>() - 80usize];
    ["Alignment of XSelectionRequestEvent"]
        [::std::mem::align_of::<XSelectionRequestEvent>() - 8usize];
    ["Offset of field: XSelectionRequestEvent::type_"]
        [::std::mem::offset_of!(XSelectionRequestEvent, type_) - 0usize];
    ["Offset of field: XSelectionRequestEvent::serial"]
        [::std::mem::offset_of!(XSelectionRequestEvent, serial) - 8usize];
    ["Offset of field: XSelectionRequestEvent::send_event"]
        [::std::mem::offset_of!(XSelectionRequestEvent, send_event) - 16usize];
    ["Offset of field: XSelectionRequestEvent::display"]
        [::std::mem::offset_of!(XSelectionRequestEvent, display) - 24usize];
    ["Offset of field: XSelectionRequestEvent::owner"]
        [::std::mem::offset_of!(XSelectionRequestEvent, owner) - 32usize];
    ["Offset of field: XSelectionRequestEvent::requestor"]
        [::std::mem::offset_of!(XSelectionRequestEvent, requestor) - 40usize];
    ["Offset of field: XSelectionRequestEvent::selection"]
        [::std::mem::offset_of!(XSelectionRequestEvent, selection) - 48usize];
    ["Offset of field: XSelectionRequestEvent::target"]
        [::std::mem::offset_of!(XSelectionRequestEvent, target) - 56usize];
    ["Offset of field: XSelectionRequestEvent::property"]
        [::std::mem::offset_of!(XSelectionRequestEvent, property) - 64usize];
    ["Offset of field: XSelectionRequestEvent::time"]
        [::std::mem::offset_of!(XSelectionRequestEvent, time) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionEvent"][::std::mem::size_of::<XSelectionEvent>() - 72usize];
    ["Alignment of XSelectionEvent"][::std::mem::align_of::<XSelectionEvent>() - 8usize];
    ["Offset of field: XSelectionEvent::type_"]
        [::std::mem::offset_of!(XSelectionEvent, type_) - 0usize];
    ["Offset of field: XSelectionEvent::serial"]
        [::std::mem::offset_of!(XSelectionEvent, serial) - 8usize];
    ["Offset of field: XSelectionEvent::send_event"]
        [::std::mem::offset_of!(XSelectionEvent, send_event) - 16usize];
    ["Offset of field: XSelectionEvent::display"]
        [::std::mem::offset_of!(XSelectionEvent, display) - 24usize];
    ["Offset of field: XSelectionEvent::requestor"]
        [::std::mem::offset_of!(XSelectionEvent, requestor) - 32usize];
    ["Offset of field: XSelectionEvent::selection"]
        [::std::mem::offset_of!(XSelectionEvent, selection) - 40usize];
    ["Offset of field: XSelectionEvent::target"]
        [::std::mem::offset_of!(XSelectionEvent, target) - 48usize];
    ["Offset of field: XSelectionEvent::property"]
        [::std::mem::offset_of!(XSelectionEvent, property) - 56usize];
    ["Offset of field: XSelectionEvent::time"]
        [::std::mem::offset_of!(XSelectionEvent, time) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColormapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColormapEvent"][::std::mem::size_of::<XColormapEvent>() - 56usize];
    ["Alignment of XColormapEvent"][::std::mem::align_of::<XColormapEvent>() - 8usize];
    ["Offset of field: XColormapEvent::type_"]
        [::std::mem::offset_of!(XColormapEvent, type_) - 0usize];
    ["Offset of field: XColormapEvent::serial"]
        [::std::mem::offset_of!(XColormapEvent, serial) - 8usize];
    ["Offset of field: XColormapEvent::send_event"]
        [::std::mem::offset_of!(XColormapEvent, send_event) - 16usize];
    ["Offset of field: XColormapEvent::display"]
        [::std::mem::offset_of!(XColormapEvent, display) - 24usize];
    ["Offset of field: XColormapEvent::window"]
        [::std::mem::offset_of!(XColormapEvent, window) - 32usize];
    ["Offset of field: XColormapEvent::colormap"]
        [::std::mem::offset_of!(XColormapEvent, colormap) - 40usize];
    ["Offset of field: XColormapEvent::new"][::std::mem::offset_of!(XColormapEvent, new) - 48usize];
    ["Offset of field: XColormapEvent::state"]
        [::std::mem::offset_of!(XColormapEvent, state) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XClientMessageEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::std::os::raw::c_int,
    pub data: XClientMessageEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XClientMessageEvent__bindgen_ty_1 {
    pub b: [::std::os::raw::c_char; 20usize],
    pub s: [::std::os::raw::c_short; 10usize],
    pub l: [::std::os::raw::c_long; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::size_of::<XClientMessageEvent__bindgen_ty_1>() - 40usize];
    ["Alignment of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::align_of::<XClientMessageEvent__bindgen_ty_1>() - 8usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::b"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, b) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::s"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, s) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::l"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, l) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent"][::std::mem::size_of::<XClientMessageEvent>() - 96usize];
    ["Alignment of XClientMessageEvent"][::std::mem::align_of::<XClientMessageEvent>() - 8usize];
    ["Offset of field: XClientMessageEvent::type_"]
        [::std::mem::offset_of!(XClientMessageEvent, type_) - 0usize];
    ["Offset of field: XClientMessageEvent::serial"]
        [::std::mem::offset_of!(XClientMessageEvent, serial) - 8usize];
    ["Offset of field: XClientMessageEvent::send_event"]
        [::std::mem::offset_of!(XClientMessageEvent, send_event) - 16usize];
    ["Offset of field: XClientMessageEvent::display"]
        [::std::mem::offset_of!(XClientMessageEvent, display) - 24usize];
    ["Offset of field: XClientMessageEvent::window"]
        [::std::mem::offset_of!(XClientMessageEvent, window) - 32usize];
    ["Offset of field: XClientMessageEvent::message_type"]
        [::std::mem::offset_of!(XClientMessageEvent, message_type) - 40usize];
    ["Offset of field: XClientMessageEvent::format"]
        [::std::mem::offset_of!(XClientMessageEvent, format) - 48usize];
    ["Offset of field: XClientMessageEvent::data"]
        [::std::mem::offset_of!(XClientMessageEvent, data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMappingEvent"][::std::mem::size_of::<XMappingEvent>() - 56usize];
    ["Alignment of XMappingEvent"][::std::mem::align_of::<XMappingEvent>() - 8usize];
    ["Offset of field: XMappingEvent::type_"]
        [::std::mem::offset_of!(XMappingEvent, type_) - 0usize];
    ["Offset of field: XMappingEvent::serial"]
        [::std::mem::offset_of!(XMappingEvent, serial) - 8usize];
    ["Offset of field: XMappingEvent::send_event"]
        [::std::mem::offset_of!(XMappingEvent, send_event) - 16usize];
    ["Offset of field: XMappingEvent::display"]
        [::std::mem::offset_of!(XMappingEvent, display) - 24usize];
    ["Offset of field: XMappingEvent::window"]
        [::std::mem::offset_of!(XMappingEvent, window) - 32usize];
    ["Offset of field: XMappingEvent::request"]
        [::std::mem::offset_of!(XMappingEvent, request) - 40usize];
    ["Offset of field: XMappingEvent::first_keycode"]
        [::std::mem::offset_of!(XMappingEvent, first_keycode) - 44usize];
    ["Offset of field: XMappingEvent::count"]
        [::std::mem::offset_of!(XMappingEvent, count) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XErrorEvent {
    pub type_: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub resourceid: XID,
    pub serial: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_uchar,
    pub request_code: ::std::os::raw::c_uchar,
    pub minor_code: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XErrorEvent"][::std::mem::size_of::<XErrorEvent>() - 40usize];
    ["Alignment of XErrorEvent"][::std::mem::align_of::<XErrorEvent>() - 8usize];
    ["Offset of field: XErrorEvent::type_"][::std::mem::offset_of!(XErrorEvent, type_) - 0usize];
    ["Offset of field: XErrorEvent::display"]
        [::std::mem::offset_of!(XErrorEvent, display) - 8usize];
    ["Offset of field: XErrorEvent::resourceid"]
        [::std::mem::offset_of!(XErrorEvent, resourceid) - 16usize];
    ["Offset of field: XErrorEvent::serial"][::std::mem::offset_of!(XErrorEvent, serial) - 24usize];
    ["Offset of field: XErrorEvent::error_code"]
        [::std::mem::offset_of!(XErrorEvent, error_code) - 32usize];
    ["Offset of field: XErrorEvent::request_code"]
        [::std::mem::offset_of!(XErrorEvent, request_code) - 33usize];
    ["Offset of field: XErrorEvent::minor_code"]
        [::std::mem::offset_of!(XErrorEvent, minor_code) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XAnyEvent"][::std::mem::size_of::<XAnyEvent>() - 40usize];
    ["Alignment of XAnyEvent"][::std::mem::align_of::<XAnyEvent>() - 8usize];
    ["Offset of field: XAnyEvent::type_"][::std::mem::offset_of!(XAnyEvent, type_) - 0usize];
    ["Offset of field: XAnyEvent::serial"][::std::mem::offset_of!(XAnyEvent, serial) - 8usize];
    ["Offset of field: XAnyEvent::send_event"]
        [::std::mem::offset_of!(XAnyEvent, send_event) - 16usize];
    ["Offset of field: XAnyEvent::display"][::std::mem::offset_of!(XAnyEvent, display) - 24usize];
    ["Offset of field: XAnyEvent::window"][::std::mem::offset_of!(XAnyEvent, window) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEvent"][::std::mem::size_of::<XGenericEvent>() - 40usize];
    ["Alignment of XGenericEvent"][::std::mem::align_of::<XGenericEvent>() - 8usize];
    ["Offset of field: XGenericEvent::type_"]
        [::std::mem::offset_of!(XGenericEvent, type_) - 0usize];
    ["Offset of field: XGenericEvent::serial"]
        [::std::mem::offset_of!(XGenericEvent, serial) - 8usize];
    ["Offset of field: XGenericEvent::send_event"]
        [::std::mem::offset_of!(XGenericEvent, send_event) - 16usize];
    ["Offset of field: XGenericEvent::display"]
        [::std::mem::offset_of!(XGenericEvent, display) - 24usize];
    ["Offset of field: XGenericEvent::extension"]
        [::std::mem::offset_of!(XGenericEvent, extension) - 32usize];
    ["Offset of field: XGenericEvent::evtype"]
        [::std::mem::offset_of!(XGenericEvent, evtype) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEventCookie {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
    pub cookie: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEventCookie"][::std::mem::size_of::<XGenericEventCookie>() - 56usize];
    ["Alignment of XGenericEventCookie"][::std::mem::align_of::<XGenericEventCookie>() - 8usize];
    ["Offset of field: XGenericEventCookie::type_"]
        [::std::mem::offset_of!(XGenericEventCookie, type_) - 0usize];
    ["Offset of field: XGenericEventCookie::serial"]
        [::std::mem::offset_of!(XGenericEventCookie, serial) - 8usize];
    ["Offset of field: XGenericEventCookie::send_event"]
        [::std::mem::offset_of!(XGenericEventCookie, send_event) - 16usize];
    ["Offset of field: XGenericEventCookie::display"]
        [::std::mem::offset_of!(XGenericEventCookie, display) - 24usize];
    ["Offset of field: XGenericEventCookie::extension"]
        [::std::mem::offset_of!(XGenericEventCookie, extension) - 32usize];
    ["Offset of field: XGenericEventCookie::evtype"]
        [::std::mem::offset_of!(XGenericEventCookie, evtype) - 36usize];
    ["Offset of field: XGenericEventCookie::cookie"]
        [::std::mem::offset_of!(XGenericEventCookie, cookie) - 40usize];
    ["Offset of field: XGenericEventCookie::data"]
        [::std::mem::offset_of!(XGenericEventCookie, data) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XEvent {
    pub type_: ::std::os::raw::c_int,
    pub xany: XAnyEvent,
    pub xkey: XKeyEvent,
    pub xbutton: XButtonEvent,
    pub xmotion: XMotionEvent,
    pub xcrossing: XCrossingEvent,
    pub xfocus: XFocusChangeEvent,
    pub xexpose: XExposeEvent,
    pub xgraphicsexpose: XGraphicsExposeEvent,
    pub xnoexpose: XNoExposeEvent,
    pub xvisibility: XVisibilityEvent,
    pub xcreatewindow: XCreateWindowEvent,
    pub xdestroywindow: XDestroyWindowEvent,
    pub xunmap: XUnmapEvent,
    pub xmap: XMapEvent,
    pub xmaprequest: XMapRequestEvent,
    pub xreparent: XReparentEvent,
    pub xconfigure: XConfigureEvent,
    pub xgravity: XGravityEvent,
    pub xresizerequest: XResizeRequestEvent,
    pub xconfigurerequest: XConfigureRequestEvent,
    pub xcirculate: XCirculateEvent,
    pub xcirculaterequest: XCirculateRequestEvent,
    pub xproperty: XPropertyEvent,
    pub xselectionclear: XSelectionClearEvent,
    pub xselectionrequest: XSelectionRequestEvent,
    pub xselection: XSelectionEvent,
    pub xcolormap: XColormapEvent,
    pub xclient: XClientMessageEvent,
    pub xmapping: XMappingEvent,
    pub xerror: XErrorEvent,
    pub xkeymap: XKeymapEvent,
    pub xgeneric: XGenericEvent,
    pub xcookie: XGenericEventCookie,
    pub pad: [::std::os::raw::c_long; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XEvent"][::std::mem::size_of::<_XEvent>() - 192usize];
    ["Alignment of _XEvent"][::std::mem::align_of::<_XEvent>() - 8usize];
    ["Offset of field: _XEvent::type_"][::std::mem::offset_of!(_XEvent, type_) - 0usize];
    ["Offset of field: _XEvent::xany"][::std::mem::offset_of!(_XEvent, xany) - 0usize];
    ["Offset of field: _XEvent::xkey"][::std::mem::offset_of!(_XEvent, xkey) - 0usize];
    ["Offset of field: _XEvent::xbutton"][::std::mem::offset_of!(_XEvent, xbutton) - 0usize];
    ["Offset of field: _XEvent::xmotion"][::std::mem::offset_of!(_XEvent, xmotion) - 0usize];
    ["Offset of field: _XEvent::xcrossing"][::std::mem::offset_of!(_XEvent, xcrossing) - 0usize];
    ["Offset of field: _XEvent::xfocus"][::std::mem::offset_of!(_XEvent, xfocus) - 0usize];
    ["Offset of field: _XEvent::xexpose"][::std::mem::offset_of!(_XEvent, xexpose) - 0usize];
    ["Offset of field: _XEvent::xgraphicsexpose"]
        [::std::mem::offset_of!(_XEvent, xgraphicsexpose) - 0usize];
    ["Offset of field: _XEvent::xnoexpose"][::std::mem::offset_of!(_XEvent, xnoexpose) - 0usize];
    ["Offset of field: _XEvent::xvisibility"]
        [::std::mem::offset_of!(_XEvent, xvisibility) - 0usize];
    ["Offset of field: _XEvent::xcreatewindow"]
        [::std::mem::offset_of!(_XEvent, xcreatewindow) - 0usize];
    ["Offset of field: _XEvent::xdestroywindow"]
        [::std::mem::offset_of!(_XEvent, xdestroywindow) - 0usize];
    ["Offset of field: _XEvent::xunmap"][::std::mem::offset_of!(_XEvent, xunmap) - 0usize];
    ["Offset of field: _XEvent::xmap"][::std::mem::offset_of!(_XEvent, xmap) - 0usize];
    ["Offset of field: _XEvent::xmaprequest"]
        [::std::mem::offset_of!(_XEvent, xmaprequest) - 0usize];
    ["Offset of field: _XEvent::xreparent"][::std::mem::offset_of!(_XEvent, xreparent) - 0usize];
    ["Offset of field: _XEvent::xconfigure"][::std::mem::offset_of!(_XEvent, xconfigure) - 0usize];
    ["Offset of field: _XEvent::xgravity"][::std::mem::offset_of!(_XEvent, xgravity) - 0usize];
    ["Offset of field: _XEvent::xresizerequest"]
        [::std::mem::offset_of!(_XEvent, xresizerequest) - 0usize];
    ["Offset of field: _XEvent::xconfigurerequest"]
        [::std::mem::offset_of!(_XEvent, xconfigurerequest) - 0usize];
    ["Offset of field: _XEvent::xcirculate"][::std::mem::offset_of!(_XEvent, xcirculate) - 0usize];
    ["Offset of field: _XEvent::xcirculaterequest"]
        [::std::mem::offset_of!(_XEvent, xcirculaterequest) - 0usize];
    ["Offset of field: _XEvent::xproperty"][::std::mem::offset_of!(_XEvent, xproperty) - 0usize];
    ["Offset of field: _XEvent::xselectionclear"]
        [::std::mem::offset_of!(_XEvent, xselectionclear) - 0usize];
    ["Offset of field: _XEvent::xselectionrequest"]
        [::std::mem::offset_of!(_XEvent, xselectionrequest) - 0usize];
    ["Offset of field: _XEvent::xselection"][::std::mem::offset_of!(_XEvent, xselection) - 0usize];
    ["Offset of field: _XEvent::xcolormap"][::std::mem::offset_of!(_XEvent, xcolormap) - 0usize];
    ["Offset of field: _XEvent::xclient"][::std::mem::offset_of!(_XEvent, xclient) - 0usize];
    ["Offset of field: _XEvent::xmapping"][::std::mem::offset_of!(_XEvent, xmapping) - 0usize];
    ["Offset of field: _XEvent::xerror"][::std::mem::offset_of!(_XEvent, xerror) - 0usize];
    ["Offset of field: _XEvent::xkeymap"][::std::mem::offset_of!(_XEvent, xkeymap) - 0usize];
    ["Offset of field: _XEvent::xgeneric"][::std::mem::offset_of!(_XEvent, xgeneric) - 0usize];
    ["Offset of field: _XEvent::xcookie"][::std::mem::offset_of!(_XEvent, xcookie) - 0usize];
    ["Offset of field: _XEvent::pad"][::std::mem::offset_of!(_XEvent, pad) - 0usize];
};
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCharStruct {
    pub lbearing: ::std::os::raw::c_short,
    pub rbearing: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_short,
    pub ascent: ::std::os::raw::c_short,
    pub descent: ::std::os::raw::c_short,
    pub attributes: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCharStruct"][::std::mem::size_of::<XCharStruct>() - 12usize];
    ["Alignment of XCharStruct"][::std::mem::align_of::<XCharStruct>() - 2usize];
    ["Offset of field: XCharStruct::lbearing"]
        [::std::mem::offset_of!(XCharStruct, lbearing) - 0usize];
    ["Offset of field: XCharStruct::rbearing"]
        [::std::mem::offset_of!(XCharStruct, rbearing) - 2usize];
    ["Offset of field: XCharStruct::width"][::std::mem::offset_of!(XCharStruct, width) - 4usize];
    ["Offset of field: XCharStruct::ascent"][::std::mem::offset_of!(XCharStruct, ascent) - 6usize];
    ["Offset of field: XCharStruct::descent"]
        [::std::mem::offset_of!(XCharStruct, descent) - 8usize];
    ["Offset of field: XCharStruct::attributes"]
        [::std::mem::offset_of!(XCharStruct, attributes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontProp {
    pub name: Atom,
    pub card32: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontProp"][::std::mem::size_of::<XFontProp>() - 16usize];
    ["Alignment of XFontProp"][::std::mem::align_of::<XFontProp>() - 8usize];
    ["Offset of field: XFontProp::name"][::std::mem::offset_of!(XFontProp, name) - 0usize];
    ["Offset of field: XFontProp::card32"][::std::mem::offset_of!(XFontProp, card32) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontStruct {
    pub ext_data: *mut XExtData,
    pub fid: Font,
    pub direction: ::std::os::raw::c_uint,
    pub min_char_or_byte2: ::std::os::raw::c_uint,
    pub max_char_or_byte2: ::std::os::raw::c_uint,
    pub min_byte1: ::std::os::raw::c_uint,
    pub max_byte1: ::std::os::raw::c_uint,
    pub all_chars_exist: ::std::os::raw::c_int,
    pub default_char: ::std::os::raw::c_uint,
    pub n_properties: ::std::os::raw::c_int,
    pub properties: *mut XFontProp,
    pub min_bounds: XCharStruct,
    pub max_bounds: XCharStruct,
    pub per_char: *mut XCharStruct,
    pub ascent: ::std::os::raw::c_int,
    pub descent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontStruct"][::std::mem::size_of::<XFontStruct>() - 96usize];
    ["Alignment of XFontStruct"][::std::mem::align_of::<XFontStruct>() - 8usize];
    ["Offset of field: XFontStruct::ext_data"]
        [::std::mem::offset_of!(XFontStruct, ext_data) - 0usize];
    ["Offset of field: XFontStruct::fid"][::std::mem::offset_of!(XFontStruct, fid) - 8usize];
    ["Offset of field: XFontStruct::direction"]
        [::std::mem::offset_of!(XFontStruct, direction) - 16usize];
    ["Offset of field: XFontStruct::min_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, min_char_or_byte2) - 20usize];
    ["Offset of field: XFontStruct::max_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, max_char_or_byte2) - 24usize];
    ["Offset of field: XFontStruct::min_byte1"]
        [::std::mem::offset_of!(XFontStruct, min_byte1) - 28usize];
    ["Offset of field: XFontStruct::max_byte1"]
        [::std::mem::offset_of!(XFontStruct, max_byte1) - 32usize];
    ["Offset of field: XFontStruct::all_chars_exist"]
        [::std::mem::offset_of!(XFontStruct, all_chars_exist) - 36usize];
    ["Offset of field: XFontStruct::default_char"]
        [::std::mem::offset_of!(XFontStruct, default_char) - 40usize];
    ["Offset of field: XFontStruct::n_properties"]
        [::std::mem::offset_of!(XFontStruct, n_properties) - 44usize];
    ["Offset of field: XFontStruct::properties"]
        [::std::mem::offset_of!(XFontStruct, properties) - 48usize];
    ["Offset of field: XFontStruct::min_bounds"]
        [::std::mem::offset_of!(XFontStruct, min_bounds) - 56usize];
    ["Offset of field: XFontStruct::max_bounds"]
        [::std::mem::offset_of!(XFontStruct, max_bounds) - 68usize];
    ["Offset of field: XFontStruct::per_char"]
        [::std::mem::offset_of!(XFontStruct, per_char) - 80usize];
    ["Offset of field: XFontStruct::ascent"][::std::mem::offset_of!(XFontStruct, ascent) - 88usize];
    ["Offset of field: XFontStruct::descent"]
        [::std::mem::offset_of!(XFontStruct, descent) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem"][::std::mem::size_of::<XTextItem>() - 24usize];
    ["Alignment of XTextItem"][::std::mem::align_of::<XTextItem>() - 8usize];
    ["Offset of field: XTextItem::chars"][::std::mem::offset_of!(XTextItem, chars) - 0usize];
    ["Offset of field: XTextItem::nchars"][::std::mem::offset_of!(XTextItem, nchars) - 8usize];
    ["Offset of field: XTextItem::delta"][::std::mem::offset_of!(XTextItem, delta) - 12usize];
    ["Offset of field: XTextItem::font"][::std::mem::offset_of!(XTextItem, font) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XChar2b {
    pub byte1: ::std::os::raw::c_uchar,
    pub byte2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XChar2b"][::std::mem::size_of::<XChar2b>() - 2usize];
    ["Alignment of XChar2b"][::std::mem::align_of::<XChar2b>() - 1usize];
    ["Offset of field: XChar2b::byte1"][::std::mem::offset_of!(XChar2b, byte1) - 0usize];
    ["Offset of field: XChar2b::byte2"][::std::mem::offset_of!(XChar2b, byte2) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem16 {
    pub chars: *mut XChar2b,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem16"][::std::mem::size_of::<XTextItem16>() - 24usize];
    ["Alignment of XTextItem16"][::std::mem::align_of::<XTextItem16>() - 8usize];
    ["Offset of field: XTextItem16::chars"][::std::mem::offset_of!(XTextItem16, chars) - 0usize];
    ["Offset of field: XTextItem16::nchars"][::std::mem::offset_of!(XTextItem16, nchars) - 8usize];
    ["Offset of field: XTextItem16::delta"][::std::mem::offset_of!(XTextItem16, delta) - 12usize];
    ["Offset of field: XTextItem16::font"][::std::mem::offset_of!(XTextItem16, font) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union XEDataObject {
    pub display: *mut XDisplay,
    pub gc: GC,
    pub visual: *mut Visual,
    pub screen: *mut Screen,
    pub pixmap_format: *mut ScreenFormat,
    pub font: *mut XFontStruct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XEDataObject"][::std::mem::size_of::<XEDataObject>() - 8usize];
    ["Alignment of XEDataObject"][::std::mem::align_of::<XEDataObject>() - 8usize];
    ["Offset of field: XEDataObject::display"]
        [::std::mem::offset_of!(XEDataObject, display) - 0usize];
    ["Offset of field: XEDataObject::gc"][::std::mem::offset_of!(XEDataObject, gc) - 0usize];
    ["Offset of field: XEDataObject::visual"]
        [::std::mem::offset_of!(XEDataObject, visual) - 0usize];
    ["Offset of field: XEDataObject::screen"]
        [::std::mem::offset_of!(XEDataObject, screen) - 0usize];
    ["Offset of field: XEDataObject::pixmap_format"]
        [::std::mem::offset_of!(XEDataObject, pixmap_format) - 0usize];
    ["Offset of field: XEDataObject::font"][::std::mem::offset_of!(XEDataObject, font) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontSetExtents {
    pub max_ink_extent: XRectangle,
    pub max_logical_extent: XRectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontSetExtents"][::std::mem::size_of::<XFontSetExtents>() - 16usize];
    ["Alignment of XFontSetExtents"][::std::mem::align_of::<XFontSetExtents>() - 2usize];
    ["Offset of field: XFontSetExtents::max_ink_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_ink_extent) - 0usize];
    ["Offset of field: XFontSetExtents::max_logical_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_logical_extent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOM {
    _unused: [u8; 0],
}
pub type XOM = *mut _XOM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOC {
    _unused: [u8; 0],
}
pub type XOC = *mut _XOC;
pub type XFontSet = *mut _XOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XmbTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XmbTextItem"][::std::mem::size_of::<XmbTextItem>() - 24usize];
    ["Alignment of XmbTextItem"][::std::mem::align_of::<XmbTextItem>() - 8usize];
    ["Offset of field: XmbTextItem::chars"][::std::mem::offset_of!(XmbTextItem, chars) - 0usize];
    ["Offset of field: XmbTextItem::nchars"][::std::mem::offset_of!(XmbTextItem, nchars) - 8usize];
    ["Offset of field: XmbTextItem::delta"][::std::mem::offset_of!(XmbTextItem, delta) - 12usize];
    ["Offset of field: XmbTextItem::font_set"]
        [::std::mem::offset_of!(XmbTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XwcTextItem {
    pub chars: *mut ::std::os::raw::c_int,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XwcTextItem"][::std::mem::size_of::<XwcTextItem>() - 24usize];
    ["Alignment of XwcTextItem"][::std::mem::align_of::<XwcTextItem>() - 8usize];
    ["Offset of field: XwcTextItem::chars"][::std::mem::offset_of!(XwcTextItem, chars) - 0usize];
    ["Offset of field: XwcTextItem::nchars"][::std::mem::offset_of!(XwcTextItem, nchars) - 8usize];
    ["Offset of field: XwcTextItem::delta"][::std::mem::offset_of!(XwcTextItem, delta) - 12usize];
    ["Offset of field: XwcTextItem::font_set"]
        [::std::mem::offset_of!(XwcTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMCharSetList {
    pub charset_count: ::std::os::raw::c_int,
    pub charset_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMCharSetList"][::std::mem::size_of::<XOMCharSetList>() - 16usize];
    ["Alignment of XOMCharSetList"][::std::mem::align_of::<XOMCharSetList>() - 8usize];
    ["Offset of field: XOMCharSetList::charset_count"]
        [::std::mem::offset_of!(XOMCharSetList, charset_count) - 0usize];
    ["Offset of field: XOMCharSetList::charset_list"]
        [::std::mem::offset_of!(XOMCharSetList, charset_list) - 8usize];
};
pub const XOrientation_XOMOrientation_LTR_TTB: XOrientation = 0;
pub const XOrientation_XOMOrientation_RTL_TTB: XOrientation = 1;
pub const XOrientation_XOMOrientation_TTB_LTR: XOrientation = 2;
pub const XOrientation_XOMOrientation_TTB_RTL: XOrientation = 3;
pub const XOrientation_XOMOrientation_Context: XOrientation = 4;
pub type XOrientation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMOrientation {
    pub num_orientation: ::std::os::raw::c_int,
    pub orientation: *mut XOrientation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMOrientation"][::std::mem::size_of::<XOMOrientation>() - 16usize];
    ["Alignment of XOMOrientation"][::std::mem::align_of::<XOMOrientation>() - 8usize];
    ["Offset of field: XOMOrientation::num_orientation"]
        [::std::mem::offset_of!(XOMOrientation, num_orientation) - 0usize];
    ["Offset of field: XOMOrientation::orientation"]
        [::std::mem::offset_of!(XOMOrientation, orientation) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMFontInfo {
    pub num_font: ::std::os::raw::c_int,
    pub font_struct_list: *mut *mut XFontStruct,
    pub font_name_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMFontInfo"][::std::mem::size_of::<XOMFontInfo>() - 24usize];
    ["Alignment of XOMFontInfo"][::std::mem::align_of::<XOMFontInfo>() - 8usize];
    ["Offset of field: XOMFontInfo::num_font"]
        [::std::mem::offset_of!(XOMFontInfo, num_font) - 0usize];
    ["Offset of field: XOMFontInfo::font_struct_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_struct_list) - 8usize];
    ["Offset of field: XOMFontInfo::font_name_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_name_list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIM {
    _unused: [u8; 0],
}
pub type XIM = *mut _XIM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIC {
    _unused: [u8; 0],
}
pub type XIC = *mut _XIC;
pub type XIMProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer)>;
pub type XICProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: XIC, arg2: XPointer, arg3: XPointer) -> ::std::os::raw::c_int,
>;
pub type XIDProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut XDisplay, arg2: XPointer, arg3: XPointer),
>;
pub type XIMStyle = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMStyles {
    pub count_styles: ::std::os::raw::c_ushort,
    pub supported_styles: *mut XIMStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMStyles"][::std::mem::size_of::<XIMStyles>() - 16usize];
    ["Alignment of XIMStyles"][::std::mem::align_of::<XIMStyles>() - 8usize];
    ["Offset of field: XIMStyles::count_styles"]
        [::std::mem::offset_of!(XIMStyles, count_styles) - 0usize];
    ["Offset of field: XIMStyles::supported_styles"]
        [::std::mem::offset_of!(XIMStyles, supported_styles) - 8usize];
};
pub type XVaNestedList = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMCallback {
    pub client_data: XPointer,
    pub callback: XIMProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMCallback"][::std::mem::size_of::<XIMCallback>() - 16usize];
    ["Alignment of XIMCallback"][::std::mem::align_of::<XIMCallback>() - 8usize];
    ["Offset of field: XIMCallback::client_data"]
        [::std::mem::offset_of!(XIMCallback, client_data) - 0usize];
    ["Offset of field: XIMCallback::callback"]
        [::std::mem::offset_of!(XIMCallback, callback) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XICCallback {
    pub client_data: XPointer,
    pub callback: XICProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XICCallback"][::std::mem::size_of::<XICCallback>() - 16usize];
    ["Alignment of XICCallback"][::std::mem::align_of::<XICCallback>() - 8usize];
    ["Offset of field: XICCallback::client_data"]
        [::std::mem::offset_of!(XICCallback, client_data) - 0usize];
    ["Offset of field: XICCallback::callback"]
        [::std::mem::offset_of!(XICCallback, callback) - 8usize];
};
pub type XIMFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMText__bindgen_ty_1 {
    pub multi_byte: *mut ::std::os::raw::c_char,
    pub wide_char: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText__bindgen_ty_1"][::std::mem::size_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMText__bindgen_ty_1::multi_byte"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, multi_byte) - 0usize];
    ["Offset of field: _XIMText__bindgen_ty_1::wide_char"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, wide_char) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText"][::std::mem::size_of::<_XIMText>() - 32usize];
    ["Alignment of _XIMText"][::std::mem::align_of::<_XIMText>() - 8usize];
    ["Offset of field: _XIMText::length"][::std::mem::offset_of!(_XIMText, length) - 0usize];
    ["Offset of field: _XIMText::feedback"][::std::mem::offset_of!(_XIMText, feedback) - 8usize];
    ["Offset of field: _XIMText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMText::string"][::std::mem::offset_of!(_XIMText, string) - 24usize];
};
pub type XIMText = _XIMText;
pub type XIMPreeditState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditStateNotifyCallbackStruct {
    pub state: XIMPreeditState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Alignment of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditStateNotifyCallbackStruct::state"]
        [::std::mem::offset_of!(_XIMPreeditStateNotifyCallbackStruct, state) - 0usize];
};
pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = ::std::os::raw::c_ulong;
pub type XIMStringConversionFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStringConversionText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMStringConversionFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMStringConversionText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStringConversionText__bindgen_ty_1 {
    pub mbs: *mut ::std::os::raw::c_char,
    pub wcs: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::mbs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, mbs) - 0usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::wcs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, wcs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText"]
        [::std::mem::size_of::<_XIMStringConversionText>() - 32usize];
    ["Alignment of _XIMStringConversionText"]
        [::std::mem::align_of::<_XIMStringConversionText>() - 8usize];
    ["Offset of field: _XIMStringConversionText::length"]
        [::std::mem::offset_of!(_XIMStringConversionText, length) - 0usize];
    ["Offset of field: _XIMStringConversionText::feedback"]
        [::std::mem::offset_of!(_XIMStringConversionText, feedback) - 8usize];
    ["Offset of field: _XIMStringConversionText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMStringConversionText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMStringConversionText::string"]
        [::std::mem::offset_of!(_XIMStringConversionText, string) - 24usize];
};
pub type XIMStringConversionText = _XIMStringConversionText;
pub type XIMStringConversionPosition = ::std::os::raw::c_ushort;
pub type XIMStringConversionType = ::std::os::raw::c_ushort;
pub type XIMStringConversionOperation = ::std::os::raw::c_ushort;
pub const XIMCaretDirection_XIMForwardChar: XIMCaretDirection = 0;
pub const XIMCaretDirection_XIMBackwardChar: XIMCaretDirection = 1;
pub const XIMCaretDirection_XIMForwardWord: XIMCaretDirection = 2;
pub const XIMCaretDirection_XIMBackwardWord: XIMCaretDirection = 3;
pub const XIMCaretDirection_XIMCaretUp: XIMCaretDirection = 4;
pub const XIMCaretDirection_XIMCaretDown: XIMCaretDirection = 5;
pub const XIMCaretDirection_XIMNextLine: XIMCaretDirection = 6;
pub const XIMCaretDirection_XIMPreviousLine: XIMCaretDirection = 7;
pub const XIMCaretDirection_XIMLineStart: XIMCaretDirection = 8;
pub const XIMCaretDirection_XIMLineEnd: XIMCaretDirection = 9;
pub const XIMCaretDirection_XIMAbsolutePosition: XIMCaretDirection = 10;
pub const XIMCaretDirection_XIMDontChange: XIMCaretDirection = 11;
pub type XIMCaretDirection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMStringConversionCallbackStruct {
    pub position: XIMStringConversionPosition,
    pub direction: XIMCaretDirection,
    pub operation: XIMStringConversionOperation,
    pub factor: ::std::os::raw::c_ushort,
    pub text: *mut XIMStringConversionText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionCallbackStruct"]
        [::std::mem::size_of::<_XIMStringConversionCallbackStruct>() - 24usize];
    ["Alignment of _XIMStringConversionCallbackStruct"]
        [::std::mem::align_of::<_XIMStringConversionCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::operation"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, operation) - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::factor"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, factor) - 10usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, text) - 16usize];
};
pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditDrawCallbackStruct {
    pub caret: ::std::os::raw::c_int,
    pub chg_first: ::std::os::raw::c_int,
    pub chg_length: ::std::os::raw::c_int,
    pub text: *mut XIMText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditDrawCallbackStruct>() - 24usize];
    ["Alignment of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::caret"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, caret) - 0usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_first"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_first) - 4usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_length"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_length) - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, text) - 16usize];
};
pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;
pub const XIMCaretStyle_XIMIsInvisible: XIMCaretStyle = 0;
pub const XIMCaretStyle_XIMIsPrimary: XIMCaretStyle = 1;
pub const XIMCaretStyle_XIMIsSecondary: XIMCaretStyle = 2;
pub type XIMCaretStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditCaretCallbackStruct {
    pub position: ::std::os::raw::c_int,
    pub direction: XIMCaretDirection,
    pub style: XIMCaretStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditCaretCallbackStruct>() - 12usize];
    ["Alignment of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditCaretCallbackStruct>() - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::style"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, style) - 8usize];
};
pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;
pub const XIMStatusDataType_XIMTextType: XIMStatusDataType = 0;
pub const XIMStatusDataType_XIMBitmapType: XIMStatusDataType = 1;
pub type XIMStatusDataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStatusDrawCallbackStruct {
    pub type_: XIMStatusDataType,
    pub data: _XIMStatusDrawCallbackStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
    pub text: *mut XIMText,
    pub bitmap: Pixmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::text"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, text) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::bitmap"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, bitmap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct>() - 16usize];
    ["Alignment of _XIMStatusDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::type_"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, type_) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::data"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, data) - 8usize];
};
pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTrigger {
    pub keysym: KeySym,
    pub modifier: ::std::os::raw::c_int,
    pub modifier_mask: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTrigger"][::std::mem::size_of::<_XIMHotKeyTrigger>() - 16usize];
    ["Alignment of _XIMHotKeyTrigger"][::std::mem::align_of::<_XIMHotKeyTrigger>() - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::keysym"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, keysym) - 0usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier) - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier_mask"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier_mask) - 12usize];
};
pub type XIMHotKeyTrigger = _XIMHotKeyTrigger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTriggers {
    pub num_hot_key: ::std::os::raw::c_int,
    pub key: *mut XIMHotKeyTrigger,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTriggers"][::std::mem::size_of::<_XIMHotKeyTriggers>() - 16usize];
    ["Alignment of _XIMHotKeyTriggers"][::std::mem::align_of::<_XIMHotKeyTriggers>() - 8usize];
    ["Offset of field: _XIMHotKeyTriggers::num_hot_key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, num_hot_key) - 0usize];
    ["Offset of field: _XIMHotKeyTriggers::key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, key) - 8usize];
};
pub type XIMHotKeyTriggers = _XIMHotKeyTriggers;
pub type XIMHotKeyState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMValuesList {
    pub count_values: ::std::os::raw::c_ushort,
    pub supported_values: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMValuesList"][::std::mem::size_of::<XIMValuesList>() - 16usize];
    ["Alignment of XIMValuesList"][::std::mem::align_of::<XIMValuesList>() - 8usize];
    ["Offset of field: XIMValuesList::count_values"]
        [::std::mem::offset_of!(XIMValuesList, count_values) - 0usize];
    ["Offset of field: XIMValuesList::supported_values"]
        [::std::mem::offset_of!(XIMValuesList, supported_values) - 8usize];
};
unsafe extern "C" {
    pub static mut _Xdebug: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLoadQueryFont(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XFontStruct;
}
unsafe extern "C" {
    pub fn XQueryFont(arg1: *mut XDisplay, arg2: XID) -> *mut XFontStruct;
}
unsafe extern "C" {
    pub fn XGetMotionEvents(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Time,
        arg4: Time,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut XTimeCoord;
}
unsafe extern "C" {
    pub fn XDeleteModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XGetModifierMapping(arg1: *mut XDisplay) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XInsertModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XNewModifiermap(arg1: ::std::os::raw::c_int) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XCreateImage(
        arg1: *mut XDisplay,
        arg2: *mut Visual,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XInitImage(arg1: *mut XImage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetImage(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XGetSubImage(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
        arg9: *mut XImage,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XOpenDisplay(arg1: *const ::std::os::raw::c_char) -> *mut XDisplay;
}
unsafe extern "C" {
    pub fn XrmInitialize();
}
unsafe extern "C" {
    pub fn XFetchBytes(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XFetchBuffer(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetAtomName(arg1: *mut XDisplay, arg2: Atom) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetAtomNames(
        arg1: *mut XDisplay,
        arg2: *mut Atom,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDefault(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayName(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XKeysymToString(arg1: KeySym) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSynchronize(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut XDisplay,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn XSetAfterFunction(
        arg1: *mut XDisplay,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut XDisplay) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut XDisplay,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut XDisplay) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn XInternAtom(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom;
}
unsafe extern "C" {
    pub fn XInternAtoms(
        arg1: *mut XDisplay,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyColormapAndFree(arg1: *mut XDisplay, arg2: Colormap) -> Colormap;
}
unsafe extern "C" {
    pub fn XCreateColormap(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Visual,
        arg4: ::std::os::raw::c_int,
    ) -> Colormap;
}
unsafe extern "C" {
    pub fn XCreatePixmapCursor(
        arg1: *mut XDisplay,
        arg2: Pixmap,
        arg3: Pixmap,
        arg4: *mut XColor,
        arg5: *mut XColor,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> Cursor;
}
unsafe extern "C" {
    pub fn XCreateGlyphCursor(
        arg1: *mut XDisplay,
        arg2: Font,
        arg3: Font,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *const XColor,
        arg7: *const XColor,
    ) -> Cursor;
}
unsafe extern "C" {
    pub fn XCreateFontCursor(arg1: *mut XDisplay, arg2: ::std::os::raw::c_uint) -> Cursor;
}
unsafe extern "C" {
    pub fn XLoadFont(arg1: *mut XDisplay, arg2: *const ::std::os::raw::c_char) -> Font;
}
unsafe extern "C" {
    pub fn XCreateGC(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> GC;
}
unsafe extern "C" {
    pub fn XGContextFromGC(arg1: GC) -> GContext;
}
unsafe extern "C" {
    pub fn XFlushGC(arg1: *mut XDisplay, arg2: GC);
}
unsafe extern "C" {
    pub fn XCreatePixmap(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreateBitmapFromData(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreatePixmapFromBitmapData(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreateSimpleWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_ulong,
        arg9: ::std::os::raw::c_ulong,
    ) -> Window;
}
unsafe extern "C" {
    pub fn XGetSelectionOwner(arg1: *mut XDisplay, arg2: Atom) -> Window;
}
unsafe extern "C" {
    pub fn XCreateWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: *mut Visual,
        arg11: ::std::os::raw::c_ulong,
        arg12: *mut XSetWindowAttributes,
    ) -> Window;
}
unsafe extern "C" {
    pub fn XListInstalledColormaps(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Colormap;
}
unsafe extern "C" {
    pub fn XListFonts(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListFontsWithInfo(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut XFontStruct,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetFontPath(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListExtensions(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListProperties(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Atom;
}
unsafe extern "C" {
    pub fn XListHosts(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XHostAddress;
}
unsafe extern "C" {
    pub fn XKeycodeToKeysym(
        arg1: *mut XDisplay,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> KeySym;
}
unsafe extern "C" {
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::std::os::raw::c_int) -> KeySym;
}
unsafe extern "C" {
    pub fn XGetKeyboardMapping(
        arg1: *mut XDisplay,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
unsafe extern "C" {
    pub fn XStringToKeysym(arg1: *const ::std::os::raw::c_char) -> KeySym;
}
unsafe extern "C" {
    pub fn XMaxRequestSize(arg1: *mut XDisplay) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XExtendedMaxRequestSize(arg1: *mut XDisplay) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XResourceManagerString(arg1: *mut XDisplay) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayMotionBufferSize(arg1: *mut XDisplay) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
}
unsafe extern "C" {
    pub fn XInitThreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeThreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLockDisplay(arg1: *mut XDisplay);
}
unsafe extern "C" {
    pub fn XUnlockDisplay(arg1: *mut XDisplay);
}
unsafe extern "C" {
    pub fn XInitExtension(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XExtCodes;
}
unsafe extern "C" {
    pub fn XAddExtension(arg1: *mut XDisplay) -> *mut XExtCodes;
}
unsafe extern "C" {
    pub fn XFindOnExtensionList(
        arg1: *mut *mut XExtData,
        arg2: ::std::os::raw::c_int,
    ) -> *mut XExtData;
}
unsafe extern "C" {
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
}
unsafe extern "C" {
    pub fn XRootWindow(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> Window;
}
unsafe extern "C" {
    pub fn XDefaultRootWindow(arg1: *mut XDisplay) -> Window;
}
unsafe extern "C" {
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
}
unsafe extern "C" {
    pub fn XDefaultVisual(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> *mut Visual;
}
unsafe extern "C" {
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
}
unsafe extern "C" {
    pub fn XDefaultGC(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> GC;
}
unsafe extern "C" {
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
}
unsafe extern "C" {
    pub fn XBlackPixel(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XWhitePixel(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XAllPlanes() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XNextRequest(arg1: *mut XDisplay) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XLastKnownRequestProcessed(arg1: *mut XDisplay) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XServerVendor(arg1: *mut XDisplay) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayString(arg1: *mut XDisplay) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDefaultColormap(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> Colormap;
}
unsafe extern "C" {
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
}
unsafe extern "C" {
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut XDisplay;
}
unsafe extern "C" {
    pub fn XScreenOfDisplay(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> *mut Screen;
}
unsafe extern "C" {
    pub fn XDefaultScreenOfDisplay(arg1: *mut XDisplay) -> *mut Screen;
}
unsafe extern "C" {
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
pub type XErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut XDisplay, arg2: *mut XErrorEvent) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
}
pub type XIOErrorHandler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut XDisplay) -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
}
pub type XIOErrorExitHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut XDisplay, arg2: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn XSetIOErrorExitHandler(
        arg1: *mut XDisplay,
        arg2: XIOErrorExitHandler,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn XListPixmapFormats(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut XPixmapFormatValues;
}
unsafe extern "C" {
    pub fn XListDepths(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReconfigureWMWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWMProtocols(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut Atom,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWMProtocols(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XIconifyWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWithdrawWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetCommand(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWMColormapWindows(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut Window,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWMColormapWindows(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Window,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeStringList(arg1: *mut *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn XSetTransientForHint(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XActivateScreenSaver(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddHost(arg1: *mut XDisplay, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddHosts(
        arg1: *mut XDisplay,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddToExtensionList(
        arg1: *mut *mut _XExtData,
        arg2: *mut XExtData,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddToSaveSet(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColorCells(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColorPlanes(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_ulong,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocNamedColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllowEvents(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAutoRepeatOff(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAutoRepeatOn(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBell(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapBitOrder(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapPad(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapUnit(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCellsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeActivePointerGrab(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_uint,
        arg3: Cursor,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeGC(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeKeyboardControl(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut XKeyboardControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeKeyboardMapping(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut KeySym,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangePointerControl(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeProperty(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Atom,
        arg4: Atom,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_uchar,
        arg8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeSaveSet(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeWindowAttributes(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XSetWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckIfEvent(
        arg1: *mut XDisplay,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut XDisplay,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckMaskEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckTypedEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckTypedWindowEvent(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckWindowEvent(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindows(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindowsDown(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindowsUp(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XClearArea(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XClearWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCloseDisplay(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConfigureWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConnectionNumber(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConvertSelection(
        arg1: *mut XDisplay,
        arg2: Atom,
        arg3: Atom,
        arg4: Atom,
        arg5: Window,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyArea(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyGC(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: GC,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyPlane(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultDepth(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultScreen(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefineCursor(arg1: *mut XDisplay, arg2: Window, arg3: Cursor) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDeleteProperty(arg1: *mut XDisplay, arg2: Window, arg3: Atom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDestroyWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDestroySubwindows(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDoesBackingStore(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisableAccessControl(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayCells(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayHeight(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayHeightMM(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayKeycodes(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayPlanes(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayWidth(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayWidthMM(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawArc(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawArcs(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawImageString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawImageString16(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawLine(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawLines(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawPoint(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawPoints(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawRectangle(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawRectangles(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawSegments(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XSegment,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawString16(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawText(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawText16(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem16,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XEnableAccessControl(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XEventsQueued(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFetchName(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillArc(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillArcs(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillPolygon(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillRectangle(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillRectangles(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFlush(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XForceScreenSaver(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFree(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeColormap(arg1: *mut XDisplay, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeColors(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeCursor(arg1: *mut XDisplay, arg2: Cursor) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeExtensionList(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFont(arg1: *mut XDisplay, arg2: *mut XFontStruct) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontInfo(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut XFontStruct,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontNames(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontPath(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeGC(arg1: *mut XDisplay, arg2: GC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreePixmap(arg1: *mut XDisplay, arg2: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGeometry(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_int,
        arg11: *mut ::std::os::raw::c_int,
        arg12: *mut ::std::os::raw::c_int,
        arg13: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetErrorDatabaseText(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetErrorText(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetFontProperty(
        arg1: *mut XFontStruct,
        arg2: Atom,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetGCValues(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetGeometry(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: *mut Window,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: *mut ::std::os::raw::c_uint,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetIconName(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetInputFocus(
        arg1: *mut XDisplay,
        arg2: *mut Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetKeyboardControl(
        arg1: *mut XDisplay,
        arg2: *mut XKeyboardState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetPointerControl(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetPointerMapping(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetScreenSaver(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetTransientForHint(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWindowProperty(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Atom,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
        arg8: *mut Atom,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
        arg12: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWindowAttributes(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut XWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabButton(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: Window,
        arg10: Cursor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabKey(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabKeyboard(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabPointer(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Window,
        arg8: Cursor,
        arg9: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabServer(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XHeightOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XIfEvent(
        arg1: *mut XDisplay,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut XDisplay,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XImageByteOrder(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XInstallColormap(arg1: *mut XDisplay, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XKeysymToKeycode(arg1: *mut XDisplay, arg2: KeySym) -> KeyCode;
}
unsafe extern "C" {
    pub fn XKillClient(arg1: *mut XDisplay, arg2: XID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLookupColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLowerWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapRaised(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapSubwindows(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMaskEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMoveResizeWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMoveWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XNextEvent(arg1: *mut XDisplay, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XNoOp(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XParseColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XParseGeometry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPeekEvent(arg1: *mut XDisplay, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPeekIfEvent(
        arg1: *mut XDisplay,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut XDisplay,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPending(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProtocolRevision(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProtocolVersion(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPutBackEvent(arg1: *mut XDisplay, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPutImage(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XImage,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQLength(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestCursor(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestSize(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: Drawable,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestStipple(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestTile(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryColors(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryExtension(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryKeymap(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryPointer(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTextExtents(
        arg1: *mut XDisplay,
        arg2: XID,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTextExtents16(
        arg1: *mut XDisplay,
        arg2: XID,
        arg3: *const XChar2b,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTree(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut *mut Window,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRaiseWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReadBitmapFile(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut Pixmap,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReadBitmapFileData(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut *mut ::std::os::raw::c_uchar,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRebindKeysym(
        arg1: *mut XDisplay,
        arg2: KeySym,
        arg3: *mut KeySym,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_uchar,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRecolorCursor(
        arg1: *mut XDisplay,
        arg2: Cursor,
        arg3: *mut XColor,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveFromSaveSet(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveHost(arg1: *mut XDisplay, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveHosts(
        arg1: *mut XDisplay,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReparentWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XResetScreenSaver(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XResizeWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRestackWindows(
        arg1: *mut XDisplay,
        arg2: *mut Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRotateBuffers(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRotateWindowProperties(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XScreenCount(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSelectInput(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSendEvent(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_long,
        arg5: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetAccessControl(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetArcMode(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetBackground(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipMask(arg1: *mut XDisplay, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipOrigin(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipRectangles(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetCloseDownMode(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetCommand(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDashes(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFillRule(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFillStyle(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFont(arg1: *mut XDisplay, arg2: GC, arg3: Font) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFontPath(
        arg1: *mut XDisplay,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetForeground(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFunction(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetGraphicsExposures(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetIconName(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetInputFocus(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetLineAttributes(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetModifierMapping(
        arg1: *mut XDisplay,
        arg2: *mut XModifierKeymap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetPlaneMask(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetPointerMapping(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetScreenSaver(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetSelectionOwner(
        arg1: *mut XDisplay,
        arg2: Atom,
        arg3: Window,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetState(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetStipple(arg1: *mut XDisplay, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetSubwindowMode(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetTSOrigin(
        arg1: *mut XDisplay,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetTile(arg1: *mut XDisplay, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBackground(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBackgroundPixmap(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorder(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorderPixmap(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorderWidth(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowColormap(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Colormap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreBuffer(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreBytes(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreColors(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreName(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreNamedColor(
        arg1: *mut XDisplay,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSync(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextExtents(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextExtents16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextWidth(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextWidth16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTranslateCoordinates(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUndefineCursor(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabButton(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabKey(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabKeyboard(arg1: *mut XDisplay, arg2: Time) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabPointer(arg1: *mut XDisplay, arg2: Time) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabServer(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUninstallColormap(arg1: *mut XDisplay, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnloadFont(arg1: *mut XDisplay, arg2: Font) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnmapSubwindows(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnmapWindow(arg1: *mut XDisplay, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XVendorRelease(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWarpPointer(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWidthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWindowEvent(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWriteBitmapFile(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: Pixmap,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSupportsLocale() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetLocaleModifiers(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XOpenOM(
        arg1: *mut XDisplay,
        arg2: *mut _XrmHashBucketRec,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> XOM;
}
unsafe extern "C" {
    pub fn XCloseOM(arg1: XOM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayOfOM(arg1: XOM) -> *mut XDisplay;
}
unsafe extern "C" {
    pub fn XLocaleOfOM(arg1: XOM) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
}
unsafe extern "C" {
    pub fn XDestroyOC(arg1: XOC);
}
unsafe extern "C" {
    pub fn XOMOfOC(arg1: XOC) -> XOM;
}
unsafe extern "C" {
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateFontSet(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> XFontSet;
}
unsafe extern "C" {
    pub fn XFreeFontSet(arg1: *mut XDisplay, arg2: XFontSet);
}
unsafe extern "C" {
    pub fn XFontsOfFontSet(
        arg1: XFontSet,
        arg2: *mut *mut *mut XFontStruct,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XContextDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XContextualDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
}
unsafe extern "C" {
    pub fn XmbTextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbTextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbDrawText(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawText(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XwcTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawText(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XmbDrawString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XmbDrawImageString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawImageString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawImageString(
        arg1: *mut XDisplay,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XOpenIM(
        arg1: *mut XDisplay,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> XIM;
}
unsafe extern "C" {
    pub fn XCloseIM(arg1: XIM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayOfIM(arg1: XIM) -> *mut XDisplay;
}
unsafe extern "C" {
    pub fn XLocaleOfIM(arg1: XIM) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
}
unsafe extern "C" {
    pub fn XDestroyIC(arg1: XIC);
}
unsafe extern "C" {
    pub fn XSetICFocus(arg1: XIC);
}
unsafe extern "C" {
    pub fn XUnsetICFocus(arg1: XIC);
}
unsafe extern "C" {
    pub fn XwcResetIC(arg1: XIC) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XIMOfIC(arg1: XIC) -> XIM;
}
unsafe extern "C" {
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8LookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XVaCreateNestedList(arg1: ::std::os::raw::c_int, ...) -> XVaNestedList;
}
unsafe extern "C" {
    pub fn XRegisterIMInstantiateCallback(
        arg1: *mut XDisplay,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnregisterIMInstantiateCallback(
        arg1: *mut XDisplay,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
pub type XConnectionWatchProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut XDisplay,
        arg2: XPointer,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XPointer,
    ),
>;
unsafe extern "C" {
    pub fn XInternalConnectionNumbers(
        arg1: *mut XDisplay,
        arg2: *mut *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProcessInternalConnection(arg1: *mut XDisplay, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn XAddConnectionWatch(
        arg1: *mut XDisplay,
        arg2: XConnectionWatchProc,
        arg3: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveConnectionWatch(arg1: *mut XDisplay, arg2: XConnectionWatchProc, arg3: XPointer);
}
unsafe extern "C" {
    pub fn XSetAuthorization(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn _Xmbtowc(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Xwctomb(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetEventData(
        arg1: *mut XDisplay,
        arg2: *mut XGenericEventCookie,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeEventData(arg1: *mut XDisplay, arg2: *mut XGenericEventCookie);
}
unsafe extern "C" {
    pub fn XGetXCBConnection(dpy: *mut XDisplay) -> *mut xcb_connection_t;
}
pub const XEventQueueOwner_XlibOwnsEventQueue: XEventQueueOwner = 0;
pub const XEventQueueOwner_XCBOwnsEventQueue: XEventQueueOwner = 1;
pub type XEventQueueOwner = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn XSetEventQueueOwner(dpy: *mut XDisplay, owner: XEventQueueOwner);
}
pub type XEventClass = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExtensionVersion {
    pub present: ::std::os::raw::c_int,
    pub major_version: ::std::os::raw::c_short,
    pub minor_version: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExtensionVersion"][::std::mem::size_of::<XExtensionVersion>() - 8usize];
    ["Alignment of XExtensionVersion"][::std::mem::align_of::<XExtensionVersion>() - 4usize];
    ["Offset of field: XExtensionVersion::present"]
        [::std::mem::offset_of!(XExtensionVersion, present) - 0usize];
    ["Offset of field: XExtensionVersion::major_version"]
        [::std::mem::offset_of!(XExtensionVersion, major_version) - 4usize];
    ["Offset of field: XExtensionVersion::minor_version"]
        [::std::mem::offset_of!(XExtensionVersion, minor_version) - 6usize];
};
unsafe extern "C" {
    pub fn _XiGetDevicePresenceNotifyEvent(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _xibaddevice(dpy: *mut XDisplay, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadclass(dpy: *mut XDisplay, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadevent(dpy: *mut XDisplay, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadmode(dpy: *mut XDisplay, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xidevicebusy(dpy: *mut XDisplay, error: *mut ::std::os::raw::c_int);
}
pub type XAnyClassPtr = *mut _XAnyClassinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceKeyEvent"][::std::mem::size_of::<XDeviceKeyEvent>() - 136usize];
    ["Alignment of XDeviceKeyEvent"][::std::mem::align_of::<XDeviceKeyEvent>() - 8usize];
    ["Offset of field: XDeviceKeyEvent::type_"]
        [::std::mem::offset_of!(XDeviceKeyEvent, type_) - 0usize];
    ["Offset of field: XDeviceKeyEvent::serial"]
        [::std::mem::offset_of!(XDeviceKeyEvent, serial) - 8usize];
    ["Offset of field: XDeviceKeyEvent::send_event"]
        [::std::mem::offset_of!(XDeviceKeyEvent, send_event) - 16usize];
    ["Offset of field: XDeviceKeyEvent::display"]
        [::std::mem::offset_of!(XDeviceKeyEvent, display) - 24usize];
    ["Offset of field: XDeviceKeyEvent::window"]
        [::std::mem::offset_of!(XDeviceKeyEvent, window) - 32usize];
    ["Offset of field: XDeviceKeyEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceKeyEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceKeyEvent::root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, root) - 48usize];
    ["Offset of field: XDeviceKeyEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceKeyEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceKeyEvent::time"]
        [::std::mem::offset_of!(XDeviceKeyEvent, time) - 64usize];
    ["Offset of field: XDeviceKeyEvent::x"][::std::mem::offset_of!(XDeviceKeyEvent, x) - 72usize];
    ["Offset of field: XDeviceKeyEvent::y"][::std::mem::offset_of!(XDeviceKeyEvent, y) - 76usize];
    ["Offset of field: XDeviceKeyEvent::x_root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, x_root) - 80usize];
    ["Offset of field: XDeviceKeyEvent::y_root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, y_root) - 84usize];
    ["Offset of field: XDeviceKeyEvent::state"]
        [::std::mem::offset_of!(XDeviceKeyEvent, state) - 88usize];
    ["Offset of field: XDeviceKeyEvent::keycode"]
        [::std::mem::offset_of!(XDeviceKeyEvent, keycode) - 92usize];
    ["Offset of field: XDeviceKeyEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceKeyEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceKeyEvent::device_state"]
        [::std::mem::offset_of!(XDeviceKeyEvent, device_state) - 100usize];
    ["Offset of field: XDeviceKeyEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceKeyEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceKeyEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceKeyEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceKeyEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceKeyEvent, axis_data) - 108usize];
};
pub type XDeviceKeyPressedEvent = XDeviceKeyEvent;
pub type XDeviceKeyReleasedEvent = XDeviceKeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceButtonEvent"][::std::mem::size_of::<XDeviceButtonEvent>() - 136usize];
    ["Alignment of XDeviceButtonEvent"][::std::mem::align_of::<XDeviceButtonEvent>() - 8usize];
    ["Offset of field: XDeviceButtonEvent::type_"]
        [::std::mem::offset_of!(XDeviceButtonEvent, type_) - 0usize];
    ["Offset of field: XDeviceButtonEvent::serial"]
        [::std::mem::offset_of!(XDeviceButtonEvent, serial) - 8usize];
    ["Offset of field: XDeviceButtonEvent::send_event"]
        [::std::mem::offset_of!(XDeviceButtonEvent, send_event) - 16usize];
    ["Offset of field: XDeviceButtonEvent::display"]
        [::std::mem::offset_of!(XDeviceButtonEvent, display) - 24usize];
    ["Offset of field: XDeviceButtonEvent::window"]
        [::std::mem::offset_of!(XDeviceButtonEvent, window) - 32usize];
    ["Offset of field: XDeviceButtonEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceButtonEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceButtonEvent::root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, root) - 48usize];
    ["Offset of field: XDeviceButtonEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceButtonEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceButtonEvent::time"]
        [::std::mem::offset_of!(XDeviceButtonEvent, time) - 64usize];
    ["Offset of field: XDeviceButtonEvent::x"]
        [::std::mem::offset_of!(XDeviceButtonEvent, x) - 72usize];
    ["Offset of field: XDeviceButtonEvent::y"]
        [::std::mem::offset_of!(XDeviceButtonEvent, y) - 76usize];
    ["Offset of field: XDeviceButtonEvent::x_root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, x_root) - 80usize];
    ["Offset of field: XDeviceButtonEvent::y_root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, y_root) - 84usize];
    ["Offset of field: XDeviceButtonEvent::state"]
        [::std::mem::offset_of!(XDeviceButtonEvent, state) - 88usize];
    ["Offset of field: XDeviceButtonEvent::button"]
        [::std::mem::offset_of!(XDeviceButtonEvent, button) - 92usize];
    ["Offset of field: XDeviceButtonEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceButtonEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceButtonEvent::device_state"]
        [::std::mem::offset_of!(XDeviceButtonEvent, device_state) - 100usize];
    ["Offset of field: XDeviceButtonEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceButtonEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceButtonEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceButtonEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceButtonEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceButtonEvent, axis_data) - 108usize];
};
pub type XDeviceButtonPressedEvent = XDeviceButtonEvent;
pub type XDeviceButtonReleasedEvent = XDeviceButtonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceMotionEvent"][::std::mem::size_of::<XDeviceMotionEvent>() - 136usize];
    ["Alignment of XDeviceMotionEvent"][::std::mem::align_of::<XDeviceMotionEvent>() - 8usize];
    ["Offset of field: XDeviceMotionEvent::type_"]
        [::std::mem::offset_of!(XDeviceMotionEvent, type_) - 0usize];
    ["Offset of field: XDeviceMotionEvent::serial"]
        [::std::mem::offset_of!(XDeviceMotionEvent, serial) - 8usize];
    ["Offset of field: XDeviceMotionEvent::send_event"]
        [::std::mem::offset_of!(XDeviceMotionEvent, send_event) - 16usize];
    ["Offset of field: XDeviceMotionEvent::display"]
        [::std::mem::offset_of!(XDeviceMotionEvent, display) - 24usize];
    ["Offset of field: XDeviceMotionEvent::window"]
        [::std::mem::offset_of!(XDeviceMotionEvent, window) - 32usize];
    ["Offset of field: XDeviceMotionEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceMotionEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceMotionEvent::root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, root) - 48usize];
    ["Offset of field: XDeviceMotionEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceMotionEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceMotionEvent::time"]
        [::std::mem::offset_of!(XDeviceMotionEvent, time) - 64usize];
    ["Offset of field: XDeviceMotionEvent::x"]
        [::std::mem::offset_of!(XDeviceMotionEvent, x) - 72usize];
    ["Offset of field: XDeviceMotionEvent::y"]
        [::std::mem::offset_of!(XDeviceMotionEvent, y) - 76usize];
    ["Offset of field: XDeviceMotionEvent::x_root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, x_root) - 80usize];
    ["Offset of field: XDeviceMotionEvent::y_root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, y_root) - 84usize];
    ["Offset of field: XDeviceMotionEvent::state"]
        [::std::mem::offset_of!(XDeviceMotionEvent, state) - 88usize];
    ["Offset of field: XDeviceMotionEvent::is_hint"]
        [::std::mem::offset_of!(XDeviceMotionEvent, is_hint) - 92usize];
    ["Offset of field: XDeviceMotionEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceMotionEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceMotionEvent::device_state"]
        [::std::mem::offset_of!(XDeviceMotionEvent, device_state) - 100usize];
    ["Offset of field: XDeviceMotionEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceMotionEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceMotionEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceMotionEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceMotionEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceMotionEvent, axis_data) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceFocusChangeEvent"][::std::mem::size_of::<XDeviceFocusChangeEvent>() - 64usize];
    ["Alignment of XDeviceFocusChangeEvent"]
        [::std::mem::align_of::<XDeviceFocusChangeEvent>() - 8usize];
    ["Offset of field: XDeviceFocusChangeEvent::type_"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, type_) - 0usize];
    ["Offset of field: XDeviceFocusChangeEvent::serial"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, serial) - 8usize];
    ["Offset of field: XDeviceFocusChangeEvent::send_event"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, send_event) - 16usize];
    ["Offset of field: XDeviceFocusChangeEvent::display"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, display) - 24usize];
    ["Offset of field: XDeviceFocusChangeEvent::window"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, window) - 32usize];
    ["Offset of field: XDeviceFocusChangeEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceFocusChangeEvent::mode"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, mode) - 48usize];
    ["Offset of field: XDeviceFocusChangeEvent::detail"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, detail) - 52usize];
    ["Offset of field: XDeviceFocusChangeEvent::time"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, time) - 56usize];
};
pub type XDeviceFocusInEvent = XDeviceFocusChangeEvent;
pub type XDeviceFocusOutEvent = XDeviceFocusChangeEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XProximityNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XProximityNotifyEvent"][::std::mem::size_of::<XProximityNotifyEvent>() - 128usize];
    ["Alignment of XProximityNotifyEvent"]
        [::std::mem::align_of::<XProximityNotifyEvent>() - 8usize];
    ["Offset of field: XProximityNotifyEvent::type_"]
        [::std::mem::offset_of!(XProximityNotifyEvent, type_) - 0usize];
    ["Offset of field: XProximityNotifyEvent::serial"]
        [::std::mem::offset_of!(XProximityNotifyEvent, serial) - 8usize];
    ["Offset of field: XProximityNotifyEvent::send_event"]
        [::std::mem::offset_of!(XProximityNotifyEvent, send_event) - 16usize];
    ["Offset of field: XProximityNotifyEvent::display"]
        [::std::mem::offset_of!(XProximityNotifyEvent, display) - 24usize];
    ["Offset of field: XProximityNotifyEvent::window"]
        [::std::mem::offset_of!(XProximityNotifyEvent, window) - 32usize];
    ["Offset of field: XProximityNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XProximityNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XProximityNotifyEvent::root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, root) - 48usize];
    ["Offset of field: XProximityNotifyEvent::subwindow"]
        [::std::mem::offset_of!(XProximityNotifyEvent, subwindow) - 56usize];
    ["Offset of field: XProximityNotifyEvent::time"]
        [::std::mem::offset_of!(XProximityNotifyEvent, time) - 64usize];
    ["Offset of field: XProximityNotifyEvent::x"]
        [::std::mem::offset_of!(XProximityNotifyEvent, x) - 72usize];
    ["Offset of field: XProximityNotifyEvent::y"]
        [::std::mem::offset_of!(XProximityNotifyEvent, y) - 76usize];
    ["Offset of field: XProximityNotifyEvent::x_root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, x_root) - 80usize];
    ["Offset of field: XProximityNotifyEvent::y_root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, y_root) - 84usize];
    ["Offset of field: XProximityNotifyEvent::state"]
        [::std::mem::offset_of!(XProximityNotifyEvent, state) - 88usize];
    ["Offset of field: XProximityNotifyEvent::same_screen"]
        [::std::mem::offset_of!(XProximityNotifyEvent, same_screen) - 92usize];
    ["Offset of field: XProximityNotifyEvent::device_state"]
        [::std::mem::offset_of!(XProximityNotifyEvent, device_state) - 96usize];
    ["Offset of field: XProximityNotifyEvent::axes_count"]
        [::std::mem::offset_of!(XProximityNotifyEvent, axes_count) - 100usize];
    ["Offset of field: XProximityNotifyEvent::first_axis"]
        [::std::mem::offset_of!(XProximityNotifyEvent, first_axis) - 101usize];
    ["Offset of field: XProximityNotifyEvent::axis_data"]
        [::std::mem::offset_of!(XProximityNotifyEvent, axis_data) - 104usize];
};
pub type XProximityInEvent = XProximityNotifyEvent;
pub type XProximityOutEvent = XProximityNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XInputClass {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XInputClass"][::std::mem::size_of::<XInputClass>() - 2usize];
    ["Alignment of XInputClass"][::std::mem::align_of::<XInputClass>() - 1usize];
    ["Offset of field: XInputClass::class"][::std::mem::offset_of!(XInputClass, class) - 0usize];
    ["Offset of field: XInputClass::length"][::std::mem::offset_of!(XInputClass, length) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceStateNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub num_classes: ::std::os::raw::c_int,
    pub data: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceStateNotifyEvent"]
        [::std::mem::size_of::<XDeviceStateNotifyEvent>() - 128usize];
    ["Alignment of XDeviceStateNotifyEvent"]
        [::std::mem::align_of::<XDeviceStateNotifyEvent>() - 8usize];
    ["Offset of field: XDeviceStateNotifyEvent::type_"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, type_) - 0usize];
    ["Offset of field: XDeviceStateNotifyEvent::serial"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, serial) - 8usize];
    ["Offset of field: XDeviceStateNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDeviceStateNotifyEvent::display"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, display) - 24usize];
    ["Offset of field: XDeviceStateNotifyEvent::window"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, window) - 32usize];
    ["Offset of field: XDeviceStateNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceStateNotifyEvent::time"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, time) - 48usize];
    ["Offset of field: XDeviceStateNotifyEvent::num_classes"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, num_classes) - 56usize];
    ["Offset of field: XDeviceStateNotifyEvent::data"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, data) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XValuatorStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_valuators: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub valuators: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XValuatorStatus"][::std::mem::size_of::<XValuatorStatus>() - 28usize];
    ["Alignment of XValuatorStatus"][::std::mem::align_of::<XValuatorStatus>() - 4usize];
    ["Offset of field: XValuatorStatus::class"]
        [::std::mem::offset_of!(XValuatorStatus, class) - 0usize];
    ["Offset of field: XValuatorStatus::length"]
        [::std::mem::offset_of!(XValuatorStatus, length) - 1usize];
    ["Offset of field: XValuatorStatus::num_valuators"]
        [::std::mem::offset_of!(XValuatorStatus, num_valuators) - 2usize];
    ["Offset of field: XValuatorStatus::mode"]
        [::std::mem::offset_of!(XValuatorStatus, mode) - 3usize];
    ["Offset of field: XValuatorStatus::valuators"]
        [::std::mem::offset_of!(XValuatorStatus, valuators) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_short,
    pub keys: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyStatus"][::std::mem::size_of::<XKeyStatus>() - 36usize];
    ["Alignment of XKeyStatus"][::std::mem::align_of::<XKeyStatus>() - 2usize];
    ["Offset of field: XKeyStatus::class"][::std::mem::offset_of!(XKeyStatus, class) - 0usize];
    ["Offset of field: XKeyStatus::length"][::std::mem::offset_of!(XKeyStatus, length) - 1usize];
    ["Offset of field: XKeyStatus::num_keys"]
        [::std::mem::offset_of!(XKeyStatus, num_keys) - 2usize];
    ["Offset of field: XKeyStatus::keys"][::std::mem::offset_of!(XKeyStatus, keys) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_buttons: ::std::os::raw::c_short,
    pub buttons: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonStatus"][::std::mem::size_of::<XButtonStatus>() - 36usize];
    ["Alignment of XButtonStatus"][::std::mem::align_of::<XButtonStatus>() - 2usize];
    ["Offset of field: XButtonStatus::class"]
        [::std::mem::offset_of!(XButtonStatus, class) - 0usize];
    ["Offset of field: XButtonStatus::length"]
        [::std::mem::offset_of!(XButtonStatus, length) - 1usize];
    ["Offset of field: XButtonStatus::num_buttons"]
        [::std::mem::offset_of!(XButtonStatus, num_buttons) - 2usize];
    ["Offset of field: XButtonStatus::buttons"]
        [::std::mem::offset_of!(XButtonStatus, buttons) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceMappingEvent"][::std::mem::size_of::<XDeviceMappingEvent>() - 72usize];
    ["Alignment of XDeviceMappingEvent"][::std::mem::align_of::<XDeviceMappingEvent>() - 8usize];
    ["Offset of field: XDeviceMappingEvent::type_"]
        [::std::mem::offset_of!(XDeviceMappingEvent, type_) - 0usize];
    ["Offset of field: XDeviceMappingEvent::serial"]
        [::std::mem::offset_of!(XDeviceMappingEvent, serial) - 8usize];
    ["Offset of field: XDeviceMappingEvent::send_event"]
        [::std::mem::offset_of!(XDeviceMappingEvent, send_event) - 16usize];
    ["Offset of field: XDeviceMappingEvent::display"]
        [::std::mem::offset_of!(XDeviceMappingEvent, display) - 24usize];
    ["Offset of field: XDeviceMappingEvent::window"]
        [::std::mem::offset_of!(XDeviceMappingEvent, window) - 32usize];
    ["Offset of field: XDeviceMappingEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceMappingEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceMappingEvent::time"]
        [::std::mem::offset_of!(XDeviceMappingEvent, time) - 48usize];
    ["Offset of field: XDeviceMappingEvent::request"]
        [::std::mem::offset_of!(XDeviceMappingEvent, request) - 56usize];
    ["Offset of field: XDeviceMappingEvent::first_keycode"]
        [::std::mem::offset_of!(XDeviceMappingEvent, first_keycode) - 60usize];
    ["Offset of field: XDeviceMappingEvent::count"]
        [::std::mem::offset_of!(XDeviceMappingEvent, count) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XChangeDeviceNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub request: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XChangeDeviceNotifyEvent"]
        [::std::mem::size_of::<XChangeDeviceNotifyEvent>() - 64usize];
    ["Alignment of XChangeDeviceNotifyEvent"]
        [::std::mem::align_of::<XChangeDeviceNotifyEvent>() - 8usize];
    ["Offset of field: XChangeDeviceNotifyEvent::type_"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, type_) - 0usize];
    ["Offset of field: XChangeDeviceNotifyEvent::serial"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, serial) - 8usize];
    ["Offset of field: XChangeDeviceNotifyEvent::send_event"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, send_event) - 16usize];
    ["Offset of field: XChangeDeviceNotifyEvent::display"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, display) - 24usize];
    ["Offset of field: XChangeDeviceNotifyEvent::window"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, window) - 32usize];
    ["Offset of field: XChangeDeviceNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XChangeDeviceNotifyEvent::time"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, time) - 48usize];
    ["Offset of field: XChangeDeviceNotifyEvent::request"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, request) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevicePresenceNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub time: Time,
    pub devchange: ::std::os::raw::c_int,
    pub deviceid: XID,
    pub control: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevicePresenceNotifyEvent"]
        [::std::mem::size_of::<XDevicePresenceNotifyEvent>() - 72usize];
    ["Alignment of XDevicePresenceNotifyEvent"]
        [::std::mem::align_of::<XDevicePresenceNotifyEvent>() - 8usize];
    ["Offset of field: XDevicePresenceNotifyEvent::type_"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, type_) - 0usize];
    ["Offset of field: XDevicePresenceNotifyEvent::serial"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, serial) - 8usize];
    ["Offset of field: XDevicePresenceNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDevicePresenceNotifyEvent::display"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, display) - 24usize];
    ["Offset of field: XDevicePresenceNotifyEvent::window"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, window) - 32usize];
    ["Offset of field: XDevicePresenceNotifyEvent::time"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, time) - 40usize];
    ["Offset of field: XDevicePresenceNotifyEvent::devchange"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, devchange) - 48usize];
    ["Offset of field: XDevicePresenceNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, deviceid) - 56usize];
    ["Offset of field: XDevicePresenceNotifyEvent::control"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, control) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevicePropertyNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut XDisplay,
    pub window: Window,
    pub time: Time,
    pub deviceid: XID,
    pub atom: Atom,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevicePropertyNotifyEvent"]
        [::std::mem::size_of::<XDevicePropertyNotifyEvent>() - 72usize];
    ["Alignment of XDevicePropertyNotifyEvent"]
        [::std::mem::align_of::<XDevicePropertyNotifyEvent>() - 8usize];
    ["Offset of field: XDevicePropertyNotifyEvent::type_"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, type_) - 0usize];
    ["Offset of field: XDevicePropertyNotifyEvent::serial"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, serial) - 8usize];
    ["Offset of field: XDevicePropertyNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDevicePropertyNotifyEvent::display"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, display) - 24usize];
    ["Offset of field: XDevicePropertyNotifyEvent::window"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, window) - 32usize];
    ["Offset of field: XDevicePropertyNotifyEvent::time"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, time) - 40usize];
    ["Offset of field: XDevicePropertyNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, deviceid) - 48usize];
    ["Offset of field: XDevicePropertyNotifyEvent::atom"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, atom) - 56usize];
    ["Offset of field: XDevicePropertyNotifyEvent::state"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, state) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFeedbackState"][::std::mem::size_of::<XFeedbackState>() - 24usize];
    ["Alignment of XFeedbackState"][::std::mem::align_of::<XFeedbackState>() - 8usize];
    ["Offset of field: XFeedbackState::class"]
        [::std::mem::offset_of!(XFeedbackState, class) - 0usize];
    ["Offset of field: XFeedbackState::length"]
        [::std::mem::offset_of!(XFeedbackState, length) - 8usize];
    ["Offset of field: XFeedbackState::id"][::std::mem::offset_of!(XFeedbackState, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKbdFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub click: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
    pub global_auto_repeat: ::std::os::raw::c_int,
    pub auto_repeats: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKbdFeedbackState"][::std::mem::size_of::<XKbdFeedbackState>() - 80usize];
    ["Alignment of XKbdFeedbackState"][::std::mem::align_of::<XKbdFeedbackState>() - 8usize];
    ["Offset of field: XKbdFeedbackState::class"]
        [::std::mem::offset_of!(XKbdFeedbackState, class) - 0usize];
    ["Offset of field: XKbdFeedbackState::length"]
        [::std::mem::offset_of!(XKbdFeedbackState, length) - 8usize];
    ["Offset of field: XKbdFeedbackState::id"]
        [::std::mem::offset_of!(XKbdFeedbackState, id) - 16usize];
    ["Offset of field: XKbdFeedbackState::click"]
        [::std::mem::offset_of!(XKbdFeedbackState, click) - 24usize];
    ["Offset of field: XKbdFeedbackState::percent"]
        [::std::mem::offset_of!(XKbdFeedbackState, percent) - 28usize];
    ["Offset of field: XKbdFeedbackState::pitch"]
        [::std::mem::offset_of!(XKbdFeedbackState, pitch) - 32usize];
    ["Offset of field: XKbdFeedbackState::duration"]
        [::std::mem::offset_of!(XKbdFeedbackState, duration) - 36usize];
    ["Offset of field: XKbdFeedbackState::led_mask"]
        [::std::mem::offset_of!(XKbdFeedbackState, led_mask) - 40usize];
    ["Offset of field: XKbdFeedbackState::global_auto_repeat"]
        [::std::mem::offset_of!(XKbdFeedbackState, global_auto_repeat) - 44usize];
    ["Offset of field: XKbdFeedbackState::auto_repeats"]
        [::std::mem::offset_of!(XKbdFeedbackState, auto_repeats) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPtrFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub accelNum: ::std::os::raw::c_int,
    pub accelDenom: ::std::os::raw::c_int,
    pub threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPtrFeedbackState"][::std::mem::size_of::<XPtrFeedbackState>() - 40usize];
    ["Alignment of XPtrFeedbackState"][::std::mem::align_of::<XPtrFeedbackState>() - 8usize];
    ["Offset of field: XPtrFeedbackState::class"]
        [::std::mem::offset_of!(XPtrFeedbackState, class) - 0usize];
    ["Offset of field: XPtrFeedbackState::length"]
        [::std::mem::offset_of!(XPtrFeedbackState, length) - 8usize];
    ["Offset of field: XPtrFeedbackState::id"]
        [::std::mem::offset_of!(XPtrFeedbackState, id) - 16usize];
    ["Offset of field: XPtrFeedbackState::accelNum"]
        [::std::mem::offset_of!(XPtrFeedbackState, accelNum) - 24usize];
    ["Offset of field: XPtrFeedbackState::accelDenom"]
        [::std::mem::offset_of!(XPtrFeedbackState, accelDenom) - 28usize];
    ["Offset of field: XPtrFeedbackState::threshold"]
        [::std::mem::offset_of!(XPtrFeedbackState, threshold) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIntegerFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub resolution: ::std::os::raw::c_int,
    pub minVal: ::std::os::raw::c_int,
    pub maxVal: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIntegerFeedbackState"][::std::mem::size_of::<XIntegerFeedbackState>() - 40usize];
    ["Alignment of XIntegerFeedbackState"]
        [::std::mem::align_of::<XIntegerFeedbackState>() - 8usize];
    ["Offset of field: XIntegerFeedbackState::class"]
        [::std::mem::offset_of!(XIntegerFeedbackState, class) - 0usize];
    ["Offset of field: XIntegerFeedbackState::length"]
        [::std::mem::offset_of!(XIntegerFeedbackState, length) - 8usize];
    ["Offset of field: XIntegerFeedbackState::id"]
        [::std::mem::offset_of!(XIntegerFeedbackState, id) - 16usize];
    ["Offset of field: XIntegerFeedbackState::resolution"]
        [::std::mem::offset_of!(XIntegerFeedbackState, resolution) - 24usize];
    ["Offset of field: XIntegerFeedbackState::minVal"]
        [::std::mem::offset_of!(XIntegerFeedbackState, minVal) - 28usize];
    ["Offset of field: XIntegerFeedbackState::maxVal"]
        [::std::mem::offset_of!(XIntegerFeedbackState, maxVal) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XStringFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub max_symbols: ::std::os::raw::c_int,
    pub num_syms_supported: ::std::os::raw::c_int,
    pub syms_supported: *mut KeySym,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XStringFeedbackState"][::std::mem::size_of::<XStringFeedbackState>() - 40usize];
    ["Alignment of XStringFeedbackState"][::std::mem::align_of::<XStringFeedbackState>() - 8usize];
    ["Offset of field: XStringFeedbackState::class"]
        [::std::mem::offset_of!(XStringFeedbackState, class) - 0usize];
    ["Offset of field: XStringFeedbackState::length"]
        [::std::mem::offset_of!(XStringFeedbackState, length) - 8usize];
    ["Offset of field: XStringFeedbackState::id"]
        [::std::mem::offset_of!(XStringFeedbackState, id) - 16usize];
    ["Offset of field: XStringFeedbackState::max_symbols"]
        [::std::mem::offset_of!(XStringFeedbackState, max_symbols) - 24usize];
    ["Offset of field: XStringFeedbackState::num_syms_supported"]
        [::std::mem::offset_of!(XStringFeedbackState, num_syms_supported) - 28usize];
    ["Offset of field: XStringFeedbackState::syms_supported"]
        [::std::mem::offset_of!(XStringFeedbackState, syms_supported) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XBellFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XBellFeedbackState"][::std::mem::size_of::<XBellFeedbackState>() - 40usize];
    ["Alignment of XBellFeedbackState"][::std::mem::align_of::<XBellFeedbackState>() - 8usize];
    ["Offset of field: XBellFeedbackState::class"]
        [::std::mem::offset_of!(XBellFeedbackState, class) - 0usize];
    ["Offset of field: XBellFeedbackState::length"]
        [::std::mem::offset_of!(XBellFeedbackState, length) - 8usize];
    ["Offset of field: XBellFeedbackState::id"]
        [::std::mem::offset_of!(XBellFeedbackState, id) - 16usize];
    ["Offset of field: XBellFeedbackState::percent"]
        [::std::mem::offset_of!(XBellFeedbackState, percent) - 24usize];
    ["Offset of field: XBellFeedbackState::pitch"]
        [::std::mem::offset_of!(XBellFeedbackState, pitch) - 28usize];
    ["Offset of field: XBellFeedbackState::duration"]
        [::std::mem::offset_of!(XBellFeedbackState, duration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLedFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub led_values: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLedFeedbackState"][::std::mem::size_of::<XLedFeedbackState>() - 32usize];
    ["Alignment of XLedFeedbackState"][::std::mem::align_of::<XLedFeedbackState>() - 8usize];
    ["Offset of field: XLedFeedbackState::class"]
        [::std::mem::offset_of!(XLedFeedbackState, class) - 0usize];
    ["Offset of field: XLedFeedbackState::length"]
        [::std::mem::offset_of!(XLedFeedbackState, length) - 8usize];
    ["Offset of field: XLedFeedbackState::id"]
        [::std::mem::offset_of!(XLedFeedbackState, id) - 16usize];
    ["Offset of field: XLedFeedbackState::led_values"]
        [::std::mem::offset_of!(XLedFeedbackState, led_values) - 24usize];
    ["Offset of field: XLedFeedbackState::led_mask"]
        [::std::mem::offset_of!(XLedFeedbackState, led_mask) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFeedbackControl"][::std::mem::size_of::<XFeedbackControl>() - 24usize];
    ["Alignment of XFeedbackControl"][::std::mem::align_of::<XFeedbackControl>() - 8usize];
    ["Offset of field: XFeedbackControl::class"]
        [::std::mem::offset_of!(XFeedbackControl, class) - 0usize];
    ["Offset of field: XFeedbackControl::length"]
        [::std::mem::offset_of!(XFeedbackControl, length) - 8usize];
    ["Offset of field: XFeedbackControl::id"]
        [::std::mem::offset_of!(XFeedbackControl, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPtrFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub accelNum: ::std::os::raw::c_int,
    pub accelDenom: ::std::os::raw::c_int,
    pub threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPtrFeedbackControl"][::std::mem::size_of::<XPtrFeedbackControl>() - 40usize];
    ["Alignment of XPtrFeedbackControl"][::std::mem::align_of::<XPtrFeedbackControl>() - 8usize];
    ["Offset of field: XPtrFeedbackControl::class"]
        [::std::mem::offset_of!(XPtrFeedbackControl, class) - 0usize];
    ["Offset of field: XPtrFeedbackControl::length"]
        [::std::mem::offset_of!(XPtrFeedbackControl, length) - 8usize];
    ["Offset of field: XPtrFeedbackControl::id"]
        [::std::mem::offset_of!(XPtrFeedbackControl, id) - 16usize];
    ["Offset of field: XPtrFeedbackControl::accelNum"]
        [::std::mem::offset_of!(XPtrFeedbackControl, accelNum) - 24usize];
    ["Offset of field: XPtrFeedbackControl::accelDenom"]
        [::std::mem::offset_of!(XPtrFeedbackControl, accelDenom) - 28usize];
    ["Offset of field: XPtrFeedbackControl::threshold"]
        [::std::mem::offset_of!(XPtrFeedbackControl, threshold) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKbdFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub click: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
    pub led_value: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub auto_repeat_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKbdFeedbackControl"][::std::mem::size_of::<XKbdFeedbackControl>() - 56usize];
    ["Alignment of XKbdFeedbackControl"][::std::mem::align_of::<XKbdFeedbackControl>() - 8usize];
    ["Offset of field: XKbdFeedbackControl::class"]
        [::std::mem::offset_of!(XKbdFeedbackControl, class) - 0usize];
    ["Offset of field: XKbdFeedbackControl::length"]
        [::std::mem::offset_of!(XKbdFeedbackControl, length) - 8usize];
    ["Offset of field: XKbdFeedbackControl::id"]
        [::std::mem::offset_of!(XKbdFeedbackControl, id) - 16usize];
    ["Offset of field: XKbdFeedbackControl::click"]
        [::std::mem::offset_of!(XKbdFeedbackControl, click) - 24usize];
    ["Offset of field: XKbdFeedbackControl::percent"]
        [::std::mem::offset_of!(XKbdFeedbackControl, percent) - 28usize];
    ["Offset of field: XKbdFeedbackControl::pitch"]
        [::std::mem::offset_of!(XKbdFeedbackControl, pitch) - 32usize];
    ["Offset of field: XKbdFeedbackControl::duration"]
        [::std::mem::offset_of!(XKbdFeedbackControl, duration) - 36usize];
    ["Offset of field: XKbdFeedbackControl::led_mask"]
        [::std::mem::offset_of!(XKbdFeedbackControl, led_mask) - 40usize];
    ["Offset of field: XKbdFeedbackControl::led_value"]
        [::std::mem::offset_of!(XKbdFeedbackControl, led_value) - 44usize];
    ["Offset of field: XKbdFeedbackControl::key"]
        [::std::mem::offset_of!(XKbdFeedbackControl, key) - 48usize];
    ["Offset of field: XKbdFeedbackControl::auto_repeat_mode"]
        [::std::mem::offset_of!(XKbdFeedbackControl, auto_repeat_mode) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XStringFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub num_keysyms: ::std::os::raw::c_int,
    pub syms_to_display: *mut KeySym,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XStringFeedbackControl"][::std::mem::size_of::<XStringFeedbackControl>() - 40usize];
    ["Alignment of XStringFeedbackControl"]
        [::std::mem::align_of::<XStringFeedbackControl>() - 8usize];
    ["Offset of field: XStringFeedbackControl::class"]
        [::std::mem::offset_of!(XStringFeedbackControl, class) - 0usize];
    ["Offset of field: XStringFeedbackControl::length"]
        [::std::mem::offset_of!(XStringFeedbackControl, length) - 8usize];
    ["Offset of field: XStringFeedbackControl::id"]
        [::std::mem::offset_of!(XStringFeedbackControl, id) - 16usize];
    ["Offset of field: XStringFeedbackControl::num_keysyms"]
        [::std::mem::offset_of!(XStringFeedbackControl, num_keysyms) - 24usize];
    ["Offset of field: XStringFeedbackControl::syms_to_display"]
        [::std::mem::offset_of!(XStringFeedbackControl, syms_to_display) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIntegerFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub int_to_display: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIntegerFeedbackControl"][::std::mem::size_of::<XIntegerFeedbackControl>() - 32usize];
    ["Alignment of XIntegerFeedbackControl"]
        [::std::mem::align_of::<XIntegerFeedbackControl>() - 8usize];
    ["Offset of field: XIntegerFeedbackControl::class"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, class) - 0usize];
    ["Offset of field: XIntegerFeedbackControl::length"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, length) - 8usize];
    ["Offset of field: XIntegerFeedbackControl::id"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, id) - 16usize];
    ["Offset of field: XIntegerFeedbackControl::int_to_display"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, int_to_display) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XBellFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XBellFeedbackControl"][::std::mem::size_of::<XBellFeedbackControl>() - 40usize];
    ["Alignment of XBellFeedbackControl"][::std::mem::align_of::<XBellFeedbackControl>() - 8usize];
    ["Offset of field: XBellFeedbackControl::class"]
        [::std::mem::offset_of!(XBellFeedbackControl, class) - 0usize];
    ["Offset of field: XBellFeedbackControl::length"]
        [::std::mem::offset_of!(XBellFeedbackControl, length) - 8usize];
    ["Offset of field: XBellFeedbackControl::id"]
        [::std::mem::offset_of!(XBellFeedbackControl, id) - 16usize];
    ["Offset of field: XBellFeedbackControl::percent"]
        [::std::mem::offset_of!(XBellFeedbackControl, percent) - 24usize];
    ["Offset of field: XBellFeedbackControl::pitch"]
        [::std::mem::offset_of!(XBellFeedbackControl, pitch) - 28usize];
    ["Offset of field: XBellFeedbackControl::duration"]
        [::std::mem::offset_of!(XBellFeedbackControl, duration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLedFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub led_mask: ::std::os::raw::c_int,
    pub led_values: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLedFeedbackControl"][::std::mem::size_of::<XLedFeedbackControl>() - 32usize];
    ["Alignment of XLedFeedbackControl"][::std::mem::align_of::<XLedFeedbackControl>() - 8usize];
    ["Offset of field: XLedFeedbackControl::class"]
        [::std::mem::offset_of!(XLedFeedbackControl, class) - 0usize];
    ["Offset of field: XLedFeedbackControl::length"]
        [::std::mem::offset_of!(XLedFeedbackControl, length) - 8usize];
    ["Offset of field: XLedFeedbackControl::id"]
        [::std::mem::offset_of!(XLedFeedbackControl, id) - 16usize];
    ["Offset of field: XLedFeedbackControl::led_mask"]
        [::std::mem::offset_of!(XLedFeedbackControl, led_mask) - 24usize];
    ["Offset of field: XLedFeedbackControl::led_values"]
        [::std::mem::offset_of!(XLedFeedbackControl, led_values) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceControl"][::std::mem::size_of::<XDeviceControl>() - 16usize];
    ["Alignment of XDeviceControl"][::std::mem::align_of::<XDeviceControl>() - 8usize];
    ["Offset of field: XDeviceControl::control"]
        [::std::mem::offset_of!(XDeviceControl, control) - 0usize];
    ["Offset of field: XDeviceControl::length"]
        [::std::mem::offset_of!(XDeviceControl, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceResolutionControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub first_valuator: ::std::os::raw::c_int,
    pub num_valuators: ::std::os::raw::c_int,
    pub resolutions: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceResolutionControl"]
        [::std::mem::size_of::<XDeviceResolutionControl>() - 32usize];
    ["Alignment of XDeviceResolutionControl"]
        [::std::mem::align_of::<XDeviceResolutionControl>() - 8usize];
    ["Offset of field: XDeviceResolutionControl::control"]
        [::std::mem::offset_of!(XDeviceResolutionControl, control) - 0usize];
    ["Offset of field: XDeviceResolutionControl::length"]
        [::std::mem::offset_of!(XDeviceResolutionControl, length) - 8usize];
    ["Offset of field: XDeviceResolutionControl::first_valuator"]
        [::std::mem::offset_of!(XDeviceResolutionControl, first_valuator) - 12usize];
    ["Offset of field: XDeviceResolutionControl::num_valuators"]
        [::std::mem::offset_of!(XDeviceResolutionControl, num_valuators) - 16usize];
    ["Offset of field: XDeviceResolutionControl::resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionControl, resolutions) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceResolutionState {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub num_valuators: ::std::os::raw::c_int,
    pub resolutions: *mut ::std::os::raw::c_int,
    pub min_resolutions: *mut ::std::os::raw::c_int,
    pub max_resolutions: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceResolutionState"][::std::mem::size_of::<XDeviceResolutionState>() - 40usize];
    ["Alignment of XDeviceResolutionState"]
        [::std::mem::align_of::<XDeviceResolutionState>() - 8usize];
    ["Offset of field: XDeviceResolutionState::control"]
        [::std::mem::offset_of!(XDeviceResolutionState, control) - 0usize];
    ["Offset of field: XDeviceResolutionState::length"]
        [::std::mem::offset_of!(XDeviceResolutionState, length) - 8usize];
    ["Offset of field: XDeviceResolutionState::num_valuators"]
        [::std::mem::offset_of!(XDeviceResolutionState, num_valuators) - 12usize];
    ["Offset of field: XDeviceResolutionState::resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, resolutions) - 16usize];
    ["Offset of field: XDeviceResolutionState::min_resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, min_resolutions) - 24usize];
    ["Offset of field: XDeviceResolutionState::max_resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, max_resolutions) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceAbsCalibControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub min_x: ::std::os::raw::c_int,
    pub max_x: ::std::os::raw::c_int,
    pub min_y: ::std::os::raw::c_int,
    pub max_y: ::std::os::raw::c_int,
    pub flip_x: ::std::os::raw::c_int,
    pub flip_y: ::std::os::raw::c_int,
    pub rotation: ::std::os::raw::c_int,
    pub button_threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceAbsCalibControl"][::std::mem::size_of::<XDeviceAbsCalibControl>() - 48usize];
    ["Alignment of XDeviceAbsCalibControl"]
        [::std::mem::align_of::<XDeviceAbsCalibControl>() - 8usize];
    ["Offset of field: XDeviceAbsCalibControl::control"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, control) - 0usize];
    ["Offset of field: XDeviceAbsCalibControl::length"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, length) - 8usize];
    ["Offset of field: XDeviceAbsCalibControl::min_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, min_x) - 12usize];
    ["Offset of field: XDeviceAbsCalibControl::max_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, max_x) - 16usize];
    ["Offset of field: XDeviceAbsCalibControl::min_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, min_y) - 20usize];
    ["Offset of field: XDeviceAbsCalibControl::max_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, max_y) - 24usize];
    ["Offset of field: XDeviceAbsCalibControl::flip_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, flip_x) - 28usize];
    ["Offset of field: XDeviceAbsCalibControl::flip_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, flip_y) - 32usize];
    ["Offset of field: XDeviceAbsCalibControl::rotation"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, rotation) - 36usize];
    ["Offset of field: XDeviceAbsCalibControl::button_threshold"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, button_threshold) - 40usize];
};
pub type XDeviceAbsCalibState = XDeviceAbsCalibControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceAbsAreaControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub offset_x: ::std::os::raw::c_int,
    pub offset_y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub screen: ::std::os::raw::c_int,
    pub following: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceAbsAreaControl"][::std::mem::size_of::<XDeviceAbsAreaControl>() - 40usize];
    ["Alignment of XDeviceAbsAreaControl"]
        [::std::mem::align_of::<XDeviceAbsAreaControl>() - 8usize];
    ["Offset of field: XDeviceAbsAreaControl::control"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, control) - 0usize];
    ["Offset of field: XDeviceAbsAreaControl::length"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, length) - 8usize];
    ["Offset of field: XDeviceAbsAreaControl::offset_x"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, offset_x) - 12usize];
    ["Offset of field: XDeviceAbsAreaControl::offset_y"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, offset_y) - 16usize];
    ["Offset of field: XDeviceAbsAreaControl::width"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, width) - 20usize];
    ["Offset of field: XDeviceAbsAreaControl::height"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, height) - 24usize];
    ["Offset of field: XDeviceAbsAreaControl::screen"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, screen) - 28usize];
    ["Offset of field: XDeviceAbsAreaControl::following"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, following) - 32usize];
};
pub type XDeviceAbsAreaState = XDeviceAbsAreaControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceCoreControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceCoreControl"][::std::mem::size_of::<XDeviceCoreControl>() - 16usize];
    ["Alignment of XDeviceCoreControl"][::std::mem::align_of::<XDeviceCoreControl>() - 8usize];
    ["Offset of field: XDeviceCoreControl::control"]
        [::std::mem::offset_of!(XDeviceCoreControl, control) - 0usize];
    ["Offset of field: XDeviceCoreControl::length"]
        [::std::mem::offset_of!(XDeviceCoreControl, length) - 8usize];
    ["Offset of field: XDeviceCoreControl::status"]
        [::std::mem::offset_of!(XDeviceCoreControl, status) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceCoreState {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub iscore: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceCoreState"][::std::mem::size_of::<XDeviceCoreState>() - 24usize];
    ["Alignment of XDeviceCoreState"][::std::mem::align_of::<XDeviceCoreState>() - 8usize];
    ["Offset of field: XDeviceCoreState::control"]
        [::std::mem::offset_of!(XDeviceCoreState, control) - 0usize];
    ["Offset of field: XDeviceCoreState::length"]
        [::std::mem::offset_of!(XDeviceCoreState, length) - 8usize];
    ["Offset of field: XDeviceCoreState::status"]
        [::std::mem::offset_of!(XDeviceCoreState, status) - 12usize];
    ["Offset of field: XDeviceCoreState::iscore"]
        [::std::mem::offset_of!(XDeviceCoreState, iscore) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceEnableControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub enable: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceEnableControl"][::std::mem::size_of::<XDeviceEnableControl>() - 16usize];
    ["Alignment of XDeviceEnableControl"][::std::mem::align_of::<XDeviceEnableControl>() - 8usize];
    ["Offset of field: XDeviceEnableControl::control"]
        [::std::mem::offset_of!(XDeviceEnableControl, control) - 0usize];
    ["Offset of field: XDeviceEnableControl::length"]
        [::std::mem::offset_of!(XDeviceEnableControl, length) - 8usize];
    ["Offset of field: XDeviceEnableControl::enable"]
        [::std::mem::offset_of!(XDeviceEnableControl, enable) - 12usize];
};
pub type XDeviceEnableState = XDeviceEnableControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XAnyClassinfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XAnyClassinfo"][::std::mem::size_of::<_XAnyClassinfo>() - 16usize];
    ["Alignment of _XAnyClassinfo"][::std::mem::align_of::<_XAnyClassinfo>() - 8usize];
    ["Offset of field: _XAnyClassinfo::class"]
        [::std::mem::offset_of!(_XAnyClassinfo, class) - 0usize];
    ["Offset of field: _XAnyClassinfo::length"]
        [::std::mem::offset_of!(_XAnyClassinfo, length) - 8usize];
};
pub type XAnyClassInfo = _XAnyClassinfo;
pub type XDeviceInfoPtr = *mut _XDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDeviceInfo {
    pub id: XID,
    pub type_: Atom,
    pub name: *mut ::std::os::raw::c_char,
    pub num_classes: ::std::os::raw::c_int,
    pub use_: ::std::os::raw::c_int,
    pub inputclassinfo: XAnyClassPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XDeviceInfo"][::std::mem::size_of::<_XDeviceInfo>() - 40usize];
    ["Alignment of _XDeviceInfo"][::std::mem::align_of::<_XDeviceInfo>() - 8usize];
    ["Offset of field: _XDeviceInfo::id"][::std::mem::offset_of!(_XDeviceInfo, id) - 0usize];
    ["Offset of field: _XDeviceInfo::type_"][::std::mem::offset_of!(_XDeviceInfo, type_) - 8usize];
    ["Offset of field: _XDeviceInfo::name"][::std::mem::offset_of!(_XDeviceInfo, name) - 16usize];
    ["Offset of field: _XDeviceInfo::num_classes"]
        [::std::mem::offset_of!(_XDeviceInfo, num_classes) - 24usize];
    ["Offset of field: _XDeviceInfo::use_"][::std::mem::offset_of!(_XDeviceInfo, use_) - 28usize];
    ["Offset of field: _XDeviceInfo::inputclassinfo"]
        [::std::mem::offset_of!(_XDeviceInfo, inputclassinfo) - 32usize];
};
pub type XDeviceInfo = _XDeviceInfo;
pub type XKeyInfoPtr = *mut _XKeyInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XKeyInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub min_keycode: ::std::os::raw::c_ushort,
    pub max_keycode: ::std::os::raw::c_ushort,
    pub num_keys: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XKeyInfo"][::std::mem::size_of::<_XKeyInfo>() - 24usize];
    ["Alignment of _XKeyInfo"][::std::mem::align_of::<_XKeyInfo>() - 8usize];
    ["Offset of field: _XKeyInfo::class"][::std::mem::offset_of!(_XKeyInfo, class) - 0usize];
    ["Offset of field: _XKeyInfo::length"][::std::mem::offset_of!(_XKeyInfo, length) - 8usize];
    ["Offset of field: _XKeyInfo::min_keycode"]
        [::std::mem::offset_of!(_XKeyInfo, min_keycode) - 12usize];
    ["Offset of field: _XKeyInfo::max_keycode"]
        [::std::mem::offset_of!(_XKeyInfo, max_keycode) - 14usize];
    ["Offset of field: _XKeyInfo::num_keys"][::std::mem::offset_of!(_XKeyInfo, num_keys) - 16usize];
};
pub type XKeyInfo = _XKeyInfo;
pub type XButtonInfoPtr = *mut _XButtonInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XButtonInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub num_buttons: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XButtonInfo"][::std::mem::size_of::<_XButtonInfo>() - 16usize];
    ["Alignment of _XButtonInfo"][::std::mem::align_of::<_XButtonInfo>() - 8usize];
    ["Offset of field: _XButtonInfo::class"][::std::mem::offset_of!(_XButtonInfo, class) - 0usize];
    ["Offset of field: _XButtonInfo::length"]
        [::std::mem::offset_of!(_XButtonInfo, length) - 8usize];
    ["Offset of field: _XButtonInfo::num_buttons"]
        [::std::mem::offset_of!(_XButtonInfo, num_buttons) - 12usize];
};
pub type XButtonInfo = _XButtonInfo;
pub type XAxisInfoPtr = *mut _XAxisInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XAxisInfo {
    pub resolution: ::std::os::raw::c_int,
    pub min_value: ::std::os::raw::c_int,
    pub max_value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XAxisInfo"][::std::mem::size_of::<_XAxisInfo>() - 12usize];
    ["Alignment of _XAxisInfo"][::std::mem::align_of::<_XAxisInfo>() - 4usize];
    ["Offset of field: _XAxisInfo::resolution"]
        [::std::mem::offset_of!(_XAxisInfo, resolution) - 0usize];
    ["Offset of field: _XAxisInfo::min_value"]
        [::std::mem::offset_of!(_XAxisInfo, min_value) - 4usize];
    ["Offset of field: _XAxisInfo::max_value"]
        [::std::mem::offset_of!(_XAxisInfo, max_value) - 8usize];
};
pub type XAxisInfo = _XAxisInfo;
pub type XValuatorInfoPtr = *mut _XValuatorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XValuatorInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub num_axes: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub motion_buffer: ::std::os::raw::c_ulong,
    pub axes: XAxisInfoPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XValuatorInfo"][::std::mem::size_of::<_XValuatorInfo>() - 32usize];
    ["Alignment of _XValuatorInfo"][::std::mem::align_of::<_XValuatorInfo>() - 8usize];
    ["Offset of field: _XValuatorInfo::class"]
        [::std::mem::offset_of!(_XValuatorInfo, class) - 0usize];
    ["Offset of field: _XValuatorInfo::length"]
        [::std::mem::offset_of!(_XValuatorInfo, length) - 8usize];
    ["Offset of field: _XValuatorInfo::num_axes"]
        [::std::mem::offset_of!(_XValuatorInfo, num_axes) - 12usize];
    ["Offset of field: _XValuatorInfo::mode"]
        [::std::mem::offset_of!(_XValuatorInfo, mode) - 13usize];
    ["Offset of field: _XValuatorInfo::motion_buffer"]
        [::std::mem::offset_of!(_XValuatorInfo, motion_buffer) - 16usize];
    ["Offset of field: _XValuatorInfo::axes"]
        [::std::mem::offset_of!(_XValuatorInfo, axes) - 24usize];
};
pub type XValuatorInfo = _XValuatorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XInputClassInfo {
    pub input_class: ::std::os::raw::c_uchar,
    pub event_type_base: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XInputClassInfo"][::std::mem::size_of::<XInputClassInfo>() - 2usize];
    ["Alignment of XInputClassInfo"][::std::mem::align_of::<XInputClassInfo>() - 1usize];
    ["Offset of field: XInputClassInfo::input_class"]
        [::std::mem::offset_of!(XInputClassInfo, input_class) - 0usize];
    ["Offset of field: XInputClassInfo::event_type_base"]
        [::std::mem::offset_of!(XInputClassInfo, event_type_base) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevice {
    pub device_id: XID,
    pub num_classes: ::std::os::raw::c_int,
    pub classes: *mut XInputClassInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevice"][::std::mem::size_of::<XDevice>() - 24usize];
    ["Alignment of XDevice"][::std::mem::align_of::<XDevice>() - 8usize];
    ["Offset of field: XDevice::device_id"][::std::mem::offset_of!(XDevice, device_id) - 0usize];
    ["Offset of field: XDevice::num_classes"]
        [::std::mem::offset_of!(XDevice, num_classes) - 8usize];
    ["Offset of field: XDevice::classes"][::std::mem::offset_of!(XDevice, classes) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XEventList {
    pub event_type: XEventClass,
    pub device: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XEventList"][::std::mem::size_of::<XEventList>() - 16usize];
    ["Alignment of XEventList"][::std::mem::align_of::<XEventList>() - 8usize];
    ["Offset of field: XEventList::event_type"]
        [::std::mem::offset_of!(XEventList, event_type) - 0usize];
    ["Offset of field: XEventList::device"][::std::mem::offset_of!(XEventList, device) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceTimeCoord {
    pub time: Time,
    pub data: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceTimeCoord"][::std::mem::size_of::<XDeviceTimeCoord>() - 16usize];
    ["Alignment of XDeviceTimeCoord"][::std::mem::align_of::<XDeviceTimeCoord>() - 8usize];
    ["Offset of field: XDeviceTimeCoord::time"]
        [::std::mem::offset_of!(XDeviceTimeCoord, time) - 0usize];
    ["Offset of field: XDeviceTimeCoord::data"]
        [::std::mem::offset_of!(XDeviceTimeCoord, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceState {
    pub device_id: XID,
    pub num_classes: ::std::os::raw::c_int,
    pub data: *mut XInputClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceState"][::std::mem::size_of::<XDeviceState>() - 24usize];
    ["Alignment of XDeviceState"][::std::mem::align_of::<XDeviceState>() - 8usize];
    ["Offset of field: XDeviceState::device_id"]
        [::std::mem::offset_of!(XDeviceState, device_id) - 0usize];
    ["Offset of field: XDeviceState::num_classes"]
        [::std::mem::offset_of!(XDeviceState, num_classes) - 8usize];
    ["Offset of field: XDeviceState::data"][::std::mem::offset_of!(XDeviceState, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XValuatorState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_valuators: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub valuators: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XValuatorState"][::std::mem::size_of::<XValuatorState>() - 16usize];
    ["Alignment of XValuatorState"][::std::mem::align_of::<XValuatorState>() - 8usize];
    ["Offset of field: XValuatorState::class"]
        [::std::mem::offset_of!(XValuatorState, class) - 0usize];
    ["Offset of field: XValuatorState::length"]
        [::std::mem::offset_of!(XValuatorState, length) - 1usize];
    ["Offset of field: XValuatorState::num_valuators"]
        [::std::mem::offset_of!(XValuatorState, num_valuators) - 2usize];
    ["Offset of field: XValuatorState::mode"]
        [::std::mem::offset_of!(XValuatorState, mode) - 3usize];
    ["Offset of field: XValuatorState::valuators"]
        [::std::mem::offset_of!(XValuatorState, valuators) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_short,
    pub keys: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyState"][::std::mem::size_of::<XKeyState>() - 36usize];
    ["Alignment of XKeyState"][::std::mem::align_of::<XKeyState>() - 2usize];
    ["Offset of field: XKeyState::class"][::std::mem::offset_of!(XKeyState, class) - 0usize];
    ["Offset of field: XKeyState::length"][::std::mem::offset_of!(XKeyState, length) - 1usize];
    ["Offset of field: XKeyState::num_keys"][::std::mem::offset_of!(XKeyState, num_keys) - 2usize];
    ["Offset of field: XKeyState::keys"][::std::mem::offset_of!(XKeyState, keys) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_buttons: ::std::os::raw::c_short,
    pub buttons: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonState"][::std::mem::size_of::<XButtonState>() - 36usize];
    ["Alignment of XButtonState"][::std::mem::align_of::<XButtonState>() - 2usize];
    ["Offset of field: XButtonState::class"][::std::mem::offset_of!(XButtonState, class) - 0usize];
    ["Offset of field: XButtonState::length"]
        [::std::mem::offset_of!(XButtonState, length) - 1usize];
    ["Offset of field: XButtonState::num_buttons"]
        [::std::mem::offset_of!(XButtonState, num_buttons) - 2usize];
    ["Offset of field: XButtonState::buttons"]
        [::std::mem::offset_of!(XButtonState, buttons) - 4usize];
};
unsafe extern "C" {
    pub fn XChangeKeyboardDevice(arg1: *mut XDisplay, arg2: *mut XDevice) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangePointerDevice(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDevice(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XEventClass,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDevice(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDeviceKey(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_uint,
        arg9: *mut XEventClass,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDeviceKey(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDeviceButton(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_uint,
        arg9: *mut XEventClass,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDeviceButton(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllowDeviceEvents(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceFocus(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut Window,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceFocus(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetFeedbackControl(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XFeedbackState;
}
unsafe extern "C" {
    pub fn XFreeFeedbackList(arg1: *mut XFeedbackState);
}
unsafe extern "C" {
    pub fn XChangeFeedbackControl(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XFeedbackControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDeviceBell(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: XID,
        arg4: XID,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceKeyMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: KeyCode,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
unsafe extern "C" {
    pub fn XChangeDeviceKeyMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceModifierMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XSetDeviceModifierMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut XModifierKeymap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceButtonMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceButtonMapping(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryDeviceState(arg1: *mut XDisplay, arg2: *mut XDevice) -> *mut XDeviceState;
}
unsafe extern "C" {
    pub fn XFreeDeviceState(arg1: *mut XDeviceState);
}
unsafe extern "C" {
    pub fn XGetExtensionVersion(
        arg1: *mut XDisplay,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XExtensionVersion;
}
unsafe extern "C" {
    pub fn XListInputDevices(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut XDeviceInfo;
}
unsafe extern "C" {
    pub fn XFreeDeviceList(arg1: *mut XDeviceInfo);
}
unsafe extern "C" {
    pub fn XOpenDevice(arg1: *mut XDisplay, arg2: XID) -> *mut XDevice;
}
unsafe extern "C" {
    pub fn XCloseDevice(arg1: *mut XDisplay, arg2: *mut XDevice) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceMode(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceValuators(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceControl(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XDeviceControl;
}
unsafe extern "C" {
    pub fn XChangeDeviceControl(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XDeviceControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSelectExtensionEvent(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut XEventClass,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetSelectedExtensionEvents(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut *mut XEventClass,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut *mut XEventClass,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeDeviceDontPropagateList(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XEventClass,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceDontPropagateList(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XEventClass;
}
unsafe extern "C" {
    pub fn XSendExtensionEvent(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XEventClass,
        arg7: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceMotionEvents(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Time,
        arg4: Time,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    ) -> *mut XDeviceTimeCoord;
}
unsafe extern "C" {
    pub fn XFreeDeviceMotionEvents(arg1: *mut XDeviceTimeCoord);
}
unsafe extern "C" {
    pub fn XFreeDeviceControl(arg1: *mut XDeviceControl);
}
unsafe extern "C" {
    pub fn XListDeviceProperties(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Atom;
}
unsafe extern "C" {
    pub fn XChangeDeviceProperty(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Atom,
        arg4: Atom,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_uchar,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XDeleteDeviceProperty(arg1: *mut XDisplay, arg2: *mut XDevice, arg3: Atom);
}
unsafe extern "C" {
    pub fn XGetDeviceProperty(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: Atom,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
        arg8: *mut Atom,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
        arg12: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestQueryExtension(
        arg1: *mut XDisplay,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestCompareCursorWithWindow(
        arg1: *mut XDisplay,
        arg2: Window,
        arg3: Cursor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestCompareCurrentCursorWithWindow(
        arg1: *mut XDisplay,
        arg2: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeKeyEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeButtonEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeMotionEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeRelativeMotionEvent(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceKeyEvent(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceButtonEvent(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeProximityEvent(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceMotionEvent(
        arg1: *mut XDisplay,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestGrabControl(
        arg1: *mut XDisplay,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestSetGContextOfGC(arg1: GC, arg2: GContext);
}
unsafe extern "C" {
    pub fn XTestSetVisualIDOfVisual(arg1: *mut Visual, arg2: VisualID);
}
unsafe extern "C" {
    pub fn XTestDiscard(arg1: *mut XDisplay) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_image_t {
    pub width: u16,
    pub height: u16,
    pub format: xcb_image_format_t,
    pub scanline_pad: u8,
    pub depth: u8,
    pub bpp: u8,
    pub unit: u8,
    pub plane_mask: u32,
    pub byte_order: xcb_image_order_t,
    pub bit_order: xcb_image_order_t,
    pub stride: u32,
    pub size: u32,
    pub base: *mut ::std::os::raw::c_void,
    pub data: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_image_t"][::std::mem::size_of::<xcb_image_t>() - 48usize];
    ["Alignment of xcb_image_t"][::std::mem::align_of::<xcb_image_t>() - 8usize];
    ["Offset of field: xcb_image_t::width"][::std::mem::offset_of!(xcb_image_t, width) - 0usize];
    ["Offset of field: xcb_image_t::height"][::std::mem::offset_of!(xcb_image_t, height) - 2usize];
    ["Offset of field: xcb_image_t::format"][::std::mem::offset_of!(xcb_image_t, format) - 4usize];
    ["Offset of field: xcb_image_t::scanline_pad"]
        [::std::mem::offset_of!(xcb_image_t, scanline_pad) - 8usize];
    ["Offset of field: xcb_image_t::depth"][::std::mem::offset_of!(xcb_image_t, depth) - 9usize];
    ["Offset of field: xcb_image_t::bpp"][::std::mem::offset_of!(xcb_image_t, bpp) - 10usize];
    ["Offset of field: xcb_image_t::unit"][::std::mem::offset_of!(xcb_image_t, unit) - 11usize];
    ["Offset of field: xcb_image_t::plane_mask"]
        [::std::mem::offset_of!(xcb_image_t, plane_mask) - 12usize];
    ["Offset of field: xcb_image_t::byte_order"]
        [::std::mem::offset_of!(xcb_image_t, byte_order) - 16usize];
    ["Offset of field: xcb_image_t::bit_order"]
        [::std::mem::offset_of!(xcb_image_t, bit_order) - 20usize];
    ["Offset of field: xcb_image_t::stride"][::std::mem::offset_of!(xcb_image_t, stride) - 24usize];
    ["Offset of field: xcb_image_t::size"][::std::mem::offset_of!(xcb_image_t, size) - 28usize];
    ["Offset of field: xcb_image_t::base"][::std::mem::offset_of!(xcb_image_t, base) - 32usize];
    ["Offset of field: xcb_image_t::data"][::std::mem::offset_of!(xcb_image_t, data) - 40usize];
};
pub type xcb_shm_seg_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_shm_segment_info_t {
    pub shmseg: xcb_shm_seg_t,
    pub shmid: u32,
    pub shmaddr: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_shm_segment_info_t"][::std::mem::size_of::<xcb_shm_segment_info_t>() - 16usize];
    ["Alignment of xcb_shm_segment_info_t"]
        [::std::mem::align_of::<xcb_shm_segment_info_t>() - 8usize];
    ["Offset of field: xcb_shm_segment_info_t::shmseg"]
        [::std::mem::offset_of!(xcb_shm_segment_info_t, shmseg) - 0usize];
    ["Offset of field: xcb_shm_segment_info_t::shmid"]
        [::std::mem::offset_of!(xcb_shm_segment_info_t, shmid) - 4usize];
    ["Offset of field: xcb_shm_segment_info_t::shmaddr"]
        [::std::mem::offset_of!(xcb_shm_segment_info_t, shmaddr) - 8usize];
};
unsafe extern "C" {
    pub fn xcb_image_annotate(image: *mut xcb_image_t);
}
unsafe extern "C" {
    pub fn xcb_image_create(
        width: u16,
        height: u16,
        format: xcb_image_format_t,
        xpad: u8,
        depth: u8,
        bpp: u8,
        unit: u8,
        byte_order: xcb_image_order_t,
        bit_order: xcb_image_order_t,
        base: *mut ::std::os::raw::c_void,
        bytes: u32,
        data: *mut u8,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_create_native(
        c: *mut xcb_connection_t,
        width: u16,
        height: u16,
        format: xcb_image_format_t,
        depth: u8,
        base: *mut ::std::os::raw::c_void,
        bytes: u32,
        data: *mut u8,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_destroy(image: *mut xcb_image_t);
}
unsafe extern "C" {
    pub fn xcb_image_get(
        conn: *mut xcb_connection_t,
        draw: xcb_drawable_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        plane_mask: u32,
        format: xcb_image_format_t,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_put(
        conn: *mut xcb_connection_t,
        draw: xcb_drawable_t,
        gc: xcb_gcontext_t,
        image: *mut xcb_image_t,
        x: i16,
        y: i16,
        left_pad: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_native(
        c: *mut xcb_connection_t,
        image: *mut xcb_image_t,
        convert: ::std::os::raw::c_int,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_put_pixel(image: *mut xcb_image_t, x: u32, y: u32, pixel: u32);
}
unsafe extern "C" {
    pub fn xcb_image_get_pixel(image: *mut xcb_image_t, x: u32, y: u32) -> u32;
}
unsafe extern "C" {
    pub fn xcb_image_convert(src: *mut xcb_image_t, dst: *mut xcb_image_t) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_subimage(
        image: *mut xcb_image_t,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
        base: *mut ::std::os::raw::c_void,
        bytes: u32,
        data: *mut u8,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_shm_put(
        conn: *mut xcb_connection_t,
        draw: xcb_drawable_t,
        gc: xcb_gcontext_t,
        image: *mut xcb_image_t,
        shminfo: xcb_shm_segment_info_t,
        src_x: i16,
        src_y: i16,
        dest_x: i16,
        dest_y: i16,
        src_width: u16,
        src_height: u16,
        send_event: u8,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_image_shm_get(
        conn: *mut xcb_connection_t,
        draw: xcb_drawable_t,
        image: *mut xcb_image_t,
        shminfo: xcb_shm_segment_info_t,
        x: i16,
        y: i16,
        plane_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_create_from_bitmap_data(
        data: *mut u8,
        width: u32,
        height: u32,
    ) -> *mut xcb_image_t;
}
unsafe extern "C" {
    pub fn xcb_create_pixmap_from_bitmap_data(
        display: *mut xcb_connection_t,
        d: xcb_drawable_t,
        data: *mut u8,
        width: u32,
        height: u32,
        depth: u32,
        fg: u32,
        bg: u32,
        gcp: *mut xcb_gcontext_t,
    ) -> xcb_pixmap_t;
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}

unsafe extern "C" {
    pub fn XcursorFilenameLoadCursor(
        dpy: *mut XDisplay,
        file: *const ::std::os::raw::c_char,
    ) -> Cursor;
}

pub const XCB_SHAPE_SO_SET: xcb_shape_so_t = 0;
pub const XCB_SHAPE_SO_UNION: xcb_shape_so_t = 1;
pub const XCB_SHAPE_SO_INTERSECT: xcb_shape_so_t = 2;
pub const XCB_SHAPE_SO_SUBTRACT: xcb_shape_so_t = 3;
pub const XCB_SHAPE_SO_INVERT: xcb_shape_so_t = 4;
pub type xcb_shape_so_t = ::std::os::raw::c_uint;
pub const XCB_SHAPE_SK_BOUNDING: xcb_shape_sk_t = 0;
pub const XCB_SHAPE_SK_CLIP: xcb_shape_sk_t = 1;
pub const XCB_SHAPE_SK_INPUT: xcb_shape_sk_t = 2;
pub type xcb_shape_sk_t = ::std::os::raw::c_uint;

pub type xcb_shape_op_t = u8;
pub type xcb_shape_kind_t = u8;

unsafe extern "C" {
    pub fn xcb_shape_mask_checked(
        c: *mut xcb_connection_t,
        operation: xcb_shape_op_t,
        destination_kind: xcb_shape_kind_t,
        destination_window: xcb_window_t,
        x_offset: i16,
        y_offset: i16,
        source_bitmap: xcb_pixmap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_shape_mask(
        c: *mut xcb_connection_t,
        operation: xcb_shape_op_t,
        destination_kind: xcb_shape_kind_t,
        destination_window: xcb_window_t,
        x_offset: i16,
        y_offset: i16,
        source_bitmap: xcb_pixmap_t,
    ) -> xcb_void_cookie_t;
}

pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub _short_backupbuf: [::std::os::raw::c_char; 1usize],
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_short_backupbuf"]
        [::std::mem::offset_of!(_IO_FILE, _short_backupbuf) - 119usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::_prevchain"]
        [::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
impl _IO_FILE {
    #[inline]
    pub fn _flags2(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set__flags2(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _flags2_raw(this: *const Self) -> ::std::os::raw::c_int {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__flags2_raw(this: *mut Self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(_flags2: ::std::os::raw::c_int) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let _flags2: u32 = unsafe { ::std::mem::transmute(_flags2) };
            _flags2 as u64
        });
        __bindgen_bitfield_unit
    }
}

unsafe extern "C" {
    pub static mut xcb_xkb_id: xcb_extension_t;
}
pub const xcb_xkb_const_t_XCB_XKB_CONST_MAX_LEGAL_KEY_CODE: xcb_xkb_const_t = 255;
pub const xcb_xkb_const_t_XCB_XKB_CONST_PER_KEY_BIT_ARRAY_SIZE: xcb_xkb_const_t = 32;
pub const xcb_xkb_const_t_XCB_XKB_CONST_KEY_NAME_LENGTH: xcb_xkb_const_t = 4;
pub type xcb_xkb_const_t = ::std::os::raw::c_uint;
pub const XCB_XKB_EVENT_TYPE_NEW_KEYBOARD_NOTIFY: xcb_xkb_event_type_t = 1;
pub const XCB_XKB_EVENT_TYPE_MAP_NOTIFY: xcb_xkb_event_type_t = 2;
pub const XCB_XKB_EVENT_TYPE_STATE_NOTIFY: xcb_xkb_event_type_t = 4;
pub const XCB_XKB_EVENT_TYPE_CONTROLS_NOTIFY: xcb_xkb_event_type_t = 8;
pub const XCB_XKB_EVENT_TYPE_INDICATOR_STATE_NOTIFY: xcb_xkb_event_type_t = 16;
pub const XCB_XKB_EVENT_TYPE_INDICATOR_MAP_NOTIFY: xcb_xkb_event_type_t = 32;
pub const XCB_XKB_EVENT_TYPE_NAMES_NOTIFY: xcb_xkb_event_type_t = 64;
pub const XCB_XKB_EVENT_TYPE_COMPAT_MAP_NOTIFY: xcb_xkb_event_type_t = 128;
pub const XCB_XKB_EVENT_TYPE_BELL_NOTIFY: xcb_xkb_event_type_t = 256;
pub const XCB_XKB_EVENT_TYPE_ACTION_MESSAGE: xcb_xkb_event_type_t = 512;
pub const XCB_XKB_EVENT_TYPE_ACCESS_X_NOTIFY: xcb_xkb_event_type_t = 1024;
pub const XCB_XKB_EVENT_TYPE_EXTENSION_DEVICE_NOTIFY: xcb_xkb_event_type_t =
    2048;
pub type xcb_xkb_event_type_t = ::std::os::raw::c_uint;
pub const xcb_xkb_nkn_detail_t_XCB_XKB_NKN_DETAIL_KEYCODES: xcb_xkb_nkn_detail_t = 1;
pub const xcb_xkb_nkn_detail_t_XCB_XKB_NKN_DETAIL_GEOMETRY: xcb_xkb_nkn_detail_t = 2;
pub const xcb_xkb_nkn_detail_t_XCB_XKB_NKN_DETAIL_DEVICE_ID: xcb_xkb_nkn_detail_t = 4;
pub type xcb_xkb_nkn_detail_t = ::std::os::raw::c_uint;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_SK_PRESS: xcb_xkb_axn_detail_t = 1;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_SK_ACCEPT: xcb_xkb_axn_detail_t = 2;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_SK_REJECT: xcb_xkb_axn_detail_t = 4;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_SK_RELEASE: xcb_xkb_axn_detail_t = 8;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_BK_ACCEPT: xcb_xkb_axn_detail_t = 16;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_BK_REJECT: xcb_xkb_axn_detail_t = 32;
pub const xcb_xkb_axn_detail_t_XCB_XKB_AXN_DETAIL_AXK_WARNING: xcb_xkb_axn_detail_t = 64;
pub type xcb_xkb_axn_detail_t = ::std::os::raw::c_uint;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_KEY_TYPES: xcb_xkb_map_part_t = 1;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_KEY_SYMS: xcb_xkb_map_part_t = 2;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_MODIFIER_MAP: xcb_xkb_map_part_t = 4;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS: xcb_xkb_map_part_t = 8;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_KEY_ACTIONS: xcb_xkb_map_part_t = 16;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_KEY_BEHAVIORS: xcb_xkb_map_part_t = 32;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_VIRTUAL_MODS: xcb_xkb_map_part_t = 64;
pub const xcb_xkb_map_part_t_XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP: xcb_xkb_map_part_t = 128;
pub type xcb_xkb_map_part_t = ::std::os::raw::c_uint;
pub const xcb_xkb_set_map_flags_t_XCB_XKB_SET_MAP_FLAGS_RESIZE_TYPES: xcb_xkb_set_map_flags_t = 1;
pub const xcb_xkb_set_map_flags_t_XCB_XKB_SET_MAP_FLAGS_RECOMPUTE_ACTIONS: xcb_xkb_set_map_flags_t =
    2;
pub type xcb_xkb_set_map_flags_t = ::std::os::raw::c_uint;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_MODIFIER_STATE: xcb_xkb_state_part_t = 1;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_MODIFIER_BASE: xcb_xkb_state_part_t = 2;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_MODIFIER_LATCH: xcb_xkb_state_part_t = 4;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_MODIFIER_LOCK: xcb_xkb_state_part_t = 8;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_GROUP_STATE: xcb_xkb_state_part_t = 16;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_GROUP_BASE: xcb_xkb_state_part_t = 32;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_GROUP_LATCH: xcb_xkb_state_part_t = 64;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_GROUP_LOCK: xcb_xkb_state_part_t = 128;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_COMPAT_STATE: xcb_xkb_state_part_t = 256;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_GRAB_MODS: xcb_xkb_state_part_t = 512;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_COMPAT_GRAB_MODS: xcb_xkb_state_part_t = 1024;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_LOOKUP_MODS: xcb_xkb_state_part_t = 2048;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_COMPAT_LOOKUP_MODS: xcb_xkb_state_part_t = 4096;
pub const xcb_xkb_state_part_t_XCB_XKB_STATE_PART_POINTER_BUTTONS: xcb_xkb_state_part_t = 8192;
pub type xcb_xkb_state_part_t = ::std::os::raw::c_uint;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_REPEAT_KEYS: xcb_xkb_bool_ctrl_t = 1;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_SLOW_KEYS: xcb_xkb_bool_ctrl_t = 2;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_BOUNCE_KEYS: xcb_xkb_bool_ctrl_t = 4;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_STICKY_KEYS: xcb_xkb_bool_ctrl_t = 8;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_MOUSE_KEYS: xcb_xkb_bool_ctrl_t = 16;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_MOUSE_KEYS_ACCEL: xcb_xkb_bool_ctrl_t = 32;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_ACCESS_X_KEYS: xcb_xkb_bool_ctrl_t = 64;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_ACCESS_X_TIMEOUT_MASK: xcb_xkb_bool_ctrl_t = 128;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_ACCESS_X_FEEDBACK_MASK: xcb_xkb_bool_ctrl_t = 256;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_AUDIBLE_BELL_MASK: xcb_xkb_bool_ctrl_t = 512;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_OVERLAY_1_MASK: xcb_xkb_bool_ctrl_t = 1024;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_OVERLAY_2_MASK: xcb_xkb_bool_ctrl_t = 2048;
pub const xcb_xkb_bool_ctrl_t_XCB_XKB_BOOL_CTRL_IGNORE_GROUP_LOCK_MASK: xcb_xkb_bool_ctrl_t = 4096;
pub type xcb_xkb_bool_ctrl_t = ::std::os::raw::c_uint;
pub const xcb_xkb_control_t_XCB_XKB_CONTROL_GROUPS_WRAP: xcb_xkb_control_t = 134217728;
pub const xcb_xkb_control_t_XCB_XKB_CONTROL_INTERNAL_MODS: xcb_xkb_control_t = 268435456;
pub const xcb_xkb_control_t_XCB_XKB_CONTROL_IGNORE_LOCK_MODS: xcb_xkb_control_t = 536870912;
pub const xcb_xkb_control_t_XCB_XKB_CONTROL_PER_KEY_REPEAT: xcb_xkb_control_t = 1073741824;
pub const xcb_xkb_control_t_XCB_XKB_CONTROL_CONTROLS_ENABLED: xcb_xkb_control_t = 2147483648;
pub type xcb_xkb_control_t = ::std::os::raw::c_uint;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_SK_PRESS_FB: xcb_xkb_ax_option_t = 1;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_SK_ACCEPT_FB: xcb_xkb_ax_option_t = 2;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_FEATURE_FB: xcb_xkb_ax_option_t = 4;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_SLOW_WARN_FB: xcb_xkb_ax_option_t = 8;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_INDICATOR_FB: xcb_xkb_ax_option_t = 16;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_STICKY_KEYS_FB: xcb_xkb_ax_option_t = 32;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_TWO_KEYS: xcb_xkb_ax_option_t = 64;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_LATCH_TO_LOCK: xcb_xkb_ax_option_t = 128;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_SK_RELEASE_FB: xcb_xkb_ax_option_t = 256;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_SK_REJECT_FB: xcb_xkb_ax_option_t = 512;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_BK_REJECT_FB: xcb_xkb_ax_option_t = 1024;
pub const xcb_xkb_ax_option_t_XCB_XKB_AX_OPTION_DUMB_BELL: xcb_xkb_ax_option_t = 2048;
pub type xcb_xkb_ax_option_t = ::std::os::raw::c_uint;
pub type xcb_xkb_device_spec_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_device_spec_iterator_t {
    pub data: *mut xcb_xkb_device_spec_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_device_spec_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_device_spec_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_device_spec_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_device_spec_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_device_spec_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_device_spec_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_device_spec_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_device_spec_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_device_spec_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_device_spec_iterator_t, index) - 12usize];
};
pub const xcb_xkb_led_class_result_t_XCB_XKB_LED_CLASS_RESULT_KBD_FEEDBACK_CLASS:
    xcb_xkb_led_class_result_t = 0;
pub const xcb_xkb_led_class_result_t_XCB_XKB_LED_CLASS_RESULT_LED_FEEDBACK_CLASS:
    xcb_xkb_led_class_result_t = 4;
pub type xcb_xkb_led_class_result_t = ::std::os::raw::c_uint;
pub const xcb_xkb_led_class_t_XCB_XKB_LED_CLASS_KBD_FEEDBACK_CLASS: xcb_xkb_led_class_t = 0;
pub const xcb_xkb_led_class_t_XCB_XKB_LED_CLASS_LED_FEEDBACK_CLASS: xcb_xkb_led_class_t = 4;
pub const xcb_xkb_led_class_t_XCB_XKB_LED_CLASS_DFLT_XI_CLASS: xcb_xkb_led_class_t = 768;
pub const xcb_xkb_led_class_t_XCB_XKB_LED_CLASS_ALL_XI_CLASSES: xcb_xkb_led_class_t = 1280;
pub type xcb_xkb_led_class_t = ::std::os::raw::c_uint;
pub type xcb_xkb_led_class_spec_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_led_class_spec_iterator_t {
    pub data: *mut xcb_xkb_led_class_spec_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_led_class_spec_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_led_class_spec_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_led_class_spec_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_led_class_spec_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_led_class_spec_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_led_class_spec_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_led_class_spec_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_led_class_spec_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_led_class_spec_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_led_class_spec_iterator_t, index) - 12usize];
};
pub const xcb_xkb_bell_class_result_t_XCB_XKB_BELL_CLASS_RESULT_KBD_FEEDBACK_CLASS:
    xcb_xkb_bell_class_result_t = 0;
pub const xcb_xkb_bell_class_result_t_XCB_XKB_BELL_CLASS_RESULT_BELL_FEEDBACK_CLASS:
    xcb_xkb_bell_class_result_t = 5;
pub type xcb_xkb_bell_class_result_t = ::std::os::raw::c_uint;
pub const xcb_xkb_bell_class_t_XCB_XKB_BELL_CLASS_KBD_FEEDBACK_CLASS: xcb_xkb_bell_class_t = 0;
pub const xcb_xkb_bell_class_t_XCB_XKB_BELL_CLASS_BELL_FEEDBACK_CLASS: xcb_xkb_bell_class_t = 5;
pub const xcb_xkb_bell_class_t_XCB_XKB_BELL_CLASS_DFLT_XI_CLASS: xcb_xkb_bell_class_t = 768;
pub type xcb_xkb_bell_class_t = ::std::os::raw::c_uint;
pub type xcb_xkb_bell_class_spec_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_bell_class_spec_iterator_t {
    pub data: *mut xcb_xkb_bell_class_spec_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_bell_class_spec_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_bell_class_spec_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_bell_class_spec_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_bell_class_spec_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_bell_class_spec_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_bell_class_spec_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_bell_class_spec_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_bell_class_spec_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_bell_class_spec_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_bell_class_spec_iterator_t, index) - 12usize];
};
pub const xcb_xkb_id_t_XCB_XKB_ID_USE_CORE_KBD: xcb_xkb_id_t = 256;
pub const xcb_xkb_id_t_XCB_XKB_ID_USE_CORE_PTR: xcb_xkb_id_t = 512;
pub const xcb_xkb_id_t_XCB_XKB_ID_DFLT_XI_CLASS: xcb_xkb_id_t = 768;
pub const xcb_xkb_id_t_XCB_XKB_ID_DFLT_XI_ID: xcb_xkb_id_t = 1024;
pub const xcb_xkb_id_t_XCB_XKB_ID_ALL_XI_CLASS: xcb_xkb_id_t = 1280;
pub const xcb_xkb_id_t_XCB_XKB_ID_ALL_XI_ID: xcb_xkb_id_t = 1536;
pub const xcb_xkb_id_t_XCB_XKB_ID_XI_NONE: xcb_xkb_id_t = 65280;
pub type xcb_xkb_id_t = ::std::os::raw::c_uint;
pub type xcb_xkb_id_spec_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_id_spec_iterator_t {
    pub data: *mut xcb_xkb_id_spec_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_id_spec_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_id_spec_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_id_spec_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_id_spec_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_id_spec_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_id_spec_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_id_spec_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_id_spec_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_id_spec_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_id_spec_iterator_t, index) - 12usize];
};
pub const xcb_xkb_group_t_XCB_XKB_GROUP_1: xcb_xkb_group_t = 0;
pub const xcb_xkb_group_t_XCB_XKB_GROUP_2: xcb_xkb_group_t = 1;
pub const xcb_xkb_group_t_XCB_XKB_GROUP_3: xcb_xkb_group_t = 2;
pub const xcb_xkb_group_t_XCB_XKB_GROUP_4: xcb_xkb_group_t = 3;
pub type xcb_xkb_group_t = ::std::os::raw::c_uint;
pub const xcb_xkb_groups_t_XCB_XKB_GROUPS_ANY: xcb_xkb_groups_t = 254;
pub const xcb_xkb_groups_t_XCB_XKB_GROUPS_ALL: xcb_xkb_groups_t = 255;
pub type xcb_xkb_groups_t = ::std::os::raw::c_uint;
pub const xcb_xkb_set_of_group_t_XCB_XKB_SET_OF_GROUP_GROUP_1: xcb_xkb_set_of_group_t = 1;
pub const xcb_xkb_set_of_group_t_XCB_XKB_SET_OF_GROUP_GROUP_2: xcb_xkb_set_of_group_t = 2;
pub const xcb_xkb_set_of_group_t_XCB_XKB_SET_OF_GROUP_GROUP_3: xcb_xkb_set_of_group_t = 4;
pub const xcb_xkb_set_of_group_t_XCB_XKB_SET_OF_GROUP_GROUP_4: xcb_xkb_set_of_group_t = 8;
pub type xcb_xkb_set_of_group_t = ::std::os::raw::c_uint;
pub const xcb_xkb_set_of_groups_t_XCB_XKB_SET_OF_GROUPS_ANY: xcb_xkb_set_of_groups_t = 128;
pub type xcb_xkb_set_of_groups_t = ::std::os::raw::c_uint;
pub const xcb_xkb_groups_wrap_t_XCB_XKB_GROUPS_WRAP_WRAP_INTO_RANGE: xcb_xkb_groups_wrap_t = 0;
pub const xcb_xkb_groups_wrap_t_XCB_XKB_GROUPS_WRAP_CLAMP_INTO_RANGE: xcb_xkb_groups_wrap_t = 64;
pub const xcb_xkb_groups_wrap_t_XCB_XKB_GROUPS_WRAP_REDIRECT_INTO_RANGE: xcb_xkb_groups_wrap_t =
    128;
pub type xcb_xkb_groups_wrap_t = ::std::os::raw::c_uint;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_15: xcb_xkb_v_mods_high_t = 128;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_14: xcb_xkb_v_mods_high_t = 64;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_13: xcb_xkb_v_mods_high_t = 32;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_12: xcb_xkb_v_mods_high_t = 16;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_11: xcb_xkb_v_mods_high_t = 8;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_10: xcb_xkb_v_mods_high_t = 4;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_9: xcb_xkb_v_mods_high_t = 2;
pub const xcb_xkb_v_mods_high_t_XCB_XKB_V_MODS_HIGH_8: xcb_xkb_v_mods_high_t = 1;
pub type xcb_xkb_v_mods_high_t = ::std::os::raw::c_uint;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_7: xcb_xkb_v_mods_low_t = 128;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_6: xcb_xkb_v_mods_low_t = 64;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_5: xcb_xkb_v_mods_low_t = 32;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_4: xcb_xkb_v_mods_low_t = 16;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_3: xcb_xkb_v_mods_low_t = 8;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_2: xcb_xkb_v_mods_low_t = 4;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_1: xcb_xkb_v_mods_low_t = 2;
pub const xcb_xkb_v_mods_low_t_XCB_XKB_V_MODS_LOW_0: xcb_xkb_v_mods_low_t = 1;
pub type xcb_xkb_v_mods_low_t = ::std::os::raw::c_uint;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_15: xcb_xkb_v_mod_t = 32768;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_14: xcb_xkb_v_mod_t = 16384;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_13: xcb_xkb_v_mod_t = 8192;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_12: xcb_xkb_v_mod_t = 4096;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_11: xcb_xkb_v_mod_t = 2048;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_10: xcb_xkb_v_mod_t = 1024;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_9: xcb_xkb_v_mod_t = 512;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_8: xcb_xkb_v_mod_t = 256;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_7: xcb_xkb_v_mod_t = 128;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_6: xcb_xkb_v_mod_t = 64;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_5: xcb_xkb_v_mod_t = 32;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_4: xcb_xkb_v_mod_t = 16;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_3: xcb_xkb_v_mod_t = 8;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_2: xcb_xkb_v_mod_t = 4;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_1: xcb_xkb_v_mod_t = 2;
pub const xcb_xkb_v_mod_t_XCB_XKB_V_MOD_0: xcb_xkb_v_mod_t = 1;
pub type xcb_xkb_v_mod_t = ::std::os::raw::c_uint;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_V_MOD_MAP: xcb_xkb_explicit_t = 128;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_BEHAVIOR: xcb_xkb_explicit_t = 64;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_AUTO_REPEAT: xcb_xkb_explicit_t = 32;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_INTERPRET: xcb_xkb_explicit_t = 16;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_KEY_TYPE_4: xcb_xkb_explicit_t = 8;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_KEY_TYPE_3: xcb_xkb_explicit_t = 4;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_KEY_TYPE_2: xcb_xkb_explicit_t = 2;
pub const xcb_xkb_explicit_t_XCB_XKB_EXPLICIT_KEY_TYPE_1: xcb_xkb_explicit_t = 1;
pub type xcb_xkb_explicit_t = ::std::os::raw::c_uint;
pub const xcb_xkb_sym_interpret_match_t_XCB_XKB_SYM_INTERPRET_MATCH_NONE_OF:
    xcb_xkb_sym_interpret_match_t = 0;
pub const xcb_xkb_sym_interpret_match_t_XCB_XKB_SYM_INTERPRET_MATCH_ANY_OF_OR_NONE:
    xcb_xkb_sym_interpret_match_t = 1;
pub const xcb_xkb_sym_interpret_match_t_XCB_XKB_SYM_INTERPRET_MATCH_ANY_OF:
    xcb_xkb_sym_interpret_match_t = 2;
pub const xcb_xkb_sym_interpret_match_t_XCB_XKB_SYM_INTERPRET_MATCH_ALL_OF:
    xcb_xkb_sym_interpret_match_t = 3;
pub const xcb_xkb_sym_interpret_match_t_XCB_XKB_SYM_INTERPRET_MATCH_EXACTLY:
    xcb_xkb_sym_interpret_match_t = 4;
pub type xcb_xkb_sym_interpret_match_t = ::std::os::raw::c_uint;
pub const xcb_xkb_sym_interp_match_t_XCB_XKB_SYM_INTERP_MATCH_LEVEL_ONE_ONLY:
    xcb_xkb_sym_interp_match_t = 128;
pub const xcb_xkb_sym_interp_match_t_XCB_XKB_SYM_INTERP_MATCH_OP_MASK: xcb_xkb_sym_interp_match_t =
    127;
pub type xcb_xkb_sym_interp_match_t = ::std::os::raw::c_uint;
pub const xcb_xkb_im_flag_t_XCB_XKB_IM_FLAG_NO_EXPLICIT: xcb_xkb_im_flag_t = 128;
pub const xcb_xkb_im_flag_t_XCB_XKB_IM_FLAG_NO_AUTOMATIC: xcb_xkb_im_flag_t = 64;
pub const xcb_xkb_im_flag_t_XCB_XKB_IM_FLAG_LED_DRIVES_KB: xcb_xkb_im_flag_t = 32;
pub type xcb_xkb_im_flag_t = ::std::os::raw::c_uint;
pub const xcb_xkb_im_mods_which_t_XCB_XKB_IM_MODS_WHICH_USE_COMPAT: xcb_xkb_im_mods_which_t = 16;
pub const xcb_xkb_im_mods_which_t_XCB_XKB_IM_MODS_WHICH_USE_EFFECTIVE: xcb_xkb_im_mods_which_t = 8;
pub const xcb_xkb_im_mods_which_t_XCB_XKB_IM_MODS_WHICH_USE_LOCKED: xcb_xkb_im_mods_which_t = 4;
pub const xcb_xkb_im_mods_which_t_XCB_XKB_IM_MODS_WHICH_USE_LATCHED: xcb_xkb_im_mods_which_t = 2;
pub const xcb_xkb_im_mods_which_t_XCB_XKB_IM_MODS_WHICH_USE_BASE: xcb_xkb_im_mods_which_t = 1;
pub type xcb_xkb_im_mods_which_t = ::std::os::raw::c_uint;
pub const xcb_xkb_im_groups_which_t_XCB_XKB_IM_GROUPS_WHICH_USE_COMPAT: xcb_xkb_im_groups_which_t =
    16;
pub const xcb_xkb_im_groups_which_t_XCB_XKB_IM_GROUPS_WHICH_USE_EFFECTIVE:
    xcb_xkb_im_groups_which_t = 8;
pub const xcb_xkb_im_groups_which_t_XCB_XKB_IM_GROUPS_WHICH_USE_LOCKED: xcb_xkb_im_groups_which_t =
    4;
pub const xcb_xkb_im_groups_which_t_XCB_XKB_IM_GROUPS_WHICH_USE_LATCHED: xcb_xkb_im_groups_which_t =
    2;
pub const xcb_xkb_im_groups_which_t_XCB_XKB_IM_GROUPS_WHICH_USE_BASE: xcb_xkb_im_groups_which_t = 1;
pub type xcb_xkb_im_groups_which_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_indicator_map_t {
    pub flags: u8,
    pub whichGroups: u8,
    pub groups: u8,
    pub whichMods: u8,
    pub mods: u8,
    pub realMods: u8,
    pub vmods: u16,
    pub ctrls: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_indicator_map_t"][::std::mem::size_of::<xcb_xkb_indicator_map_t>() - 12usize];
    ["Alignment of xcb_xkb_indicator_map_t"]
        [::std::mem::align_of::<xcb_xkb_indicator_map_t>() - 4usize];
    ["Offset of field: xcb_xkb_indicator_map_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, flags) - 0usize];
    ["Offset of field: xcb_xkb_indicator_map_t::whichGroups"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, whichGroups) - 1usize];
    ["Offset of field: xcb_xkb_indicator_map_t::groups"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, groups) - 2usize];
    ["Offset of field: xcb_xkb_indicator_map_t::whichMods"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, whichMods) - 3usize];
    ["Offset of field: xcb_xkb_indicator_map_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, mods) - 4usize];
    ["Offset of field: xcb_xkb_indicator_map_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, realMods) - 5usize];
    ["Offset of field: xcb_xkb_indicator_map_t::vmods"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, vmods) - 6usize];
    ["Offset of field: xcb_xkb_indicator_map_t::ctrls"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_t, ctrls) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_indicator_map_iterator_t {
    pub data: *mut xcb_xkb_indicator_map_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_indicator_map_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_indicator_map_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_indicator_map_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_indicator_map_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_indicator_map_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_indicator_map_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_indicator_map_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_iterator_t, index) - 12usize];
};
pub const xcb_xkb_cm_detail_t_XCB_XKB_CM_DETAIL_SYM_INTERP: xcb_xkb_cm_detail_t = 1;
pub const xcb_xkb_cm_detail_t_XCB_XKB_CM_DETAIL_GROUP_COMPAT: xcb_xkb_cm_detail_t = 2;
pub type xcb_xkb_cm_detail_t = ::std::os::raw::c_uint;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_KEYCODES: xcb_xkb_name_detail_t = 1;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_GEOMETRY: xcb_xkb_name_detail_t = 2;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_SYMBOLS: xcb_xkb_name_detail_t = 4;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS: xcb_xkb_name_detail_t = 8;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_TYPES: xcb_xkb_name_detail_t = 16;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_COMPAT: xcb_xkb_name_detail_t = 32;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES: xcb_xkb_name_detail_t = 64;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES: xcb_xkb_name_detail_t = 128;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_INDICATOR_NAMES: xcb_xkb_name_detail_t = 256;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_KEY_NAMES: xcb_xkb_name_detail_t = 512;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_KEY_ALIASES: xcb_xkb_name_detail_t = 1024;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES: xcb_xkb_name_detail_t = 2048;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_GROUP_NAMES: xcb_xkb_name_detail_t = 4096;
pub const xcb_xkb_name_detail_t_XCB_XKB_NAME_DETAIL_RG_NAMES: xcb_xkb_name_detail_t = 8192;
pub type xcb_xkb_name_detail_t = ::std::os::raw::c_uint;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_TYPES: xcb_xkb_gbn_detail_t = 1;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_COMPAT_MAP: xcb_xkb_gbn_detail_t = 2;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_CLIENT_SYMBOLS: xcb_xkb_gbn_detail_t = 4;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_SERVER_SYMBOLS: xcb_xkb_gbn_detail_t = 8;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_INDICATOR_MAPS: xcb_xkb_gbn_detail_t = 16;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_KEY_NAMES: xcb_xkb_gbn_detail_t = 32;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_GEOMETRY: xcb_xkb_gbn_detail_t = 64;
pub const xcb_xkb_gbn_detail_t_XCB_XKB_GBN_DETAIL_OTHER_NAMES: xcb_xkb_gbn_detail_t = 128;
pub type xcb_xkb_gbn_detail_t = ::std::os::raw::c_uint;
pub const xcb_xkb_xi_feature_t_XCB_XKB_XI_FEATURE_KEYBOARDS: xcb_xkb_xi_feature_t = 1;
pub const xcb_xkb_xi_feature_t_XCB_XKB_XI_FEATURE_BUTTON_ACTIONS: xcb_xkb_xi_feature_t = 2;
pub const xcb_xkb_xi_feature_t_XCB_XKB_XI_FEATURE_INDICATOR_NAMES: xcb_xkb_xi_feature_t = 4;
pub const xcb_xkb_xi_feature_t_XCB_XKB_XI_FEATURE_INDICATOR_MAPS: xcb_xkb_xi_feature_t = 8;
pub const xcb_xkb_xi_feature_t_XCB_XKB_XI_FEATURE_INDICATOR_STATE: xcb_xkb_xi_feature_t = 16;
pub type xcb_xkb_xi_feature_t = ::std::os::raw::c_uint;
pub const xcb_xkb_per_client_flag_t_XCB_XKB_PER_CLIENT_FLAG_DETECTABLE_AUTO_REPEAT:
    xcb_xkb_per_client_flag_t = 1;
pub const xcb_xkb_per_client_flag_t_XCB_XKB_PER_CLIENT_FLAG_GRABS_USE_XKB_STATE:
    xcb_xkb_per_client_flag_t = 2;
pub const xcb_xkb_per_client_flag_t_XCB_XKB_PER_CLIENT_FLAG_AUTO_RESET_CONTROLS:
    xcb_xkb_per_client_flag_t = 4;
pub const xcb_xkb_per_client_flag_t_XCB_XKB_PER_CLIENT_FLAG_LOOKUP_STATE_WHEN_GRABBED:
    xcb_xkb_per_client_flag_t = 8;
pub const xcb_xkb_per_client_flag_t_XCB_XKB_PER_CLIENT_FLAG_SEND_EVENT_USES_XKB_STATE:
    xcb_xkb_per_client_flag_t = 16;
pub type xcb_xkb_per_client_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_mod_def_t {
    pub mask: u8,
    pub realMods: u8,
    pub vmods: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_mod_def_t"][::std::mem::size_of::<xcb_xkb_mod_def_t>() - 4usize];
    ["Alignment of xcb_xkb_mod_def_t"][::std::mem::align_of::<xcb_xkb_mod_def_t>() - 2usize];
    ["Offset of field: xcb_xkb_mod_def_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_t, mask) - 0usize];
    ["Offset of field: xcb_xkb_mod_def_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_t, realMods) - 1usize];
    ["Offset of field: xcb_xkb_mod_def_t::vmods"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_t, vmods) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_mod_def_iterator_t {
    pub data: *mut xcb_xkb_mod_def_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_mod_def_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_mod_def_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_mod_def_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_mod_def_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_mod_def_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_mod_def_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_mod_def_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_mod_def_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_name_t {
    pub name: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_name_t"][::std::mem::size_of::<xcb_xkb_key_name_t>() - 4usize];
    ["Alignment of xcb_xkb_key_name_t"][::std::mem::align_of::<xcb_xkb_key_name_t>() - 1usize];
    ["Offset of field: xcb_xkb_key_name_t::name"]
        [::std::mem::offset_of!(xcb_xkb_key_name_t, name) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_name_iterator_t {
    pub data: *mut xcb_xkb_key_name_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_name_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_name_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_name_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_name_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_name_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_name_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_name_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_name_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_name_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_name_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_alias_t {
    pub real: [::std::os::raw::c_char; 4usize],
    pub alias: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_alias_t"][::std::mem::size_of::<xcb_xkb_key_alias_t>() - 8usize];
    ["Alignment of xcb_xkb_key_alias_t"][::std::mem::align_of::<xcb_xkb_key_alias_t>() - 1usize];
    ["Offset of field: xcb_xkb_key_alias_t::real"]
        [::std::mem::offset_of!(xcb_xkb_key_alias_t, real) - 0usize];
    ["Offset of field: xcb_xkb_key_alias_t::alias"]
        [::std::mem::offset_of!(xcb_xkb_key_alias_t, alias) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_alias_iterator_t {
    pub data: *mut xcb_xkb_key_alias_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_alias_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_alias_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_alias_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_alias_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_alias_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_alias_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_alias_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_alias_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_alias_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_alias_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_counted_string_16_t {
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_counted_string_16_t"]
        [::std::mem::size_of::<xcb_xkb_counted_string_16_t>() - 2usize];
    ["Alignment of xcb_xkb_counted_string_16_t"]
        [::std::mem::align_of::<xcb_xkb_counted_string_16_t>() - 2usize];
    ["Offset of field: xcb_xkb_counted_string_16_t::length"]
        [::std::mem::offset_of!(xcb_xkb_counted_string_16_t, length) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_counted_string_16_iterator_t {
    pub data: *mut xcb_xkb_counted_string_16_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_counted_string_16_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_counted_string_16_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_counted_string_16_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_counted_string_16_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_counted_string_16_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_counted_string_16_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_counted_string_16_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_counted_string_16_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_counted_string_16_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_counted_string_16_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_kt_map_entry_t {
    pub active: u8,
    pub mods_mask: u8,
    pub level: u8,
    pub mods_mods: u8,
    pub mods_vmods: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_kt_map_entry_t"][::std::mem::size_of::<xcb_xkb_kt_map_entry_t>() - 8usize];
    ["Alignment of xcb_xkb_kt_map_entry_t"]
        [::std::mem::align_of::<xcb_xkb_kt_map_entry_t>() - 2usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::active"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, active) - 0usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::mods_mask"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, mods_mask) - 1usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::level"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, level) - 2usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::mods_mods"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, mods_mods) - 3usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::mods_vmods"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, mods_vmods) - 4usize];
    ["Offset of field: xcb_xkb_kt_map_entry_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_kt_map_entry_iterator_t {
    pub data: *mut xcb_xkb_kt_map_entry_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_kt_map_entry_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_kt_map_entry_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_kt_map_entry_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_kt_map_entry_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_kt_map_entry_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_kt_map_entry_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_kt_map_entry_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_kt_map_entry_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_type_t {
    pub mods_mask: u8,
    pub mods_mods: u8,
    pub mods_vmods: u16,
    pub numLevels: u8,
    pub nMapEntries: u8,
    pub hasPreserve: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_type_t"][::std::mem::size_of::<xcb_xkb_key_type_t>() - 8usize];
    ["Alignment of xcb_xkb_key_type_t"][::std::mem::align_of::<xcb_xkb_key_type_t>() - 2usize];
    ["Offset of field: xcb_xkb_key_type_t::mods_mask"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, mods_mask) - 0usize];
    ["Offset of field: xcb_xkb_key_type_t::mods_mods"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, mods_mods) - 1usize];
    ["Offset of field: xcb_xkb_key_type_t::mods_vmods"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, mods_vmods) - 2usize];
    ["Offset of field: xcb_xkb_key_type_t::numLevels"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, numLevels) - 4usize];
    ["Offset of field: xcb_xkb_key_type_t::nMapEntries"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, nMapEntries) - 5usize];
    ["Offset of field: xcb_xkb_key_type_t::hasPreserve"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, hasPreserve) - 6usize];
    ["Offset of field: xcb_xkb_key_type_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_key_type_t, pad0) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_type_iterator_t {
    pub data: *mut xcb_xkb_key_type_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_type_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_type_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_type_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_type_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_type_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_type_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_type_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_type_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_type_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_type_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_sym_map_t {
    pub kt_index: [u8; 4usize],
    pub groupInfo: u8,
    pub width: u8,
    pub nSyms: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_sym_map_t"][::std::mem::size_of::<xcb_xkb_key_sym_map_t>() - 8usize];
    ["Alignment of xcb_xkb_key_sym_map_t"]
        [::std::mem::align_of::<xcb_xkb_key_sym_map_t>() - 2usize];
    ["Offset of field: xcb_xkb_key_sym_map_t::kt_index"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_t, kt_index) - 0usize];
    ["Offset of field: xcb_xkb_key_sym_map_t::groupInfo"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_t, groupInfo) - 4usize];
    ["Offset of field: xcb_xkb_key_sym_map_t::width"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_t, width) - 5usize];
    ["Offset of field: xcb_xkb_key_sym_map_t::nSyms"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_t, nSyms) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_sym_map_iterator_t {
    pub data: *mut xcb_xkb_key_sym_map_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_sym_map_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_sym_map_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_sym_map_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_sym_map_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_sym_map_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_sym_map_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_sym_map_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_sym_map_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_common_behavior_t {
    pub type_: u8,
    pub data: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_common_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_common_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_common_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_common_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_common_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_common_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_common_behavior_t::data"]
        [::std::mem::offset_of!(xcb_xkb_common_behavior_t, data) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_common_behavior_iterator_t {
    pub data: *mut xcb_xkb_common_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_common_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_common_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_common_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_common_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_common_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_common_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_common_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_common_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_common_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_common_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_default_behavior_t {
    pub type_: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_default_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_default_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_default_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_default_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_default_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_default_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_default_behavior_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_default_behavior_t, pad0) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_default_behavior_iterator_t {
    pub data: *mut xcb_xkb_default_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_default_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_default_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_default_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_default_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_default_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_default_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_default_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_default_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_default_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_default_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_lock_behavior_t {
    pub type_: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_lock_behavior_t"][::std::mem::size_of::<xcb_xkb_lock_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_lock_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_lock_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_lock_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_lock_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_lock_behavior_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_lock_behavior_t, pad0) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_lock_behavior_iterator_t {
    pub data: *mut xcb_xkb_lock_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_lock_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_lock_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_lock_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_lock_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_lock_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_lock_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_lock_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_lock_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_lock_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_lock_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_radio_group_behavior_t {
    pub type_: u8,
    pub group: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_radio_group_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_radio_group_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_radio_group_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_radio_group_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_radio_group_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_radio_group_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_radio_group_behavior_t::group"]
        [::std::mem::offset_of!(xcb_xkb_radio_group_behavior_t, group) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_radio_group_behavior_iterator_t {
    pub data: *mut xcb_xkb_radio_group_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_radio_group_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_radio_group_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_radio_group_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_radio_group_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_radio_group_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_radio_group_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_radio_group_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_radio_group_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_radio_group_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_radio_group_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_behavior_t {
    pub type_: u8,
    pub key: xcb_keycode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_overlay_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_overlay_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_overlay_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_overlay_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_overlay_behavior_t::key"]
        [::std::mem::offset_of!(xcb_xkb_overlay_behavior_t, key) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_behavior_iterator_t {
    pub data: *mut xcb_xkb_overlay_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_overlay_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_overlay_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_overlay_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_overlay_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_overlay_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_overlay_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_overlay_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_overlay_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_lock_behavior_t {
    pub type_: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_lock_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_permament_lock_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_permament_lock_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_permament_lock_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_permament_lock_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_permament_lock_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_permament_lock_behavior_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_permament_lock_behavior_t, pad0) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_lock_behavior_iterator_t {
    pub data: *mut xcb_xkb_permament_lock_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_lock_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_permament_lock_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_permament_lock_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_permament_lock_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_permament_lock_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_permament_lock_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_permament_lock_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_permament_lock_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_permament_lock_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_permament_lock_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_radio_group_behavior_t {
    pub type_: u8,
    pub group: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_radio_group_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_permament_radio_group_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_permament_radio_group_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_permament_radio_group_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_permament_radio_group_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_permament_radio_group_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_permament_radio_group_behavior_t::group"]
        [::std::mem::offset_of!(xcb_xkb_permament_radio_group_behavior_t, group) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_radio_group_behavior_iterator_t {
    pub data: *mut xcb_xkb_permament_radio_group_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_radio_group_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_permament_radio_group_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_permament_radio_group_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_permament_radio_group_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_permament_radio_group_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_permament_radio_group_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_permament_radio_group_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_permament_radio_group_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_permament_radio_group_behavior_iterator_t::index"][::std::mem::offset_of!(
        xcb_xkb_permament_radio_group_behavior_iterator_t,
        index
    ) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_overlay_behavior_t {
    pub type_: u8,
    pub key: xcb_keycode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_overlay_behavior_t"]
        [::std::mem::size_of::<xcb_xkb_permament_overlay_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_permament_overlay_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_permament_overlay_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_permament_overlay_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_permament_overlay_behavior_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_permament_overlay_behavior_t::key"]
        [::std::mem::offset_of!(xcb_xkb_permament_overlay_behavior_t, key) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_permament_overlay_behavior_iterator_t {
    pub data: *mut xcb_xkb_permament_overlay_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_permament_overlay_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_permament_overlay_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_permament_overlay_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_permament_overlay_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_permament_overlay_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_permament_overlay_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_permament_overlay_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_permament_overlay_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_permament_overlay_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_permament_overlay_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_xkb_behavior_t {
    pub common: xcb_xkb_common_behavior_t,
    pub _default: xcb_xkb_default_behavior_t,
    pub lock: xcb_xkb_lock_behavior_t,
    pub radioGroup: xcb_xkb_radio_group_behavior_t,
    pub overlay1: xcb_xkb_overlay_behavior_t,
    pub overlay2: xcb_xkb_overlay_behavior_t,
    pub permamentLock: xcb_xkb_permament_lock_behavior_t,
    pub permamentRadioGroup: xcb_xkb_permament_radio_group_behavior_t,
    pub permamentOverlay1: xcb_xkb_permament_overlay_behavior_t,
    pub permamentOverlay2: xcb_xkb_permament_overlay_behavior_t,
    pub type_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_behavior_t"][::std::mem::size_of::<xcb_xkb_behavior_t>() - 2usize];
    ["Alignment of xcb_xkb_behavior_t"][::std::mem::align_of::<xcb_xkb_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_behavior_t::common"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, common) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::_default"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, _default) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::lock"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, lock) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::radioGroup"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, radioGroup) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::overlay1"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, overlay1) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::overlay2"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, overlay2) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::permamentLock"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, permamentLock) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::permamentRadioGroup"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, permamentRadioGroup) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::permamentOverlay1"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, permamentOverlay1) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::permamentOverlay2"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, permamentOverlay2) - 0usize];
    ["Offset of field: xcb_xkb_behavior_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_behavior_t, type_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_behavior_iterator_t {
    pub data: *mut xcb_xkb_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_behavior_iterator_t, index) - 12usize];
};
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_DEFAULT: xcb_xkb_behavior_type_t = 0;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_LOCK: xcb_xkb_behavior_type_t = 1;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_RADIO_GROUP: xcb_xkb_behavior_type_t = 2;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_OVERLAY_1: xcb_xkb_behavior_type_t = 3;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_OVERLAY_2: xcb_xkb_behavior_type_t = 4;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_LOCK: xcb_xkb_behavior_type_t =
    129;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_RADIO_GROUP:
    xcb_xkb_behavior_type_t = 130;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_OVERLAY_1:
    xcb_xkb_behavior_type_t = 131;
pub const xcb_xkb_behavior_type_t_XCB_XKB_BEHAVIOR_TYPE_PERMAMENT_OVERLAY_2:
    xcb_xkb_behavior_type_t = 132;
pub type xcb_xkb_behavior_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcb_xkb_set_behavior_t {
    pub keycode: xcb_keycode_t,
    pub behavior: xcb_xkb_behavior_t,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_behavior_t"][::std::mem::size_of::<xcb_xkb_set_behavior_t>() - 4usize];
    ["Alignment of xcb_xkb_set_behavior_t"]
        [::std::mem::align_of::<xcb_xkb_set_behavior_t>() - 1usize];
    ["Offset of field: xcb_xkb_set_behavior_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_t, keycode) - 0usize];
    ["Offset of field: xcb_xkb_set_behavior_t::behavior"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_t, behavior) - 1usize];
    ["Offset of field: xcb_xkb_set_behavior_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_behavior_iterator_t {
    pub data: *mut xcb_xkb_set_behavior_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_behavior_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_set_behavior_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_set_behavior_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_set_behavior_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_set_behavior_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_set_behavior_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_set_behavior_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_set_behavior_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_explicit_t {
    pub keycode: xcb_keycode_t,
    pub explicit: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_explicit_t"][::std::mem::size_of::<xcb_xkb_set_explicit_t>() - 2usize];
    ["Alignment of xcb_xkb_set_explicit_t"]
        [::std::mem::align_of::<xcb_xkb_set_explicit_t>() - 1usize];
    ["Offset of field: xcb_xkb_set_explicit_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_set_explicit_t, keycode) - 0usize];
    ["Offset of field: xcb_xkb_set_explicit_t::explicit"]
        [::std::mem::offset_of!(xcb_xkb_set_explicit_t, explicit) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_explicit_iterator_t {
    pub data: *mut xcb_xkb_set_explicit_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_explicit_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_set_explicit_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_set_explicit_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_set_explicit_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_set_explicit_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_set_explicit_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_set_explicit_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_set_explicit_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_set_explicit_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_set_explicit_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_mod_map_t {
    pub keycode: xcb_keycode_t,
    pub mods: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_mod_map_t"][::std::mem::size_of::<xcb_xkb_key_mod_map_t>() - 2usize];
    ["Alignment of xcb_xkb_key_mod_map_t"]
        [::std::mem::align_of::<xcb_xkb_key_mod_map_t>() - 1usize];
    ["Offset of field: xcb_xkb_key_mod_map_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_key_mod_map_t, keycode) - 0usize];
    ["Offset of field: xcb_xkb_key_mod_map_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_key_mod_map_t, mods) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_mod_map_iterator_t {
    pub data: *mut xcb_xkb_key_mod_map_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_mod_map_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_mod_map_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_mod_map_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_mod_map_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_mod_map_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_mod_map_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_mod_map_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_mod_map_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_mod_map_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_mod_map_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_v_mod_map_t {
    pub keycode: xcb_keycode_t,
    pub pad0: u8,
    pub vmods: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_v_mod_map_t"][::std::mem::size_of::<xcb_xkb_key_v_mod_map_t>() - 4usize];
    ["Alignment of xcb_xkb_key_v_mod_map_t"]
        [::std::mem::align_of::<xcb_xkb_key_v_mod_map_t>() - 2usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_t, keycode) - 0usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_t, pad0) - 1usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_t::vmods"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_t, vmods) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_v_mod_map_iterator_t {
    pub data: *mut xcb_xkb_key_v_mod_map_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_v_mod_map_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_key_v_mod_map_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_v_mod_map_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_v_mod_map_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_v_mod_map_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_v_mod_map_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_kt_set_map_entry_t {
    pub level: u8,
    pub realMods: u8,
    pub virtualMods: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_kt_set_map_entry_t"]
        [::std::mem::size_of::<xcb_xkb_kt_set_map_entry_t>() - 4usize];
    ["Alignment of xcb_xkb_kt_set_map_entry_t"]
        [::std::mem::align_of::<xcb_xkb_kt_set_map_entry_t>() - 2usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_t::level"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_t, level) - 0usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_t, realMods) - 1usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_t, virtualMods) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_kt_set_map_entry_iterator_t {
    pub data: *mut xcb_xkb_kt_set_map_entry_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_kt_set_map_entry_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_kt_set_map_entry_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_kt_set_map_entry_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_kt_set_map_entry_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_kt_set_map_entry_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_kt_set_map_entry_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_key_type_t {
    pub mask: u8,
    pub realMods: u8,
    pub virtualMods: u16,
    pub numLevels: u8,
    pub nMapEntries: u8,
    pub preserve: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_key_type_t"][::std::mem::size_of::<xcb_xkb_set_key_type_t>() - 8usize];
    ["Alignment of xcb_xkb_set_key_type_t"]
        [::std::mem::align_of::<xcb_xkb_set_key_type_t>() - 2usize];
    ["Offset of field: xcb_xkb_set_key_type_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, mask) - 0usize];
    ["Offset of field: xcb_xkb_set_key_type_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, realMods) - 1usize];
    ["Offset of field: xcb_xkb_set_key_type_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, virtualMods) - 2usize];
    ["Offset of field: xcb_xkb_set_key_type_t::numLevels"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, numLevels) - 4usize];
    ["Offset of field: xcb_xkb_set_key_type_t::nMapEntries"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, nMapEntries) - 5usize];
    ["Offset of field: xcb_xkb_set_key_type_t::preserve"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, preserve) - 6usize];
    ["Offset of field: xcb_xkb_set_key_type_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_t, pad0) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_key_type_iterator_t {
    pub data: *mut xcb_xkb_set_key_type_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_key_type_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_set_key_type_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_set_key_type_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_set_key_type_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_set_key_type_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_set_key_type_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_set_key_type_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_set_key_type_iterator_t, index) - 12usize];
};
pub type xcb_xkb_string8_t = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_string8_iterator_t {
    pub data: *mut xcb_xkb_string8_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_string8_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_string8_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_string8_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_string8_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_string8_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_string8_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_string8_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_string8_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_string8_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_string8_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_outline_t {
    pub nPoints: u8,
    pub cornerRadius: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_outline_t"][::std::mem::size_of::<xcb_xkb_outline_t>() - 4usize];
    ["Alignment of xcb_xkb_outline_t"][::std::mem::align_of::<xcb_xkb_outline_t>() - 1usize];
    ["Offset of field: xcb_xkb_outline_t::nPoints"]
        [::std::mem::offset_of!(xcb_xkb_outline_t, nPoints) - 0usize];
    ["Offset of field: xcb_xkb_outline_t::cornerRadius"]
        [::std::mem::offset_of!(xcb_xkb_outline_t, cornerRadius) - 1usize];
    ["Offset of field: xcb_xkb_outline_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_outline_t, pad0) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_outline_iterator_t {
    pub data: *mut xcb_xkb_outline_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_outline_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_outline_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_outline_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_outline_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_outline_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_outline_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_outline_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_outline_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_outline_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_outline_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_shape_t {
    pub name: xcb_atom_t,
    pub nOutlines: u8,
    pub primaryNdx: u8,
    pub approxNdx: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_shape_t"][::std::mem::size_of::<xcb_xkb_shape_t>() - 8usize];
    ["Alignment of xcb_xkb_shape_t"][::std::mem::align_of::<xcb_xkb_shape_t>() - 4usize];
    ["Offset of field: xcb_xkb_shape_t::name"]
        [::std::mem::offset_of!(xcb_xkb_shape_t, name) - 0usize];
    ["Offset of field: xcb_xkb_shape_t::nOutlines"]
        [::std::mem::offset_of!(xcb_xkb_shape_t, nOutlines) - 4usize];
    ["Offset of field: xcb_xkb_shape_t::primaryNdx"]
        [::std::mem::offset_of!(xcb_xkb_shape_t, primaryNdx) - 5usize];
    ["Offset of field: xcb_xkb_shape_t::approxNdx"]
        [::std::mem::offset_of!(xcb_xkb_shape_t, approxNdx) - 6usize];
    ["Offset of field: xcb_xkb_shape_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_shape_t, pad0) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_shape_iterator_t {
    pub data: *mut xcb_xkb_shape_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_shape_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_shape_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_shape_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_shape_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_shape_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_shape_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_shape_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_shape_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_shape_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_shape_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_t {
    pub name: [xcb_xkb_string8_t; 4usize],
    pub gap: i16,
    pub shapeNdx: u8,
    pub colorNdx: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_t"][::std::mem::size_of::<xcb_xkb_key_t>() - 8usize];
    ["Alignment of xcb_xkb_key_t"][::std::mem::align_of::<xcb_xkb_key_t>() - 2usize];
    ["Offset of field: xcb_xkb_key_t::name"][::std::mem::offset_of!(xcb_xkb_key_t, name) - 0usize];
    ["Offset of field: xcb_xkb_key_t::gap"][::std::mem::offset_of!(xcb_xkb_key_t, gap) - 4usize];
    ["Offset of field: xcb_xkb_key_t::shapeNdx"]
        [::std::mem::offset_of!(xcb_xkb_key_t, shapeNdx) - 6usize];
    ["Offset of field: xcb_xkb_key_t::colorNdx"]
        [::std::mem::offset_of!(xcb_xkb_key_t, colorNdx) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_key_iterator_t {
    pub data: *mut xcb_xkb_key_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_key_iterator_t"][::std::mem::size_of::<xcb_xkb_key_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_key_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_key_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_key_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_key_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_key_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_key_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_key_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_key_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_key_t {
    pub over: [xcb_xkb_string8_t; 4usize],
    pub under: [xcb_xkb_string8_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_key_t"][::std::mem::size_of::<xcb_xkb_overlay_key_t>() - 8usize];
    ["Alignment of xcb_xkb_overlay_key_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_key_t>() - 1usize];
    ["Offset of field: xcb_xkb_overlay_key_t::over"]
        [::std::mem::offset_of!(xcb_xkb_overlay_key_t, over) - 0usize];
    ["Offset of field: xcb_xkb_overlay_key_t::under"]
        [::std::mem::offset_of!(xcb_xkb_overlay_key_t, under) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_key_iterator_t {
    pub data: *mut xcb_xkb_overlay_key_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_key_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_overlay_key_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_overlay_key_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_key_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_overlay_key_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_overlay_key_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_overlay_key_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_overlay_key_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_overlay_key_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_overlay_key_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_row_t {
    pub rowUnder: u8,
    pub nKeys: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_row_t"][::std::mem::size_of::<xcb_xkb_overlay_row_t>() - 4usize];
    ["Alignment of xcb_xkb_overlay_row_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_row_t>() - 1usize];
    ["Offset of field: xcb_xkb_overlay_row_t::rowUnder"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_t, rowUnder) - 0usize];
    ["Offset of field: xcb_xkb_overlay_row_t::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_t, nKeys) - 1usize];
    ["Offset of field: xcb_xkb_overlay_row_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_t, pad0) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_row_iterator_t {
    pub data: *mut xcb_xkb_overlay_row_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_row_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_overlay_row_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_overlay_row_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_row_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_overlay_row_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_overlay_row_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_overlay_row_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_overlay_row_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_t {
    pub name: xcb_atom_t,
    pub nRows: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_t"][::std::mem::size_of::<xcb_xkb_overlay_t>() - 8usize];
    ["Alignment of xcb_xkb_overlay_t"][::std::mem::align_of::<xcb_xkb_overlay_t>() - 4usize];
    ["Offset of field: xcb_xkb_overlay_t::name"]
        [::std::mem::offset_of!(xcb_xkb_overlay_t, name) - 0usize];
    ["Offset of field: xcb_xkb_overlay_t::nRows"]
        [::std::mem::offset_of!(xcb_xkb_overlay_t, nRows) - 4usize];
    ["Offset of field: xcb_xkb_overlay_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_overlay_t, pad0) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_overlay_iterator_t {
    pub data: *mut xcb_xkb_overlay_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_overlay_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_overlay_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_overlay_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_overlay_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_overlay_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_overlay_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_overlay_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_overlay_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_overlay_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_overlay_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_row_t {
    pub top: i16,
    pub left: i16,
    pub nKeys: u8,
    pub vertical: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_row_t"][::std::mem::size_of::<xcb_xkb_row_t>() - 8usize];
    ["Alignment of xcb_xkb_row_t"][::std::mem::align_of::<xcb_xkb_row_t>() - 2usize];
    ["Offset of field: xcb_xkb_row_t::top"][::std::mem::offset_of!(xcb_xkb_row_t, top) - 0usize];
    ["Offset of field: xcb_xkb_row_t::left"][::std::mem::offset_of!(xcb_xkb_row_t, left) - 2usize];
    ["Offset of field: xcb_xkb_row_t::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_row_t, nKeys) - 4usize];
    ["Offset of field: xcb_xkb_row_t::vertical"]
        [::std::mem::offset_of!(xcb_xkb_row_t, vertical) - 5usize];
    ["Offset of field: xcb_xkb_row_t::pad0"][::std::mem::offset_of!(xcb_xkb_row_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_row_iterator_t {
    pub data: *mut xcb_xkb_row_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_row_iterator_t"][::std::mem::size_of::<xcb_xkb_row_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_row_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_row_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_row_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_row_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_row_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_row_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_row_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_row_iterator_t, index) - 12usize];
};
pub const xcb_xkb_doodad_type_t_XCB_XKB_DOODAD_TYPE_OUTLINE: xcb_xkb_doodad_type_t = 1;
pub const xcb_xkb_doodad_type_t_XCB_XKB_DOODAD_TYPE_SOLID: xcb_xkb_doodad_type_t = 2;
pub const xcb_xkb_doodad_type_t_XCB_XKB_DOODAD_TYPE_TEXT: xcb_xkb_doodad_type_t = 3;
pub const xcb_xkb_doodad_type_t_XCB_XKB_DOODAD_TYPE_INDICATOR: xcb_xkb_doodad_type_t = 4;
pub const xcb_xkb_doodad_type_t_XCB_XKB_DOODAD_TYPE_LOGO: xcb_xkb_doodad_type_t = 5;
pub type xcb_xkb_doodad_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_listing_t {
    pub flags: u16,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_listing_t"][::std::mem::size_of::<xcb_xkb_listing_t>() - 4usize];
    ["Alignment of xcb_xkb_listing_t"][::std::mem::align_of::<xcb_xkb_listing_t>() - 2usize];
    ["Offset of field: xcb_xkb_listing_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_listing_t, flags) - 0usize];
    ["Offset of field: xcb_xkb_listing_t::length"]
        [::std::mem::offset_of!(xcb_xkb_listing_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_listing_iterator_t {
    pub data: *mut xcb_xkb_listing_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_listing_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_listing_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_listing_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_listing_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_listing_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_listing_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_listing_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_listing_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_listing_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_listing_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_device_led_info_t {
    pub ledClass: xcb_xkb_led_class_spec_t,
    pub ledID: xcb_xkb_id_spec_t,
    pub namesPresent: u32,
    pub mapsPresent: u32,
    pub physIndicators: u32,
    pub state: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_device_led_info_t"]
        [::std::mem::size_of::<xcb_xkb_device_led_info_t>() - 20usize];
    ["Alignment of xcb_xkb_device_led_info_t"]
        [::std::mem::align_of::<xcb_xkb_device_led_info_t>() - 4usize];
    ["Offset of field: xcb_xkb_device_led_info_t::ledClass"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, ledClass) - 0usize];
    ["Offset of field: xcb_xkb_device_led_info_t::ledID"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, ledID) - 2usize];
    ["Offset of field: xcb_xkb_device_led_info_t::namesPresent"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, namesPresent) - 4usize];
    ["Offset of field: xcb_xkb_device_led_info_t::mapsPresent"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, mapsPresent) - 8usize];
    ["Offset of field: xcb_xkb_device_led_info_t::physIndicators"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, physIndicators) - 12usize];
    ["Offset of field: xcb_xkb_device_led_info_t::state"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_t, state) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_device_led_info_iterator_t {
    pub data: *mut xcb_xkb_device_led_info_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_device_led_info_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_device_led_info_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_device_led_info_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_device_led_info_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_device_led_info_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_device_led_info_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_device_led_info_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_device_led_info_iterator_t, index) - 12usize];
};
pub const xcb_xkb_error_t_XCB_XKB_ERROR_BAD_DEVICE: xcb_xkb_error_t = 255;
pub const xcb_xkb_error_t_XCB_XKB_ERROR_BAD_CLASS: xcb_xkb_error_t = 254;
pub const xcb_xkb_error_t_XCB_XKB_ERROR_BAD_ID: xcb_xkb_error_t = 253;
pub type xcb_xkb_error_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_keyboard_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub value: u32,
    pub minorOpcode: u16,
    pub majorOpcode: u8,
    pub pad0: [u8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_keyboard_error_t"]
        [::std::mem::size_of::<xcb_xkb_keyboard_error_t>() - 32usize];
    ["Alignment of xcb_xkb_keyboard_error_t"]
        [::std::mem::align_of::<xcb_xkb_keyboard_error_t>() - 4usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::error_code"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, error_code) - 1usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::value"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, value) - 4usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::minorOpcode"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, minorOpcode) - 8usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::majorOpcode"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, majorOpcode) - 10usize];
    ["Offset of field: xcb_xkb_keyboard_error_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_keyboard_error_t, pad0) - 11usize];
};
pub const xcb_xkb_sa_t_XCB_XKB_SA_CLEAR_LOCKS: xcb_xkb_sa_t = 1;
pub const xcb_xkb_sa_t_XCB_XKB_SA_LATCH_TO_LOCK: xcb_xkb_sa_t = 2;
pub const xcb_xkb_sa_t_XCB_XKB_SA_USE_MOD_MAP_MODS: xcb_xkb_sa_t = 4;
pub const xcb_xkb_sa_t_XCB_XKB_SA_GROUP_ABSOLUTE: xcb_xkb_sa_t = 4;
pub type xcb_xkb_sa_t = ::std::os::raw::c_uint;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_NO_ACTION: xcb_xkb_sa_type_t = 0;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_SET_MODS: xcb_xkb_sa_type_t = 1;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LATCH_MODS: xcb_xkb_sa_type_t = 2;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LOCK_MODS: xcb_xkb_sa_type_t = 3;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_SET_GROUP: xcb_xkb_sa_type_t = 4;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LATCH_GROUP: xcb_xkb_sa_type_t = 5;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LOCK_GROUP: xcb_xkb_sa_type_t = 6;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_MOVE_PTR: xcb_xkb_sa_type_t = 7;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_PTR_BTN: xcb_xkb_sa_type_t = 8;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LOCK_PTR_BTN: xcb_xkb_sa_type_t = 9;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_SET_PTR_DFLT: xcb_xkb_sa_type_t = 10;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_ISO_LOCK: xcb_xkb_sa_type_t = 11;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_TERMINATE: xcb_xkb_sa_type_t = 12;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_SWITCH_SCREEN: xcb_xkb_sa_type_t = 13;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_SET_CONTROLS: xcb_xkb_sa_type_t = 14;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LOCK_CONTROLS: xcb_xkb_sa_type_t = 15;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_ACTION_MESSAGE: xcb_xkb_sa_type_t = 16;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_REDIRECT_KEY: xcb_xkb_sa_type_t = 17;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_DEVICE_BTN: xcb_xkb_sa_type_t = 18;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_LOCK_DEVICE_BTN: xcb_xkb_sa_type_t = 19;
pub const xcb_xkb_sa_type_t_XCB_XKB_SA_TYPE_DEVICE_VALUATOR: xcb_xkb_sa_type_t = 20;
pub type xcb_xkb_sa_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_no_action_t {
    pub type_: u8,
    pub pad0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_no_action_t"][::std::mem::size_of::<xcb_xkb_sa_no_action_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_no_action_t"]
        [::std::mem::align_of::<xcb_xkb_sa_no_action_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_no_action_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_no_action_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_no_action_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_no_action_t, pad0) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_no_action_iterator_t {
    pub data: *mut xcb_xkb_sa_no_action_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_no_action_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_no_action_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_no_action_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_no_action_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_no_action_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_no_action_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_no_action_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_no_action_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_no_action_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_no_action_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_mods_t {
    pub type_: u8,
    pub flags: u8,
    pub mask: u8,
    pub realMods: u8,
    pub vmodsHigh: u8,
    pub vmodsLow: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_mods_t"][::std::mem::size_of::<xcb_xkb_sa_set_mods_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_set_mods_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_mods_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, mask) - 2usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, realMods) - 3usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::vmodsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, vmodsHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::vmodsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, vmodsLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_set_mods_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_mods_iterator_t {
    pub data: *mut xcb_xkb_sa_set_mods_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_mods_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_mods_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_set_mods_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_mods_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_set_mods_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_mods_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_set_mods_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_mods_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_latch_mods_t {
    pub type_: u8,
    pub flags: u8,
    pub mask: u8,
    pub realMods: u8,
    pub vmodsHigh: u8,
    pub vmodsLow: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_latch_mods_t"][::std::mem::size_of::<xcb_xkb_sa_latch_mods_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_latch_mods_t"]
        [::std::mem::align_of::<xcb_xkb_sa_latch_mods_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, mask) - 2usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, realMods) - 3usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::vmodsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, vmodsHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::vmodsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, vmodsLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_latch_mods_iterator_t {
    pub data: *mut xcb_xkb_sa_latch_mods_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_latch_mods_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_latch_mods_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_latch_mods_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_latch_mods_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_latch_mods_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_mods_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_mods_t {
    pub type_: u8,
    pub flags: u8,
    pub mask: u8,
    pub realMods: u8,
    pub vmodsHigh: u8,
    pub vmodsLow: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_mods_t"][::std::mem::size_of::<xcb_xkb_sa_lock_mods_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_lock_mods_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_mods_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, mask) - 2usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, realMods) - 3usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::vmodsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, vmodsHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::vmodsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, vmodsLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_mods_iterator_t {
    pub data: *mut xcb_xkb_sa_lock_mods_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_mods_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_mods_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_lock_mods_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_mods_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_mods_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_mods_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_group_t {
    pub type_: u8,
    pub flags: u8,
    pub group: i8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_group_t"][::std::mem::size_of::<xcb_xkb_sa_set_group_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_set_group_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_group_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_set_group_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_group_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_set_group_t::group"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_t, group) - 2usize];
    ["Offset of field: xcb_xkb_sa_set_group_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_group_iterator_t {
    pub data: *mut xcb_xkb_sa_set_group_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_group_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_group_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_set_group_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_group_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_set_group_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_group_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_set_group_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_group_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_latch_group_t {
    pub type_: u8,
    pub flags: u8,
    pub group: i8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_latch_group_t"]
        [::std::mem::size_of::<xcb_xkb_sa_latch_group_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_latch_group_t"]
        [::std::mem::align_of::<xcb_xkb_sa_latch_group_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_latch_group_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_latch_group_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_latch_group_t::group"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_t, group) - 2usize];
    ["Offset of field: xcb_xkb_sa_latch_group_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_latch_group_iterator_t {
    pub data: *mut xcb_xkb_sa_latch_group_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_latch_group_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_latch_group_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_latch_group_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_latch_group_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_latch_group_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_latch_group_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_latch_group_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_latch_group_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_group_t {
    pub type_: u8,
    pub flags: u8,
    pub group: i8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_group_t"][::std::mem::size_of::<xcb_xkb_sa_lock_group_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_lock_group_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_group_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_group_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_group_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_group_t::group"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_t, group) - 2usize];
    ["Offset of field: xcb_xkb_sa_lock_group_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_group_iterator_t {
    pub data: *mut xcb_xkb_sa_lock_group_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_group_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_group_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_lock_group_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_group_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_group_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_group_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_group_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_group_iterator_t, index) - 12usize];
};
pub const xcb_xkb_sa_move_ptr_flag_t_XCB_XKB_SA_MOVE_PTR_FLAG_NO_ACCELERATION:
    xcb_xkb_sa_move_ptr_flag_t = 1;
pub const xcb_xkb_sa_move_ptr_flag_t_XCB_XKB_SA_MOVE_PTR_FLAG_MOVE_ABSOLUTE_X:
    xcb_xkb_sa_move_ptr_flag_t = 2;
pub const xcb_xkb_sa_move_ptr_flag_t_XCB_XKB_SA_MOVE_PTR_FLAG_MOVE_ABSOLUTE_Y:
    xcb_xkb_sa_move_ptr_flag_t = 4;
pub type xcb_xkb_sa_move_ptr_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_move_ptr_t {
    pub type_: u8,
    pub flags: u8,
    pub xHigh: i8,
    pub xLow: u8,
    pub yHigh: i8,
    pub yLow: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_move_ptr_t"][::std::mem::size_of::<xcb_xkb_sa_move_ptr_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_move_ptr_t"]
        [::std::mem::align_of::<xcb_xkb_sa_move_ptr_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::xHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, xHigh) - 2usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::xLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, xLow) - 3usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::yHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, yHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::yLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, yLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_move_ptr_iterator_t {
    pub data: *mut xcb_xkb_sa_move_ptr_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_move_ptr_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_move_ptr_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_move_ptr_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_move_ptr_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_move_ptr_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_move_ptr_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_ptr_btn_t {
    pub type_: u8,
    pub flags: u8,
    pub count: u8,
    pub button: u8,
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_ptr_btn_t"][::std::mem::size_of::<xcb_xkb_sa_ptr_btn_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_ptr_btn_t"][::std::mem::align_of::<xcb_xkb_sa_ptr_btn_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_t::count"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_t, count) - 2usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_t::button"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_t, button) - 3usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_t, pad0) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_ptr_btn_iterator_t {
    pub data: *mut xcb_xkb_sa_ptr_btn_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_ptr_btn_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_ptr_btn_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_ptr_btn_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_ptr_btn_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_ptr_btn_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_ptr_btn_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_ptr_btn_t {
    pub type_: u8,
    pub flags: u8,
    pub pad0: u8,
    pub button: u8,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_ptr_btn_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_ptr_btn_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_lock_ptr_btn_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_ptr_btn_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_t, pad0) - 2usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_t::button"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_t, button) - 3usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_t, pad1) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_ptr_btn_iterator_t {
    pub data: *mut xcb_xkb_sa_lock_ptr_btn_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_ptr_btn_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_ptr_btn_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_lock_ptr_btn_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_ptr_btn_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_ptr_btn_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_ptr_btn_iterator_t, index) - 12usize];
};
pub const xcb_xkb_sa_set_ptr_dflt_flag_t_XCB_XKB_SA_SET_PTR_DFLT_FLAG_DFLT_BTN_ABSOLUTE:
    xcb_xkb_sa_set_ptr_dflt_flag_t = 4;
pub const xcb_xkb_sa_set_ptr_dflt_flag_t_XCB_XKB_SA_SET_PTR_DFLT_FLAG_AFFECT_DFLT_BUTTON:
    xcb_xkb_sa_set_ptr_dflt_flag_t = 1;
pub type xcb_xkb_sa_set_ptr_dflt_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_ptr_dflt_t {
    pub type_: u8,
    pub flags: u8,
    pub affect: u8,
    pub value: i8,
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_ptr_dflt_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_ptr_dflt_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_set_ptr_dflt_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_ptr_dflt_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_t::affect"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_t, affect) - 2usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_t::value"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_t, value) - 3usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_t, pad0) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_ptr_dflt_iterator_t {
    pub data: *mut xcb_xkb_sa_set_ptr_dflt_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_ptr_dflt_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_ptr_dflt_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_set_ptr_dflt_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_ptr_dflt_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_set_ptr_dflt_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_ptr_dflt_iterator_t, index) - 12usize];
};
pub const xcb_xkb_sa_iso_lock_flag_t_XCB_XKB_SA_ISO_LOCK_FLAG_NO_LOCK: xcb_xkb_sa_iso_lock_flag_t =
    1;
pub const xcb_xkb_sa_iso_lock_flag_t_XCB_XKB_SA_ISO_LOCK_FLAG_NO_UNLOCK:
    xcb_xkb_sa_iso_lock_flag_t = 2;
pub const xcb_xkb_sa_iso_lock_flag_t_XCB_XKB_SA_ISO_LOCK_FLAG_USE_MOD_MAP_MODS:
    xcb_xkb_sa_iso_lock_flag_t = 4;
pub const xcb_xkb_sa_iso_lock_flag_t_XCB_XKB_SA_ISO_LOCK_FLAG_GROUP_ABSOLUTE:
    xcb_xkb_sa_iso_lock_flag_t = 4;
pub const xcb_xkb_sa_iso_lock_flag_t_XCB_XKB_SA_ISO_LOCK_FLAG_ISO_DFLT_IS_GROUP:
    xcb_xkb_sa_iso_lock_flag_t = 8;
pub type xcb_xkb_sa_iso_lock_flag_t = ::std::os::raw::c_uint;
pub const xcb_xkb_sa_iso_lock_no_affect_t_XCB_XKB_SA_ISO_LOCK_NO_AFFECT_CTRLS:
    xcb_xkb_sa_iso_lock_no_affect_t = 8;
pub const xcb_xkb_sa_iso_lock_no_affect_t_XCB_XKB_SA_ISO_LOCK_NO_AFFECT_PTR:
    xcb_xkb_sa_iso_lock_no_affect_t = 16;
pub const xcb_xkb_sa_iso_lock_no_affect_t_XCB_XKB_SA_ISO_LOCK_NO_AFFECT_GROUP:
    xcb_xkb_sa_iso_lock_no_affect_t = 32;
pub const xcb_xkb_sa_iso_lock_no_affect_t_XCB_XKB_SA_ISO_LOCK_NO_AFFECT_MODS:
    xcb_xkb_sa_iso_lock_no_affect_t = 64;
pub type xcb_xkb_sa_iso_lock_no_affect_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_iso_lock_t {
    pub type_: u8,
    pub flags: u8,
    pub mask: u8,
    pub realMods: u8,
    pub group: i8,
    pub affect: u8,
    pub vmodsHigh: u8,
    pub vmodsLow: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_iso_lock_t"][::std::mem::size_of::<xcb_xkb_sa_iso_lock_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_iso_lock_t"]
        [::std::mem::align_of::<xcb_xkb_sa_iso_lock_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, mask) - 2usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::realMods"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, realMods) - 3usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::group"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, group) - 4usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::affect"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, affect) - 5usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::vmodsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, vmodsHigh) - 6usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_t::vmodsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_t, vmodsLow) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_iso_lock_iterator_t {
    pub data: *mut xcb_xkb_sa_iso_lock_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_iso_lock_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_iso_lock_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_iso_lock_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_iso_lock_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_iso_lock_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_iso_lock_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_terminate_t {
    pub type_: u8,
    pub pad0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_terminate_t"][::std::mem::size_of::<xcb_xkb_sa_terminate_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_terminate_t"]
        [::std::mem::align_of::<xcb_xkb_sa_terminate_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_terminate_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_terminate_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_terminate_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_terminate_t, pad0) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_terminate_iterator_t {
    pub data: *mut xcb_xkb_sa_terminate_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_terminate_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_terminate_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_terminate_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_terminate_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_terminate_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_terminate_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_terminate_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_terminate_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_terminate_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_terminate_iterator_t, index) - 12usize];
};
pub const xcb_xkb_switch_screen_flag_t_XCB_XKB_SWITCH_SCREEN_FLAG_APPLICATION:
    xcb_xkb_switch_screen_flag_t = 1;
pub const xcb_xkb_switch_screen_flag_t_XCB_XKB_SWITCH_SCREEN_FLAG_ABSOLUTE:
    xcb_xkb_switch_screen_flag_t = 4;
pub type xcb_xkb_switch_screen_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_switch_screen_t {
    pub type_: u8,
    pub flags: u8,
    pub newScreen: i8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_switch_screen_t"]
        [::std::mem::size_of::<xcb_xkb_sa_switch_screen_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_switch_screen_t"]
        [::std::mem::align_of::<xcb_xkb_sa_switch_screen_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_t::newScreen"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_t, newScreen) - 2usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_switch_screen_iterator_t {
    pub data: *mut xcb_xkb_sa_switch_screen_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_switch_screen_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_switch_screen_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_switch_screen_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_switch_screen_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_switch_screen_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_switch_screen_iterator_t, index) - 12usize];
};
pub const xcb_xkb_bool_ctrls_high_t_XCB_XKB_BOOL_CTRLS_HIGH_ACCESS_X_FEEDBACK:
    xcb_xkb_bool_ctrls_high_t = 1;
pub const xcb_xkb_bool_ctrls_high_t_XCB_XKB_BOOL_CTRLS_HIGH_AUDIBLE_BELL:
    xcb_xkb_bool_ctrls_high_t = 2;
pub const xcb_xkb_bool_ctrls_high_t_XCB_XKB_BOOL_CTRLS_HIGH_OVERLAY_1: xcb_xkb_bool_ctrls_high_t =
    4;
pub const xcb_xkb_bool_ctrls_high_t_XCB_XKB_BOOL_CTRLS_HIGH_OVERLAY_2: xcb_xkb_bool_ctrls_high_t =
    8;
pub const xcb_xkb_bool_ctrls_high_t_XCB_XKB_BOOL_CTRLS_HIGH_IGNORE_GROUP_LOCK:
    xcb_xkb_bool_ctrls_high_t = 16;
pub type xcb_xkb_bool_ctrls_high_t = ::std::os::raw::c_uint;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_REPEAT_KEYS: xcb_xkb_bool_ctrls_low_t = 1;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_SLOW_KEYS: xcb_xkb_bool_ctrls_low_t = 2;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_BOUNCE_KEYS: xcb_xkb_bool_ctrls_low_t = 4;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_STICKY_KEYS: xcb_xkb_bool_ctrls_low_t = 8;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_MOUSE_KEYS: xcb_xkb_bool_ctrls_low_t = 16;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_MOUSE_KEYS_ACCEL:
    xcb_xkb_bool_ctrls_low_t = 32;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_ACCESS_X_KEYS: xcb_xkb_bool_ctrls_low_t =
    64;
pub const xcb_xkb_bool_ctrls_low_t_XCB_XKB_BOOL_CTRLS_LOW_ACCESS_X_TIMEOUT:
    xcb_xkb_bool_ctrls_low_t = 128;
pub type xcb_xkb_bool_ctrls_low_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_controls_t {
    pub type_: u8,
    pub pad0: [u8; 3usize],
    pub boolCtrlsHigh: u8,
    pub boolCtrlsLow: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_controls_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_controls_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_set_controls_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_controls_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_set_controls_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_controls_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_t, pad0) - 1usize];
    ["Offset of field: xcb_xkb_sa_set_controls_t::boolCtrlsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_t, boolCtrlsHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_set_controls_t::boolCtrlsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_t, boolCtrlsLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_set_controls_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_set_controls_iterator_t {
    pub data: *mut xcb_xkb_sa_set_controls_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_set_controls_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_set_controls_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_set_controls_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_set_controls_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_set_controls_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_set_controls_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_set_controls_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_set_controls_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_controls_t {
    pub type_: u8,
    pub pad0: [u8; 3usize],
    pub boolCtrlsHigh: u8,
    pub boolCtrlsLow: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_controls_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_controls_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_lock_controls_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_controls_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_t, pad0) - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_t::boolCtrlsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_t, boolCtrlsHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_t::boolCtrlsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_t, boolCtrlsLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_controls_iterator_t {
    pub data: *mut xcb_xkb_sa_lock_controls_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_controls_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_controls_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_lock_controls_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_controls_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_controls_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_controls_iterator_t, index) - 12usize];
};
pub const xcb_xkb_action_message_flag_t_XCB_XKB_ACTION_MESSAGE_FLAG_ON_PRESS:
    xcb_xkb_action_message_flag_t = 1;
pub const xcb_xkb_action_message_flag_t_XCB_XKB_ACTION_MESSAGE_FLAG_ON_RELEASE:
    xcb_xkb_action_message_flag_t = 2;
pub const xcb_xkb_action_message_flag_t_XCB_XKB_ACTION_MESSAGE_FLAG_GEN_KEY_EVENT:
    xcb_xkb_action_message_flag_t = 4;
pub type xcb_xkb_action_message_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_action_message_t {
    pub type_: u8,
    pub flags: u8,
    pub message: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_action_message_t"]
        [::std::mem::size_of::<xcb_xkb_sa_action_message_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_action_message_t"]
        [::std::mem::align_of::<xcb_xkb_sa_action_message_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_action_message_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_action_message_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_action_message_t::message"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_t, message) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_action_message_iterator_t {
    pub data: *mut xcb_xkb_sa_action_message_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_action_message_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_action_message_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_action_message_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_action_message_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_action_message_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_action_message_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_action_message_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_action_message_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_redirect_key_t {
    pub type_: u8,
    pub newkey: xcb_keycode_t,
    pub mask: u8,
    pub realModifiers: u8,
    pub vmodsMaskHigh: u8,
    pub vmodsMaskLow: u8,
    pub vmodsHigh: u8,
    pub vmodsLow: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_redirect_key_t"]
        [::std::mem::size_of::<xcb_xkb_sa_redirect_key_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_redirect_key_t"]
        [::std::mem::align_of::<xcb_xkb_sa_redirect_key_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::newkey"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, newkey) - 1usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::mask"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, mask) - 2usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::realModifiers"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, realModifiers) - 3usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::vmodsMaskHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, vmodsMaskHigh) - 4usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::vmodsMaskLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, vmodsMaskLow) - 5usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::vmodsHigh"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, vmodsHigh) - 6usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_t::vmodsLow"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_t, vmodsLow) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_redirect_key_iterator_t {
    pub data: *mut xcb_xkb_sa_redirect_key_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_redirect_key_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_redirect_key_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_redirect_key_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_redirect_key_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_redirect_key_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_redirect_key_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_device_btn_t {
    pub type_: u8,
    pub flags: u8,
    pub count: u8,
    pub button: u8,
    pub device: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_device_btn_t"][::std::mem::size_of::<xcb_xkb_sa_device_btn_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_device_btn_t"]
        [::std::mem::align_of::<xcb_xkb_sa_device_btn_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::count"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, count) - 2usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::button"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, button) - 3usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::device"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, device) - 4usize];
    ["Offset of field: xcb_xkb_sa_device_btn_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_t, pad0) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_device_btn_iterator_t {
    pub data: *mut xcb_xkb_sa_device_btn_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_device_btn_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_device_btn_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_device_btn_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_device_btn_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_device_btn_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_device_btn_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_device_btn_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_btn_iterator_t, index) - 12usize];
};
pub const xcb_xkb_lock_device_flags_t_XCB_XKB_LOCK_DEVICE_FLAGS_NO_LOCK:
    xcb_xkb_lock_device_flags_t = 1;
pub const xcb_xkb_lock_device_flags_t_XCB_XKB_LOCK_DEVICE_FLAGS_NO_UNLOCK:
    xcb_xkb_lock_device_flags_t = 2;
pub type xcb_xkb_lock_device_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_device_btn_t {
    pub type_: u8,
    pub flags: u8,
    pub pad0: u8,
    pub button: u8,
    pub device: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_device_btn_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_device_btn_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_lock_device_btn_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_device_btn_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, flags) - 1usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, pad0) - 2usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::button"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, button) - 3usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::device"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, device) - 4usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_t, pad1) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_lock_device_btn_iterator_t {
    pub data: *mut xcb_xkb_sa_lock_device_btn_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_lock_device_btn_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_lock_device_btn_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_lock_device_btn_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_lock_device_btn_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_lock_device_btn_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_lock_device_btn_iterator_t, index) - 12usize];
};
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_IGNORE_VAL: xcb_xkb_sa_val_what_t = 0;
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_SET_VAL_MIN: xcb_xkb_sa_val_what_t = 1;
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_SET_VAL_CENTER: xcb_xkb_sa_val_what_t = 2;
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_SET_VAL_MAX: xcb_xkb_sa_val_what_t = 3;
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_SET_VAL_RELATIVE: xcb_xkb_sa_val_what_t = 4;
pub const xcb_xkb_sa_val_what_t_XCB_XKB_SA_VAL_WHAT_SET_VAL_ABSOLUTE: xcb_xkb_sa_val_what_t = 5;
pub type xcb_xkb_sa_val_what_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_device_valuator_t {
    pub type_: u8,
    pub device: u8,
    pub val1what: u8,
    pub val1index: u8,
    pub val1value: u8,
    pub val2what: u8,
    pub val2index: u8,
    pub val2value: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_device_valuator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_device_valuator_t>() - 8usize];
    ["Alignment of xcb_xkb_sa_device_valuator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_device_valuator_t>() - 1usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::device"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, device) - 1usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val1what"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val1what) - 2usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val1index"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val1index) - 3usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val1value"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val1value) - 4usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val2what"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val2what) - 5usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val2index"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val2index) - 6usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_t::val2value"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_t, val2value) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sa_device_valuator_iterator_t {
    pub data: *mut xcb_xkb_sa_device_valuator_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sa_device_valuator_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sa_device_valuator_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sa_device_valuator_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sa_device_valuator_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sa_device_valuator_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sa_device_valuator_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_si_action_t {
    pub type_: u8,
    pub data: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_si_action_t"][::std::mem::size_of::<xcb_xkb_si_action_t>() - 8usize];
    ["Alignment of xcb_xkb_si_action_t"][::std::mem::align_of::<xcb_xkb_si_action_t>() - 1usize];
    ["Offset of field: xcb_xkb_si_action_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_si_action_t, type_) - 0usize];
    ["Offset of field: xcb_xkb_si_action_t::data"]
        [::std::mem::offset_of!(xcb_xkb_si_action_t, data) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_si_action_iterator_t {
    pub data: *mut xcb_xkb_si_action_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_si_action_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_si_action_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_si_action_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_si_action_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_si_action_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_si_action_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_si_action_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_si_action_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_si_action_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_si_action_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sym_interpret_t {
    pub sym: xcb_keysym_t,
    pub mods: u8,
    pub match_: u8,
    pub virtualMod: u8,
    pub flags: u8,
    pub action: xcb_xkb_si_action_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sym_interpret_t"][::std::mem::size_of::<xcb_xkb_sym_interpret_t>() - 16usize];
    ["Alignment of xcb_xkb_sym_interpret_t"]
        [::std::mem::align_of::<xcb_xkb_sym_interpret_t>() - 4usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::sym"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, sym) - 0usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, mods) - 4usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::match_"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, match_) - 5usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::virtualMod"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, virtualMod) - 6usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, flags) - 7usize];
    ["Offset of field: xcb_xkb_sym_interpret_t::action"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_t, action) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_sym_interpret_iterator_t {
    pub data: *mut xcb_xkb_sym_interpret_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_sym_interpret_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_sym_interpret_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_sym_interpret_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_sym_interpret_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_sym_interpret_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_sym_interpret_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_sym_interpret_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_sym_interpret_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_xkb_action_t {
    pub noaction: xcb_xkb_sa_no_action_t,
    pub setmods: xcb_xkb_sa_set_mods_t,
    pub latchmods: xcb_xkb_sa_latch_mods_t,
    pub lockmods: xcb_xkb_sa_lock_mods_t,
    pub setgroup: xcb_xkb_sa_set_group_t,
    pub latchgroup: xcb_xkb_sa_latch_group_t,
    pub lockgroup: xcb_xkb_sa_lock_group_t,
    pub moveptr: xcb_xkb_sa_move_ptr_t,
    pub ptrbtn: xcb_xkb_sa_ptr_btn_t,
    pub lockptrbtn: xcb_xkb_sa_lock_ptr_btn_t,
    pub setptrdflt: xcb_xkb_sa_set_ptr_dflt_t,
    pub isolock: xcb_xkb_sa_iso_lock_t,
    pub terminate: xcb_xkb_sa_terminate_t,
    pub switchscreen: xcb_xkb_sa_switch_screen_t,
    pub setcontrols: xcb_xkb_sa_set_controls_t,
    pub lockcontrols: xcb_xkb_sa_lock_controls_t,
    pub message: xcb_xkb_sa_action_message_t,
    pub redirect: xcb_xkb_sa_redirect_key_t,
    pub devbtn: xcb_xkb_sa_device_btn_t,
    pub lockdevbtn: xcb_xkb_sa_lock_device_btn_t,
    pub devval: xcb_xkb_sa_device_valuator_t,
    pub type_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_action_t"][::std::mem::size_of::<xcb_xkb_action_t>() - 8usize];
    ["Alignment of xcb_xkb_action_t"][::std::mem::align_of::<xcb_xkb_action_t>() - 1usize];
    ["Offset of field: xcb_xkb_action_t::noaction"]
        [::std::mem::offset_of!(xcb_xkb_action_t, noaction) - 0usize];
    ["Offset of field: xcb_xkb_action_t::setmods"]
        [::std::mem::offset_of!(xcb_xkb_action_t, setmods) - 0usize];
    ["Offset of field: xcb_xkb_action_t::latchmods"]
        [::std::mem::offset_of!(xcb_xkb_action_t, latchmods) - 0usize];
    ["Offset of field: xcb_xkb_action_t::lockmods"]
        [::std::mem::offset_of!(xcb_xkb_action_t, lockmods) - 0usize];
    ["Offset of field: xcb_xkb_action_t::setgroup"]
        [::std::mem::offset_of!(xcb_xkb_action_t, setgroup) - 0usize];
    ["Offset of field: xcb_xkb_action_t::latchgroup"]
        [::std::mem::offset_of!(xcb_xkb_action_t, latchgroup) - 0usize];
    ["Offset of field: xcb_xkb_action_t::lockgroup"]
        [::std::mem::offset_of!(xcb_xkb_action_t, lockgroup) - 0usize];
    ["Offset of field: xcb_xkb_action_t::moveptr"]
        [::std::mem::offset_of!(xcb_xkb_action_t, moveptr) - 0usize];
    ["Offset of field: xcb_xkb_action_t::ptrbtn"]
        [::std::mem::offset_of!(xcb_xkb_action_t, ptrbtn) - 0usize];
    ["Offset of field: xcb_xkb_action_t::lockptrbtn"]
        [::std::mem::offset_of!(xcb_xkb_action_t, lockptrbtn) - 0usize];
    ["Offset of field: xcb_xkb_action_t::setptrdflt"]
        [::std::mem::offset_of!(xcb_xkb_action_t, setptrdflt) - 0usize];
    ["Offset of field: xcb_xkb_action_t::isolock"]
        [::std::mem::offset_of!(xcb_xkb_action_t, isolock) - 0usize];
    ["Offset of field: xcb_xkb_action_t::terminate"]
        [::std::mem::offset_of!(xcb_xkb_action_t, terminate) - 0usize];
    ["Offset of field: xcb_xkb_action_t::switchscreen"]
        [::std::mem::offset_of!(xcb_xkb_action_t, switchscreen) - 0usize];
    ["Offset of field: xcb_xkb_action_t::setcontrols"]
        [::std::mem::offset_of!(xcb_xkb_action_t, setcontrols) - 0usize];
    ["Offset of field: xcb_xkb_action_t::lockcontrols"]
        [::std::mem::offset_of!(xcb_xkb_action_t, lockcontrols) - 0usize];
    ["Offset of field: xcb_xkb_action_t::message"]
        [::std::mem::offset_of!(xcb_xkb_action_t, message) - 0usize];
    ["Offset of field: xcb_xkb_action_t::redirect"]
        [::std::mem::offset_of!(xcb_xkb_action_t, redirect) - 0usize];
    ["Offset of field: xcb_xkb_action_t::devbtn"]
        [::std::mem::offset_of!(xcb_xkb_action_t, devbtn) - 0usize];
    ["Offset of field: xcb_xkb_action_t::lockdevbtn"]
        [::std::mem::offset_of!(xcb_xkb_action_t, lockdevbtn) - 0usize];
    ["Offset of field: xcb_xkb_action_t::devval"]
        [::std::mem::offset_of!(xcb_xkb_action_t, devval) - 0usize];
    ["Offset of field: xcb_xkb_action_t::type_"]
        [::std::mem::offset_of!(xcb_xkb_action_t, type_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_action_iterator_t {
    pub data: *mut xcb_xkb_action_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_action_iterator_t"]
        [::std::mem::size_of::<xcb_xkb_action_iterator_t>() - 16usize];
    ["Alignment of xcb_xkb_action_iterator_t"]
        [::std::mem::align_of::<xcb_xkb_action_iterator_t>() - 8usize];
    ["Offset of field: xcb_xkb_action_iterator_t::data"]
        [::std::mem::offset_of!(xcb_xkb_action_iterator_t, data) - 0usize];
    ["Offset of field: xcb_xkb_action_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_xkb_action_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_xkb_action_iterator_t::index"]
        [::std::mem::offset_of!(xcb_xkb_action_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_use_extension_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_use_extension_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_use_extension_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_use_extension_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_use_extension_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_use_extension_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_use_extension_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub wantedMajor: u16,
    pub wantedMinor: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_use_extension_request_t"]
        [::std::mem::size_of::<xcb_xkb_use_extension_request_t>() - 8usize];
    ["Alignment of xcb_xkb_use_extension_request_t"]
        [::std::mem::align_of::<xcb_xkb_use_extension_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_use_extension_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_use_extension_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_use_extension_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_use_extension_request_t::wantedMajor"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_request_t, wantedMajor) - 4usize];
    ["Offset of field: xcb_xkb_use_extension_request_t::wantedMinor"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_request_t, wantedMinor) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_use_extension_reply_t {
    pub response_type: u8,
    pub supported: u8,
    pub sequence: u16,
    pub length: u32,
    pub serverMajor: u16,
    pub serverMinor: u16,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_use_extension_reply_t"]
        [::std::mem::size_of::<xcb_xkb_use_extension_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_use_extension_reply_t"]
        [::std::mem::align_of::<xcb_xkb_use_extension_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::supported"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, supported) - 1usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::serverMajor"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, serverMajor) - 8usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::serverMinor"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, serverMinor) - 10usize];
    ["Offset of field: xcb_xkb_use_extension_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_use_extension_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_select_events_details_t {
    pub affectNewKeyboard: u16,
    pub newKeyboardDetails: u16,
    pub affectState: u16,
    pub stateDetails: u16,
    pub affectCtrls: u32,
    pub ctrlDetails: u32,
    pub affectIndicatorState: u32,
    pub indicatorStateDetails: u32,
    pub affectIndicatorMap: u32,
    pub indicatorMapDetails: u32,
    pub affectNames: u16,
    pub namesDetails: u16,
    pub affectCompat: u8,
    pub compatDetails: u8,
    pub affectBell: u8,
    pub bellDetails: u8,
    pub affectMsgDetails: u8,
    pub msgDetails: u8,
    pub affectAccessX: u16,
    pub accessXDetails: u16,
    pub affectExtDev: u16,
    pub extdevDetails: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_select_events_details_t"]
        [::std::mem::size_of::<xcb_xkb_select_events_details_t>() - 52usize];
    ["Alignment of xcb_xkb_select_events_details_t"]
        [::std::mem::align_of::<xcb_xkb_select_events_details_t>() - 4usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectNewKeyboard"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectNewKeyboard) - 0usize];
    ["Offset of field: xcb_xkb_select_events_details_t::newKeyboardDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, newKeyboardDetails) - 2usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectState"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectState) - 4usize];
    ["Offset of field: xcb_xkb_select_events_details_t::stateDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, stateDetails) - 6usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectCtrls"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectCtrls) - 8usize];
    ["Offset of field: xcb_xkb_select_events_details_t::ctrlDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, ctrlDetails) - 12usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectIndicatorState"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectIndicatorState) - 16usize];
    ["Offset of field: xcb_xkb_select_events_details_t::indicatorStateDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, indicatorStateDetails) - 20usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectIndicatorMap"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectIndicatorMap) - 24usize];
    ["Offset of field: xcb_xkb_select_events_details_t::indicatorMapDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, indicatorMapDetails) - 28usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectNames"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectNames) - 32usize];
    ["Offset of field: xcb_xkb_select_events_details_t::namesDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, namesDetails) - 34usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectCompat"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectCompat) - 36usize];
    ["Offset of field: xcb_xkb_select_events_details_t::compatDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, compatDetails) - 37usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectBell"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectBell) - 38usize];
    ["Offset of field: xcb_xkb_select_events_details_t::bellDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, bellDetails) - 39usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectMsgDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectMsgDetails) - 40usize];
    ["Offset of field: xcb_xkb_select_events_details_t::msgDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, msgDetails) - 41usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectAccessX"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectAccessX) - 42usize];
    ["Offset of field: xcb_xkb_select_events_details_t::accessXDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, accessXDetails) - 44usize];
    ["Offset of field: xcb_xkb_select_events_details_t::affectExtDev"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, affectExtDev) - 46usize];
    ["Offset of field: xcb_xkb_select_events_details_t::extdevDetails"]
        [::std::mem::offset_of!(xcb_xkb_select_events_details_t, extdevDetails) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_select_events_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub affectWhich: u16,
    pub clear: u16,
    pub selectAll: u16,
    pub affectMap: u16,
    pub map: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_select_events_request_t"]
        [::std::mem::size_of::<xcb_xkb_select_events_request_t>() - 16usize];
    ["Alignment of xcb_xkb_select_events_request_t"]
        [::std::mem::align_of::<xcb_xkb_select_events_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_select_events_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_select_events_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_select_events_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_select_events_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_select_events_request_t::affectWhich"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, affectWhich) - 6usize];
    ["Offset of field: xcb_xkb_select_events_request_t::clear"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, clear) - 8usize];
    ["Offset of field: xcb_xkb_select_events_request_t::selectAll"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, selectAll) - 10usize];
    ["Offset of field: xcb_xkb_select_events_request_t::affectMap"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, affectMap) - 12usize];
    ["Offset of field: xcb_xkb_select_events_request_t::map"]
        [::std::mem::offset_of!(xcb_xkb_select_events_request_t, map) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_bell_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub bellClass: xcb_xkb_bell_class_spec_t,
    pub bellID: xcb_xkb_id_spec_t,
    pub percent: i8,
    pub forceSound: u8,
    pub eventOnly: u8,
    pub pad0: u8,
    pub pitch: i16,
    pub duration: i16,
    pub pad1: [u8; 2usize],
    pub name: xcb_atom_t,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_bell_request_t"][::std::mem::size_of::<xcb_xkb_bell_request_t>() - 28usize];
    ["Alignment of xcb_xkb_bell_request_t"]
        [::std::mem::align_of::<xcb_xkb_bell_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_bell_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_bell_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_bell_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_bell_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_bell_request_t::bellClass"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, bellClass) - 6usize];
    ["Offset of field: xcb_xkb_bell_request_t::bellID"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, bellID) - 8usize];
    ["Offset of field: xcb_xkb_bell_request_t::percent"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, percent) - 10usize];
    ["Offset of field: xcb_xkb_bell_request_t::forceSound"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, forceSound) - 11usize];
    ["Offset of field: xcb_xkb_bell_request_t::eventOnly"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, eventOnly) - 12usize];
    ["Offset of field: xcb_xkb_bell_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, pad0) - 13usize];
    ["Offset of field: xcb_xkb_bell_request_t::pitch"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, pitch) - 14usize];
    ["Offset of field: xcb_xkb_bell_request_t::duration"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, duration) - 16usize];
    ["Offset of field: xcb_xkb_bell_request_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, pad1) - 18usize];
    ["Offset of field: xcb_xkb_bell_request_t::name"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, name) - 20usize];
    ["Offset of field: xcb_xkb_bell_request_t::window"]
        [::std::mem::offset_of!(xcb_xkb_bell_request_t, window) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_state_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_state_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_state_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_state_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_state_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_state_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_state_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_state_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_state_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_state_request_t>() - 8usize];
    ["Alignment of xcb_xkb_get_state_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_state_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_state_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_state_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_state_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_state_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_state_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_state_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_state_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_state_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_state_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_state_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_state_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub mods: u8,
    pub baseMods: u8,
    pub latchedMods: u8,
    pub lockedMods: u8,
    pub group: u8,
    pub lockedGroup: u8,
    pub baseGroup: i16,
    pub latchedGroup: i16,
    pub compatState: u8,
    pub grabMods: u8,
    pub compatGrabMods: u8,
    pub lookupMods: u8,
    pub compatLookupMods: u8,
    pub pad0: u8,
    pub ptrBtnState: u16,
    pub pad1: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_state_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_state_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_state_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_state_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, mods) - 8usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::baseMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, baseMods) - 9usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::latchedMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, latchedMods) - 10usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::lockedMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, lockedMods) - 11usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::group"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, group) - 12usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::lockedGroup"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, lockedGroup) - 13usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::baseGroup"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, baseGroup) - 14usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::latchedGroup"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, latchedGroup) - 16usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::compatState"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, compatState) - 18usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::grabMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, grabMods) - 19usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::compatGrabMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, compatGrabMods) - 20usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::lookupMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, lookupMods) - 21usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::compatLookupMods"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, compatLookupMods) - 22usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, pad0) - 23usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::ptrBtnState"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, ptrBtnState) - 24usize];
    ["Offset of field: xcb_xkb_get_state_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_state_reply_t, pad1) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_latch_lock_state_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub affectModLocks: u8,
    pub modLocks: u8,
    pub lockGroup: u8,
    pub groupLock: u8,
    pub affectModLatches: u8,
    pub pad0: u8,
    pub pad1: u8,
    pub latchGroup: u8,
    pub groupLatch: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_latch_lock_state_request_t"]
        [::std::mem::size_of::<xcb_xkb_latch_lock_state_request_t>() - 16usize];
    ["Alignment of xcb_xkb_latch_lock_state_request_t"]
        [::std::mem::align_of::<xcb_xkb_latch_lock_state_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::affectModLocks"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, affectModLocks) - 6usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::modLocks"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, modLocks) - 7usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::lockGroup"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, lockGroup) - 8usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::groupLock"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, groupLock) - 9usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::affectModLatches"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, affectModLatches) - 10usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, pad0) - 11usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, pad1) - 12usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::latchGroup"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, latchGroup) - 13usize];
    ["Offset of field: xcb_xkb_latch_lock_state_request_t::groupLatch"]
        [::std::mem::offset_of!(xcb_xkb_latch_lock_state_request_t, groupLatch) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_controls_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_controls_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_controls_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_controls_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_controls_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_controls_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_controls_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_controls_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_controls_request_t>() - 8usize];
    ["Alignment of xcb_xkb_get_controls_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_controls_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_controls_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_controls_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_controls_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_controls_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_controls_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_controls_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub mouseKeysDfltBtn: u8,
    pub numGroups: u8,
    pub groupsWrap: u8,
    pub internalModsMask: u8,
    pub ignoreLockModsMask: u8,
    pub internalModsRealMods: u8,
    pub ignoreLockModsRealMods: u8,
    pub pad0: u8,
    pub internalModsVmods: u16,
    pub ignoreLockModsVmods: u16,
    pub repeatDelay: u16,
    pub repeatInterval: u16,
    pub slowKeysDelay: u16,
    pub debounceDelay: u16,
    pub mouseKeysDelay: u16,
    pub mouseKeysInterval: u16,
    pub mouseKeysTimeToMax: u16,
    pub mouseKeysMaxSpeed: u16,
    pub mouseKeysCurve: i16,
    pub accessXOption: u16,
    pub accessXTimeout: u16,
    pub accessXTimeoutOptionsMask: u16,
    pub accessXTimeoutOptionsValues: u16,
    pub pad1: [u8; 2usize],
    pub accessXTimeoutMask: u32,
    pub accessXTimeoutValues: u32,
    pub enabledControls: u32,
    pub perKeyRepeat: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_controls_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_controls_reply_t>() - 92usize];
    ["Alignment of xcb_xkb_get_controls_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_controls_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysDfltBtn"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysDfltBtn) - 8usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::numGroups"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, numGroups) - 9usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::groupsWrap"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, groupsWrap) - 10usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::internalModsMask"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, internalModsMask) - 11usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::ignoreLockModsMask"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, ignoreLockModsMask) - 12usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::internalModsRealMods"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, internalModsRealMods) - 13usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::ignoreLockModsRealMods"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, ignoreLockModsRealMods) - 14usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, pad0) - 15usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::internalModsVmods"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, internalModsVmods) - 16usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::ignoreLockModsVmods"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, ignoreLockModsVmods) - 18usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::repeatDelay"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, repeatDelay) - 20usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::repeatInterval"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, repeatInterval) - 22usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::slowKeysDelay"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, slowKeysDelay) - 24usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::debounceDelay"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, debounceDelay) - 26usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysDelay"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysDelay) - 28usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysInterval"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysInterval) - 30usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysTimeToMax"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysTimeToMax) - 32usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysMaxSpeed"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysMaxSpeed) - 34usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::mouseKeysCurve"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, mouseKeysCurve) - 36usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXOption"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, accessXOption) - 38usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXTimeout"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, accessXTimeout) - 40usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXTimeoutOptionsMask"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, accessXTimeoutOptionsMask) - 42usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXTimeoutOptionsValues"][::std::mem::offset_of!(
        xcb_xkb_get_controls_reply_t,
        accessXTimeoutOptionsValues
    ) - 44usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, pad1) - 46usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXTimeoutMask"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, accessXTimeoutMask) - 48usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::accessXTimeoutValues"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, accessXTimeoutValues) - 52usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::enabledControls"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, enabledControls) - 56usize];
    ["Offset of field: xcb_xkb_get_controls_reply_t::perKeyRepeat"]
        [::std::mem::offset_of!(xcb_xkb_get_controls_reply_t, perKeyRepeat) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_controls_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub affectInternalRealMods: u8,
    pub internalRealMods: u8,
    pub affectIgnoreLockRealMods: u8,
    pub ignoreLockRealMods: u8,
    pub affectInternalVirtualMods: u16,
    pub internalVirtualMods: u16,
    pub affectIgnoreLockVirtualMods: u16,
    pub ignoreLockVirtualMods: u16,
    pub mouseKeysDfltBtn: u8,
    pub groupsWrap: u8,
    pub accessXOptions: u16,
    pub pad0: [u8; 2usize],
    pub affectEnabledControls: u32,
    pub enabledControls: u32,
    pub changeControls: u32,
    pub repeatDelay: u16,
    pub repeatInterval: u16,
    pub slowKeysDelay: u16,
    pub debounceDelay: u16,
    pub mouseKeysDelay: u16,
    pub mouseKeysInterval: u16,
    pub mouseKeysTimeToMax: u16,
    pub mouseKeysMaxSpeed: u16,
    pub mouseKeysCurve: i16,
    pub accessXTimeout: u16,
    pub accessXTimeoutMask: u32,
    pub accessXTimeoutValues: u32,
    pub accessXTimeoutOptionsMask: u16,
    pub accessXTimeoutOptionsValues: u16,
    pub perKeyRepeat: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_controls_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_controls_request_t>() - 100usize];
    ["Alignment of xcb_xkb_set_controls_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_controls_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::affectInternalRealMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, affectInternalRealMods) - 6usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::internalRealMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, internalRealMods) - 7usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::affectIgnoreLockRealMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, affectIgnoreLockRealMods) - 8usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::ignoreLockRealMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, ignoreLockRealMods) - 9usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::affectInternalVirtualMods"][::std::mem::offset_of!(
        xcb_xkb_set_controls_request_t,
        affectInternalVirtualMods
    ) - 10usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::internalVirtualMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, internalVirtualMods) - 12usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::affectIgnoreLockVirtualMods"][::std::mem::offset_of!(
        xcb_xkb_set_controls_request_t,
        affectIgnoreLockVirtualMods
    ) - 14usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::ignoreLockVirtualMods"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, ignoreLockVirtualMods) - 16usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysDfltBtn"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysDfltBtn) - 18usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::groupsWrap"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, groupsWrap) - 19usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXOptions"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, accessXOptions) - 20usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, pad0) - 22usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::affectEnabledControls"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, affectEnabledControls) - 24usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::enabledControls"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, enabledControls) - 28usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::changeControls"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, changeControls) - 32usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::repeatDelay"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, repeatDelay) - 36usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::repeatInterval"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, repeatInterval) - 38usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::slowKeysDelay"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, slowKeysDelay) - 40usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::debounceDelay"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, debounceDelay) - 42usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysDelay"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysDelay) - 44usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysInterval"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysInterval) - 46usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysTimeToMax"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysTimeToMax) - 48usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysMaxSpeed"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysMaxSpeed) - 50usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::mouseKeysCurve"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, mouseKeysCurve) - 52usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXTimeout"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, accessXTimeout) - 54usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXTimeoutMask"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, accessXTimeoutMask) - 56usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXTimeoutValues"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, accessXTimeoutValues) - 60usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXTimeoutOptionsMask"][::std::mem::offset_of!(
        xcb_xkb_set_controls_request_t,
        accessXTimeoutOptionsMask
    ) - 64usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::accessXTimeoutOptionsValues"][::std::mem::offset_of!(
        xcb_xkb_set_controls_request_t,
        accessXTimeoutOptionsValues
    ) - 66usize];
    ["Offset of field: xcb_xkb_set_controls_request_t::perKeyRepeat"]
        [::std::mem::offset_of!(xcb_xkb_set_controls_request_t, perKeyRepeat) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_map_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_map_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_map_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_map_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_map_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_map_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_map_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub full: u16,
    pub partial: u16,
    pub firstType: u8,
    pub nTypes: u8,
    pub firstKeySym: xcb_keycode_t,
    pub nKeySyms: u8,
    pub firstKeyAction: xcb_keycode_t,
    pub nKeyActions: u8,
    pub firstKeyBehavior: xcb_keycode_t,
    pub nKeyBehaviors: u8,
    pub virtualMods: u16,
    pub firstKeyExplicit: xcb_keycode_t,
    pub nKeyExplicit: u8,
    pub firstModMapKey: xcb_keycode_t,
    pub nModMapKeys: u8,
    pub firstVModMapKey: xcb_keycode_t,
    pub nVModMapKeys: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_map_request_t>() - 28usize];
    ["Alignment of xcb_xkb_get_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_map_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_map_request_t::full"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, full) - 6usize];
    ["Offset of field: xcb_xkb_get_map_request_t::partial"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, partial) - 8usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstType) - 10usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nTypes) - 11usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstKeySym"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstKeySym) - 12usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nKeySyms"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nKeySyms) - 13usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstKeyAction"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstKeyAction) - 14usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nKeyActions"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nKeyActions) - 15usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstKeyBehavior"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstKeyBehavior) - 16usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nKeyBehaviors"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nKeyBehaviors) - 17usize];
    ["Offset of field: xcb_xkb_get_map_request_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, virtualMods) - 18usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstKeyExplicit) - 20usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nKeyExplicit) - 21usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstModMapKey) - 22usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nModMapKeys) - 23usize];
    ["Offset of field: xcb_xkb_get_map_request_t::firstVModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, firstVModMapKey) - 24usize];
    ["Offset of field: xcb_xkb_get_map_request_t::nVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, nVModMapKeys) - 25usize];
    ["Offset of field: xcb_xkb_get_map_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_map_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_map_map_t {
    pub types_rtrn: *mut xcb_xkb_key_type_t,
    pub syms_rtrn: *mut xcb_xkb_key_sym_map_t,
    pub acts_rtrn_count: *mut u8,
    pub pad2: *mut u8,
    pub acts_rtrn_acts: *mut xcb_xkb_action_t,
    pub behaviors_rtrn: *mut xcb_xkb_set_behavior_t,
    pub vmods_rtrn: *mut u8,
    pub pad3: *mut u8,
    pub explicit_rtrn: *mut xcb_xkb_set_explicit_t,
    pub pad4: *mut u8,
    pub modmap_rtrn: *mut xcb_xkb_key_mod_map_t,
    pub pad5: *mut u8,
    pub vmodmap_rtrn: *mut xcb_xkb_key_v_mod_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_map_map_t"][::std::mem::size_of::<xcb_xkb_get_map_map_t>() - 104usize];
    ["Alignment of xcb_xkb_get_map_map_t"]
        [::std::mem::align_of::<xcb_xkb_get_map_map_t>() - 8usize];
    ["Offset of field: xcb_xkb_get_map_map_t::types_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, types_rtrn) - 0usize];
    ["Offset of field: xcb_xkb_get_map_map_t::syms_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, syms_rtrn) - 8usize];
    ["Offset of field: xcb_xkb_get_map_map_t::acts_rtrn_count"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, acts_rtrn_count) - 16usize];
    ["Offset of field: xcb_xkb_get_map_map_t::pad2"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, pad2) - 24usize];
    ["Offset of field: xcb_xkb_get_map_map_t::acts_rtrn_acts"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, acts_rtrn_acts) - 32usize];
    ["Offset of field: xcb_xkb_get_map_map_t::behaviors_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, behaviors_rtrn) - 40usize];
    ["Offset of field: xcb_xkb_get_map_map_t::vmods_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, vmods_rtrn) - 48usize];
    ["Offset of field: xcb_xkb_get_map_map_t::pad3"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, pad3) - 56usize];
    ["Offset of field: xcb_xkb_get_map_map_t::explicit_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, explicit_rtrn) - 64usize];
    ["Offset of field: xcb_xkb_get_map_map_t::pad4"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, pad4) - 72usize];
    ["Offset of field: xcb_xkb_get_map_map_t::modmap_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, modmap_rtrn) - 80usize];
    ["Offset of field: xcb_xkb_get_map_map_t::pad5"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, pad5) - 88usize];
    ["Offset of field: xcb_xkb_get_map_map_t::vmodmap_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_map_map_t, vmodmap_rtrn) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_map_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 2usize],
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub present: u16,
    pub firstType: u8,
    pub nTypes: u8,
    pub totalTypes: u8,
    pub firstKeySym: xcb_keycode_t,
    pub totalSyms: u16,
    pub nKeySyms: u8,
    pub firstKeyAction: xcb_keycode_t,
    pub totalActions: u16,
    pub nKeyActions: u8,
    pub firstKeyBehavior: xcb_keycode_t,
    pub nKeyBehaviors: u8,
    pub totalKeyBehaviors: u8,
    pub firstKeyExplicit: xcb_keycode_t,
    pub nKeyExplicit: u8,
    pub totalKeyExplicit: u8,
    pub firstModMapKey: xcb_keycode_t,
    pub nModMapKeys: u8,
    pub totalModMapKeys: u8,
    pub firstVModMapKey: xcb_keycode_t,
    pub nVModMapKeys: u8,
    pub totalVModMapKeys: u8,
    pub pad1: u8,
    pub virtualMods: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_map_reply_t"][::std::mem::size_of::<xcb_xkb_get_map_reply_t>() - 40usize];
    ["Alignment of xcb_xkb_get_map_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_map_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, pad0) - 8usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, minKeyCode) - 10usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, maxKeyCode) - 11usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::present"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, present) - 12usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstType) - 14usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nTypes) - 15usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalTypes) - 16usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstKeySym"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstKeySym) - 17usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalSyms"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalSyms) - 18usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nKeySyms"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nKeySyms) - 20usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstKeyAction"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstKeyAction) - 21usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalActions"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalActions) - 22usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nKeyActions"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nKeyActions) - 24usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstKeyBehavior"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstKeyBehavior) - 25usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nKeyBehaviors"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nKeyBehaviors) - 26usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalKeyBehaviors"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalKeyBehaviors) - 27usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstKeyExplicit) - 28usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nKeyExplicit) - 29usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalKeyExplicit) - 30usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstModMapKey) - 31usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nModMapKeys) - 32usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalModMapKeys) - 33usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::firstVModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, firstVModMapKey) - 34usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::nVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, nVModMapKeys) - 35usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::totalVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, totalVModMapKeys) - 36usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, pad1) - 37usize];
    ["Offset of field: xcb_xkb_get_map_reply_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_get_map_reply_t, virtualMods) - 38usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_map_values_t {
    pub types: *mut xcb_xkb_set_key_type_t,
    pub syms: *mut xcb_xkb_key_sym_map_t,
    pub actionsCount: *mut u8,
    pub actions: *mut xcb_xkb_action_t,
    pub behaviors: *mut xcb_xkb_set_behavior_t,
    pub vmods: *mut u8,
    pub explicit: *mut xcb_xkb_set_explicit_t,
    pub modmap: *mut xcb_xkb_key_mod_map_t,
    pub vmodmap: *mut xcb_xkb_key_v_mod_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_map_values_t"]
        [::std::mem::size_of::<xcb_xkb_set_map_values_t>() - 72usize];
    ["Alignment of xcb_xkb_set_map_values_t"]
        [::std::mem::align_of::<xcb_xkb_set_map_values_t>() - 8usize];
    ["Offset of field: xcb_xkb_set_map_values_t::types"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, types) - 0usize];
    ["Offset of field: xcb_xkb_set_map_values_t::syms"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, syms) - 8usize];
    ["Offset of field: xcb_xkb_set_map_values_t::actionsCount"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, actionsCount) - 16usize];
    ["Offset of field: xcb_xkb_set_map_values_t::actions"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, actions) - 24usize];
    ["Offset of field: xcb_xkb_set_map_values_t::behaviors"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, behaviors) - 32usize];
    ["Offset of field: xcb_xkb_set_map_values_t::vmods"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, vmods) - 40usize];
    ["Offset of field: xcb_xkb_set_map_values_t::explicit"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, explicit) - 48usize];
    ["Offset of field: xcb_xkb_set_map_values_t::modmap"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, modmap) - 56usize];
    ["Offset of field: xcb_xkb_set_map_values_t::vmodmap"]
        [::std::mem::offset_of!(xcb_xkb_set_map_values_t, vmodmap) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub present: u16,
    pub flags: u16,
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub firstType: u8,
    pub nTypes: u8,
    pub firstKeySym: xcb_keycode_t,
    pub nKeySyms: u8,
    pub totalSyms: u16,
    pub firstKeyAction: xcb_keycode_t,
    pub nKeyActions: u8,
    pub totalActions: u16,
    pub firstKeyBehavior: xcb_keycode_t,
    pub nKeyBehaviors: u8,
    pub totalKeyBehaviors: u8,
    pub firstKeyExplicit: xcb_keycode_t,
    pub nKeyExplicit: u8,
    pub totalKeyExplicit: u8,
    pub firstModMapKey: xcb_keycode_t,
    pub nModMapKeys: u8,
    pub totalModMapKeys: u8,
    pub firstVModMapKey: xcb_keycode_t,
    pub nVModMapKeys: u8,
    pub totalVModMapKeys: u8,
    pub virtualMods: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_map_request_t>() - 36usize];
    ["Alignment of xcb_xkb_set_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_map_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_set_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_map_request_t::present"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, present) - 6usize];
    ["Offset of field: xcb_xkb_set_map_request_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, flags) - 8usize];
    ["Offset of field: xcb_xkb_set_map_request_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, minKeyCode) - 10usize];
    ["Offset of field: xcb_xkb_set_map_request_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, maxKeyCode) - 11usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstType) - 12usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nTypes) - 13usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstKeySym"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstKeySym) - 14usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nKeySyms"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nKeySyms) - 15usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalSyms"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalSyms) - 16usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstKeyAction"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstKeyAction) - 18usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nKeyActions"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nKeyActions) - 19usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalActions"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalActions) - 20usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstKeyBehavior"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstKeyBehavior) - 22usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nKeyBehaviors"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nKeyBehaviors) - 23usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalKeyBehaviors"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalKeyBehaviors) - 24usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstKeyExplicit) - 25usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nKeyExplicit) - 26usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalKeyExplicit) - 27usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstModMapKey) - 28usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nModMapKeys) - 29usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalModMapKeys) - 30usize];
    ["Offset of field: xcb_xkb_set_map_request_t::firstVModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, firstVModMapKey) - 31usize];
    ["Offset of field: xcb_xkb_set_map_request_t::nVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, nVModMapKeys) - 32usize];
    ["Offset of field: xcb_xkb_set_map_request_t::totalVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, totalVModMapKeys) - 33usize];
    ["Offset of field: xcb_xkb_set_map_request_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_set_map_request_t, virtualMods) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_compat_map_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_compat_map_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_compat_map_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_compat_map_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_compat_map_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_compat_map_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_compat_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub groups: u8,
    pub getAllSI: u8,
    pub firstSI: u16,
    pub nSI: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_compat_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_compat_map_request_t>() - 12usize];
    ["Alignment of xcb_xkb_get_compat_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_compat_map_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::groups"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, groups) - 6usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::getAllSI"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, getAllSI) - 7usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::firstSI"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, firstSI) - 8usize];
    ["Offset of field: xcb_xkb_get_compat_map_request_t::nSI"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_request_t, nSI) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_compat_map_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub groupsRtrn: u8,
    pub pad0: u8,
    pub firstSIRtrn: u16,
    pub nSIRtrn: u16,
    pub nTotalSI: u16,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_compat_map_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_compat_map_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_compat_map_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_compat_map_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::groupsRtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, groupsRtrn) - 8usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, pad0) - 9usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::firstSIRtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, firstSIRtrn) - 10usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::nSIRtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, nSIRtrn) - 12usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::nTotalSI"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, nTotalSI) - 14usize];
    ["Offset of field: xcb_xkb_get_compat_map_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_compat_map_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_compat_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: u8,
    pub recomputeActions: u8,
    pub truncateSI: u8,
    pub groups: u8,
    pub firstSI: u16,
    pub nSI: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_compat_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_compat_map_request_t>() - 16usize];
    ["Alignment of xcb_xkb_set_compat_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_compat_map_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::recomputeActions"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, recomputeActions) - 7usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::truncateSI"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, truncateSI) - 8usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::groups"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, groups) - 9usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::firstSI"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, firstSI) - 10usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::nSI"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, nSI) - 12usize];
    ["Offset of field: xcb_xkb_set_compat_map_request_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_set_compat_map_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_state_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_state_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_state_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_indicator_state_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_state_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_state_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_state_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_state_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_state_request_t>() - 8usize];
    ["Alignment of xcb_xkb_get_indicator_state_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_state_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_indicator_state_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_indicator_state_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_indicator_state_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_indicator_state_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_state_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_state_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub state: u32,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_state_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_state_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_indicator_state_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_state_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::state"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, state) - 8usize];
    ["Offset of field: xcb_xkb_get_indicator_state_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_state_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_map_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_map_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_map_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_indicator_map_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_map_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_map_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
    pub which: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_map_request_t>() - 12usize];
    ["Alignment of xcb_xkb_get_indicator_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_map_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_get_indicator_map_request_t::which"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_request_t, which) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_indicator_map_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub which: u32,
    pub realIndicators: u32,
    pub nIndicators: u8,
    pub pad0: [u8; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_indicator_map_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_indicator_map_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_indicator_map_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_indicator_map_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::which"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, which) - 8usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::realIndicators"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, realIndicators) - 12usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::nIndicators"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, nIndicators) - 16usize];
    ["Offset of field: xcb_xkb_get_indicator_map_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_indicator_map_reply_t, pad0) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_indicator_map_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
    pub which: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_indicator_map_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_indicator_map_request_t>() - 12usize];
    ["Alignment of xcb_xkb_set_indicator_map_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_indicator_map_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_set_indicator_map_request_t::which"]
        [::std::mem::offset_of!(xcb_xkb_set_indicator_map_request_t, which) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_named_indicator_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_named_indicator_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_named_indicator_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_named_indicator_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_named_indicator_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_named_indicator_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_named_indicator_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub ledClass: xcb_xkb_led_class_spec_t,
    pub ledID: xcb_xkb_id_spec_t,
    pub pad0: [u8; 2usize],
    pub indicator: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_named_indicator_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_named_indicator_request_t>() - 16usize];
    ["Alignment of xcb_xkb_get_named_indicator_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_named_indicator_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::ledClass"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, ledClass) - 6usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::ledID"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, ledID) - 8usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, pad0) - 10usize];
    ["Offset of field: xcb_xkb_get_named_indicator_request_t::indicator"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_request_t, indicator) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_named_indicator_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub indicator: xcb_atom_t,
    pub found: u8,
    pub on: u8,
    pub realIndicator: u8,
    pub ndx: u8,
    pub map_flags: u8,
    pub map_whichGroups: u8,
    pub map_groups: u8,
    pub map_whichMods: u8,
    pub map_mods: u8,
    pub map_realMods: u8,
    pub map_vmod: u16,
    pub map_ctrls: u32,
    pub supported: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_named_indicator_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_named_indicator_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_named_indicator_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_named_indicator_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::indicator"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, indicator) - 8usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::found"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, found) - 12usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::on"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, on) - 13usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::realIndicator"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, realIndicator) - 14usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::ndx"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, ndx) - 15usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_flags"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_flags) - 16usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_whichGroups"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_whichGroups) - 17usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_groups"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_groups) - 18usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_whichMods"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_whichMods) - 19usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_mods"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_mods) - 20usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_realMods"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_realMods) - 21usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_vmod"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_vmod) - 22usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::map_ctrls"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, map_ctrls) - 24usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::supported"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, supported) - 28usize];
    ["Offset of field: xcb_xkb_get_named_indicator_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_named_indicator_reply_t, pad0) - 29usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_named_indicator_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub ledClass: xcb_xkb_led_class_spec_t,
    pub ledID: xcb_xkb_id_spec_t,
    pub pad0: [u8; 2usize],
    pub indicator: xcb_atom_t,
    pub setState: u8,
    pub on: u8,
    pub setMap: u8,
    pub createMap: u8,
    pub pad1: u8,
    pub map_flags: u8,
    pub map_whichGroups: u8,
    pub map_groups: u8,
    pub map_whichMods: u8,
    pub map_realMods: u8,
    pub map_vmods: u16,
    pub map_ctrls: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_named_indicator_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_named_indicator_request_t>() - 32usize];
    ["Alignment of xcb_xkb_set_named_indicator_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_named_indicator_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::ledClass"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, ledClass) - 6usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::ledID"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, ledID) - 8usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, pad0) - 10usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::indicator"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, indicator) - 12usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::setState"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, setState) - 16usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::on"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, on) - 17usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::setMap"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, setMap) - 18usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::createMap"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, createMap) - 19usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, pad1) - 20usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_flags"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_flags) - 21usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_whichGroups"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_whichGroups) - 22usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_groups"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_groups) - 23usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_whichMods"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_whichMods) - 24usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_realMods"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_realMods) - 25usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_vmods"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_vmods) - 26usize];
    ["Offset of field: xcb_xkb_set_named_indicator_request_t::map_ctrls"]
        [::std::mem::offset_of!(xcb_xkb_set_named_indicator_request_t, map_ctrls) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_names_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_names_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_names_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_names_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_names_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_names_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_names_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_names_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
    pub which: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_names_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_names_request_t>() - 12usize];
    ["Alignment of xcb_xkb_get_names_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_names_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_names_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_names_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_names_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_names_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_names_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_get_names_request_t::which"]
        [::std::mem::offset_of!(xcb_xkb_get_names_request_t, which) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_names_value_list_t {
    pub keycodesName: xcb_atom_t,
    pub geometryName: xcb_atom_t,
    pub symbolsName: xcb_atom_t,
    pub physSymbolsName: xcb_atom_t,
    pub typesName: xcb_atom_t,
    pub compatName: xcb_atom_t,
    pub typeNames: *mut xcb_atom_t,
    pub nLevelsPerType: *mut u8,
    pub pad1: *mut u8,
    pub ktLevelNames: *mut xcb_atom_t,
    pub indicatorNames: *mut xcb_atom_t,
    pub virtualModNames: *mut xcb_atom_t,
    pub groups: *mut xcb_atom_t,
    pub keyNames: *mut xcb_xkb_key_name_t,
    pub keyAliases: *mut xcb_xkb_key_alias_t,
    pub radioGroupNames: *mut xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_names_value_list_t"]
        [::std::mem::size_of::<xcb_xkb_get_names_value_list_t>() - 104usize];
    ["Alignment of xcb_xkb_get_names_value_list_t"]
        [::std::mem::align_of::<xcb_xkb_get_names_value_list_t>() - 8usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::keycodesName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, keycodesName) - 0usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::geometryName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, geometryName) - 4usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::symbolsName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, symbolsName) - 8usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::physSymbolsName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, physSymbolsName) - 12usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::typesName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, typesName) - 16usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::compatName"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, compatName) - 20usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::typeNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, typeNames) - 24usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::nLevelsPerType"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, nLevelsPerType) - 32usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, pad1) - 40usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::ktLevelNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, ktLevelNames) - 48usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::indicatorNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, indicatorNames) - 56usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::virtualModNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, virtualModNames) - 64usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::groups"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, groups) - 72usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::keyNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, keyNames) - 80usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::keyAliases"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, keyAliases) - 88usize];
    ["Offset of field: xcb_xkb_get_names_value_list_t::radioGroupNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_value_list_t, radioGroupNames) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_names_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub which: u32,
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub nTypes: u8,
    pub groupNames: u8,
    pub virtualMods: u16,
    pub firstKey: xcb_keycode_t,
    pub nKeys: u8,
    pub indicators: u32,
    pub nRadioGroups: u8,
    pub nKeyAliases: u8,
    pub nKTLevels: u16,
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_names_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_names_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_names_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_names_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::which"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, which) - 8usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, minKeyCode) - 12usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, maxKeyCode) - 13usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, nTypes) - 14usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::groupNames"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, groupNames) - 15usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, virtualMods) - 16usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::firstKey"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, firstKey) - 18usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, nKeys) - 19usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::indicators"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, indicators) - 20usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::nRadioGroups"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, nRadioGroups) - 24usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::nKeyAliases"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, nKeyAliases) - 25usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::nKTLevels"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, nKTLevels) - 26usize];
    ["Offset of field: xcb_xkb_get_names_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_names_reply_t, pad0) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_names_values_t {
    pub keycodesName: xcb_atom_t,
    pub geometryName: xcb_atom_t,
    pub symbolsName: xcb_atom_t,
    pub physSymbolsName: xcb_atom_t,
    pub typesName: xcb_atom_t,
    pub compatName: xcb_atom_t,
    pub typeNames: *mut xcb_atom_t,
    pub nLevelsPerType: *mut u8,
    pub ktLevelNames: *mut xcb_atom_t,
    pub indicatorNames: *mut xcb_atom_t,
    pub virtualModNames: *mut xcb_atom_t,
    pub groups: *mut xcb_atom_t,
    pub keyNames: *mut xcb_xkb_key_name_t,
    pub keyAliases: *mut xcb_xkb_key_alias_t,
    pub radioGroupNames: *mut xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_names_values_t"]
        [::std::mem::size_of::<xcb_xkb_set_names_values_t>() - 96usize];
    ["Alignment of xcb_xkb_set_names_values_t"]
        [::std::mem::align_of::<xcb_xkb_set_names_values_t>() - 8usize];
    ["Offset of field: xcb_xkb_set_names_values_t::keycodesName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, keycodesName) - 0usize];
    ["Offset of field: xcb_xkb_set_names_values_t::geometryName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, geometryName) - 4usize];
    ["Offset of field: xcb_xkb_set_names_values_t::symbolsName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, symbolsName) - 8usize];
    ["Offset of field: xcb_xkb_set_names_values_t::physSymbolsName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, physSymbolsName) - 12usize];
    ["Offset of field: xcb_xkb_set_names_values_t::typesName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, typesName) - 16usize];
    ["Offset of field: xcb_xkb_set_names_values_t::compatName"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, compatName) - 20usize];
    ["Offset of field: xcb_xkb_set_names_values_t::typeNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, typeNames) - 24usize];
    ["Offset of field: xcb_xkb_set_names_values_t::nLevelsPerType"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, nLevelsPerType) - 32usize];
    ["Offset of field: xcb_xkb_set_names_values_t::ktLevelNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, ktLevelNames) - 40usize];
    ["Offset of field: xcb_xkb_set_names_values_t::indicatorNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, indicatorNames) - 48usize];
    ["Offset of field: xcb_xkb_set_names_values_t::virtualModNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, virtualModNames) - 56usize];
    ["Offset of field: xcb_xkb_set_names_values_t::groups"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, groups) - 64usize];
    ["Offset of field: xcb_xkb_set_names_values_t::keyNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, keyNames) - 72usize];
    ["Offset of field: xcb_xkb_set_names_values_t::keyAliases"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, keyAliases) - 80usize];
    ["Offset of field: xcb_xkb_set_names_values_t::radioGroupNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_values_t, radioGroupNames) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_names_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub virtualMods: u16,
    pub which: u32,
    pub firstType: u8,
    pub nTypes: u8,
    pub firstKTLevelt: u8,
    pub nKTLevels: u8,
    pub indicators: u32,
    pub groupNames: u8,
    pub nRadioGroups: u8,
    pub firstKey: xcb_keycode_t,
    pub nKeys: u8,
    pub nKeyAliases: u8,
    pub pad0: u8,
    pub totalKTLevelNames: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_names_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_names_request_t>() - 28usize];
    ["Alignment of xcb_xkb_set_names_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_names_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_names_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_names_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_names_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_names_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_names_request_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, virtualMods) - 6usize];
    ["Offset of field: xcb_xkb_set_names_request_t::which"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, which) - 8usize];
    ["Offset of field: xcb_xkb_set_names_request_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, firstType) - 12usize];
    ["Offset of field: xcb_xkb_set_names_request_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, nTypes) - 13usize];
    ["Offset of field: xcb_xkb_set_names_request_t::firstKTLevelt"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, firstKTLevelt) - 14usize];
    ["Offset of field: xcb_xkb_set_names_request_t::nKTLevels"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, nKTLevels) - 15usize];
    ["Offset of field: xcb_xkb_set_names_request_t::indicators"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, indicators) - 16usize];
    ["Offset of field: xcb_xkb_set_names_request_t::groupNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, groupNames) - 20usize];
    ["Offset of field: xcb_xkb_set_names_request_t::nRadioGroups"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, nRadioGroups) - 21usize];
    ["Offset of field: xcb_xkb_set_names_request_t::firstKey"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, firstKey) - 22usize];
    ["Offset of field: xcb_xkb_set_names_request_t::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, nKeys) - 23usize];
    ["Offset of field: xcb_xkb_set_names_request_t::nKeyAliases"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, nKeyAliases) - 24usize];
    ["Offset of field: xcb_xkb_set_names_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, pad0) - 25usize];
    ["Offset of field: xcb_xkb_set_names_request_t::totalKTLevelNames"]
        [::std::mem::offset_of!(xcb_xkb_set_names_request_t, totalKTLevelNames) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_per_client_flags_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_per_client_flags_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_per_client_flags_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_per_client_flags_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_per_client_flags_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_per_client_flags_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_per_client_flags_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub pad0: [u8; 2usize],
    pub change: u32,
    pub value: u32,
    pub ctrlsToChange: u32,
    pub autoCtrls: u32,
    pub autoCtrlsValues: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_per_client_flags_request_t"]
        [::std::mem::size_of::<xcb_xkb_per_client_flags_request_t>() - 28usize];
    ["Alignment of xcb_xkb_per_client_flags_request_t"]
        [::std::mem::align_of::<xcb_xkb_per_client_flags_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::change"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, change) - 8usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::value"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, value) - 12usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::ctrlsToChange"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, ctrlsToChange) - 16usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::autoCtrls"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, autoCtrls) - 20usize];
    ["Offset of field: xcb_xkb_per_client_flags_request_t::autoCtrlsValues"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_request_t, autoCtrlsValues) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_per_client_flags_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub supported: u32,
    pub value: u32,
    pub autoCtrls: u32,
    pub autoCtrlsValues: u32,
    pub pad0: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_per_client_flags_reply_t"]
        [::std::mem::size_of::<xcb_xkb_per_client_flags_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_per_client_flags_reply_t"]
        [::std::mem::align_of::<xcb_xkb_per_client_flags_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::supported"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, supported) - 8usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::value"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, value) - 12usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::autoCtrls"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, autoCtrls) - 16usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::autoCtrlsValues"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, autoCtrlsValues) - 20usize];
    ["Offset of field: xcb_xkb_per_client_flags_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_per_client_flags_reply_t, pad0) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_list_components_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_list_components_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_list_components_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_list_components_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_list_components_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_list_components_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_list_components_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_list_components_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub maxNames: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_list_components_request_t"]
        [::std::mem::size_of::<xcb_xkb_list_components_request_t>() - 8usize];
    ["Alignment of xcb_xkb_list_components_request_t"]
        [::std::mem::align_of::<xcb_xkb_list_components_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_list_components_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_list_components_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_list_components_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_list_components_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_list_components_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_list_components_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_list_components_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_list_components_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_list_components_request_t::maxNames"]
        [::std::mem::offset_of!(xcb_xkb_list_components_request_t, maxNames) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_list_components_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub nKeymaps: u16,
    pub nKeycodes: u16,
    pub nTypes: u16,
    pub nCompatMaps: u16,
    pub nSymbols: u16,
    pub nGeometries: u16,
    pub extra: u16,
    pub pad0: [u8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_list_components_reply_t"]
        [::std::mem::size_of::<xcb_xkb_list_components_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_list_components_reply_t"]
        [::std::mem::align_of::<xcb_xkb_list_components_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nKeymaps"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nKeymaps) - 8usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nKeycodes"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nKeycodes) - 10usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nTypes) - 12usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nCompatMaps"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nCompatMaps) - 14usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nSymbols"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nSymbols) - 16usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::nGeometries"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, nGeometries) - 18usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::extra"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, extra) - 20usize];
    ["Offset of field: xcb_xkb_list_components_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_list_components_reply_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub need: u16,
    pub want: u16,
    pub load: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_request_t>() - 12usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::need"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, need) - 6usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::want"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, want) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::load"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, load) - 10usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_request_t, pad0) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_types_map_t {
    pub types_rtrn: *mut xcb_xkb_key_type_t,
    pub syms_rtrn: *mut xcb_xkb_key_sym_map_t,
    pub acts_rtrn_count: *mut u8,
    pub acts_rtrn_acts: *mut xcb_xkb_action_t,
    pub behaviors_rtrn: *mut xcb_xkb_set_behavior_t,
    pub vmods_rtrn: *mut u8,
    pub explicit_rtrn: *mut xcb_xkb_set_explicit_t,
    pub modmap_rtrn: *mut xcb_xkb_key_mod_map_t,
    pub vmodmap_rtrn: *mut xcb_xkb_key_v_mod_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_types_map_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_types_map_t>() - 72usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_types_map_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_types_map_t>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::types_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_types_map_t, types_rtrn) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::syms_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_types_map_t, syms_rtrn) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::acts_rtrn_count"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        acts_rtrn_count
    ) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::acts_rtrn_acts"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        acts_rtrn_acts
    ) - 24usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::behaviors_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        behaviors_rtrn
    ) - 32usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::vmods_rtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_types_map_t, vmods_rtrn) - 40usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::explicit_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        explicit_rtrn
    ) - 48usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::modmap_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        modmap_rtrn
    ) - 56usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_types_map_t::vmodmap_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_types_map_t,
        vmodmap_rtrn
    ) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t {
    pub keycodesName: xcb_atom_t,
    pub geometryName: xcb_atom_t,
    pub symbolsName: xcb_atom_t,
    pub physSymbolsName: xcb_atom_t,
    pub typesName: xcb_atom_t,
    pub compatName: xcb_atom_t,
    pub typeNames: *mut xcb_atom_t,
    pub nLevelsPerType: *mut u8,
    pub ktLevelNames: *mut xcb_atom_t,
    pub indicatorNames: *mut xcb_atom_t,
    pub virtualModNames: *mut xcb_atom_t,
    pub groups: *mut xcb_atom_t,
    pub keyNames: *mut xcb_xkb_key_name_t,
    pub keyAliases: *mut xcb_xkb_key_alias_t,
    pub radioGroupNames: *mut xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t>() - 96usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::keycodesName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        keycodesName
    )
        - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::geometryName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        geometryName
    )
        - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::symbolsName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        symbolsName
    )
        - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::physSymbolsName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        physSymbolsName
    )
        - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::typesName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        typesName
    )
        - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::compatName"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        compatName
    )
        - 20usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::typeNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        typeNames
    )
        - 24usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::nLevelsPerType"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        nLevelsPerType
    )
        - 32usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::ktLevelNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        ktLevelNames
    )
        - 40usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::indicatorNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        indicatorNames
    )
        - 48usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::virtualModNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        virtualModNames
    )
        - 56usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::groups"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        groups
    )
        - 64usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::keyNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        keyNames
    )
        - 72usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::keyAliases"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        keyAliases
    )
        - 80usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t::radioGroupNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
        radioGroupNames
    )
        - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t {
    pub types: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
    pub compat_map: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
    pub indicator_maps: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
    pub key_names: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
    pub geometry: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1 {
    pub getmap_type: u8,
    pub typeDeviceID: u8,
    pub getmap_sequence: u16,
    pub getmap_length: u32,
    pub pad1: [u8; 2usize],
    pub typeMinKeyCode: xcb_keycode_t,
    pub typeMaxKeyCode: xcb_keycode_t,
    pub present: u16,
    pub firstType: u8,
    pub nTypes: u8,
    pub totalTypes: u8,
    pub firstKeySym: xcb_keycode_t,
    pub totalSyms: u16,
    pub nKeySyms: u8,
    pub firstKeyAction: xcb_keycode_t,
    pub totalActions: u16,
    pub nKeyActions: u8,
    pub firstKeyBehavior: xcb_keycode_t,
    pub nKeyBehaviors: u8,
    pub totalKeyBehaviors: u8,
    pub firstKeyExplicit: xcb_keycode_t,
    pub nKeyExplicit: u8,
    pub totalKeyExplicit: u8,
    pub firstModMapKey: xcb_keycode_t,
    pub nModMapKeys: u8,
    pub totalModMapKeys: u8,
    pub firstVModMapKey: xcb_keycode_t,
    pub nVModMapKeys: u8,
    pub totalVModMapKeys: u8,
    pub pad2: u8,
    pub virtualMods: u16,
    pub map: xcb_xkb_get_kbd_by_name_replies_types_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1>() - 112usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::getmap_type"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        getmap_type
    ) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::typeDeviceID"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        typeDeviceID
    ) - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::getmap_sequence"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        getmap_sequence
    )
        - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::getmap_length"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        getmap_length
    ) - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::pad1"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1, pad1) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::typeMinKeyCode"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        typeMinKeyCode
    )
        - 10usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::typeMaxKeyCode"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        typeMaxKeyCode
    )
        - 11usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::present"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        present
    ) - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstType"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstType
    ) - 14usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1, nTypes) - 15usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalTypes"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalTypes
    ) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstKeySym"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstKeySym
    ) - 17usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalSyms"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalSyms
    ) - 18usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nKeySyms"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nKeySyms
    ) - 20usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstKeyAction"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstKeyAction
    )
        - 21usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalActions"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalActions
    ) - 22usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nKeyActions"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nKeyActions
    ) - 24usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstKeyBehavior"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstKeyBehavior
    )
        - 25usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nKeyBehaviors"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nKeyBehaviors
    )
        - 26usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalKeyBehaviors"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalKeyBehaviors
    )
        - 27usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstKeyExplicit"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstKeyExplicit
    )
        - 28usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nKeyExplicit"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nKeyExplicit
    ) - 29usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalKeyExplicit"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalKeyExplicit
    )
        - 30usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstModMapKey"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstModMapKey
    )
        - 31usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nModMapKeys"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nModMapKeys
    ) - 32usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalModMapKeys"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalModMapKeys
    )
        - 33usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::firstVModMapKey"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        firstVModMapKey
    )
        - 34usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::nVModMapKeys"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        nVModMapKeys
    ) - 35usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::totalVModMapKeys"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        totalVModMapKeys
    )
        - 36usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::pad2"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1, pad2) - 37usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::virtualMods"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1,
        virtualMods
    ) - 38usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1::map"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_1, map) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2 {
    pub compatmap_type: u8,
    pub compatDeviceID: u8,
    pub compatmap_sequence: u16,
    pub compatmap_length: u32,
    pub groupsRtrn: u8,
    pub pad7: u8,
    pub firstSIRtrn: u16,
    pub nSIRtrn: u16,
    pub nTotalSI: u16,
    pub pad8: [u8; 16usize],
    pub si_rtrn: *mut xcb_xkb_sym_interpret_t,
    pub group_rtrn: *mut xcb_xkb_mod_def_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2>() - 48usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::compatmap_type"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        compatmap_type
    )
        - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::compatDeviceID"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        compatDeviceID
    )
        - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::compatmap_sequence"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        compatmap_sequence
    )
        - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::compatmap_length"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        compatmap_length
    )
        - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::groupsRtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        groupsRtrn
    ) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::pad7"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2, pad7) - 9usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::firstSIRtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        firstSIRtrn
    ) - 10usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::nSIRtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        nSIRtrn
    ) - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::nTotalSI"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        nTotalSI
    ) - 14usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::pad8"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2, pad8) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::si_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        si_rtrn
    ) - 32usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2::group_rtrn"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_2,
        group_rtrn
    ) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3 {
    pub indicatormap_type: u8,
    pub indicatorDeviceID: u8,
    pub indicatormap_sequence: u16,
    pub indicatormap_length: u32,
    pub which: u32,
    pub realIndicators: u32,
    pub nIndicators: u8,
    pub pad9: [u8; 15usize],
    pub maps: *mut xcb_xkb_indicator_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3>() - 40usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::indicatormap_type"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        indicatormap_type
    )
        - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::indicatorDeviceID"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        indicatorDeviceID
    )
        - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::indicatormap_sequence"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        indicatormap_sequence
    )
        - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::indicatormap_length"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        indicatormap_length
    )
        - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::which"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3, which) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::realIndicators"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        realIndicators
    )
        - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::nIndicators"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3,
        nIndicators
    ) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::pad9"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3, pad9) - 17usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3::maps"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_3, maps) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4 {
    pub keyname_type: u8,
    pub keyDeviceID: u8,
    pub keyname_sequence: u16,
    pub keyname_length: u32,
    pub which: u32,
    pub keyMinKeyCode: xcb_keycode_t,
    pub keyMaxKeyCode: xcb_keycode_t,
    pub nTypes: u8,
    pub groupNames: u8,
    pub virtualMods: u16,
    pub firstKey: xcb_keycode_t,
    pub nKeys: u8,
    pub indicators: u32,
    pub nRadioGroups: u8,
    pub nKeyAliases: u8,
    pub nKTLevels: u16,
    pub pad10: [u8; 4usize],
    pub valueList: xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4>() - 128usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyname_type"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyname_type
    ) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyDeviceID"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyDeviceID
    ) - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyname_sequence"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyname_sequence
    )
        - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyname_length"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyname_length
    )
        - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::which"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4, which) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyMinKeyCode"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyMinKeyCode
    )
        - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::keyMaxKeyCode"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        keyMaxKeyCode
    )
        - 13usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4, nTypes) - 14usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::groupNames"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        groupNames
    ) - 15usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::virtualMods"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        virtualMods
    ) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::firstKey"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        firstKey
    ) - 18usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4, nKeys) - 19usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::indicators"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        indicators
    ) - 20usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::nRadioGroups"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        nRadioGroups
    ) - 24usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::nKeyAliases"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        nKeyAliases
    ) - 25usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::nKTLevels"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        nKTLevels
    ) - 26usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::pad10"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4, pad10) - 28usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4::valueList"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_4,
        valueList
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5 {
    pub geometry_type: u8,
    pub geometryDeviceID: u8,
    pub geometry_sequence: u16,
    pub geometry_length: u32,
    pub name: xcb_atom_t,
    pub geometryFound: u8,
    pub pad12: u8,
    pub widthMM: u16,
    pub heightMM: u16,
    pub nProperties: u16,
    pub nColors: u16,
    pub nShapes: u16,
    pub nSections: u16,
    pub nDoodads: u16,
    pub nKeyAliases: u16,
    pub baseColorNdx: u8,
    pub labelColorNdx: u8,
    pub labelFont: *mut xcb_xkb_counted_string_16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5>() - 40usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::geometry_type"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        geometry_type
    ) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::geometryDeviceID"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        geometryDeviceID
    )
        - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::geometry_sequence"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        geometry_sequence
    )
        - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::geometry_length"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        geometry_length
    )
        - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::name"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5, name) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::geometryFound"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        geometryFound
    )
        - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::pad12"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5, pad12) - 13usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::widthMM"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        widthMM
    ) - 14usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::heightMM"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        heightMM
    ) - 16usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nProperties"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nProperties
    ) - 18usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nColors"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nColors
    ) - 20usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nShapes"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nShapes
    ) - 22usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nSections"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nSections
    ) - 24usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nDoodads"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nDoodads
    ) - 26usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::nKeyAliases"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        nKeyAliases
    ) - 28usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::baseColorNdx"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        baseColorNdx
    ) - 30usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::labelColorNdx"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        labelColorNdx
    )
        - 31usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5::labelFont"][::std::mem::offset_of!(
        xcb_xkb_get_kbd_by_name_replies_t__bindgen_ty_5,
        labelFont
    ) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_replies_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_replies_t>() - 368usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_replies_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_replies_t>() - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t::types"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t, types) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t::compat_map"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t, compat_map) - 112usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t::indicator_maps"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t, indicator_maps) - 160usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t::key_names"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t, key_names) - 200usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_replies_t::geometry"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_replies_t, geometry) - 328usize];
};
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map(
        R: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_get_kbd_by_name_replies_types_map_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_kbd_by_name_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub loaded: u8,
    pub newKeyboard: u8,
    pub found: u16,
    pub reported: u16,
    pub pad0: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_kbd_by_name_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_kbd_by_name_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_get_kbd_by_name_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_kbd_by_name_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, minKeyCode) - 8usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, maxKeyCode) - 9usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::loaded"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, loaded) - 10usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::newKeyboard"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, newKeyboard) - 11usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::found"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, found) - 12usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::reported"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, reported) - 14usize];
    ["Offset of field: xcb_xkb_get_kbd_by_name_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_kbd_by_name_reply_t, pad0) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_device_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_device_info_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_get_device_info_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_get_device_info_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_get_device_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_device_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_device_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub wanted: u16,
    pub allButtons: u8,
    pub firstButton: u8,
    pub nButtons: u8,
    pub pad0: u8,
    pub ledClass: xcb_xkb_led_class_spec_t,
    pub ledID: xcb_xkb_id_spec_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_device_info_request_t"]
        [::std::mem::size_of::<xcb_xkb_get_device_info_request_t>() - 16usize];
    ["Alignment of xcb_xkb_get_device_info_request_t"]
        [::std::mem::align_of::<xcb_xkb_get_device_info_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::wanted"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, wanted) - 6usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::allButtons"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, allButtons) - 8usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::firstButton"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, firstButton) - 9usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::nButtons"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, nButtons) - 10usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, pad0) - 11usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::ledClass"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, ledClass) - 12usize];
    ["Offset of field: xcb_xkb_get_device_info_request_t::ledID"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_request_t, ledID) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_get_device_info_reply_t {
    pub response_type: u8,
    pub deviceID: u8,
    pub sequence: u16,
    pub length: u32,
    pub present: u16,
    pub supported: u16,
    pub unsupported: u16,
    pub nDeviceLedFBs: u16,
    pub firstBtnWanted: u8,
    pub nBtnsWanted: u8,
    pub firstBtnRtrn: u8,
    pub nBtnsRtrn: u8,
    pub totalBtns: u8,
    pub hasOwnState: u8,
    pub dfltKbdFB: u16,
    pub dfltLedFB: u16,
    pub pad0: [u8; 2usize],
    pub devType: xcb_atom_t,
    pub nameLen: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_get_device_info_reply_t"]
        [::std::mem::size_of::<xcb_xkb_get_device_info_reply_t>() - 36usize];
    ["Alignment of xcb_xkb_get_device_info_reply_t"]
        [::std::mem::align_of::<xcb_xkb_get_device_info_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, deviceID) - 1usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::present"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, present) - 8usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::supported"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, supported) - 10usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::unsupported"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, unsupported) - 12usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::nDeviceLedFBs"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, nDeviceLedFBs) - 14usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::firstBtnWanted"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, firstBtnWanted) - 16usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::nBtnsWanted"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, nBtnsWanted) - 17usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::firstBtnRtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, firstBtnRtrn) - 18usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::nBtnsRtrn"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, nBtnsRtrn) - 19usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::totalBtns"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, totalBtns) - 20usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::hasOwnState"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, hasOwnState) - 21usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::dfltKbdFB"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, dfltKbdFB) - 22usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::dfltLedFB"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, dfltLedFB) - 24usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, pad0) - 26usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::devType"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, devType) - 28usize];
    ["Offset of field: xcb_xkb_get_device_info_reply_t::nameLen"]
        [::std::mem::offset_of!(xcb_xkb_get_device_info_reply_t, nameLen) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_device_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub deviceSpec: xcb_xkb_device_spec_t,
    pub firstBtn: u8,
    pub nBtns: u8,
    pub change: u16,
    pub nDeviceLedFBs: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_device_info_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_device_info_request_t>() - 12usize];
    ["Alignment of xcb_xkb_set_device_info_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_device_info_request_t>() - 2usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::deviceSpec"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, deviceSpec) - 4usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::firstBtn"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, firstBtn) - 6usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::nBtns"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, nBtns) - 7usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::change"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, change) - 8usize];
    ["Offset of field: xcb_xkb_set_device_info_request_t::nDeviceLedFBs"]
        [::std::mem::offset_of!(xcb_xkb_set_device_info_request_t, nDeviceLedFBs) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_debugging_flags_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_debugging_flags_cookie_t"]
        [::std::mem::size_of::<xcb_xkb_set_debugging_flags_cookie_t>() - 4usize];
    ["Alignment of xcb_xkb_set_debugging_flags_cookie_t"]
        [::std::mem::align_of::<xcb_xkb_set_debugging_flags_cookie_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_debugging_flags_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub msgLength: u16,
    pub pad0: [u8; 2usize],
    pub affectFlags: u32,
    pub flags: u32,
    pub affectCtrls: u32,
    pub ctrls: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_debugging_flags_request_t"]
        [::std::mem::size_of::<xcb_xkb_set_debugging_flags_request_t>() - 24usize];
    ["Alignment of xcb_xkb_set_debugging_flags_request_t"]
        [::std::mem::align_of::<xcb_xkb_set_debugging_flags_request_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, length) - 2usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::msgLength"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, msgLength) - 4usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, pad0) - 6usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::affectFlags"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, affectFlags) - 8usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::flags"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, flags) - 12usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::affectCtrls"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, affectCtrls) - 16usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_request_t::ctrls"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_request_t, ctrls) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_set_debugging_flags_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub currentFlags: u32,
    pub currentCtrls: u32,
    pub supportedFlags: u32,
    pub supportedCtrls: u32,
    pub pad1: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_set_debugging_flags_reply_t"]
        [::std::mem::size_of::<xcb_xkb_set_debugging_flags_reply_t>() - 32usize];
    ["Alignment of xcb_xkb_set_debugging_flags_reply_t"]
        [::std::mem::align_of::<xcb_xkb_set_debugging_flags_reply_t>() - 4usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::length"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, length) - 4usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::currentFlags"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, currentFlags) - 8usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::currentCtrls"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, currentCtrls) - 12usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::supportedFlags"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, supportedFlags) - 16usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::supportedCtrls"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, supportedCtrls) - 20usize];
    ["Offset of field: xcb_xkb_set_debugging_flags_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_set_debugging_flags_reply_t, pad1) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_new_keyboard_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub oldDeviceID: u8,
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub oldMinKeyCode: xcb_keycode_t,
    pub oldMaxKeyCode: xcb_keycode_t,
    pub requestMajor: u8,
    pub requestMinor: u8,
    pub changed: u16,
    pub pad0: [u8; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_new_keyboard_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_new_keyboard_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_new_keyboard_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_new_keyboard_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::oldDeviceID"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, oldDeviceID) - 9usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, minKeyCode) - 10usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, maxKeyCode) - 11usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::oldMinKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, oldMinKeyCode) - 12usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::oldMaxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, oldMaxKeyCode) - 13usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::requestMajor"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, requestMajor) - 14usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::requestMinor"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, requestMinor) - 15usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::changed"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, changed) - 16usize];
    ["Offset of field: xcb_xkb_new_keyboard_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_new_keyboard_notify_event_t, pad0) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_map_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub ptrBtnActions: u8,
    pub changed: u16,
    pub minKeyCode: xcb_keycode_t,
    pub maxKeyCode: xcb_keycode_t,
    pub firstType: u8,
    pub nTypes: u8,
    pub firstKeySym: xcb_keycode_t,
    pub nKeySyms: u8,
    pub firstKeyAct: xcb_keycode_t,
    pub nKeyActs: u8,
    pub firstKeyBehavior: xcb_keycode_t,
    pub nKeyBehavior: u8,
    pub firstKeyExplicit: xcb_keycode_t,
    pub nKeyExplicit: u8,
    pub firstModMapKey: xcb_keycode_t,
    pub nModMapKeys: u8,
    pub firstVModMapKey: xcb_keycode_t,
    pub nVModMapKeys: u8,
    pub virtualMods: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_map_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_map_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_map_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_map_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::ptrBtnActions"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, ptrBtnActions) - 9usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::changed"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, changed) - 10usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::minKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, minKeyCode) - 12usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::maxKeyCode"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, maxKeyCode) - 13usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstType) - 14usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nTypes) - 15usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstKeySym"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstKeySym) - 16usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nKeySyms"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nKeySyms) - 17usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstKeyAct"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstKeyAct) - 18usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nKeyActs"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nKeyActs) - 19usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstKeyBehavior"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstKeyBehavior) - 20usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nKeyBehavior"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nKeyBehavior) - 21usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstKeyExplicit) - 22usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nKeyExplicit"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nKeyExplicit) - 23usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstModMapKey) - 24usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nModMapKeys) - 25usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::firstVModMapKey"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, firstVModMapKey) - 26usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::nVModMapKeys"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, nVModMapKeys) - 27usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::virtualMods"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, virtualMods) - 28usize];
    ["Offset of field: xcb_xkb_map_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_map_notify_event_t, pad0) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_state_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub mods: u8,
    pub baseMods: u8,
    pub latchedMods: u8,
    pub lockedMods: u8,
    pub group: u8,
    pub baseGroup: i16,
    pub latchedGroup: i16,
    pub lockedGroup: u8,
    pub compatState: u8,
    pub grabMods: u8,
    pub compatGrabMods: u8,
    pub lookupMods: u8,
    pub compatLoockupMods: u8,
    pub ptrBtnState: u16,
    pub changed: u16,
    pub keycode: xcb_keycode_t,
    pub eventType: u8,
    pub requestMajor: u8,
    pub requestMinor: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_state_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_state_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_state_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_state_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, mods) - 9usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::baseMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, baseMods) - 10usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::latchedMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, latchedMods) - 11usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::lockedMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, lockedMods) - 12usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::group"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, group) - 13usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::baseGroup"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, baseGroup) - 14usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::latchedGroup"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, latchedGroup) - 16usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::lockedGroup"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, lockedGroup) - 18usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::compatState"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, compatState) - 19usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::grabMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, grabMods) - 20usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::compatGrabMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, compatGrabMods) - 21usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::lookupMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, lookupMods) - 22usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::compatLoockupMods"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, compatLoockupMods) - 23usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::ptrBtnState"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, ptrBtnState) - 24usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::changed"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, changed) - 26usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, keycode) - 28usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::eventType"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, eventType) - 29usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::requestMajor"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, requestMajor) - 30usize];
    ["Offset of field: xcb_xkb_state_notify_event_t::requestMinor"]
        [::std::mem::offset_of!(xcb_xkb_state_notify_event_t, requestMinor) - 31usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_controls_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub numGroups: u8,
    pub pad0: [u8; 2usize],
    pub changedControls: u32,
    pub enabledControls: u32,
    pub enabledControlChanges: u32,
    pub keycode: xcb_keycode_t,
    pub eventType: u8,
    pub requestMajor: u8,
    pub requestMinor: u8,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_controls_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_controls_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_controls_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_controls_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::numGroups"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, numGroups) - 9usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, pad0) - 10usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::changedControls"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, changedControls) - 12usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::enabledControls"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, enabledControls) - 16usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::enabledControlChanges"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, enabledControlChanges) - 20usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, keycode) - 24usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::eventType"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, eventType) - 25usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::requestMajor"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, requestMajor) - 26usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::requestMinor"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, requestMinor) - 27usize];
    ["Offset of field: xcb_xkb_controls_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_controls_notify_event_t, pad1) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_indicator_state_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub pad0: [u8; 3usize],
    pub state: u32,
    pub stateChanged: u32,
    pub pad1: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_indicator_state_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_indicator_state_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_indicator_state_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_indicator_state_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, pad0) - 9usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, state) - 12usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::stateChanged"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, stateChanged) - 16usize];
    ["Offset of field: xcb_xkb_indicator_state_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_indicator_state_notify_event_t, pad1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_indicator_map_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub pad0: [u8; 3usize],
    pub state: u32,
    pub mapChanged: u32,
    pub pad1: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_indicator_map_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_indicator_map_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_indicator_map_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_indicator_map_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, pad0) - 9usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, state) - 12usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::mapChanged"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, mapChanged) - 16usize];
    ["Offset of field: xcb_xkb_indicator_map_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_indicator_map_notify_event_t, pad1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_names_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub pad0: u8,
    pub changed: u16,
    pub firstType: u8,
    pub nTypes: u8,
    pub firstLevelName: u8,
    pub nLevelNames: u8,
    pub pad1: u8,
    pub nRadioGroups: u8,
    pub nKeyAliases: u8,
    pub changedGroupNames: u8,
    pub changedVirtualMods: u16,
    pub firstKey: xcb_keycode_t,
    pub nKeys: u8,
    pub changedIndicators: u32,
    pub pad2: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_names_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_names_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_names_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_names_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, pad0) - 9usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::changed"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, changed) - 10usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::firstType"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, firstType) - 12usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::nTypes"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, nTypes) - 13usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::firstLevelName"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, firstLevelName) - 14usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::nLevelNames"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, nLevelNames) - 15usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, pad1) - 16usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::nRadioGroups"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, nRadioGroups) - 17usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::nKeyAliases"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, nKeyAliases) - 18usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::changedGroupNames"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, changedGroupNames) - 19usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::changedVirtualMods"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, changedVirtualMods) - 20usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::firstKey"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, firstKey) - 22usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::nKeys"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, nKeys) - 23usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::changedIndicators"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, changedIndicators) - 24usize];
    ["Offset of field: xcb_xkb_names_notify_event_t::pad2"]
        [::std::mem::offset_of!(xcb_xkb_names_notify_event_t, pad2) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_compat_map_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub changedGroups: u8,
    pub firstSI: u16,
    pub nSI: u16,
    pub nTotalSI: u16,
    pub pad0: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_compat_map_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_compat_map_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_compat_map_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_compat_map_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::changedGroups"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, changedGroups) - 9usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::firstSI"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, firstSI) - 10usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::nSI"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, nSI) - 12usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::nTotalSI"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, nTotalSI) - 14usize];
    ["Offset of field: xcb_xkb_compat_map_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_compat_map_notify_event_t, pad0) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_bell_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub bellClass: u8,
    pub bellID: u8,
    pub percent: u8,
    pub pitch: u16,
    pub duration: u16,
    pub name: xcb_atom_t,
    pub window: xcb_window_t,
    pub eventOnly: u8,
    pub pad0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_bell_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_bell_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_bell_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_bell_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::bellClass"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, bellClass) - 9usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::bellID"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, bellID) - 10usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::percent"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, percent) - 11usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::pitch"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, pitch) - 12usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::duration"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, duration) - 14usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::name"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, name) - 16usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, window) - 20usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::eventOnly"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, eventOnly) - 24usize];
    ["Offset of field: xcb_xkb_bell_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_bell_notify_event_t, pad0) - 25usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_action_message_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub keycode: xcb_keycode_t,
    pub press: u8,
    pub keyEventFollows: u8,
    pub mods: u8,
    pub group: u8,
    pub message: [xcb_xkb_string8_t; 8usize],
    pub pad0: [u8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_action_message_event_t"]
        [::std::mem::size_of::<xcb_xkb_action_message_event_t>() - 32usize];
    ["Alignment of xcb_xkb_action_message_event_t"]
        [::std::mem::align_of::<xcb_xkb_action_message_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_action_message_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_action_message_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_action_message_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_action_message_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_action_message_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_action_message_event_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, keycode) - 9usize];
    ["Offset of field: xcb_xkb_action_message_event_t::press"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, press) - 10usize];
    ["Offset of field: xcb_xkb_action_message_event_t::keyEventFollows"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, keyEventFollows) - 11usize];
    ["Offset of field: xcb_xkb_action_message_event_t::mods"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, mods) - 12usize];
    ["Offset of field: xcb_xkb_action_message_event_t::group"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, group) - 13usize];
    ["Offset of field: xcb_xkb_action_message_event_t::message"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, message) - 14usize];
    ["Offset of field: xcb_xkb_action_message_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_action_message_event_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_access_x_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub keycode: xcb_keycode_t,
    pub detailt: u16,
    pub slowKeysDelay: u16,
    pub debounceDelay: u16,
    pub pad0: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_access_x_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_access_x_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_access_x_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_access_x_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::keycode"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, keycode) - 9usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::detailt"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, detailt) - 10usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::slowKeysDelay"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, slowKeysDelay) - 12usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::debounceDelay"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, debounceDelay) - 14usize];
    ["Offset of field: xcb_xkb_access_x_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_access_x_notify_event_t, pad0) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_xkb_extension_device_notify_event_t {
    pub response_type: u8,
    pub xkbType: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub deviceID: u8,
    pub pad0: u8,
    pub reason: u16,
    pub ledClass: u16,
    pub ledID: u16,
    pub ledsDefined: u32,
    pub ledState: u32,
    pub firstButton: u8,
    pub nButtons: u8,
    pub supported: u16,
    pub unsupported: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_xkb_extension_device_notify_event_t"]
        [::std::mem::size_of::<xcb_xkb_extension_device_notify_event_t>() - 32usize];
    ["Alignment of xcb_xkb_extension_device_notify_event_t"]
        [::std::mem::align_of::<xcb_xkb_extension_device_notify_event_t>() - 4usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::xkbType"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, xkbType) - 1usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::deviceID"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, deviceID) - 8usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, pad0) - 9usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::reason"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, reason) - 10usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::ledClass"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, ledClass) - 12usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::ledID"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, ledID) - 14usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::ledsDefined"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, ledsDefined) - 16usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::ledState"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, ledState) - 20usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::firstButton"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, firstButton) - 24usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::nButtons"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, nButtons) - 25usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::supported"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, supported) - 26usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::unsupported"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, unsupported) - 28usize];
    ["Offset of field: xcb_xkb_extension_device_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_xkb_extension_device_notify_event_t, pad1) - 30usize];
};
unsafe extern "C" {
    pub fn xcb_xkb_device_spec_next(i: *mut xcb_xkb_device_spec_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_device_spec_end(i: xcb_xkb_device_spec_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_led_class_spec_next(i: *mut xcb_xkb_led_class_spec_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_led_class_spec_end(
        i: xcb_xkb_led_class_spec_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_bell_class_spec_next(i: *mut xcb_xkb_bell_class_spec_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_bell_class_spec_end(
        i: xcb_xkb_bell_class_spec_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_id_spec_next(i: *mut xcb_xkb_id_spec_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_id_spec_end(i: xcb_xkb_id_spec_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_indicator_map_next(i: *mut xcb_xkb_indicator_map_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_indicator_map_end(i: xcb_xkb_indicator_map_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_mod_def_next(i: *mut xcb_xkb_mod_def_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_mod_def_end(i: xcb_xkb_mod_def_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_name_next(i: *mut xcb_xkb_key_name_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_name_end(i: xcb_xkb_key_name_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_alias_next(i: *mut xcb_xkb_key_alias_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_alias_end(i: xcb_xkb_key_alias_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_string(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_string_length(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_string_end(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_alignment_pad(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_alignment_pad_length(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_alignment_pad_end(
        R: *const xcb_xkb_counted_string_16_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_next(i: *mut xcb_xkb_counted_string_16_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_counted_string_16_end(
        i: xcb_xkb_counted_string_16_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_kt_map_entry_next(i: *mut xcb_xkb_kt_map_entry_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_kt_map_entry_end(i: xcb_xkb_kt_map_entry_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_map(R: *const xcb_xkb_key_type_t) -> *mut xcb_xkb_kt_map_entry_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_map_length(R: *const xcb_xkb_key_type_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_map_iterator(
        R: *const xcb_xkb_key_type_t,
    ) -> xcb_xkb_kt_map_entry_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_preserve(R: *const xcb_xkb_key_type_t) -> *mut xcb_xkb_mod_def_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_preserve_length(R: *const xcb_xkb_key_type_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_preserve_iterator(
        R: *const xcb_xkb_key_type_t,
    ) -> xcb_xkb_mod_def_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_next(i: *mut xcb_xkb_key_type_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_type_end(i: xcb_xkb_key_type_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_syms(R: *const xcb_xkb_key_sym_map_t) -> *mut xcb_keysym_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_syms_length(
        R: *const xcb_xkb_key_sym_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_syms_end(R: *const xcb_xkb_key_sym_map_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_next(i: *mut xcb_xkb_key_sym_map_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_sym_map_end(i: xcb_xkb_key_sym_map_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_common_behavior_next(i: *mut xcb_xkb_common_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_common_behavior_end(
        i: xcb_xkb_common_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_default_behavior_next(i: *mut xcb_xkb_default_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_default_behavior_end(
        i: xcb_xkb_default_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_lock_behavior_next(i: *mut xcb_xkb_lock_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_lock_behavior_end(i: xcb_xkb_lock_behavior_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_radio_group_behavior_next(i: *mut xcb_xkb_radio_group_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_radio_group_behavior_end(
        i: xcb_xkb_radio_group_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_behavior_next(i: *mut xcb_xkb_overlay_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_behavior_end(
        i: xcb_xkb_overlay_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_lock_behavior_next(i: *mut xcb_xkb_permament_lock_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_lock_behavior_end(
        i: xcb_xkb_permament_lock_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_radio_group_behavior_next(
        i: *mut xcb_xkb_permament_radio_group_behavior_iterator_t,
    );
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_radio_group_behavior_end(
        i: xcb_xkb_permament_radio_group_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_overlay_behavior_next(
        i: *mut xcb_xkb_permament_overlay_behavior_iterator_t,
    );
}
unsafe extern "C" {
    pub fn xcb_xkb_permament_overlay_behavior_end(
        i: xcb_xkb_permament_overlay_behavior_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_behavior_next(i: *mut xcb_xkb_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_behavior_end(i: xcb_xkb_behavior_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_behavior_next(i: *mut xcb_xkb_set_behavior_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_set_behavior_end(i: xcb_xkb_set_behavior_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_explicit_next(i: *mut xcb_xkb_set_explicit_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_set_explicit_end(i: xcb_xkb_set_explicit_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_mod_map_next(i: *mut xcb_xkb_key_mod_map_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_mod_map_end(i: xcb_xkb_key_mod_map_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_v_mod_map_next(i: *mut xcb_xkb_key_v_mod_map_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_v_mod_map_end(i: xcb_xkb_key_v_mod_map_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_kt_set_map_entry_next(i: *mut xcb_xkb_kt_set_map_entry_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_kt_set_map_entry_end(
        i: xcb_xkb_kt_set_map_entry_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_entries(
        R: *const xcb_xkb_set_key_type_t,
    ) -> *mut xcb_xkb_kt_set_map_entry_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_entries_length(
        R: *const xcb_xkb_set_key_type_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_entries_iterator(
        R: *const xcb_xkb_set_key_type_t,
    ) -> xcb_xkb_kt_set_map_entry_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_preserve_entries(
        R: *const xcb_xkb_set_key_type_t,
    ) -> *mut xcb_xkb_kt_set_map_entry_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_preserve_entries_length(
        R: *const xcb_xkb_set_key_type_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_preserve_entries_iterator(
        R: *const xcb_xkb_set_key_type_t,
    ) -> xcb_xkb_kt_set_map_entry_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_next(i: *mut xcb_xkb_set_key_type_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_set_key_type_end(i: xcb_xkb_set_key_type_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_string8_next(i: *mut xcb_xkb_string8_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_string8_end(i: xcb_xkb_string8_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_points(R: *const xcb_xkb_outline_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_points_length(R: *const xcb_xkb_outline_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_points_iterator(R: *const xcb_xkb_outline_t) -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_next(i: *mut xcb_xkb_outline_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_outline_end(i: xcb_xkb_outline_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_shape_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_shape_outlines_length(R: *const xcb_xkb_shape_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_shape_outlines_iterator(R: *const xcb_xkb_shape_t)
        -> xcb_xkb_outline_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_shape_next(i: *mut xcb_xkb_shape_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_shape_end(i: xcb_xkb_shape_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_key_next(i: *mut xcb_xkb_key_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_key_end(i: xcb_xkb_key_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_key_next(i: *mut xcb_xkb_overlay_key_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_key_end(i: xcb_xkb_overlay_key_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_keys(R: *const xcb_xkb_overlay_row_t) -> *mut xcb_xkb_overlay_key_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_keys_length(
        R: *const xcb_xkb_overlay_row_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_keys_iterator(
        R: *const xcb_xkb_overlay_row_t,
    ) -> xcb_xkb_overlay_key_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_next(i: *mut xcb_xkb_overlay_row_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_row_end(i: xcb_xkb_overlay_row_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_rows_length(R: *const xcb_xkb_overlay_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_rows_iterator(
        R: *const xcb_xkb_overlay_t,
    ) -> xcb_xkb_overlay_row_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_next(i: *mut xcb_xkb_overlay_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_overlay_end(i: xcb_xkb_overlay_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_row_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_row_keys(R: *const xcb_xkb_row_t) -> *mut xcb_xkb_key_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_row_keys_length(R: *const xcb_xkb_row_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_row_keys_iterator(R: *const xcb_xkb_row_t) -> xcb_xkb_key_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_row_next(i: *mut xcb_xkb_row_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_row_end(i: xcb_xkb_row_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_string(R: *const xcb_xkb_listing_t) -> *mut xcb_xkb_string8_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_string_length(R: *const xcb_xkb_listing_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_string_end(R: *const xcb_xkb_listing_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_next(i: *mut xcb_xkb_listing_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_listing_end(i: xcb_xkb_listing_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_names(R: *const xcb_xkb_device_led_info_t) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_names_length(
        R: *const xcb_xkb_device_led_info_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_names_end(
        R: *const xcb_xkb_device_led_info_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_maps(
        R: *const xcb_xkb_device_led_info_t,
    ) -> *mut xcb_xkb_indicator_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_maps_length(
        R: *const xcb_xkb_device_led_info_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_maps_iterator(
        R: *const xcb_xkb_device_led_info_t,
    ) -> xcb_xkb_indicator_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_next(i: *mut xcb_xkb_device_led_info_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_device_led_info_end(
        i: xcb_xkb_device_led_info_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_no_action_next(i: *mut xcb_xkb_sa_no_action_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_no_action_end(i: xcb_xkb_sa_no_action_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_mods_next(i: *mut xcb_xkb_sa_set_mods_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_mods_end(i: xcb_xkb_sa_set_mods_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_latch_mods_next(i: *mut xcb_xkb_sa_latch_mods_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_latch_mods_end(i: xcb_xkb_sa_latch_mods_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_mods_next(i: *mut xcb_xkb_sa_lock_mods_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_mods_end(i: xcb_xkb_sa_lock_mods_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_group_next(i: *mut xcb_xkb_sa_set_group_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_group_end(i: xcb_xkb_sa_set_group_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_latch_group_next(i: *mut xcb_xkb_sa_latch_group_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_latch_group_end(
        i: xcb_xkb_sa_latch_group_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_group_next(i: *mut xcb_xkb_sa_lock_group_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_group_end(i: xcb_xkb_sa_lock_group_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_move_ptr_next(i: *mut xcb_xkb_sa_move_ptr_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_move_ptr_end(i: xcb_xkb_sa_move_ptr_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_ptr_btn_next(i: *mut xcb_xkb_sa_ptr_btn_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_ptr_btn_end(i: xcb_xkb_sa_ptr_btn_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_ptr_btn_next(i: *mut xcb_xkb_sa_lock_ptr_btn_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_ptr_btn_end(
        i: xcb_xkb_sa_lock_ptr_btn_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_ptr_dflt_next(i: *mut xcb_xkb_sa_set_ptr_dflt_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_ptr_dflt_end(
        i: xcb_xkb_sa_set_ptr_dflt_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_iso_lock_next(i: *mut xcb_xkb_sa_iso_lock_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_iso_lock_end(i: xcb_xkb_sa_iso_lock_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_terminate_next(i: *mut xcb_xkb_sa_terminate_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_terminate_end(i: xcb_xkb_sa_terminate_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_switch_screen_next(i: *mut xcb_xkb_sa_switch_screen_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_switch_screen_end(
        i: xcb_xkb_sa_switch_screen_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_controls_next(i: *mut xcb_xkb_sa_set_controls_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_set_controls_end(
        i: xcb_xkb_sa_set_controls_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_controls_next(i: *mut xcb_xkb_sa_lock_controls_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_controls_end(
        i: xcb_xkb_sa_lock_controls_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_action_message_next(i: *mut xcb_xkb_sa_action_message_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_action_message_end(
        i: xcb_xkb_sa_action_message_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_redirect_key_next(i: *mut xcb_xkb_sa_redirect_key_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_redirect_key_end(
        i: xcb_xkb_sa_redirect_key_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_device_btn_next(i: *mut xcb_xkb_sa_device_btn_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_device_btn_end(i: xcb_xkb_sa_device_btn_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_device_btn_next(i: *mut xcb_xkb_sa_lock_device_btn_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_lock_device_btn_end(
        i: xcb_xkb_sa_lock_device_btn_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_device_valuator_next(i: *mut xcb_xkb_sa_device_valuator_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sa_device_valuator_end(
        i: xcb_xkb_sa_device_valuator_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_si_action_next(i: *mut xcb_xkb_si_action_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_si_action_end(i: xcb_xkb_si_action_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_sym_interpret_next(i: *mut xcb_xkb_sym_interpret_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_sym_interpret_end(i: xcb_xkb_sym_interpret_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_action_next(i: *mut xcb_xkb_action_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_xkb_action_end(i: xcb_xkb_action_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_use_extension(
        c: *mut xcb_connection_t,
        wantedMajor: u16,
        wantedMinor: u16,
    ) -> xcb_xkb_use_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_use_extension_unchecked(
        c: *mut xcb_connection_t,
        wantedMajor: u16,
        wantedMinor: u16,
    ) -> xcb_xkb_use_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_use_extension_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_use_extension_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_use_extension_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_details_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        _aux: *const xcb_xkb_select_events_details_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_details_unpack(
        _buffer: *const ::std::os::raw::c_void,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        _aux: *mut xcb_xkb_select_events_details_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_details_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        affectMap: u16,
        map: u16,
        details: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        affectMap: u16,
        map: u16,
        details: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_aux_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        affectMap: u16,
        map: u16,
        details: *const xcb_xkb_select_events_details_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_aux(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectWhich: u16,
        clear: u16,
        selectAll: u16,
        affectMap: u16,
        map: u16,
        details: *const xcb_xkb_select_events_details_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_select_events_details(
        R: *const xcb_xkb_select_events_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_bell_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        bellClass: xcb_xkb_bell_class_spec_t,
        bellID: xcb_xkb_id_spec_t,
        percent: i8,
        forceSound: u8,
        eventOnly: u8,
        pitch: i16,
        duration: i16,
        name: xcb_atom_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_bell(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        bellClass: xcb_xkb_bell_class_spec_t,
        bellID: xcb_xkb_id_spec_t,
        percent: i8,
        forceSound: u8,
        eventOnly: u8,
        pitch: i16,
        duration: i16,
        name: xcb_atom_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_state(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_state_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_state_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_state_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_state_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_state_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_state_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_latch_lock_state_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectModLocks: u8,
        modLocks: u8,
        lockGroup: u8,
        groupLock: u8,
        affectModLatches: u8,
        latchGroup: u8,
        groupLatch: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_latch_lock_state(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectModLocks: u8,
        modLocks: u8,
        lockGroup: u8,
        groupLock: u8,
        affectModLatches: u8,
        latchGroup: u8,
        groupLatch: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_controls(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_controls_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_controls_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_controls_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_controls_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_controls_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_controls_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_controls_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectInternalRealMods: u8,
        internalRealMods: u8,
        affectIgnoreLockRealMods: u8,
        ignoreLockRealMods: u8,
        affectInternalVirtualMods: u16,
        internalVirtualMods: u16,
        affectIgnoreLockVirtualMods: u16,
        ignoreLockVirtualMods: u16,
        mouseKeysDfltBtn: u8,
        groupsWrap: u8,
        accessXOptions: u16,
        affectEnabledControls: u32,
        enabledControls: u32,
        changeControls: u32,
        repeatDelay: u16,
        repeatInterval: u16,
        slowKeysDelay: u16,
        debounceDelay: u16,
        mouseKeysDelay: u16,
        mouseKeysInterval: u16,
        mouseKeysTimeToMax: u16,
        mouseKeysMaxSpeed: u16,
        mouseKeysCurve: i16,
        accessXTimeout: u16,
        accessXTimeoutMask: u32,
        accessXTimeoutValues: u32,
        accessXTimeoutOptionsMask: u16,
        accessXTimeoutOptionsValues: u16,
        perKeyRepeat: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_controls(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        affectInternalRealMods: u8,
        internalRealMods: u8,
        affectIgnoreLockRealMods: u8,
        ignoreLockRealMods: u8,
        affectInternalVirtualMods: u16,
        internalVirtualMods: u16,
        affectIgnoreLockVirtualMods: u16,
        ignoreLockVirtualMods: u16,
        mouseKeysDfltBtn: u8,
        groupsWrap: u8,
        accessXOptions: u16,
        affectEnabledControls: u32,
        enabledControls: u32,
        changeControls: u32,
        repeatDelay: u16,
        repeatInterval: u16,
        slowKeysDelay: u16,
        debounceDelay: u16,
        mouseKeysDelay: u16,
        mouseKeysInterval: u16,
        mouseKeysTimeToMax: u16,
        mouseKeysMaxSpeed: u16,
        mouseKeysCurve: i16,
        accessXTimeout: u16,
        accessXTimeoutMask: u32,
        accessXTimeoutValues: u32,
        accessXTimeoutOptionsMask: u16,
        accessXTimeoutOptionsValues: u16,
        perKeyRepeat: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_types_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_types_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_key_type_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_syms_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_syms_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_key_sym_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_count(S: *const xcb_xkb_get_map_map_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_count_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_count_end(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_acts(
        S: *const xcb_xkb_get_map_map_t,
    ) -> *mut xcb_xkb_action_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_acts_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_acts_rtrn_acts_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_action_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_behaviors_rtrn(
        S: *const xcb_xkb_get_map_map_t,
    ) -> *mut xcb_xkb_set_behavior_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_behaviors_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_behaviors_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_set_behavior_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmods_rtrn(S: *const xcb_xkb_get_map_map_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmods_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmods_rtrn_end(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_explicit_rtrn(
        S: *const xcb_xkb_get_map_map_t,
    ) -> *mut xcb_xkb_set_explicit_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_explicit_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_explicit_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_set_explicit_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_modmap_rtrn(
        S: *const xcb_xkb_get_map_map_t,
    ) -> *mut xcb_xkb_key_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_modmap_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_modmap_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_key_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmodmap_rtrn(
        S: *const xcb_xkb_get_map_map_t,
    ) -> *mut xcb_xkb_key_v_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmodmap_rtrn_length(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_vmodmap_rtrn_iterator(
        R: *const xcb_xkb_get_map_reply_t,
        S: *const xcb_xkb_get_map_map_t,
    ) -> xcb_xkb_key_v_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *const xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *mut xcb_xkb_get_map_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        full: u16,
        partial: u16,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        virtualMods: u16,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
    ) -> xcb_xkb_get_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        full: u16,
        partial: u16,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        virtualMods: u16,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
    ) -> xcb_xkb_get_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_map(R: *const xcb_xkb_get_map_reply_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_map_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_map_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_map_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_types_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_types_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_set_key_type_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_syms_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_syms_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_key_sym_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions_count(S: *const xcb_xkb_set_map_values_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions_count_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions_count_end(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions(
        S: *const xcb_xkb_set_map_values_t,
    ) -> *mut xcb_xkb_action_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_actions_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_action_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_behaviors(
        S: *const xcb_xkb_set_map_values_t,
    ) -> *mut xcb_xkb_set_behavior_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_behaviors_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_behaviors_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_set_behavior_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmods(S: *const xcb_xkb_set_map_values_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmods_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmods_end(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_explicit(
        S: *const xcb_xkb_set_map_values_t,
    ) -> *mut xcb_xkb_set_explicit_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_explicit_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_explicit_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_set_explicit_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_modmap(
        S: *const xcb_xkb_set_map_values_t,
    ) -> *mut xcb_xkb_key_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_modmap_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_modmap_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_key_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmodmap(
        S: *const xcb_xkb_set_map_values_t,
    ) -> *mut xcb_xkb_key_v_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmodmap_length(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_vmodmap_iterator(
        R: *const xcb_xkb_set_map_request_t,
        S: *const xcb_xkb_set_map_values_t,
    ) -> xcb_xkb_key_v_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *const xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *mut xcb_xkb_set_map_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        present: u16,
        flags: u16,
        minKeyCode: xcb_keycode_t,
        maxKeyCode: xcb_keycode_t,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        totalSyms: u16,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        totalActions: u16,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        totalKeyBehaviors: u8,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        totalKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        totalModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
        totalVModMapKeys: u8,
        virtualMods: u16,
        values: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        present: u16,
        flags: u16,
        minKeyCode: xcb_keycode_t,
        maxKeyCode: xcb_keycode_t,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        totalSyms: u16,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        totalActions: u16,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        totalKeyBehaviors: u8,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        totalKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        totalModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
        totalVModMapKeys: u8,
        virtualMods: u16,
        values: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_aux_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        present: u16,
        flags: u16,
        minKeyCode: xcb_keycode_t,
        maxKeyCode: xcb_keycode_t,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        totalSyms: u16,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        totalActions: u16,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        totalKeyBehaviors: u8,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        totalKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        totalModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
        totalVModMapKeys: u8,
        virtualMods: u16,
        values: *const xcb_xkb_set_map_values_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_aux(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        present: u16,
        flags: u16,
        minKeyCode: xcb_keycode_t,
        maxKeyCode: xcb_keycode_t,
        firstType: u8,
        nTypes: u8,
        firstKeySym: xcb_keycode_t,
        nKeySyms: u8,
        totalSyms: u16,
        firstKeyAction: xcb_keycode_t,
        nKeyActions: u8,
        totalActions: u16,
        firstKeyBehavior: xcb_keycode_t,
        nKeyBehaviors: u8,
        totalKeyBehaviors: u8,
        firstKeyExplicit: xcb_keycode_t,
        nKeyExplicit: u8,
        totalKeyExplicit: u8,
        firstModMapKey: xcb_keycode_t,
        nModMapKeys: u8,
        totalModMapKeys: u8,
        firstVModMapKey: xcb_keycode_t,
        nVModMapKeys: u8,
        totalVModMapKeys: u8,
        virtualMods: u16,
        values: *const xcb_xkb_set_map_values_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_map_values(
        R: *const xcb_xkb_set_map_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        groups: u8,
        getAllSI: u8,
        firstSI: u16,
        nSI: u16,
    ) -> xcb_xkb_get_compat_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        groups: u8,
        getAllSI: u8,
        firstSI: u16,
        nSI: u16,
    ) -> xcb_xkb_get_compat_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_si_rtrn(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> *mut xcb_xkb_sym_interpret_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_si_rtrn_length(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_si_rtrn_iterator(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> xcb_xkb_sym_interpret_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_group_rtrn(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> *mut xcb_xkb_mod_def_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_group_rtrn_length(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_group_rtrn_iterator(
        R: *const xcb_xkb_get_compat_map_reply_t,
    ) -> xcb_xkb_mod_def_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_compat_map_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_compat_map_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_compat_map_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        recomputeActions: u8,
        truncateSI: u8,
        groups: u8,
        firstSI: u16,
        nSI: u16,
        si: *const xcb_xkb_sym_interpret_t,
        groupMaps: *const xcb_xkb_mod_def_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        recomputeActions: u8,
        truncateSI: u8,
        groups: u8,
        firstSI: u16,
        nSI: u16,
        si: *const xcb_xkb_sym_interpret_t,
        groupMaps: *const xcb_xkb_mod_def_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_si(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> *mut xcb_xkb_sym_interpret_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_si_length(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_si_iterator(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> xcb_xkb_sym_interpret_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_group_maps(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> *mut xcb_xkb_mod_def_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_group_maps_length(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_compat_map_group_maps_iterator(
        R: *const xcb_xkb_set_compat_map_request_t,
    ) -> xcb_xkb_mod_def_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_state(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_indicator_state_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_state_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
    ) -> xcb_xkb_get_indicator_state_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_state_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_indicator_state_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_indicator_state_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
    ) -> xcb_xkb_get_indicator_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
    ) -> xcb_xkb_get_indicator_map_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_maps(
        R: *const xcb_xkb_get_indicator_map_reply_t,
    ) -> *mut xcb_xkb_indicator_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_maps_length(
        R: *const xcb_xkb_get_indicator_map_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_maps_iterator(
        R: *const xcb_xkb_get_indicator_map_reply_t,
    ) -> xcb_xkb_indicator_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_indicator_map_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_indicator_map_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_indicator_map_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
        maps: *const xcb_xkb_indicator_map_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
        maps: *const xcb_xkb_indicator_map_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map_maps(
        R: *const xcb_xkb_set_indicator_map_request_t,
    ) -> *mut xcb_xkb_indicator_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map_maps_length(
        R: *const xcb_xkb_set_indicator_map_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_indicator_map_maps_iterator(
        R: *const xcb_xkb_set_indicator_map_request_t,
    ) -> xcb_xkb_indicator_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_named_indicator(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
        indicator: xcb_atom_t,
    ) -> xcb_xkb_get_named_indicator_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_named_indicator_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
        indicator: xcb_atom_t,
    ) -> xcb_xkb_get_named_indicator_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_named_indicator_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_named_indicator_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_named_indicator_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_named_indicator_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
        indicator: xcb_atom_t,
        setState: u8,
        on: u8,
        setMap: u8,
        createMap: u8,
        map_flags: u8,
        map_whichGroups: u8,
        map_groups: u8,
        map_whichMods: u8,
        map_realMods: u8,
        map_vmods: u16,
        map_ctrls: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_named_indicator(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
        indicator: xcb_atom_t,
        setState: u8,
        on: u8,
        setMap: u8,
        createMap: u8,
        map_flags: u8,
        map_whichGroups: u8,
        map_groups: u8,
        map_whichMods: u8,
        map_realMods: u8,
        map_vmods: u16,
        map_ctrls: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_type_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_type_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_type_names_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_n_levels_per_type(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_n_levels_per_type_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_n_levels_per_type_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_kt_level_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_kt_level_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_kt_level_names_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_indicator_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_indicator_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_indicator_names_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_virtual_mod_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_virtual_mod_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_virtual_mod_names_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_groups(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_groups_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_groups_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_xkb_key_name_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_names_iterator(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_xkb_key_name_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_aliases(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_xkb_key_alias_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_aliases_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_key_aliases_iterator(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_xkb_key_alias_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_radio_group_names(
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_radio_group_names_length(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_radio_group_names_end(
        R: *const xcb_xkb_get_names_reply_t,
        S: *const xcb_xkb_get_names_value_list_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *const xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *mut xcb_xkb_get_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
    ) -> xcb_xkb_get_names_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        which: u32,
    ) -> xcb_xkb_get_names_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_value_list(
        R: *const xcb_xkb_get_names_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_names_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_names_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_names_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_type_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_type_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_type_names_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_n_levels_per_type(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_n_levels_per_type_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_n_levels_per_type_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_kt_level_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_kt_level_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_kt_level_names_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_indicator_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_indicator_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_indicator_names_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_virtual_mod_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_virtual_mod_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_virtual_mod_names_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_groups(S: *const xcb_xkb_set_names_values_t)
        -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_groups_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_groups_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_xkb_key_name_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_names_iterator(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_xkb_key_name_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_aliases(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_xkb_key_alias_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_aliases_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_key_aliases_iterator(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_xkb_key_alias_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_radio_group_names(
        S: *const xcb_xkb_set_names_values_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_radio_group_names_length(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_radio_group_names_end(
        R: *const xcb_xkb_set_names_request_t,
        S: *const xcb_xkb_set_names_values_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *const xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *mut xcb_xkb_set_names_values_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        virtualMods: u16,
        which: u32,
        firstType: u8,
        nTypes: u8,
        firstKTLevelt: u8,
        nKTLevels: u8,
        indicators: u32,
        groupNames: u8,
        nRadioGroups: u8,
        firstKey: xcb_keycode_t,
        nKeys: u8,
        nKeyAliases: u8,
        totalKTLevelNames: u16,
        values: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        virtualMods: u16,
        which: u32,
        firstType: u8,
        nTypes: u8,
        firstKTLevelt: u8,
        nKTLevels: u8,
        indicators: u32,
        groupNames: u8,
        nRadioGroups: u8,
        firstKey: xcb_keycode_t,
        nKeys: u8,
        nKeyAliases: u8,
        totalKTLevelNames: u16,
        values: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_aux_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        virtualMods: u16,
        which: u32,
        firstType: u8,
        nTypes: u8,
        firstKTLevelt: u8,
        nKTLevels: u8,
        indicators: u32,
        groupNames: u8,
        nRadioGroups: u8,
        firstKey: xcb_keycode_t,
        nKeys: u8,
        nKeyAliases: u8,
        totalKTLevelNames: u16,
        values: *const xcb_xkb_set_names_values_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_aux(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        virtualMods: u16,
        which: u32,
        firstType: u8,
        nTypes: u8,
        firstKTLevelt: u8,
        nKTLevels: u8,
        indicators: u32,
        groupNames: u8,
        nRadioGroups: u8,
        firstKey: xcb_keycode_t,
        nKeys: u8,
        nKeyAliases: u8,
        totalKTLevelNames: u16,
        values: *const xcb_xkb_set_names_values_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_names_values(
        R: *const xcb_xkb_set_names_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_per_client_flags(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        change: u32,
        value: u32,
        ctrlsToChange: u32,
        autoCtrls: u32,
        autoCtrlsValues: u32,
    ) -> xcb_xkb_per_client_flags_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_per_client_flags_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        change: u32,
        value: u32,
        ctrlsToChange: u32,
        autoCtrls: u32,
        autoCtrlsValues: u32,
    ) -> xcb_xkb_per_client_flags_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_per_client_flags_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_per_client_flags_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_per_client_flags_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        maxNames: u16,
    ) -> xcb_xkb_list_components_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        maxNames: u16,
    ) -> xcb_xkb_list_components_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_keymaps_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_keymaps_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_keycodes_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_keycodes_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_types_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_types_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_compat_maps_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_compat_maps_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_symbols_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_symbols_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_geometries_length(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_geometries_iterator(
        R: *const xcb_xkb_list_components_reply_t,
    ) -> xcb_xkb_listing_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_list_components_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_list_components_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_list_components_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_type_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_sym_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_action_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_action_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_set_behavior_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_set_behavior_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_set_explicit_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_set_explicit_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_key_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_key_v_mod_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_v_mod_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *const xcb_xkb_get_kbd_by_name_replies_types_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
        _aux: *mut xcb_xkb_get_kbd_by_name_replies_types_map_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_types_map_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        nKeySyms: u8,
        nKeyActions: u8,
        totalActions: u16,
        totalKeyBehaviors: u8,
        virtualMods: u16,
        totalKeyExplicit: u8,
        totalModMapKeys: u8,
        totalVModMapKeys: u8,
        present: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_key_name_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_name_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_key_alias_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_key_alias_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_end(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
        _aux: *mut xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        nTypes: u8,
        indicators: u32,
        virtualMods: u16,
        groupNames: u8,
        nKeys: u8,
        nKeyAliases: u8,
        nRadioGroups: u8,
        which: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_sym_interpret_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_sym_interpret_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_mod_def_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_mod_def_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps(
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_indicator_map_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_length(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_iterator(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
        S: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> xcb_xkb_indicator_map_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_key_names_value_list(
        R: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_geometry_label_font(
        R: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> *mut xcb_xkb_counted_string_16_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        reported: u16,
        _aux: *const xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_unpack(
        _buffer: *const ::std::os::raw::c_void,
        reported: u16,
        _aux: *mut xcb_xkb_get_kbd_by_name_replies_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        reported: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        need: u16,
        want: u16,
        load: u8,
    ) -> xcb_xkb_get_kbd_by_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        need: u16,
        want: u16,
        load: u8,
    ) -> xcb_xkb_get_kbd_by_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_replies(
        R: *const xcb_xkb_get_kbd_by_name_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_kbd_by_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_kbd_by_name_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_kbd_by_name_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        wanted: u16,
        allButtons: u8,
        firstButton: u8,
        nButtons: u8,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
    ) -> xcb_xkb_get_device_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_unchecked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        wanted: u16,
        allButtons: u8,
        firstButton: u8,
        nButtons: u8,
        ledClass: xcb_xkb_led_class_spec_t,
        ledID: xcb_xkb_id_spec_t,
    ) -> xcb_xkb_get_device_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_name(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> *mut xcb_xkb_string8_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_name_length(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_name_end(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_btn_actions(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> *mut xcb_xkb_action_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_btn_actions_length(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_btn_actions_iterator(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> xcb_xkb_action_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_leds_length(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_leds_iterator(
        R: *const xcb_xkb_get_device_info_reply_t,
    ) -> xcb_xkb_device_led_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_get_device_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_get_device_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_get_device_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_checked(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        firstBtn: u8,
        nBtns: u8,
        change: u16,
        nDeviceLedFBs: u16,
        btnActions: *const xcb_xkb_action_t,
        leds: *const xcb_xkb_device_led_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info(
        c: *mut xcb_connection_t,
        deviceSpec: xcb_xkb_device_spec_t,
        firstBtn: u8,
        nBtns: u8,
        change: u16,
        nDeviceLedFBs: u16,
        btnActions: *const xcb_xkb_action_t,
        leds: *const xcb_xkb_device_led_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_btn_actions(
        R: *const xcb_xkb_set_device_info_request_t,
    ) -> *mut xcb_xkb_action_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_btn_actions_length(
        R: *const xcb_xkb_set_device_info_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_btn_actions_iterator(
        R: *const xcb_xkb_set_device_info_request_t,
    ) -> xcb_xkb_action_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_leds_length(
        R: *const xcb_xkb_set_device_info_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_device_info_leds_iterator(
        R: *const xcb_xkb_set_device_info_request_t,
    ) -> xcb_xkb_device_led_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_debugging_flags_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_debugging_flags(
        c: *mut xcb_connection_t,
        msgLength: u16,
        affectFlags: u32,
        flags: u32,
        affectCtrls: u32,
        ctrls: u32,
        message: *const xcb_xkb_string8_t,
    ) -> xcb_xkb_set_debugging_flags_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_debugging_flags_unchecked(
        c: *mut xcb_connection_t,
        msgLength: u16,
        affectFlags: u32,
        flags: u32,
        affectCtrls: u32,
        ctrls: u32,
        message: *const xcb_xkb_string8_t,
    ) -> xcb_xkb_set_debugging_flags_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_xkb_set_debugging_flags_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_xkb_set_debugging_flags_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_xkb_set_debugging_flags_reply_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xkb_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xkb_keymap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xkb_state {
    _unused: [u8; 0],
}
pub type xkb_keycode_t = u32;
pub type xkb_keysym_t = u32;
pub type xkb_layout_index_t = u32;
pub type xkb_layout_mask_t = u32;
pub type xkb_level_index_t = u32;
pub type xkb_mod_index_t = u32;
pub type xkb_mod_mask_t = u32;
pub type xkb_led_index_t = u32;
pub type xkb_led_mask_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xkb_rule_names {
    pub rules: *const ::std::os::raw::c_char,
    pub model: *const ::std::os::raw::c_char,
    pub layout: *const ::std::os::raw::c_char,
    pub variant: *const ::std::os::raw::c_char,
    pub options: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xkb_rule_names"][::std::mem::size_of::<xkb_rule_names>() - 40usize];
    ["Alignment of xkb_rule_names"][::std::mem::align_of::<xkb_rule_names>() - 8usize];
    ["Offset of field: xkb_rule_names::rules"]
        [::std::mem::offset_of!(xkb_rule_names, rules) - 0usize];
    ["Offset of field: xkb_rule_names::model"]
        [::std::mem::offset_of!(xkb_rule_names, model) - 8usize];
    ["Offset of field: xkb_rule_names::layout"]
        [::std::mem::offset_of!(xkb_rule_names, layout) - 16usize];
    ["Offset of field: xkb_rule_names::variant"]
        [::std::mem::offset_of!(xkb_rule_names, variant) - 24usize];
    ["Offset of field: xkb_rule_names::options"]
        [::std::mem::offset_of!(xkb_rule_names, options) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xkb_component_names {
    pub keycodes: *mut ::std::os::raw::c_char,
    pub compatibility: *mut ::std::os::raw::c_char,
    pub geometry: *mut ::std::os::raw::c_char,
    pub symbols: *mut ::std::os::raw::c_char,
    pub types: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xkb_component_names"][::std::mem::size_of::<xkb_component_names>() - 40usize];
    ["Alignment of xkb_component_names"][::std::mem::align_of::<xkb_component_names>() - 8usize];
    ["Offset of field: xkb_component_names::keycodes"]
        [::std::mem::offset_of!(xkb_component_names, keycodes) - 0usize];
    ["Offset of field: xkb_component_names::compatibility"]
        [::std::mem::offset_of!(xkb_component_names, compatibility) - 8usize];
    ["Offset of field: xkb_component_names::geometry"]
        [::std::mem::offset_of!(xkb_component_names, geometry) - 16usize];
    ["Offset of field: xkb_component_names::symbols"]
        [::std::mem::offset_of!(xkb_component_names, symbols) - 24usize];
    ["Offset of field: xkb_component_names::types"]
        [::std::mem::offset_of!(xkb_component_names, types) - 32usize];
};
unsafe extern "C" {
    pub fn xkb_components_names_from_rules(
        context: *mut xkb_context,
        rmlvo_in: *const xkb_rule_names,
        rmlvo_out: *mut xkb_rule_names,
        components_out: *mut xkb_component_names,
    ) -> bool;
}
unsafe extern "C" {
    pub fn xkb_keysym_get_name(
        keysym: xkb_keysym_t,
        buffer: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
pub const xkb_keysym_flags_XKB_KEYSYM_NO_FLAGS: xkb_keysym_flags = 0;
pub const xkb_keysym_flags_XKB_KEYSYM_CASE_INSENSITIVE: xkb_keysym_flags = 1;
pub type xkb_keysym_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_keysym_from_name(
        name: *const ::std::os::raw::c_char,
        flags: xkb_keysym_flags,
    ) -> xkb_keysym_t;
}
unsafe extern "C" {
    pub fn xkb_keysym_to_utf8(
        keysym: xkb_keysym_t,
        buffer: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_keysym_to_utf32(keysym: xkb_keysym_t) -> u32;
}
unsafe extern "C" {
    pub fn xkb_utf32_to_keysym(ucs: u32) -> xkb_keysym_t;
}
unsafe extern "C" {
    pub fn xkb_keysym_to_upper(ks: xkb_keysym_t) -> xkb_keysym_t;
}
unsafe extern "C" {
    pub fn xkb_keysym_to_lower(ks: xkb_keysym_t) -> xkb_keysym_t;
}
pub const XKB_CONTEXT_NO_FLAGS: xkb_context_flags = 0;
pub const xkb_context_flags_XKB_CONTEXT_NO_DEFAULT_INCLUDES: xkb_context_flags = 1;
pub const xkb_context_flags_XKB_CONTEXT_NO_ENVIRONMENT_NAMES: xkb_context_flags = 2;
pub const xkb_context_flags_XKB_CONTEXT_NO_SECURE_GETENV: xkb_context_flags = 4;
pub type xkb_context_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_context_new(flags: xkb_context_flags) -> *mut xkb_context;
}
unsafe extern "C" {
    pub fn xkb_context_ref(context: *mut xkb_context) -> *mut xkb_context;
}
unsafe extern "C" {
    pub fn xkb_context_unref(context: *mut xkb_context);
}
unsafe extern "C" {
    pub fn xkb_context_set_user_data(
        context: *mut xkb_context,
        user_data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn xkb_context_get_user_data(context: *mut xkb_context) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xkb_context_include_path_append(
        context: *mut xkb_context,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_context_include_path_append_default(
        context: *mut xkb_context,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_context_include_path_reset_defaults(
        context: *mut xkb_context,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_context_include_path_clear(context: *mut xkb_context);
}
unsafe extern "C" {
    pub fn xkb_context_num_include_paths(context: *mut xkb_context) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xkb_context_include_path_get(
        context: *mut xkb_context,
        index: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
pub const xkb_log_level_XKB_LOG_LEVEL_CRITICAL: xkb_log_level = 10;
pub const xkb_log_level_XKB_LOG_LEVEL_ERROR: xkb_log_level = 20;
pub const xkb_log_level_XKB_LOG_LEVEL_WARNING: xkb_log_level = 30;
pub const xkb_log_level_XKB_LOG_LEVEL_INFO: xkb_log_level = 40;
pub const xkb_log_level_XKB_LOG_LEVEL_DEBUG: xkb_log_level = 50;
pub type xkb_log_level = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_context_set_log_level(context: *mut xkb_context, level: xkb_log_level);
}
unsafe extern "C" {
    pub fn xkb_context_get_log_level(context: *mut xkb_context) -> xkb_log_level;
}
unsafe extern "C" {
    pub fn xkb_context_set_log_verbosity(
        context: *mut xkb_context,
        verbosity: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn xkb_context_get_log_verbosity(context: *mut xkb_context) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_context_set_log_fn(
        context: *mut xkb_context,
        log_fn: ::std::option::Option<
            unsafe extern "C" fn(
                context: *mut xkb_context,
                level: xkb_log_level,
                format: *const ::std::os::raw::c_char,
                args: *mut __va_list_tag,
            ),
        >,
    );
}
pub const XKB_KEYMAP_COMPILE_NO_FLAGS: xkb_keymap_compile_flags = 0;
pub type xkb_keymap_compile_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_keymap_new_from_names(
        context: *mut xkb_context,
        names: *const xkb_rule_names,
        flags: xkb_keymap_compile_flags,
    ) -> *mut xkb_keymap;
}
pub const XKB_KEYMAP_FORMAT_TEXT_V1: xkb_keymap_format = 1;
pub type xkb_keymap_format = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_keymap_new_from_file(
        context: *mut xkb_context,
        file: *mut FILE,
        format: xkb_keymap_format,
        flags: xkb_keymap_compile_flags,
    ) -> *mut xkb_keymap;
}
unsafe extern "C" {
    pub fn xkb_keymap_new_from_string(
        context: *mut xkb_context,
        string: *const ::std::os::raw::c_char,
        format: xkb_keymap_format,
        flags: xkb_keymap_compile_flags,
    ) -> *mut xkb_keymap;
}
unsafe extern "C" {
    pub fn xkb_keymap_new_from_buffer(
        context: *mut xkb_context,
        buffer: *const ::std::os::raw::c_char,
        length: usize,
        format: xkb_keymap_format,
        flags: xkb_keymap_compile_flags,
    ) -> *mut xkb_keymap;
}
unsafe extern "C" {
    pub fn xkb_keymap_ref(keymap: *mut xkb_keymap) -> *mut xkb_keymap;
}
unsafe extern "C" {
    pub fn xkb_keymap_unref(keymap: *mut xkb_keymap);
}
unsafe extern "C" {
    pub fn xkb_keymap_get_as_string(
        keymap: *mut xkb_keymap,
        format: xkb_keymap_format,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xkb_keymap_min_keycode(keymap: *mut xkb_keymap) -> xkb_keycode_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_max_keycode(keymap: *mut xkb_keymap) -> xkb_keycode_t;
}
pub type xkb_keymap_key_iter_t = ::std::option::Option<
    unsafe extern "C" fn(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
        data: *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "C" {
    pub fn xkb_keymap_key_for_each(
        keymap: *mut xkb_keymap,
        iter: xkb_keymap_key_iter_t,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn xkb_keymap_key_get_name(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xkb_keymap_key_by_name(
        keymap: *mut xkb_keymap,
        name: *const ::std::os::raw::c_char,
    ) -> xkb_keycode_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_num_mods(keymap: *mut xkb_keymap) -> xkb_mod_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_mod_get_name(
        keymap: *mut xkb_keymap,
        idx: xkb_mod_index_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xkb_keymap_mod_get_index(
        keymap: *mut xkb_keymap,
        name: *const ::std::os::raw::c_char,
    ) -> xkb_mod_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_num_layouts(keymap: *mut xkb_keymap) -> xkb_layout_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_layout_get_name(
        keymap: *mut xkb_keymap,
        idx: xkb_layout_index_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xkb_keymap_layout_get_index(
        keymap: *mut xkb_keymap,
        name: *const ::std::os::raw::c_char,
    ) -> xkb_layout_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_num_leds(keymap: *mut xkb_keymap) -> xkb_led_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_led_get_name(
        keymap: *mut xkb_keymap,
        idx: xkb_led_index_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xkb_keymap_led_get_index(
        keymap: *mut xkb_keymap,
        name: *const ::std::os::raw::c_char,
    ) -> xkb_led_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_num_layouts_for_key(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
    ) -> xkb_layout_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_num_levels_for_key(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
        layout: xkb_layout_index_t,
    ) -> xkb_level_index_t;
}
unsafe extern "C" {
    pub fn xkb_keymap_key_get_mods_for_level(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
        layout: xkb_layout_index_t,
        level: xkb_level_index_t,
        masks_out: *mut xkb_mod_mask_t,
        masks_size: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn xkb_keymap_key_get_syms_by_level(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
        layout: xkb_layout_index_t,
        level: xkb_level_index_t,
        syms_out: *mut *const xkb_keysym_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_keymap_key_repeats(
        keymap: *mut xkb_keymap,
        key: xkb_keycode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_new(keymap: *mut xkb_keymap) -> *mut xkb_state;
}
unsafe extern "C" {
    pub fn xkb_state_ref(state: *mut xkb_state) -> *mut xkb_state;
}
unsafe extern "C" {
    pub fn xkb_state_unref(state: *mut xkb_state);
}
unsafe extern "C" {
    pub fn xkb_state_get_keymap(state: *mut xkb_state) -> *mut xkb_keymap;
}
pub const XKB_KEY_UP: xkb_key_direction = 0;
pub const XKB_KEY_DOWN: xkb_key_direction = 1;
pub type xkb_key_direction = ::std::os::raw::c_uint;
pub const XKB_STATE_MODS_DEPRESSED: xkb_state_component = 1;
pub const XKB_STATE_MODS_LATCHED: xkb_state_component = 2;
pub const XKB_STATE_MODS_LOCKED: xkb_state_component = 4;
pub const XKB_STATE_MODS_EFFECTIVE: xkb_state_component = 8;
pub const XKB_STATE_LAYOUT_DEPRESSED: xkb_state_component = 16;
pub const XKB_STATE_LAYOUT_LATCHED: xkb_state_component = 32;
pub const XKB_STATE_LAYOUT_LOCKED: xkb_state_component = 64;
pub const XKB_STATE_LAYOUT_EFFECTIVE: xkb_state_component = 128;
pub const XKB_STATE_LEDS: xkb_state_component = 256;
pub type xkb_state_component = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_state_update_key(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        direction: xkb_key_direction,
    ) -> xkb_state_component;
}
unsafe extern "C" {
    pub fn xkb_state_update_mask(
        state: *mut xkb_state,
        depressed_mods: xkb_mod_mask_t,
        latched_mods: xkb_mod_mask_t,
        locked_mods: xkb_mod_mask_t,
        depressed_layout: xkb_layout_index_t,
        latched_layout: xkb_layout_index_t,
        locked_layout: xkb_layout_index_t,
    ) -> xkb_state_component;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_syms(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        syms_out: *mut *const xkb_keysym_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_utf8(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        buffer: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_utf32(state: *mut xkb_state, key: xkb_keycode_t) -> u32;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_one_sym(state: *mut xkb_state, key: xkb_keycode_t) -> xkb_keysym_t;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_layout(
        state: *mut xkb_state,
        key: xkb_keycode_t,
    ) -> xkb_layout_index_t;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_level(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        layout: xkb_layout_index_t,
    ) -> xkb_level_index_t;
}
pub const XKB_STATE_MATCH_ANY: xkb_state_match = 1;
pub const XKB_STATE_MATCH_ALL: xkb_state_match = 2;
pub const XKB_STATE_MATCH_NON_EXCLUSIVE: xkb_state_match = 65536;
pub type xkb_state_match = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_state_serialize_mods(
        state: *mut xkb_state,
        components: xkb_state_component,
    ) -> xkb_mod_mask_t;
}
unsafe extern "C" {
    pub fn xkb_state_serialize_layout(
        state: *mut xkb_state,
        components: xkb_state_component,
    ) -> xkb_layout_index_t;
}
unsafe extern "C" {
    pub fn xkb_state_mod_name_is_active(
        state: *mut xkb_state,
        name: *const ::std::os::raw::c_char,
        type_: xkb_state_component,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_mod_names_are_active(
        state: *mut xkb_state,
        type_: xkb_state_component,
        match_: xkb_state_match,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_mod_index_is_active(
        state: *mut xkb_state,
        idx: xkb_mod_index_t,
        type_: xkb_state_component,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_mod_indices_are_active(
        state: *mut xkb_state,
        type_: xkb_state_component,
        match_: xkb_state_match,
        ...
    ) -> ::std::os::raw::c_int;
}
pub const XKB_CONSUMED_MODE_XKB: xkb_consumed_mode = 0;
pub const XKB_CONSUMED_MODE_GTK: xkb_consumed_mode = 1;
pub type xkb_consumed_mode = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_state_key_get_consumed_mods2(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        mode: xkb_consumed_mode,
    ) -> xkb_mod_mask_t;
}
unsafe extern "C" {
    pub fn xkb_state_key_get_consumed_mods(
        state: *mut xkb_state,
        key: xkb_keycode_t,
    ) -> xkb_mod_mask_t;
}
unsafe extern "C" {
    pub fn xkb_state_mod_index_is_consumed2(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        idx: xkb_mod_index_t,
        mode: xkb_consumed_mode,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_mod_index_is_consumed(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        idx: xkb_mod_index_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_mod_mask_remove_consumed(
        state: *mut xkb_state,
        key: xkb_keycode_t,
        mask: xkb_mod_mask_t,
    ) -> xkb_mod_mask_t;
}
unsafe extern "C" {
    pub fn xkb_state_layout_name_is_active(
        state: *mut xkb_state,
        name: *const ::std::os::raw::c_char,
        type_: xkb_state_component,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_layout_index_is_active(
        state: *mut xkb_state,
        idx: xkb_layout_index_t,
        type_: xkb_state_component,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_led_name_is_active(
        state: *mut xkb_state,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_state_led_index_is_active(
        state: *mut xkb_state,
        idx: xkb_led_index_t,
    ) -> ::std::os::raw::c_int;
}
pub const XKB_X11_SETUP_XKB_EXTENSION_NO_FLAGS:
    xkb_x11_setup_xkb_extension_flags = 0;
pub type xkb_x11_setup_xkb_extension_flags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xkb_x11_setup_xkb_extension(
        connection: *mut xcb_connection_t,
        major_xkb_version: u16,
        minor_xkb_version: u16,
        flags: xkb_x11_setup_xkb_extension_flags,
        major_xkb_version_out: *mut u16,
        minor_xkb_version_out: *mut u16,
        base_event_out: *mut u8,
        base_error_out: *mut u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xkb_x11_get_core_keyboard_device_id(connection: *mut xcb_connection_t) -> i32;
}
unsafe extern "C" {
    pub fn xkb_x11_keymap_new_from_device(
        context: *mut xkb_context,
        connection: *mut xcb_connection_t,
        device_id: i32,
        flags: xkb_keymap_compile_flags,
    ) -> *mut xkb_keymap;
}
unsafe extern "C" {
    pub fn xkb_x11_state_new_from_device(
        keymap: *mut xkb_keymap,
        connection: *mut xcb_connection_t,
        device_id: i32,
    ) -> *mut xkb_state;
}

pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbStateRec {
    pub group: ::std::os::raw::c_uchar,
    pub locked_group: ::std::os::raw::c_uchar,
    pub base_group: ::std::os::raw::c_ushort,
    pub latched_group: ::std::os::raw::c_ushort,
    pub mods: ::std::os::raw::c_uchar,
    pub base_mods: ::std::os::raw::c_uchar,
    pub latched_mods: ::std::os::raw::c_uchar,
    pub locked_mods: ::std::os::raw::c_uchar,
    pub compat_state: ::std::os::raw::c_uchar,
    pub grab_mods: ::std::os::raw::c_uchar,
    pub compat_grab_mods: ::std::os::raw::c_uchar,
    pub lookup_mods: ::std::os::raw::c_uchar,
    pub compat_lookup_mods: ::std::os::raw::c_uchar,
    pub ptr_buttons: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbStateRec"][::std::mem::size_of::<_XkbStateRec>() - 18usize];
    ["Alignment of _XkbStateRec"][::std::mem::align_of::<_XkbStateRec>() - 2usize];
    ["Offset of field: _XkbStateRec::group"][::std::mem::offset_of!(_XkbStateRec, group) - 0usize];
    ["Offset of field: _XkbStateRec::locked_group"]
        [::std::mem::offset_of!(_XkbStateRec, locked_group) - 1usize];
    ["Offset of field: _XkbStateRec::base_group"]
        [::std::mem::offset_of!(_XkbStateRec, base_group) - 2usize];
    ["Offset of field: _XkbStateRec::latched_group"]
        [::std::mem::offset_of!(_XkbStateRec, latched_group) - 4usize];
    ["Offset of field: _XkbStateRec::mods"][::std::mem::offset_of!(_XkbStateRec, mods) - 6usize];
    ["Offset of field: _XkbStateRec::base_mods"]
        [::std::mem::offset_of!(_XkbStateRec, base_mods) - 7usize];
    ["Offset of field: _XkbStateRec::latched_mods"]
        [::std::mem::offset_of!(_XkbStateRec, latched_mods) - 8usize];
    ["Offset of field: _XkbStateRec::locked_mods"]
        [::std::mem::offset_of!(_XkbStateRec, locked_mods) - 9usize];
    ["Offset of field: _XkbStateRec::compat_state"]
        [::std::mem::offset_of!(_XkbStateRec, compat_state) - 10usize];
    ["Offset of field: _XkbStateRec::grab_mods"]
        [::std::mem::offset_of!(_XkbStateRec, grab_mods) - 11usize];
    ["Offset of field: _XkbStateRec::compat_grab_mods"]
        [::std::mem::offset_of!(_XkbStateRec, compat_grab_mods) - 12usize];
    ["Offset of field: _XkbStateRec::lookup_mods"]
        [::std::mem::offset_of!(_XkbStateRec, lookup_mods) - 13usize];
    ["Offset of field: _XkbStateRec::compat_lookup_mods"]
        [::std::mem::offset_of!(_XkbStateRec, compat_lookup_mods) - 14usize];
    ["Offset of field: _XkbStateRec::ptr_buttons"]
        [::std::mem::offset_of!(_XkbStateRec, ptr_buttons) - 16usize];
};
pub type XkbStateRec = _XkbStateRec;
pub type XkbStatePtr = *mut _XkbStateRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMods {
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub vmods: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMods"][::std::mem::size_of::<_XkbMods>() - 4usize];
    ["Alignment of _XkbMods"][::std::mem::align_of::<_XkbMods>() - 2usize];
    ["Offset of field: _XkbMods::mask"][::std::mem::offset_of!(_XkbMods, mask) - 0usize];
    ["Offset of field: _XkbMods::real_mods"][::std::mem::offset_of!(_XkbMods, real_mods) - 1usize];
    ["Offset of field: _XkbMods::vmods"][::std::mem::offset_of!(_XkbMods, vmods) - 2usize];
};
pub type XkbModsRec = _XkbMods;
pub type XkbModsPtr = *mut _XkbMods;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKTMapEntry {
    pub active: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_uchar,
    pub mods: XkbModsRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKTMapEntry"][::std::mem::size_of::<_XkbKTMapEntry>() - 12usize];
    ["Alignment of _XkbKTMapEntry"][::std::mem::align_of::<_XkbKTMapEntry>() - 4usize];
    ["Offset of field: _XkbKTMapEntry::active"]
        [::std::mem::offset_of!(_XkbKTMapEntry, active) - 0usize];
    ["Offset of field: _XkbKTMapEntry::level"]
        [::std::mem::offset_of!(_XkbKTMapEntry, level) - 4usize];
    ["Offset of field: _XkbKTMapEntry::mods"]
        [::std::mem::offset_of!(_XkbKTMapEntry, mods) - 6usize];
};
pub type XkbKTMapEntryRec = _XkbKTMapEntry;
pub type XkbKTMapEntryPtr = *mut _XkbKTMapEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyType {
    pub mods: XkbModsRec,
    pub num_levels: ::std::os::raw::c_uchar,
    pub map_count: ::std::os::raw::c_uchar,
    pub map: XkbKTMapEntryPtr,
    pub preserve: XkbModsPtr,
    pub name: Atom,
    pub level_names: *mut Atom,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyType"][::std::mem::size_of::<_XkbKeyType>() - 40usize];
    ["Alignment of _XkbKeyType"][::std::mem::align_of::<_XkbKeyType>() - 8usize];
    ["Offset of field: _XkbKeyType::mods"][::std::mem::offset_of!(_XkbKeyType, mods) - 0usize];
    ["Offset of field: _XkbKeyType::num_levels"]
        [::std::mem::offset_of!(_XkbKeyType, num_levels) - 4usize];
    ["Offset of field: _XkbKeyType::map_count"]
        [::std::mem::offset_of!(_XkbKeyType, map_count) - 5usize];
    ["Offset of field: _XkbKeyType::map"][::std::mem::offset_of!(_XkbKeyType, map) - 8usize];
    ["Offset of field: _XkbKeyType::preserve"]
        [::std::mem::offset_of!(_XkbKeyType, preserve) - 16usize];
    ["Offset of field: _XkbKeyType::name"][::std::mem::offset_of!(_XkbKeyType, name) - 24usize];
    ["Offset of field: _XkbKeyType::level_names"]
        [::std::mem::offset_of!(_XkbKeyType, level_names) - 32usize];
};
pub type XkbKeyTypeRec = _XkbKeyType;
pub type XkbKeyTypePtr = *mut _XkbKeyType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbBehavior {
    pub type_: ::std::os::raw::c_uchar,
    pub data: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbBehavior"][::std::mem::size_of::<_XkbBehavior>() - 2usize];
    ["Alignment of _XkbBehavior"][::std::mem::align_of::<_XkbBehavior>() - 1usize];
    ["Offset of field: _XkbBehavior::type_"][::std::mem::offset_of!(_XkbBehavior, type_) - 0usize];
    ["Offset of field: _XkbBehavior::data"][::std::mem::offset_of!(_XkbBehavior, data) - 1usize];
};
pub type XkbBehavior = _XkbBehavior;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAnyAction {
    pub type_: ::std::os::raw::c_uchar,
    pub data: [::std::os::raw::c_uchar; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAnyAction"][::std::mem::size_of::<_XkbAnyAction>() - 8usize];
    ["Alignment of _XkbAnyAction"][::std::mem::align_of::<_XkbAnyAction>() - 1usize];
    ["Offset of field: _XkbAnyAction::type_"]
        [::std::mem::offset_of!(_XkbAnyAction, type_) - 0usize];
    ["Offset of field: _XkbAnyAction::data"][::std::mem::offset_of!(_XkbAnyAction, data) - 1usize];
};
pub type XkbAnyAction = _XkbAnyAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbModAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
    pub vmods2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbModAction"][::std::mem::size_of::<_XkbModAction>() - 6usize];
    ["Alignment of _XkbModAction"][::std::mem::align_of::<_XkbModAction>() - 1usize];
    ["Offset of field: _XkbModAction::type_"]
        [::std::mem::offset_of!(_XkbModAction, type_) - 0usize];
    ["Offset of field: _XkbModAction::flags"]
        [::std::mem::offset_of!(_XkbModAction, flags) - 1usize];
    ["Offset of field: _XkbModAction::mask"][::std::mem::offset_of!(_XkbModAction, mask) - 2usize];
    ["Offset of field: _XkbModAction::real_mods"]
        [::std::mem::offset_of!(_XkbModAction, real_mods) - 3usize];
    ["Offset of field: _XkbModAction::vmods1"]
        [::std::mem::offset_of!(_XkbModAction, vmods1) - 4usize];
    ["Offset of field: _XkbModAction::vmods2"]
        [::std::mem::offset_of!(_XkbModAction, vmods2) - 5usize];
};
pub type XkbModAction = _XkbModAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbGroupAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub group_XXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbGroupAction"][::std::mem::size_of::<_XkbGroupAction>() - 3usize];
    ["Alignment of _XkbGroupAction"][::std::mem::align_of::<_XkbGroupAction>() - 1usize];
    ["Offset of field: _XkbGroupAction::type_"]
        [::std::mem::offset_of!(_XkbGroupAction, type_) - 0usize];
    ["Offset of field: _XkbGroupAction::flags"]
        [::std::mem::offset_of!(_XkbGroupAction, flags) - 1usize];
    ["Offset of field: _XkbGroupAction::group_XXX"]
        [::std::mem::offset_of!(_XkbGroupAction, group_XXX) - 2usize];
};
pub type XkbGroupAction = _XkbGroupAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbISOAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub mask: ::std::os::raw::c_uchar,
    pub real_mods: ::std::os::raw::c_uchar,
    pub group_XXX: ::std::os::raw::c_char,
    pub affect: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
    pub vmods2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbISOAction"][::std::mem::size_of::<_XkbISOAction>() - 8usize];
    ["Alignment of _XkbISOAction"][::std::mem::align_of::<_XkbISOAction>() - 1usize];
    ["Offset of field: _XkbISOAction::type_"]
        [::std::mem::offset_of!(_XkbISOAction, type_) - 0usize];
    ["Offset of field: _XkbISOAction::flags"]
        [::std::mem::offset_of!(_XkbISOAction, flags) - 1usize];
    ["Offset of field: _XkbISOAction::mask"][::std::mem::offset_of!(_XkbISOAction, mask) - 2usize];
    ["Offset of field: _XkbISOAction::real_mods"]
        [::std::mem::offset_of!(_XkbISOAction, real_mods) - 3usize];
    ["Offset of field: _XkbISOAction::group_XXX"]
        [::std::mem::offset_of!(_XkbISOAction, group_XXX) - 4usize];
    ["Offset of field: _XkbISOAction::affect"]
        [::std::mem::offset_of!(_XkbISOAction, affect) - 5usize];
    ["Offset of field: _XkbISOAction::vmods1"]
        [::std::mem::offset_of!(_XkbISOAction, vmods1) - 6usize];
    ["Offset of field: _XkbISOAction::vmods2"]
        [::std::mem::offset_of!(_XkbISOAction, vmods2) - 7usize];
};
pub type XkbISOAction = _XkbISOAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub high_XXX: ::std::os::raw::c_uchar,
    pub low_XXX: ::std::os::raw::c_uchar,
    pub high_YYY: ::std::os::raw::c_uchar,
    pub low_YYY: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrAction"][::std::mem::size_of::<_XkbPtrAction>() - 6usize];
    ["Alignment of _XkbPtrAction"][::std::mem::align_of::<_XkbPtrAction>() - 1usize];
    ["Offset of field: _XkbPtrAction::type_"]
        [::std::mem::offset_of!(_XkbPtrAction, type_) - 0usize];
    ["Offset of field: _XkbPtrAction::flags"]
        [::std::mem::offset_of!(_XkbPtrAction, flags) - 1usize];
    ["Offset of field: _XkbPtrAction::high_XXX"]
        [::std::mem::offset_of!(_XkbPtrAction, high_XXX) - 2usize];
    ["Offset of field: _XkbPtrAction::low_XXX"]
        [::std::mem::offset_of!(_XkbPtrAction, low_XXX) - 3usize];
    ["Offset of field: _XkbPtrAction::high_YYY"]
        [::std::mem::offset_of!(_XkbPtrAction, high_YYY) - 4usize];
    ["Offset of field: _XkbPtrAction::low_YYY"]
        [::std::mem::offset_of!(_XkbPtrAction, low_YYY) - 5usize];
};
pub type XkbPtrAction = _XkbPtrAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrBtnAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_uchar,
    pub button: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrBtnAction"][::std::mem::size_of::<_XkbPtrBtnAction>() - 4usize];
    ["Alignment of _XkbPtrBtnAction"][::std::mem::align_of::<_XkbPtrBtnAction>() - 1usize];
    ["Offset of field: _XkbPtrBtnAction::type_"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, type_) - 0usize];
    ["Offset of field: _XkbPtrBtnAction::flags"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, flags) - 1usize];
    ["Offset of field: _XkbPtrBtnAction::count"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, count) - 2usize];
    ["Offset of field: _XkbPtrBtnAction::button"]
        [::std::mem::offset_of!(_XkbPtrBtnAction, button) - 3usize];
};
pub type XkbPtrBtnAction = _XkbPtrBtnAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbPtrDfltAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub affect: ::std::os::raw::c_uchar,
    pub valueXXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbPtrDfltAction"][::std::mem::size_of::<_XkbPtrDfltAction>() - 4usize];
    ["Alignment of _XkbPtrDfltAction"][::std::mem::align_of::<_XkbPtrDfltAction>() - 1usize];
    ["Offset of field: _XkbPtrDfltAction::type_"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, type_) - 0usize];
    ["Offset of field: _XkbPtrDfltAction::flags"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, flags) - 1usize];
    ["Offset of field: _XkbPtrDfltAction::affect"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, affect) - 2usize];
    ["Offset of field: _XkbPtrDfltAction::valueXXX"]
        [::std::mem::offset_of!(_XkbPtrDfltAction, valueXXX) - 3usize];
};
pub type XkbPtrDfltAction = _XkbPtrDfltAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSwitchScreenAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub screenXXX: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSwitchScreenAction"][::std::mem::size_of::<_XkbSwitchScreenAction>() - 3usize];
    ["Alignment of _XkbSwitchScreenAction"]
        [::std::mem::align_of::<_XkbSwitchScreenAction>() - 1usize];
    ["Offset of field: _XkbSwitchScreenAction::type_"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, type_) - 0usize];
    ["Offset of field: _XkbSwitchScreenAction::flags"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, flags) - 1usize];
    ["Offset of field: _XkbSwitchScreenAction::screenXXX"]
        [::std::mem::offset_of!(_XkbSwitchScreenAction, screenXXX) - 2usize];
};
pub type XkbSwitchScreenAction = _XkbSwitchScreenAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCtrlsAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub ctrls3: ::std::os::raw::c_uchar,
    pub ctrls2: ::std::os::raw::c_uchar,
    pub ctrls1: ::std::os::raw::c_uchar,
    pub ctrls0: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCtrlsAction"][::std::mem::size_of::<_XkbCtrlsAction>() - 6usize];
    ["Alignment of _XkbCtrlsAction"][::std::mem::align_of::<_XkbCtrlsAction>() - 1usize];
    ["Offset of field: _XkbCtrlsAction::type_"]
        [::std::mem::offset_of!(_XkbCtrlsAction, type_) - 0usize];
    ["Offset of field: _XkbCtrlsAction::flags"]
        [::std::mem::offset_of!(_XkbCtrlsAction, flags) - 1usize];
    ["Offset of field: _XkbCtrlsAction::ctrls3"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls3) - 2usize];
    ["Offset of field: _XkbCtrlsAction::ctrls2"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls2) - 3usize];
    ["Offset of field: _XkbCtrlsAction::ctrls1"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls1) - 4usize];
    ["Offset of field: _XkbCtrlsAction::ctrls0"]
        [::std::mem::offset_of!(_XkbCtrlsAction, ctrls0) - 5usize];
};
pub type XkbCtrlsAction = _XkbCtrlsAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMessageAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub message: [::std::os::raw::c_uchar; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMessageAction"][::std::mem::size_of::<_XkbMessageAction>() - 8usize];
    ["Alignment of _XkbMessageAction"][::std::mem::align_of::<_XkbMessageAction>() - 1usize];
    ["Offset of field: _XkbMessageAction::type_"]
        [::std::mem::offset_of!(_XkbMessageAction, type_) - 0usize];
    ["Offset of field: _XkbMessageAction::flags"]
        [::std::mem::offset_of!(_XkbMessageAction, flags) - 1usize];
    ["Offset of field: _XkbMessageAction::message"]
        [::std::mem::offset_of!(_XkbMessageAction, message) - 2usize];
};
pub type XkbMessageAction = _XkbMessageAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbRedirectKeyAction {
    pub type_: ::std::os::raw::c_uchar,
    pub new_key: ::std::os::raw::c_uchar,
    pub mods_mask: ::std::os::raw::c_uchar,
    pub mods: ::std::os::raw::c_uchar,
    pub vmods_mask0: ::std::os::raw::c_uchar,
    pub vmods_mask1: ::std::os::raw::c_uchar,
    pub vmods0: ::std::os::raw::c_uchar,
    pub vmods1: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbRedirectKeyAction"][::std::mem::size_of::<_XkbRedirectKeyAction>() - 8usize];
    ["Alignment of _XkbRedirectKeyAction"]
        [::std::mem::align_of::<_XkbRedirectKeyAction>() - 1usize];
    ["Offset of field: _XkbRedirectKeyAction::type_"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, type_) - 0usize];
    ["Offset of field: _XkbRedirectKeyAction::new_key"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, new_key) - 1usize];
    ["Offset of field: _XkbRedirectKeyAction::mods_mask"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, mods_mask) - 2usize];
    ["Offset of field: _XkbRedirectKeyAction::mods"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, mods) - 3usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods_mask0"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods_mask0) - 4usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods_mask1"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods_mask1) - 5usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods0"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods0) - 6usize];
    ["Offset of field: _XkbRedirectKeyAction::vmods1"]
        [::std::mem::offset_of!(_XkbRedirectKeyAction, vmods1) - 7usize];
};
pub type XkbRedirectKeyAction = _XkbRedirectKeyAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceBtnAction {
    pub type_: ::std::os::raw::c_uchar,
    pub flags: ::std::os::raw::c_uchar,
    pub count: ::std::os::raw::c_uchar,
    pub button: ::std::os::raw::c_uchar,
    pub device: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceBtnAction"][::std::mem::size_of::<_XkbDeviceBtnAction>() - 5usize];
    ["Alignment of _XkbDeviceBtnAction"][::std::mem::align_of::<_XkbDeviceBtnAction>() - 1usize];
    ["Offset of field: _XkbDeviceBtnAction::type_"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, type_) - 0usize];
    ["Offset of field: _XkbDeviceBtnAction::flags"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, flags) - 1usize];
    ["Offset of field: _XkbDeviceBtnAction::count"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, count) - 2usize];
    ["Offset of field: _XkbDeviceBtnAction::button"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, button) - 3usize];
    ["Offset of field: _XkbDeviceBtnAction::device"]
        [::std::mem::offset_of!(_XkbDeviceBtnAction, device) - 4usize];
};
pub type XkbDeviceBtnAction = _XkbDeviceBtnAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceValuatorAction {
    pub type_: ::std::os::raw::c_uchar,
    pub device: ::std::os::raw::c_uchar,
    pub v1_what: ::std::os::raw::c_uchar,
    pub v1_ndx: ::std::os::raw::c_uchar,
    pub v1_value: ::std::os::raw::c_uchar,
    pub v2_what: ::std::os::raw::c_uchar,
    pub v2_ndx: ::std::os::raw::c_uchar,
    pub v2_value: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceValuatorAction"]
        [::std::mem::size_of::<_XkbDeviceValuatorAction>() - 8usize];
    ["Alignment of _XkbDeviceValuatorAction"]
        [::std::mem::align_of::<_XkbDeviceValuatorAction>() - 1usize];
    ["Offset of field: _XkbDeviceValuatorAction::type_"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, type_) - 0usize];
    ["Offset of field: _XkbDeviceValuatorAction::device"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, device) - 1usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_what"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_what) - 2usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_ndx"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_ndx) - 3usize];
    ["Offset of field: _XkbDeviceValuatorAction::v1_value"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v1_value) - 4usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_what"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_what) - 5usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_ndx"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_ndx) - 6usize];
    ["Offset of field: _XkbDeviceValuatorAction::v2_value"]
        [::std::mem::offset_of!(_XkbDeviceValuatorAction, v2_value) - 7usize];
};
pub type XkbDeviceValuatorAction = _XkbDeviceValuatorAction;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XkbAction {
    pub any: XkbAnyAction,
    pub mods: XkbModAction,
    pub group: XkbGroupAction,
    pub iso: XkbISOAction,
    pub ptr: XkbPtrAction,
    pub btn: XkbPtrBtnAction,
    pub dflt: XkbPtrDfltAction,
    pub screen: XkbSwitchScreenAction,
    pub ctrls: XkbCtrlsAction,
    pub msg: XkbMessageAction,
    pub redirect: XkbRedirectKeyAction,
    pub devbtn: XkbDeviceBtnAction,
    pub devval: XkbDeviceValuatorAction,
    pub type_: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAction"][::std::mem::size_of::<_XkbAction>() - 8usize];
    ["Alignment of _XkbAction"][::std::mem::align_of::<_XkbAction>() - 1usize];
    ["Offset of field: _XkbAction::any"][::std::mem::offset_of!(_XkbAction, any) - 0usize];
    ["Offset of field: _XkbAction::mods"][::std::mem::offset_of!(_XkbAction, mods) - 0usize];
    ["Offset of field: _XkbAction::group"][::std::mem::offset_of!(_XkbAction, group) - 0usize];
    ["Offset of field: _XkbAction::iso"][::std::mem::offset_of!(_XkbAction, iso) - 0usize];
    ["Offset of field: _XkbAction::ptr"][::std::mem::offset_of!(_XkbAction, ptr) - 0usize];
    ["Offset of field: _XkbAction::btn"][::std::mem::offset_of!(_XkbAction, btn) - 0usize];
    ["Offset of field: _XkbAction::dflt"][::std::mem::offset_of!(_XkbAction, dflt) - 0usize];
    ["Offset of field: _XkbAction::screen"][::std::mem::offset_of!(_XkbAction, screen) - 0usize];
    ["Offset of field: _XkbAction::ctrls"][::std::mem::offset_of!(_XkbAction, ctrls) - 0usize];
    ["Offset of field: _XkbAction::msg"][::std::mem::offset_of!(_XkbAction, msg) - 0usize];
    ["Offset of field: _XkbAction::redirect"]
        [::std::mem::offset_of!(_XkbAction, redirect) - 0usize];
    ["Offset of field: _XkbAction::devbtn"][::std::mem::offset_of!(_XkbAction, devbtn) - 0usize];
    ["Offset of field: _XkbAction::devval"][::std::mem::offset_of!(_XkbAction, devval) - 0usize];
    ["Offset of field: _XkbAction::type_"][::std::mem::offset_of!(_XkbAction, type_) - 0usize];
};
pub type XkbAction = _XkbAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControls {
    pub mk_dflt_btn: ::std::os::raw::c_uchar,
    pub num_groups: ::std::os::raw::c_uchar,
    pub groups_wrap: ::std::os::raw::c_uchar,
    pub internal: XkbModsRec,
    pub ignore_lock: XkbModsRec,
    pub enabled_ctrls: ::std::os::raw::c_uint,
    pub repeat_delay: ::std::os::raw::c_ushort,
    pub repeat_interval: ::std::os::raw::c_ushort,
    pub slow_keys_delay: ::std::os::raw::c_ushort,
    pub debounce_delay: ::std::os::raw::c_ushort,
    pub mk_delay: ::std::os::raw::c_ushort,
    pub mk_interval: ::std::os::raw::c_ushort,
    pub mk_time_to_max: ::std::os::raw::c_ushort,
    pub mk_max_speed: ::std::os::raw::c_ushort,
    pub mk_curve: ::std::os::raw::c_short,
    pub ax_options: ::std::os::raw::c_ushort,
    pub ax_timeout: ::std::os::raw::c_ushort,
    pub axt_opts_mask: ::std::os::raw::c_ushort,
    pub axt_opts_values: ::std::os::raw::c_ushort,
    pub axt_ctrls_mask: ::std::os::raw::c_uint,
    pub axt_ctrls_values: ::std::os::raw::c_uint,
    pub per_key_repeat: [::std::os::raw::c_uchar; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControls"][::std::mem::size_of::<_XkbControls>() - 84usize];
    ["Alignment of _XkbControls"][::std::mem::align_of::<_XkbControls>() - 4usize];
    ["Offset of field: _XkbControls::mk_dflt_btn"]
        [::std::mem::offset_of!(_XkbControls, mk_dflt_btn) - 0usize];
    ["Offset of field: _XkbControls::num_groups"]
        [::std::mem::offset_of!(_XkbControls, num_groups) - 1usize];
    ["Offset of field: _XkbControls::groups_wrap"]
        [::std::mem::offset_of!(_XkbControls, groups_wrap) - 2usize];
    ["Offset of field: _XkbControls::internal"]
        [::std::mem::offset_of!(_XkbControls, internal) - 4usize];
    ["Offset of field: _XkbControls::ignore_lock"]
        [::std::mem::offset_of!(_XkbControls, ignore_lock) - 8usize];
    ["Offset of field: _XkbControls::enabled_ctrls"]
        [::std::mem::offset_of!(_XkbControls, enabled_ctrls) - 12usize];
    ["Offset of field: _XkbControls::repeat_delay"]
        [::std::mem::offset_of!(_XkbControls, repeat_delay) - 16usize];
    ["Offset of field: _XkbControls::repeat_interval"]
        [::std::mem::offset_of!(_XkbControls, repeat_interval) - 18usize];
    ["Offset of field: _XkbControls::slow_keys_delay"]
        [::std::mem::offset_of!(_XkbControls, slow_keys_delay) - 20usize];
    ["Offset of field: _XkbControls::debounce_delay"]
        [::std::mem::offset_of!(_XkbControls, debounce_delay) - 22usize];
    ["Offset of field: _XkbControls::mk_delay"]
        [::std::mem::offset_of!(_XkbControls, mk_delay) - 24usize];
    ["Offset of field: _XkbControls::mk_interval"]
        [::std::mem::offset_of!(_XkbControls, mk_interval) - 26usize];
    ["Offset of field: _XkbControls::mk_time_to_max"]
        [::std::mem::offset_of!(_XkbControls, mk_time_to_max) - 28usize];
    ["Offset of field: _XkbControls::mk_max_speed"]
        [::std::mem::offset_of!(_XkbControls, mk_max_speed) - 30usize];
    ["Offset of field: _XkbControls::mk_curve"]
        [::std::mem::offset_of!(_XkbControls, mk_curve) - 32usize];
    ["Offset of field: _XkbControls::ax_options"]
        [::std::mem::offset_of!(_XkbControls, ax_options) - 34usize];
    ["Offset of field: _XkbControls::ax_timeout"]
        [::std::mem::offset_of!(_XkbControls, ax_timeout) - 36usize];
    ["Offset of field: _XkbControls::axt_opts_mask"]
        [::std::mem::offset_of!(_XkbControls, axt_opts_mask) - 38usize];
    ["Offset of field: _XkbControls::axt_opts_values"]
        [::std::mem::offset_of!(_XkbControls, axt_opts_values) - 40usize];
    ["Offset of field: _XkbControls::axt_ctrls_mask"]
        [::std::mem::offset_of!(_XkbControls, axt_ctrls_mask) - 44usize];
    ["Offset of field: _XkbControls::axt_ctrls_values"]
        [::std::mem::offset_of!(_XkbControls, axt_ctrls_values) - 48usize];
    ["Offset of field: _XkbControls::per_key_repeat"]
        [::std::mem::offset_of!(_XkbControls, per_key_repeat) - 52usize];
};
pub type XkbControlsRec = _XkbControls;
pub type XkbControlsPtr = *mut _XkbControls;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbServerMapRec {
    pub num_acts: ::std::os::raw::c_ushort,
    pub size_acts: ::std::os::raw::c_ushort,
    pub acts: *mut XkbAction,
    pub behaviors: *mut XkbBehavior,
    pub key_acts: *mut ::std::os::raw::c_ushort,
    pub explicit: *mut ::std::os::raw::c_uchar,
    pub vmods: [::std::os::raw::c_uchar; 16usize],
    pub vmodmap: *mut ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbServerMapRec"][::std::mem::size_of::<_XkbServerMapRec>() - 64usize];
    ["Alignment of _XkbServerMapRec"][::std::mem::align_of::<_XkbServerMapRec>() - 8usize];
    ["Offset of field: _XkbServerMapRec::num_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, num_acts) - 0usize];
    ["Offset of field: _XkbServerMapRec::size_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, size_acts) - 2usize];
    ["Offset of field: _XkbServerMapRec::acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, acts) - 8usize];
    ["Offset of field: _XkbServerMapRec::behaviors"]
        [::std::mem::offset_of!(_XkbServerMapRec, behaviors) - 16usize];
    ["Offset of field: _XkbServerMapRec::key_acts"]
        [::std::mem::offset_of!(_XkbServerMapRec, key_acts) - 24usize];
    ["Offset of field: _XkbServerMapRec::explicit"]
        [::std::mem::offset_of!(_XkbServerMapRec, explicit) - 32usize];
    ["Offset of field: _XkbServerMapRec::vmods"]
        [::std::mem::offset_of!(_XkbServerMapRec, vmods) - 40usize];
    ["Offset of field: _XkbServerMapRec::vmodmap"]
        [::std::mem::offset_of!(_XkbServerMapRec, vmodmap) - 56usize];
};
pub type XkbServerMapRec = _XkbServerMapRec;
pub type XkbServerMapPtr = *mut _XkbServerMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSymMapRec {
    pub kt_index: [::std::os::raw::c_uchar; 4usize],
    pub group_info: ::std::os::raw::c_uchar,
    pub width: ::std::os::raw::c_uchar,
    pub offset: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSymMapRec"][::std::mem::size_of::<_XkbSymMapRec>() - 8usize];
    ["Alignment of _XkbSymMapRec"][::std::mem::align_of::<_XkbSymMapRec>() - 2usize];
    ["Offset of field: _XkbSymMapRec::kt_index"]
        [::std::mem::offset_of!(_XkbSymMapRec, kt_index) - 0usize];
    ["Offset of field: _XkbSymMapRec::group_info"]
        [::std::mem::offset_of!(_XkbSymMapRec, group_info) - 4usize];
    ["Offset of field: _XkbSymMapRec::width"]
        [::std::mem::offset_of!(_XkbSymMapRec, width) - 5usize];
    ["Offset of field: _XkbSymMapRec::offset"]
        [::std::mem::offset_of!(_XkbSymMapRec, offset) - 6usize];
};
pub type XkbSymMapRec = _XkbSymMapRec;
pub type XkbSymMapPtr = *mut _XkbSymMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbClientMapRec {
    pub size_types: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub types: XkbKeyTypePtr,
    pub size_syms: ::std::os::raw::c_ushort,
    pub num_syms: ::std::os::raw::c_ushort,
    pub syms: *mut KeySym,
    pub key_sym_map: XkbSymMapPtr,
    pub modmap: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbClientMapRec"][::std::mem::size_of::<_XkbClientMapRec>() - 48usize];
    ["Alignment of _XkbClientMapRec"][::std::mem::align_of::<_XkbClientMapRec>() - 8usize];
    ["Offset of field: _XkbClientMapRec::size_types"]
        [::std::mem::offset_of!(_XkbClientMapRec, size_types) - 0usize];
    ["Offset of field: _XkbClientMapRec::num_types"]
        [::std::mem::offset_of!(_XkbClientMapRec, num_types) - 1usize];
    ["Offset of field: _XkbClientMapRec::types"]
        [::std::mem::offset_of!(_XkbClientMapRec, types) - 8usize];
    ["Offset of field: _XkbClientMapRec::size_syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, size_syms) - 16usize];
    ["Offset of field: _XkbClientMapRec::num_syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, num_syms) - 18usize];
    ["Offset of field: _XkbClientMapRec::syms"]
        [::std::mem::offset_of!(_XkbClientMapRec, syms) - 24usize];
    ["Offset of field: _XkbClientMapRec::key_sym_map"]
        [::std::mem::offset_of!(_XkbClientMapRec, key_sym_map) - 32usize];
    ["Offset of field: _XkbClientMapRec::modmap"]
        [::std::mem::offset_of!(_XkbClientMapRec, modmap) - 40usize];
};
pub type XkbClientMapRec = _XkbClientMapRec;
pub type XkbClientMapPtr = *mut _XkbClientMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbSymInterpretRec {
    pub sym: KeySym,
    pub flags: ::std::os::raw::c_uchar,
    pub match_: ::std::os::raw::c_uchar,
    pub mods: ::std::os::raw::c_uchar,
    pub virtual_mod: ::std::os::raw::c_uchar,
    pub act: XkbAnyAction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbSymInterpretRec"][::std::mem::size_of::<_XkbSymInterpretRec>() - 24usize];
    ["Alignment of _XkbSymInterpretRec"][::std::mem::align_of::<_XkbSymInterpretRec>() - 8usize];
    ["Offset of field: _XkbSymInterpretRec::sym"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, sym) - 0usize];
    ["Offset of field: _XkbSymInterpretRec::flags"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, flags) - 8usize];
    ["Offset of field: _XkbSymInterpretRec::match_"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, match_) - 9usize];
    ["Offset of field: _XkbSymInterpretRec::mods"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, mods) - 10usize];
    ["Offset of field: _XkbSymInterpretRec::virtual_mod"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, virtual_mod) - 11usize];
    ["Offset of field: _XkbSymInterpretRec::act"]
        [::std::mem::offset_of!(_XkbSymInterpretRec, act) - 12usize];
};
pub type XkbSymInterpretRec = _XkbSymInterpretRec;
pub type XkbSymInterpretPtr = *mut _XkbSymInterpretRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatMapRec {
    pub sym_interpret: XkbSymInterpretPtr,
    pub groups: [XkbModsRec; 4usize],
    pub num_si: ::std::os::raw::c_ushort,
    pub size_si: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatMapRec"][::std::mem::size_of::<_XkbCompatMapRec>() - 32usize];
    ["Alignment of _XkbCompatMapRec"][::std::mem::align_of::<_XkbCompatMapRec>() - 8usize];
    ["Offset of field: _XkbCompatMapRec::sym_interpret"]
        [::std::mem::offset_of!(_XkbCompatMapRec, sym_interpret) - 0usize];
    ["Offset of field: _XkbCompatMapRec::groups"]
        [::std::mem::offset_of!(_XkbCompatMapRec, groups) - 8usize];
    ["Offset of field: _XkbCompatMapRec::num_si"]
        [::std::mem::offset_of!(_XkbCompatMapRec, num_si) - 24usize];
    ["Offset of field: _XkbCompatMapRec::size_si"]
        [::std::mem::offset_of!(_XkbCompatMapRec, size_si) - 26usize];
};
pub type XkbCompatMapRec = _XkbCompatMapRec;
pub type XkbCompatMapPtr = *mut _XkbCompatMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorMapRec {
    pub flags: ::std::os::raw::c_uchar,
    pub which_groups: ::std::os::raw::c_uchar,
    pub groups: ::std::os::raw::c_uchar,
    pub which_mods: ::std::os::raw::c_uchar,
    pub mods: XkbModsRec,
    pub ctrls: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorMapRec"][::std::mem::size_of::<_XkbIndicatorMapRec>() - 12usize];
    ["Alignment of _XkbIndicatorMapRec"][::std::mem::align_of::<_XkbIndicatorMapRec>() - 4usize];
    ["Offset of field: _XkbIndicatorMapRec::flags"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, flags) - 0usize];
    ["Offset of field: _XkbIndicatorMapRec::which_groups"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, which_groups) - 1usize];
    ["Offset of field: _XkbIndicatorMapRec::groups"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, groups) - 2usize];
    ["Offset of field: _XkbIndicatorMapRec::which_mods"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, which_mods) - 3usize];
    ["Offset of field: _XkbIndicatorMapRec::mods"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, mods) - 4usize];
    ["Offset of field: _XkbIndicatorMapRec::ctrls"]
        [::std::mem::offset_of!(_XkbIndicatorMapRec, ctrls) - 8usize];
};
pub type XkbIndicatorMapRec = _XkbIndicatorMapRec;
pub type XkbIndicatorMapPtr = *mut _XkbIndicatorMapRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorRec {
    pub phys_indicators: ::std::os::raw::c_ulong,
    pub maps: [XkbIndicatorMapRec; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorRec"][::std::mem::size_of::<_XkbIndicatorRec>() - 392usize];
    ["Alignment of _XkbIndicatorRec"][::std::mem::align_of::<_XkbIndicatorRec>() - 8usize];
    ["Offset of field: _XkbIndicatorRec::phys_indicators"]
        [::std::mem::offset_of!(_XkbIndicatorRec, phys_indicators) - 0usize];
    ["Offset of field: _XkbIndicatorRec::maps"]
        [::std::mem::offset_of!(_XkbIndicatorRec, maps) - 8usize];
};
pub type XkbIndicatorRec = _XkbIndicatorRec;
pub type XkbIndicatorPtr = *mut _XkbIndicatorRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyNameRec {
    pub name: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyNameRec"][::std::mem::size_of::<_XkbKeyNameRec>() - 4usize];
    ["Alignment of _XkbKeyNameRec"][::std::mem::align_of::<_XkbKeyNameRec>() - 1usize];
    ["Offset of field: _XkbKeyNameRec::name"]
        [::std::mem::offset_of!(_XkbKeyNameRec, name) - 0usize];
};
pub type XkbKeyNameRec = _XkbKeyNameRec;
pub type XkbKeyNamePtr = *mut _XkbKeyNameRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKeyAliasRec {
    pub real: [::std::os::raw::c_char; 4usize],
    pub alias: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbKeyAliasRec"][::std::mem::size_of::<_XkbKeyAliasRec>() - 8usize];
    ["Alignment of _XkbKeyAliasRec"][::std::mem::align_of::<_XkbKeyAliasRec>() - 1usize];
    ["Offset of field: _XkbKeyAliasRec::real"]
        [::std::mem::offset_of!(_XkbKeyAliasRec, real) - 0usize];
    ["Offset of field: _XkbKeyAliasRec::alias"]
        [::std::mem::offset_of!(_XkbKeyAliasRec, alias) - 4usize];
};
pub type XkbKeyAliasRec = _XkbKeyAliasRec;
pub type XkbKeyAliasPtr = *mut _XkbKeyAliasRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNamesRec {
    pub keycodes: Atom,
    pub geometry: Atom,
    pub symbols: Atom,
    pub types: Atom,
    pub compat: Atom,
    pub vmods: [Atom; 16usize],
    pub indicators: [Atom; 32usize],
    pub groups: [Atom; 4usize],
    pub keys: XkbKeyNamePtr,
    pub key_aliases: XkbKeyAliasPtr,
    pub radio_groups: *mut Atom,
    pub phys_symbols: Atom,
    pub num_keys: ::std::os::raw::c_uchar,
    pub num_key_aliases: ::std::os::raw::c_uchar,
    pub num_rg: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNamesRec"][::std::mem::size_of::<_XkbNamesRec>() - 496usize];
    ["Alignment of _XkbNamesRec"][::std::mem::align_of::<_XkbNamesRec>() - 8usize];
    ["Offset of field: _XkbNamesRec::keycodes"]
        [::std::mem::offset_of!(_XkbNamesRec, keycodes) - 0usize];
    ["Offset of field: _XkbNamesRec::geometry"]
        [::std::mem::offset_of!(_XkbNamesRec, geometry) - 8usize];
    ["Offset of field: _XkbNamesRec::symbols"]
        [::std::mem::offset_of!(_XkbNamesRec, symbols) - 16usize];
    ["Offset of field: _XkbNamesRec::types"][::std::mem::offset_of!(_XkbNamesRec, types) - 24usize];
    ["Offset of field: _XkbNamesRec::compat"]
        [::std::mem::offset_of!(_XkbNamesRec, compat) - 32usize];
    ["Offset of field: _XkbNamesRec::vmods"][::std::mem::offset_of!(_XkbNamesRec, vmods) - 40usize];
    ["Offset of field: _XkbNamesRec::indicators"]
        [::std::mem::offset_of!(_XkbNamesRec, indicators) - 168usize];
    ["Offset of field: _XkbNamesRec::groups"]
        [::std::mem::offset_of!(_XkbNamesRec, groups) - 424usize];
    ["Offset of field: _XkbNamesRec::keys"][::std::mem::offset_of!(_XkbNamesRec, keys) - 456usize];
    ["Offset of field: _XkbNamesRec::key_aliases"]
        [::std::mem::offset_of!(_XkbNamesRec, key_aliases) - 464usize];
    ["Offset of field: _XkbNamesRec::radio_groups"]
        [::std::mem::offset_of!(_XkbNamesRec, radio_groups) - 472usize];
    ["Offset of field: _XkbNamesRec::phys_symbols"]
        [::std::mem::offset_of!(_XkbNamesRec, phys_symbols) - 480usize];
    ["Offset of field: _XkbNamesRec::num_keys"]
        [::std::mem::offset_of!(_XkbNamesRec, num_keys) - 488usize];
    ["Offset of field: _XkbNamesRec::num_key_aliases"]
        [::std::mem::offset_of!(_XkbNamesRec, num_key_aliases) - 489usize];
    ["Offset of field: _XkbNamesRec::num_rg"]
        [::std::mem::offset_of!(_XkbNamesRec, num_rg) - 490usize];
};
pub type XkbNamesRec = _XkbNamesRec;
pub type XkbNamesPtr = *mut _XkbNamesRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbGeometry {
    _unused: [u8; 0],
}
pub type XkbGeometryPtr = *mut _XkbGeometry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDesc {
    pub dpy: *mut _XDisplay,
    pub flags: ::std::os::raw::c_ushort,
    pub device_spec: ::std::os::raw::c_ushort,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub ctrls: XkbControlsPtr,
    pub server: XkbServerMapPtr,
    pub map: XkbClientMapPtr,
    pub indicators: XkbIndicatorPtr,
    pub names: XkbNamesPtr,
    pub compat: XkbCompatMapPtr,
    pub geom: XkbGeometryPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDesc"][::std::mem::size_of::<_XkbDesc>() - 72usize];
    ["Alignment of _XkbDesc"][::std::mem::align_of::<_XkbDesc>() - 8usize];
    ["Offset of field: _XkbDesc::dpy"][::std::mem::offset_of!(_XkbDesc, dpy) - 0usize];
    ["Offset of field: _XkbDesc::flags"][::std::mem::offset_of!(_XkbDesc, flags) - 8usize];
    ["Offset of field: _XkbDesc::device_spec"]
        [::std::mem::offset_of!(_XkbDesc, device_spec) - 10usize];
    ["Offset of field: _XkbDesc::min_key_code"]
        [::std::mem::offset_of!(_XkbDesc, min_key_code) - 12usize];
    ["Offset of field: _XkbDesc::max_key_code"]
        [::std::mem::offset_of!(_XkbDesc, max_key_code) - 13usize];
    ["Offset of field: _XkbDesc::ctrls"][::std::mem::offset_of!(_XkbDesc, ctrls) - 16usize];
    ["Offset of field: _XkbDesc::server"][::std::mem::offset_of!(_XkbDesc, server) - 24usize];
    ["Offset of field: _XkbDesc::map"][::std::mem::offset_of!(_XkbDesc, map) - 32usize];
    ["Offset of field: _XkbDesc::indicators"]
        [::std::mem::offset_of!(_XkbDesc, indicators) - 40usize];
    ["Offset of field: _XkbDesc::names"][::std::mem::offset_of!(_XkbDesc, names) - 48usize];
    ["Offset of field: _XkbDesc::compat"][::std::mem::offset_of!(_XkbDesc, compat) - 56usize];
    ["Offset of field: _XkbDesc::geom"][::std::mem::offset_of!(_XkbDesc, geom) - 64usize];
};
pub type XkbDescRec = _XkbDesc;
pub type XkbDescPtr = *mut _XkbDesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMapChanges {
    pub changed: ::std::os::raw::c_ushort,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub first_type: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub first_key_sym: KeyCode,
    pub num_key_syms: ::std::os::raw::c_uchar,
    pub first_key_act: KeyCode,
    pub num_key_acts: ::std::os::raw::c_uchar,
    pub first_key_behavior: KeyCode,
    pub num_key_behaviors: ::std::os::raw::c_uchar,
    pub first_key_explicit: KeyCode,
    pub num_key_explicit: ::std::os::raw::c_uchar,
    pub first_modmap_key: KeyCode,
    pub num_modmap_keys: ::std::os::raw::c_uchar,
    pub first_vmodmap_key: KeyCode,
    pub num_vmodmap_keys: ::std::os::raw::c_uchar,
    pub pad: ::std::os::raw::c_uchar,
    pub vmods: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMapChanges"][::std::mem::size_of::<_XkbMapChanges>() - 22usize];
    ["Alignment of _XkbMapChanges"][::std::mem::align_of::<_XkbMapChanges>() - 2usize];
    ["Offset of field: _XkbMapChanges::changed"]
        [::std::mem::offset_of!(_XkbMapChanges, changed) - 0usize];
    ["Offset of field: _XkbMapChanges::min_key_code"]
        [::std::mem::offset_of!(_XkbMapChanges, min_key_code) - 2usize];
    ["Offset of field: _XkbMapChanges::max_key_code"]
        [::std::mem::offset_of!(_XkbMapChanges, max_key_code) - 3usize];
    ["Offset of field: _XkbMapChanges::first_type"]
        [::std::mem::offset_of!(_XkbMapChanges, first_type) - 4usize];
    ["Offset of field: _XkbMapChanges::num_types"]
        [::std::mem::offset_of!(_XkbMapChanges, num_types) - 5usize];
    ["Offset of field: _XkbMapChanges::first_key_sym"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_sym) - 6usize];
    ["Offset of field: _XkbMapChanges::num_key_syms"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_syms) - 7usize];
    ["Offset of field: _XkbMapChanges::first_key_act"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_act) - 8usize];
    ["Offset of field: _XkbMapChanges::num_key_acts"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_acts) - 9usize];
    ["Offset of field: _XkbMapChanges::first_key_behavior"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_behavior) - 10usize];
    ["Offset of field: _XkbMapChanges::num_key_behaviors"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_behaviors) - 11usize];
    ["Offset of field: _XkbMapChanges::first_key_explicit"]
        [::std::mem::offset_of!(_XkbMapChanges, first_key_explicit) - 12usize];
    ["Offset of field: _XkbMapChanges::num_key_explicit"]
        [::std::mem::offset_of!(_XkbMapChanges, num_key_explicit) - 13usize];
    ["Offset of field: _XkbMapChanges::first_modmap_key"]
        [::std::mem::offset_of!(_XkbMapChanges, first_modmap_key) - 14usize];
    ["Offset of field: _XkbMapChanges::num_modmap_keys"]
        [::std::mem::offset_of!(_XkbMapChanges, num_modmap_keys) - 15usize];
    ["Offset of field: _XkbMapChanges::first_vmodmap_key"]
        [::std::mem::offset_of!(_XkbMapChanges, first_vmodmap_key) - 16usize];
    ["Offset of field: _XkbMapChanges::num_vmodmap_keys"]
        [::std::mem::offset_of!(_XkbMapChanges, num_vmodmap_keys) - 17usize];
    ["Offset of field: _XkbMapChanges::pad"][::std::mem::offset_of!(_XkbMapChanges, pad) - 18usize];
    ["Offset of field: _XkbMapChanges::vmods"]
        [::std::mem::offset_of!(_XkbMapChanges, vmods) - 20usize];
};
pub type XkbMapChangesRec = _XkbMapChanges;
pub type XkbMapChangesPtr = *mut _XkbMapChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControlsChanges {
    pub changed_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrls_changes: ::std::os::raw::c_uint,
    pub num_groups_changed: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControlsChanges"][::std::mem::size_of::<_XkbControlsChanges>() - 12usize];
    ["Alignment of _XkbControlsChanges"][::std::mem::align_of::<_XkbControlsChanges>() - 4usize];
    ["Offset of field: _XkbControlsChanges::changed_ctrls"]
        [::std::mem::offset_of!(_XkbControlsChanges, changed_ctrls) - 0usize];
    ["Offset of field: _XkbControlsChanges::enabled_ctrls_changes"]
        [::std::mem::offset_of!(_XkbControlsChanges, enabled_ctrls_changes) - 4usize];
    ["Offset of field: _XkbControlsChanges::num_groups_changed"]
        [::std::mem::offset_of!(_XkbControlsChanges, num_groups_changed) - 8usize];
};
pub type XkbControlsChangesRec = _XkbControlsChanges;
pub type XkbControlsChangesPtr = *mut _XkbControlsChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorChanges {
    pub state_changes: ::std::os::raw::c_uint,
    pub map_changes: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorChanges"][::std::mem::size_of::<_XkbIndicatorChanges>() - 8usize];
    ["Alignment of _XkbIndicatorChanges"][::std::mem::align_of::<_XkbIndicatorChanges>() - 4usize];
    ["Offset of field: _XkbIndicatorChanges::state_changes"]
        [::std::mem::offset_of!(_XkbIndicatorChanges, state_changes) - 0usize];
    ["Offset of field: _XkbIndicatorChanges::map_changes"]
        [::std::mem::offset_of!(_XkbIndicatorChanges, map_changes) - 4usize];
};
pub type XkbIndicatorChangesRec = _XkbIndicatorChanges;
pub type XkbIndicatorChangesPtr = *mut _XkbIndicatorChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNameChanges {
    pub changed: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_uchar,
    pub num_types: ::std::os::raw::c_uchar,
    pub first_lvl: ::std::os::raw::c_uchar,
    pub num_lvls: ::std::os::raw::c_uchar,
    pub num_aliases: ::std::os::raw::c_uchar,
    pub num_rg: ::std::os::raw::c_uchar,
    pub first_key: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_uchar,
    pub changed_vmods: ::std::os::raw::c_ushort,
    pub changed_indicators: ::std::os::raw::c_ulong,
    pub changed_groups: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNameChanges"][::std::mem::size_of::<_XkbNameChanges>() - 32usize];
    ["Alignment of _XkbNameChanges"][::std::mem::align_of::<_XkbNameChanges>() - 8usize];
    ["Offset of field: _XkbNameChanges::changed"]
        [::std::mem::offset_of!(_XkbNameChanges, changed) - 0usize];
    ["Offset of field: _XkbNameChanges::first_type"]
        [::std::mem::offset_of!(_XkbNameChanges, first_type) - 4usize];
    ["Offset of field: _XkbNameChanges::num_types"]
        [::std::mem::offset_of!(_XkbNameChanges, num_types) - 5usize];
    ["Offset of field: _XkbNameChanges::first_lvl"]
        [::std::mem::offset_of!(_XkbNameChanges, first_lvl) - 6usize];
    ["Offset of field: _XkbNameChanges::num_lvls"]
        [::std::mem::offset_of!(_XkbNameChanges, num_lvls) - 7usize];
    ["Offset of field: _XkbNameChanges::num_aliases"]
        [::std::mem::offset_of!(_XkbNameChanges, num_aliases) - 8usize];
    ["Offset of field: _XkbNameChanges::num_rg"]
        [::std::mem::offset_of!(_XkbNameChanges, num_rg) - 9usize];
    ["Offset of field: _XkbNameChanges::first_key"]
        [::std::mem::offset_of!(_XkbNameChanges, first_key) - 10usize];
    ["Offset of field: _XkbNameChanges::num_keys"]
        [::std::mem::offset_of!(_XkbNameChanges, num_keys) - 11usize];
    ["Offset of field: _XkbNameChanges::changed_vmods"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_vmods) - 12usize];
    ["Offset of field: _XkbNameChanges::changed_indicators"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_indicators) - 16usize];
    ["Offset of field: _XkbNameChanges::changed_groups"]
        [::std::mem::offset_of!(_XkbNameChanges, changed_groups) - 24usize];
};
pub type XkbNameChangesRec = _XkbNameChanges;
pub type XkbNameChangesPtr = *mut _XkbNameChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatChanges {
    pub changed_groups: ::std::os::raw::c_uchar,
    pub first_si: ::std::os::raw::c_ushort,
    pub num_si: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatChanges"][::std::mem::size_of::<_XkbCompatChanges>() - 6usize];
    ["Alignment of _XkbCompatChanges"][::std::mem::align_of::<_XkbCompatChanges>() - 2usize];
    ["Offset of field: _XkbCompatChanges::changed_groups"]
        [::std::mem::offset_of!(_XkbCompatChanges, changed_groups) - 0usize];
    ["Offset of field: _XkbCompatChanges::first_si"]
        [::std::mem::offset_of!(_XkbCompatChanges, first_si) - 2usize];
    ["Offset of field: _XkbCompatChanges::num_si"]
        [::std::mem::offset_of!(_XkbCompatChanges, num_si) - 4usize];
};
pub type XkbCompatChangesRec = _XkbCompatChanges;
pub type XkbCompatChangesPtr = *mut _XkbCompatChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbChanges {
    pub device_spec: ::std::os::raw::c_ushort,
    pub state_changes: ::std::os::raw::c_ushort,
    pub map: XkbMapChangesRec,
    pub ctrls: XkbControlsChangesRec,
    pub indicators: XkbIndicatorChangesRec,
    pub names: XkbNameChangesRec,
    pub compat: XkbCompatChangesRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbChanges"][::std::mem::size_of::<_XkbChanges>() - 88usize];
    ["Alignment of _XkbChanges"][::std::mem::align_of::<_XkbChanges>() - 8usize];
    ["Offset of field: _XkbChanges::device_spec"]
        [::std::mem::offset_of!(_XkbChanges, device_spec) - 0usize];
    ["Offset of field: _XkbChanges::state_changes"]
        [::std::mem::offset_of!(_XkbChanges, state_changes) - 2usize];
    ["Offset of field: _XkbChanges::map"][::std::mem::offset_of!(_XkbChanges, map) - 4usize];
    ["Offset of field: _XkbChanges::ctrls"][::std::mem::offset_of!(_XkbChanges, ctrls) - 28usize];
    ["Offset of field: _XkbChanges::indicators"]
        [::std::mem::offset_of!(_XkbChanges, indicators) - 40usize];
    ["Offset of field: _XkbChanges::names"][::std::mem::offset_of!(_XkbChanges, names) - 48usize];
    ["Offset of field: _XkbChanges::compat"][::std::mem::offset_of!(_XkbChanges, compat) - 80usize];
};
pub type XkbChangesRec = _XkbChanges;
pub type XkbChangesPtr = *mut _XkbChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentNames {
    pub keymap: *mut ::std::os::raw::c_char,
    pub keycodes: *mut ::std::os::raw::c_char,
    pub types: *mut ::std::os::raw::c_char,
    pub compat: *mut ::std::os::raw::c_char,
    pub symbols: *mut ::std::os::raw::c_char,
    pub geometry: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentNames"][::std::mem::size_of::<_XkbComponentNames>() - 48usize];
    ["Alignment of _XkbComponentNames"][::std::mem::align_of::<_XkbComponentNames>() - 8usize];
    ["Offset of field: _XkbComponentNames::keymap"]
        [::std::mem::offset_of!(_XkbComponentNames, keymap) - 0usize];
    ["Offset of field: _XkbComponentNames::keycodes"]
        [::std::mem::offset_of!(_XkbComponentNames, keycodes) - 8usize];
    ["Offset of field: _XkbComponentNames::types"]
        [::std::mem::offset_of!(_XkbComponentNames, types) - 16usize];
    ["Offset of field: _XkbComponentNames::compat"]
        [::std::mem::offset_of!(_XkbComponentNames, compat) - 24usize];
    ["Offset of field: _XkbComponentNames::symbols"]
        [::std::mem::offset_of!(_XkbComponentNames, symbols) - 32usize];
    ["Offset of field: _XkbComponentNames::geometry"]
        [::std::mem::offset_of!(_XkbComponentNames, geometry) - 40usize];
};
pub type XkbComponentNamesRec = _XkbComponentNames;
pub type XkbComponentNamesPtr = *mut _XkbComponentNames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentName {
    pub flags: ::std::os::raw::c_ushort,
    pub name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentName"][::std::mem::size_of::<_XkbComponentName>() - 16usize];
    ["Alignment of _XkbComponentName"][::std::mem::align_of::<_XkbComponentName>() - 8usize];
    ["Offset of field: _XkbComponentName::flags"]
        [::std::mem::offset_of!(_XkbComponentName, flags) - 0usize];
    ["Offset of field: _XkbComponentName::name"]
        [::std::mem::offset_of!(_XkbComponentName, name) - 8usize];
};
pub type XkbComponentNameRec = _XkbComponentName;
pub type XkbComponentNamePtr = *mut _XkbComponentName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbComponentList {
    pub num_keymaps: ::std::os::raw::c_int,
    pub num_keycodes: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub num_compat: ::std::os::raw::c_int,
    pub num_symbols: ::std::os::raw::c_int,
    pub num_geometry: ::std::os::raw::c_int,
    pub keymaps: XkbComponentNamePtr,
    pub keycodes: XkbComponentNamePtr,
    pub types: XkbComponentNamePtr,
    pub compat: XkbComponentNamePtr,
    pub symbols: XkbComponentNamePtr,
    pub geometry: XkbComponentNamePtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbComponentList"][::std::mem::size_of::<_XkbComponentList>() - 72usize];
    ["Alignment of _XkbComponentList"][::std::mem::align_of::<_XkbComponentList>() - 8usize];
    ["Offset of field: _XkbComponentList::num_keymaps"]
        [::std::mem::offset_of!(_XkbComponentList, num_keymaps) - 0usize];
    ["Offset of field: _XkbComponentList::num_keycodes"]
        [::std::mem::offset_of!(_XkbComponentList, num_keycodes) - 4usize];
    ["Offset of field: _XkbComponentList::num_types"]
        [::std::mem::offset_of!(_XkbComponentList, num_types) - 8usize];
    ["Offset of field: _XkbComponentList::num_compat"]
        [::std::mem::offset_of!(_XkbComponentList, num_compat) - 12usize];
    ["Offset of field: _XkbComponentList::num_symbols"]
        [::std::mem::offset_of!(_XkbComponentList, num_symbols) - 16usize];
    ["Offset of field: _XkbComponentList::num_geometry"]
        [::std::mem::offset_of!(_XkbComponentList, num_geometry) - 20usize];
    ["Offset of field: _XkbComponentList::keymaps"]
        [::std::mem::offset_of!(_XkbComponentList, keymaps) - 24usize];
    ["Offset of field: _XkbComponentList::keycodes"]
        [::std::mem::offset_of!(_XkbComponentList, keycodes) - 32usize];
    ["Offset of field: _XkbComponentList::types"]
        [::std::mem::offset_of!(_XkbComponentList, types) - 40usize];
    ["Offset of field: _XkbComponentList::compat"]
        [::std::mem::offset_of!(_XkbComponentList, compat) - 48usize];
    ["Offset of field: _XkbComponentList::symbols"]
        [::std::mem::offset_of!(_XkbComponentList, symbols) - 56usize];
    ["Offset of field: _XkbComponentList::geometry"]
        [::std::mem::offset_of!(_XkbComponentList, geometry) - 64usize];
};
pub type XkbComponentListRec = _XkbComponentList;
pub type XkbComponentListPtr = *mut _XkbComponentList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceLedInfo {
    pub led_class: ::std::os::raw::c_ushort,
    pub led_id: ::std::os::raw::c_ushort,
    pub phys_indicators: ::std::os::raw::c_uint,
    pub maps_present: ::std::os::raw::c_uint,
    pub names_present: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub names: [Atom; 32usize],
    pub maps: [XkbIndicatorMapRec; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceLedInfo"][::std::mem::size_of::<_XkbDeviceLedInfo>() - 664usize];
    ["Alignment of _XkbDeviceLedInfo"][::std::mem::align_of::<_XkbDeviceLedInfo>() - 8usize];
    ["Offset of field: _XkbDeviceLedInfo::led_class"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, led_class) - 0usize];
    ["Offset of field: _XkbDeviceLedInfo::led_id"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, led_id) - 2usize];
    ["Offset of field: _XkbDeviceLedInfo::phys_indicators"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, phys_indicators) - 4usize];
    ["Offset of field: _XkbDeviceLedInfo::maps_present"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, maps_present) - 8usize];
    ["Offset of field: _XkbDeviceLedInfo::names_present"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, names_present) - 12usize];
    ["Offset of field: _XkbDeviceLedInfo::state"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, state) - 16usize];
    ["Offset of field: _XkbDeviceLedInfo::names"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, names) - 24usize];
    ["Offset of field: _XkbDeviceLedInfo::maps"]
        [::std::mem::offset_of!(_XkbDeviceLedInfo, maps) - 280usize];
};
pub type XkbDeviceLedInfoRec = _XkbDeviceLedInfo;
pub type XkbDeviceLedInfoPtr = *mut _XkbDeviceLedInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: Atom,
    pub device_spec: ::std::os::raw::c_ushort,
    pub has_own_state: ::std::os::raw::c_int,
    pub supported: ::std::os::raw::c_ushort,
    pub unsupported: ::std::os::raw::c_ushort,
    pub num_btns: ::std::os::raw::c_ushort,
    pub btn_acts: *mut XkbAction,
    pub sz_leds: ::std::os::raw::c_ushort,
    pub num_leds: ::std::os::raw::c_ushort,
    pub dflt_kbd_fb: ::std::os::raw::c_ushort,
    pub dflt_led_fb: ::std::os::raw::c_ushort,
    pub leds: XkbDeviceLedInfoPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceInfo"][::std::mem::size_of::<_XkbDeviceInfo>() - 56usize];
    ["Alignment of _XkbDeviceInfo"][::std::mem::align_of::<_XkbDeviceInfo>() - 8usize];
    ["Offset of field: _XkbDeviceInfo::name"]
        [::std::mem::offset_of!(_XkbDeviceInfo, name) - 0usize];
    ["Offset of field: _XkbDeviceInfo::type_"]
        [::std::mem::offset_of!(_XkbDeviceInfo, type_) - 8usize];
    ["Offset of field: _XkbDeviceInfo::device_spec"]
        [::std::mem::offset_of!(_XkbDeviceInfo, device_spec) - 16usize];
    ["Offset of field: _XkbDeviceInfo::has_own_state"]
        [::std::mem::offset_of!(_XkbDeviceInfo, has_own_state) - 20usize];
    ["Offset of field: _XkbDeviceInfo::supported"]
        [::std::mem::offset_of!(_XkbDeviceInfo, supported) - 24usize];
    ["Offset of field: _XkbDeviceInfo::unsupported"]
        [::std::mem::offset_of!(_XkbDeviceInfo, unsupported) - 26usize];
    ["Offset of field: _XkbDeviceInfo::num_btns"]
        [::std::mem::offset_of!(_XkbDeviceInfo, num_btns) - 28usize];
    ["Offset of field: _XkbDeviceInfo::btn_acts"]
        [::std::mem::offset_of!(_XkbDeviceInfo, btn_acts) - 32usize];
    ["Offset of field: _XkbDeviceInfo::sz_leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, sz_leds) - 40usize];
    ["Offset of field: _XkbDeviceInfo::num_leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, num_leds) - 42usize];
    ["Offset of field: _XkbDeviceInfo::dflt_kbd_fb"]
        [::std::mem::offset_of!(_XkbDeviceInfo, dflt_kbd_fb) - 44usize];
    ["Offset of field: _XkbDeviceInfo::dflt_led_fb"]
        [::std::mem::offset_of!(_XkbDeviceInfo, dflt_led_fb) - 46usize];
    ["Offset of field: _XkbDeviceInfo::leds"]
        [::std::mem::offset_of!(_XkbDeviceInfo, leds) - 48usize];
};
pub type XkbDeviceInfoRec = _XkbDeviceInfo;
pub type XkbDeviceInfoPtr = *mut _XkbDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceLedChanges {
    pub led_class: ::std::os::raw::c_ushort,
    pub led_id: ::std::os::raw::c_ushort,
    pub defined: ::std::os::raw::c_uint,
    pub next: *mut _XkbDeviceLedChanges,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceLedChanges"][::std::mem::size_of::<_XkbDeviceLedChanges>() - 16usize];
    ["Alignment of _XkbDeviceLedChanges"][::std::mem::align_of::<_XkbDeviceLedChanges>() - 8usize];
    ["Offset of field: _XkbDeviceLedChanges::led_class"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, led_class) - 0usize];
    ["Offset of field: _XkbDeviceLedChanges::led_id"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, led_id) - 2usize];
    ["Offset of field: _XkbDeviceLedChanges::defined"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, defined) - 4usize];
    ["Offset of field: _XkbDeviceLedChanges::next"]
        [::std::mem::offset_of!(_XkbDeviceLedChanges, next) - 8usize];
};
pub type XkbDeviceLedChangesRec = _XkbDeviceLedChanges;
pub type XkbDeviceLedChangesPtr = *mut _XkbDeviceLedChanges;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbDeviceChanges {
    pub changed: ::std::os::raw::c_uint,
    pub first_btn: ::std::os::raw::c_ushort,
    pub num_btns: ::std::os::raw::c_ushort,
    pub leds: XkbDeviceLedChangesRec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbDeviceChanges"][::std::mem::size_of::<_XkbDeviceChanges>() - 24usize];
    ["Alignment of _XkbDeviceChanges"][::std::mem::align_of::<_XkbDeviceChanges>() - 8usize];
    ["Offset of field: _XkbDeviceChanges::changed"]
        [::std::mem::offset_of!(_XkbDeviceChanges, changed) - 0usize];
    ["Offset of field: _XkbDeviceChanges::first_btn"]
        [::std::mem::offset_of!(_XkbDeviceChanges, first_btn) - 4usize];
    ["Offset of field: _XkbDeviceChanges::num_btns"]
        [::std::mem::offset_of!(_XkbDeviceChanges, num_btns) - 6usize];
    ["Offset of field: _XkbDeviceChanges::leds"]
        [::std::mem::offset_of!(_XkbDeviceChanges, leds) - 8usize];
};
pub type XkbDeviceChangesRec = _XkbDeviceChanges;
pub type XkbDeviceChangesPtr = *mut _XkbDeviceChanges;

pub type Display = _XDisplay;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAnyEvent"][::std::mem::size_of::<_XkbAnyEvent>() - 48usize];
    ["Alignment of _XkbAnyEvent"][::std::mem::align_of::<_XkbAnyEvent>() - 8usize];
    ["Offset of field: _XkbAnyEvent::type_"][::std::mem::offset_of!(_XkbAnyEvent, type_) - 0usize];
    ["Offset of field: _XkbAnyEvent::serial"]
        [::std::mem::offset_of!(_XkbAnyEvent, serial) - 8usize];
    ["Offset of field: _XkbAnyEvent::send_event"]
        [::std::mem::offset_of!(_XkbAnyEvent, send_event) - 16usize];
    ["Offset of field: _XkbAnyEvent::display"]
        [::std::mem::offset_of!(_XkbAnyEvent, display) - 24usize];
    ["Offset of field: _XkbAnyEvent::time"][::std::mem::offset_of!(_XkbAnyEvent, time) - 32usize];
    ["Offset of field: _XkbAnyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbAnyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbAnyEvent::device"]
        [::std::mem::offset_of!(_XkbAnyEvent, device) - 44usize];
};
pub type XkbAnyEvent = _XkbAnyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNewKeyboardNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub old_device: ::std::os::raw::c_int,
    pub min_key_code: ::std::os::raw::c_int,
    pub max_key_code: ::std::os::raw::c_int,
    pub old_min_key_code: ::std::os::raw::c_int,
    pub old_max_key_code: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNewKeyboardNotify"][::std::mem::size_of::<_XkbNewKeyboardNotify>() - 80usize];
    ["Alignment of _XkbNewKeyboardNotify"]
        [::std::mem::align_of::<_XkbNewKeyboardNotify>() - 8usize];
    ["Offset of field: _XkbNewKeyboardNotify::type_"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, type_) - 0usize];
    ["Offset of field: _XkbNewKeyboardNotify::serial"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, serial) - 8usize];
    ["Offset of field: _XkbNewKeyboardNotify::send_event"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, send_event) - 16usize];
    ["Offset of field: _XkbNewKeyboardNotify::display"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, display) - 24usize];
    ["Offset of field: _XkbNewKeyboardNotify::time"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, time) - 32usize];
    ["Offset of field: _XkbNewKeyboardNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbNewKeyboardNotify::device"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, device) - 44usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_device"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_device) - 48usize];
    ["Offset of field: _XkbNewKeyboardNotify::min_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, min_key_code) - 52usize];
    ["Offset of field: _XkbNewKeyboardNotify::max_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, max_key_code) - 56usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_min_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_min_key_code) - 60usize];
    ["Offset of field: _XkbNewKeyboardNotify::old_max_key_code"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, old_max_key_code) - 64usize];
    ["Offset of field: _XkbNewKeyboardNotify::changed"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, changed) - 68usize];
    ["Offset of field: _XkbNewKeyboardNotify::req_major"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, req_major) - 72usize];
    ["Offset of field: _XkbNewKeyboardNotify::req_minor"]
        [::std::mem::offset_of!(_XkbNewKeyboardNotify, req_minor) - 73usize];
};
pub type XkbNewKeyboardNotifyEvent = _XkbNewKeyboardNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbMapNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub min_key_code: KeyCode,
    pub max_key_code: KeyCode,
    pub first_key_sym: KeyCode,
    pub first_key_act: KeyCode,
    pub first_key_behavior: KeyCode,
    pub first_key_explicit: KeyCode,
    pub first_modmap_key: KeyCode,
    pub first_vmodmap_key: KeyCode,
    pub num_key_syms: ::std::os::raw::c_int,
    pub num_key_acts: ::std::os::raw::c_int,
    pub num_key_behaviors: ::std::os::raw::c_int,
    pub num_key_explicit: ::std::os::raw::c_int,
    pub num_modmap_keys: ::std::os::raw::c_int,
    pub num_vmodmap_keys: ::std::os::raw::c_int,
    pub vmods: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbMapNotifyEvent"][::std::mem::size_of::<_XkbMapNotifyEvent>() - 104usize];
    ["Alignment of _XkbMapNotifyEvent"][::std::mem::align_of::<_XkbMapNotifyEvent>() - 8usize];
    ["Offset of field: _XkbMapNotifyEvent::type_"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, type_) - 0usize];
    ["Offset of field: _XkbMapNotifyEvent::serial"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, serial) - 8usize];
    ["Offset of field: _XkbMapNotifyEvent::send_event"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, send_event) - 16usize];
    ["Offset of field: _XkbMapNotifyEvent::display"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, display) - 24usize];
    ["Offset of field: _XkbMapNotifyEvent::time"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, time) - 32usize];
    ["Offset of field: _XkbMapNotifyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbMapNotifyEvent::device"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, device) - 44usize];
    ["Offset of field: _XkbMapNotifyEvent::changed"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, changed) - 48usize];
    ["Offset of field: _XkbMapNotifyEvent::flags"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, flags) - 52usize];
    ["Offset of field: _XkbMapNotifyEvent::first_type"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_type) - 56usize];
    ["Offset of field: _XkbMapNotifyEvent::num_types"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_types) - 60usize];
    ["Offset of field: _XkbMapNotifyEvent::min_key_code"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, min_key_code) - 64usize];
    ["Offset of field: _XkbMapNotifyEvent::max_key_code"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, max_key_code) - 65usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_sym"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_sym) - 66usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_act"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_act) - 67usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_behavior"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_behavior) - 68usize];
    ["Offset of field: _XkbMapNotifyEvent::first_key_explicit"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_key_explicit) - 69usize];
    ["Offset of field: _XkbMapNotifyEvent::first_modmap_key"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_modmap_key) - 70usize];
    ["Offset of field: _XkbMapNotifyEvent::first_vmodmap_key"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, first_vmodmap_key) - 71usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_syms"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_syms) - 72usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_acts"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_acts) - 76usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_behaviors"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_behaviors) - 80usize];
    ["Offset of field: _XkbMapNotifyEvent::num_key_explicit"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_key_explicit) - 84usize];
    ["Offset of field: _XkbMapNotifyEvent::num_modmap_keys"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_modmap_keys) - 88usize];
    ["Offset of field: _XkbMapNotifyEvent::num_vmodmap_keys"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, num_vmodmap_keys) - 92usize];
    ["Offset of field: _XkbMapNotifyEvent::vmods"]
        [::std::mem::offset_of!(_XkbMapNotifyEvent, vmods) - 96usize];
};
pub type XkbMapNotifyEvent = _XkbMapNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbStateNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub group: ::std::os::raw::c_int,
    pub base_group: ::std::os::raw::c_int,
    pub latched_group: ::std::os::raw::c_int,
    pub locked_group: ::std::os::raw::c_int,
    pub mods: ::std::os::raw::c_uint,
    pub base_mods: ::std::os::raw::c_uint,
    pub latched_mods: ::std::os::raw::c_uint,
    pub locked_mods: ::std::os::raw::c_uint,
    pub compat_state: ::std::os::raw::c_int,
    pub grab_mods: ::std::os::raw::c_uchar,
    pub compat_grab_mods: ::std::os::raw::c_uchar,
    pub lookup_mods: ::std::os::raw::c_uchar,
    pub compat_lookup_mods: ::std::os::raw::c_uchar,
    pub ptr_buttons: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub event_type: ::std::os::raw::c_char,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbStateNotifyEvent"][::std::mem::size_of::<_XkbStateNotifyEvent>() - 104usize];
    ["Alignment of _XkbStateNotifyEvent"][::std::mem::align_of::<_XkbStateNotifyEvent>() - 8usize];
    ["Offset of field: _XkbStateNotifyEvent::type_"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, type_) - 0usize];
    ["Offset of field: _XkbStateNotifyEvent::serial"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, serial) - 8usize];
    ["Offset of field: _XkbStateNotifyEvent::send_event"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, send_event) - 16usize];
    ["Offset of field: _XkbStateNotifyEvent::display"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, display) - 24usize];
    ["Offset of field: _XkbStateNotifyEvent::time"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, time) - 32usize];
    ["Offset of field: _XkbStateNotifyEvent::xkb_type"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, xkb_type) - 40usize];
    ["Offset of field: _XkbStateNotifyEvent::device"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, device) - 44usize];
    ["Offset of field: _XkbStateNotifyEvent::changed"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, changed) - 48usize];
    ["Offset of field: _XkbStateNotifyEvent::group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, group) - 52usize];
    ["Offset of field: _XkbStateNotifyEvent::base_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, base_group) - 56usize];
    ["Offset of field: _XkbStateNotifyEvent::latched_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, latched_group) - 60usize];
    ["Offset of field: _XkbStateNotifyEvent::locked_group"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, locked_group) - 64usize];
    ["Offset of field: _XkbStateNotifyEvent::mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, mods) - 68usize];
    ["Offset of field: _XkbStateNotifyEvent::base_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, base_mods) - 72usize];
    ["Offset of field: _XkbStateNotifyEvent::latched_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, latched_mods) - 76usize];
    ["Offset of field: _XkbStateNotifyEvent::locked_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, locked_mods) - 80usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_state"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_state) - 84usize];
    ["Offset of field: _XkbStateNotifyEvent::grab_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, grab_mods) - 88usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_grab_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_grab_mods) - 89usize];
    ["Offset of field: _XkbStateNotifyEvent::lookup_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, lookup_mods) - 90usize];
    ["Offset of field: _XkbStateNotifyEvent::compat_lookup_mods"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, compat_lookup_mods) - 91usize];
    ["Offset of field: _XkbStateNotifyEvent::ptr_buttons"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, ptr_buttons) - 92usize];
    ["Offset of field: _XkbStateNotifyEvent::keycode"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, keycode) - 96usize];
    ["Offset of field: _XkbStateNotifyEvent::event_type"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, event_type) - 97usize];
    ["Offset of field: _XkbStateNotifyEvent::req_major"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, req_major) - 98usize];
    ["Offset of field: _XkbStateNotifyEvent::req_minor"]
        [::std::mem::offset_of!(_XkbStateNotifyEvent, req_minor) - 99usize];
};
pub type XkbStateNotifyEvent = _XkbStateNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbControlsNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrls: ::std::os::raw::c_uint,
    pub enabled_ctrl_changes: ::std::os::raw::c_uint,
    pub num_groups: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub event_type: ::std::os::raw::c_char,
    pub req_major: ::std::os::raw::c_char,
    pub req_minor: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbControlsNotify"][::std::mem::size_of::<_XkbControlsNotify>() - 72usize];
    ["Alignment of _XkbControlsNotify"][::std::mem::align_of::<_XkbControlsNotify>() - 8usize];
    ["Offset of field: _XkbControlsNotify::type_"]
        [::std::mem::offset_of!(_XkbControlsNotify, type_) - 0usize];
    ["Offset of field: _XkbControlsNotify::serial"]
        [::std::mem::offset_of!(_XkbControlsNotify, serial) - 8usize];
    ["Offset of field: _XkbControlsNotify::send_event"]
        [::std::mem::offset_of!(_XkbControlsNotify, send_event) - 16usize];
    ["Offset of field: _XkbControlsNotify::display"]
        [::std::mem::offset_of!(_XkbControlsNotify, display) - 24usize];
    ["Offset of field: _XkbControlsNotify::time"]
        [::std::mem::offset_of!(_XkbControlsNotify, time) - 32usize];
    ["Offset of field: _XkbControlsNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbControlsNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbControlsNotify::device"]
        [::std::mem::offset_of!(_XkbControlsNotify, device) - 44usize];
    ["Offset of field: _XkbControlsNotify::changed_ctrls"]
        [::std::mem::offset_of!(_XkbControlsNotify, changed_ctrls) - 48usize];
    ["Offset of field: _XkbControlsNotify::enabled_ctrls"]
        [::std::mem::offset_of!(_XkbControlsNotify, enabled_ctrls) - 52usize];
    ["Offset of field: _XkbControlsNotify::enabled_ctrl_changes"]
        [::std::mem::offset_of!(_XkbControlsNotify, enabled_ctrl_changes) - 56usize];
    ["Offset of field: _XkbControlsNotify::num_groups"]
        [::std::mem::offset_of!(_XkbControlsNotify, num_groups) - 60usize];
    ["Offset of field: _XkbControlsNotify::keycode"]
        [::std::mem::offset_of!(_XkbControlsNotify, keycode) - 64usize];
    ["Offset of field: _XkbControlsNotify::event_type"]
        [::std::mem::offset_of!(_XkbControlsNotify, event_type) - 65usize];
    ["Offset of field: _XkbControlsNotify::req_major"]
        [::std::mem::offset_of!(_XkbControlsNotify, req_major) - 66usize];
    ["Offset of field: _XkbControlsNotify::req_minor"]
        [::std::mem::offset_of!(_XkbControlsNotify, req_minor) - 67usize];
};
pub type XkbControlsNotifyEvent = _XkbControlsNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbIndicatorNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbIndicatorNotify"][::std::mem::size_of::<_XkbIndicatorNotify>() - 56usize];
    ["Alignment of _XkbIndicatorNotify"][::std::mem::align_of::<_XkbIndicatorNotify>() - 8usize];
    ["Offset of field: _XkbIndicatorNotify::type_"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, type_) - 0usize];
    ["Offset of field: _XkbIndicatorNotify::serial"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, serial) - 8usize];
    ["Offset of field: _XkbIndicatorNotify::send_event"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, send_event) - 16usize];
    ["Offset of field: _XkbIndicatorNotify::display"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, display) - 24usize];
    ["Offset of field: _XkbIndicatorNotify::time"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, time) - 32usize];
    ["Offset of field: _XkbIndicatorNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbIndicatorNotify::device"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, device) - 44usize];
    ["Offset of field: _XkbIndicatorNotify::changed"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, changed) - 48usize];
    ["Offset of field: _XkbIndicatorNotify::state"]
        [::std::mem::offset_of!(_XkbIndicatorNotify, state) - 52usize];
};
pub type XkbIndicatorNotifyEvent = _XkbIndicatorNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbNamesNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed: ::std::os::raw::c_uint,
    pub first_type: ::std::os::raw::c_int,
    pub num_types: ::std::os::raw::c_int,
    pub first_lvl: ::std::os::raw::c_int,
    pub num_lvls: ::std::os::raw::c_int,
    pub num_aliases: ::std::os::raw::c_int,
    pub num_radio_groups: ::std::os::raw::c_int,
    pub changed_vmods: ::std::os::raw::c_uint,
    pub changed_groups: ::std::os::raw::c_uint,
    pub changed_indicators: ::std::os::raw::c_uint,
    pub first_key: ::std::os::raw::c_int,
    pub num_keys: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbNamesNotify"][::std::mem::size_of::<_XkbNamesNotify>() - 96usize];
    ["Alignment of _XkbNamesNotify"][::std::mem::align_of::<_XkbNamesNotify>() - 8usize];
    ["Offset of field: _XkbNamesNotify::type_"]
        [::std::mem::offset_of!(_XkbNamesNotify, type_) - 0usize];
    ["Offset of field: _XkbNamesNotify::serial"]
        [::std::mem::offset_of!(_XkbNamesNotify, serial) - 8usize];
    ["Offset of field: _XkbNamesNotify::send_event"]
        [::std::mem::offset_of!(_XkbNamesNotify, send_event) - 16usize];
    ["Offset of field: _XkbNamesNotify::display"]
        [::std::mem::offset_of!(_XkbNamesNotify, display) - 24usize];
    ["Offset of field: _XkbNamesNotify::time"]
        [::std::mem::offset_of!(_XkbNamesNotify, time) - 32usize];
    ["Offset of field: _XkbNamesNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbNamesNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbNamesNotify::device"]
        [::std::mem::offset_of!(_XkbNamesNotify, device) - 44usize];
    ["Offset of field: _XkbNamesNotify::changed"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed) - 48usize];
    ["Offset of field: _XkbNamesNotify::first_type"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_type) - 52usize];
    ["Offset of field: _XkbNamesNotify::num_types"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_types) - 56usize];
    ["Offset of field: _XkbNamesNotify::first_lvl"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_lvl) - 60usize];
    ["Offset of field: _XkbNamesNotify::num_lvls"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_lvls) - 64usize];
    ["Offset of field: _XkbNamesNotify::num_aliases"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_aliases) - 68usize];
    ["Offset of field: _XkbNamesNotify::num_radio_groups"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_radio_groups) - 72usize];
    ["Offset of field: _XkbNamesNotify::changed_vmods"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_vmods) - 76usize];
    ["Offset of field: _XkbNamesNotify::changed_groups"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_groups) - 80usize];
    ["Offset of field: _XkbNamesNotify::changed_indicators"]
        [::std::mem::offset_of!(_XkbNamesNotify, changed_indicators) - 84usize];
    ["Offset of field: _XkbNamesNotify::first_key"]
        [::std::mem::offset_of!(_XkbNamesNotify, first_key) - 88usize];
    ["Offset of field: _XkbNamesNotify::num_keys"]
        [::std::mem::offset_of!(_XkbNamesNotify, num_keys) - 92usize];
};
pub type XkbNamesNotifyEvent = _XkbNamesNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbCompatMapNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub changed_groups: ::std::os::raw::c_uint,
    pub first_si: ::std::os::raw::c_int,
    pub num_si: ::std::os::raw::c_int,
    pub num_total_si: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbCompatMapNotify"][::std::mem::size_of::<_XkbCompatMapNotify>() - 64usize];
    ["Alignment of _XkbCompatMapNotify"][::std::mem::align_of::<_XkbCompatMapNotify>() - 8usize];
    ["Offset of field: _XkbCompatMapNotify::type_"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, type_) - 0usize];
    ["Offset of field: _XkbCompatMapNotify::serial"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, serial) - 8usize];
    ["Offset of field: _XkbCompatMapNotify::send_event"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, send_event) - 16usize];
    ["Offset of field: _XkbCompatMapNotify::display"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, display) - 24usize];
    ["Offset of field: _XkbCompatMapNotify::time"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, time) - 32usize];
    ["Offset of field: _XkbCompatMapNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbCompatMapNotify::device"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, device) - 44usize];
    ["Offset of field: _XkbCompatMapNotify::changed_groups"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, changed_groups) - 48usize];
    ["Offset of field: _XkbCompatMapNotify::first_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, first_si) - 52usize];
    ["Offset of field: _XkbCompatMapNotify::num_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, num_si) - 56usize];
    ["Offset of field: _XkbCompatMapNotify::num_total_si"]
        [::std::mem::offset_of!(_XkbCompatMapNotify, num_total_si) - 60usize];
};
pub type XkbCompatMapNotifyEvent = _XkbCompatMapNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbBellNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub bell_class: ::std::os::raw::c_int,
    pub bell_id: ::std::os::raw::c_int,
    pub name: Atom,
    pub window: Window,
    pub event_only: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbBellNotify"][::std::mem::size_of::<_XkbBellNotify>() - 96usize];
    ["Alignment of _XkbBellNotify"][::std::mem::align_of::<_XkbBellNotify>() - 8usize];
    ["Offset of field: _XkbBellNotify::type_"]
        [::std::mem::offset_of!(_XkbBellNotify, type_) - 0usize];
    ["Offset of field: _XkbBellNotify::serial"]
        [::std::mem::offset_of!(_XkbBellNotify, serial) - 8usize];
    ["Offset of field: _XkbBellNotify::send_event"]
        [::std::mem::offset_of!(_XkbBellNotify, send_event) - 16usize];
    ["Offset of field: _XkbBellNotify::display"]
        [::std::mem::offset_of!(_XkbBellNotify, display) - 24usize];
    ["Offset of field: _XkbBellNotify::time"]
        [::std::mem::offset_of!(_XkbBellNotify, time) - 32usize];
    ["Offset of field: _XkbBellNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbBellNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbBellNotify::device"]
        [::std::mem::offset_of!(_XkbBellNotify, device) - 44usize];
    ["Offset of field: _XkbBellNotify::percent"]
        [::std::mem::offset_of!(_XkbBellNotify, percent) - 48usize];
    ["Offset of field: _XkbBellNotify::pitch"]
        [::std::mem::offset_of!(_XkbBellNotify, pitch) - 52usize];
    ["Offset of field: _XkbBellNotify::duration"]
        [::std::mem::offset_of!(_XkbBellNotify, duration) - 56usize];
    ["Offset of field: _XkbBellNotify::bell_class"]
        [::std::mem::offset_of!(_XkbBellNotify, bell_class) - 60usize];
    ["Offset of field: _XkbBellNotify::bell_id"]
        [::std::mem::offset_of!(_XkbBellNotify, bell_id) - 64usize];
    ["Offset of field: _XkbBellNotify::name"]
        [::std::mem::offset_of!(_XkbBellNotify, name) - 72usize];
    ["Offset of field: _XkbBellNotify::window"]
        [::std::mem::offset_of!(_XkbBellNotify, window) - 80usize];
    ["Offset of field: _XkbBellNotify::event_only"]
        [::std::mem::offset_of!(_XkbBellNotify, event_only) - 88usize];
};
pub type XkbBellNotifyEvent = _XkbBellNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbActionMessage {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub keycode: KeyCode,
    pub press: ::std::os::raw::c_int,
    pub key_event_follows: ::std::os::raw::c_int,
    pub group: ::std::os::raw::c_int,
    pub mods: ::std::os::raw::c_uint,
    pub message: [::std::os::raw::c_char; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbActionMessage"][::std::mem::size_of::<_XkbActionMessage>() - 80usize];
    ["Alignment of _XkbActionMessage"][::std::mem::align_of::<_XkbActionMessage>() - 8usize];
    ["Offset of field: _XkbActionMessage::type_"]
        [::std::mem::offset_of!(_XkbActionMessage, type_) - 0usize];
    ["Offset of field: _XkbActionMessage::serial"]
        [::std::mem::offset_of!(_XkbActionMessage, serial) - 8usize];
    ["Offset of field: _XkbActionMessage::send_event"]
        [::std::mem::offset_of!(_XkbActionMessage, send_event) - 16usize];
    ["Offset of field: _XkbActionMessage::display"]
        [::std::mem::offset_of!(_XkbActionMessage, display) - 24usize];
    ["Offset of field: _XkbActionMessage::time"]
        [::std::mem::offset_of!(_XkbActionMessage, time) - 32usize];
    ["Offset of field: _XkbActionMessage::xkb_type"]
        [::std::mem::offset_of!(_XkbActionMessage, xkb_type) - 40usize];
    ["Offset of field: _XkbActionMessage::device"]
        [::std::mem::offset_of!(_XkbActionMessage, device) - 44usize];
    ["Offset of field: _XkbActionMessage::keycode"]
        [::std::mem::offset_of!(_XkbActionMessage, keycode) - 48usize];
    ["Offset of field: _XkbActionMessage::press"]
        [::std::mem::offset_of!(_XkbActionMessage, press) - 52usize];
    ["Offset of field: _XkbActionMessage::key_event_follows"]
        [::std::mem::offset_of!(_XkbActionMessage, key_event_follows) - 56usize];
    ["Offset of field: _XkbActionMessage::group"]
        [::std::mem::offset_of!(_XkbActionMessage, group) - 60usize];
    ["Offset of field: _XkbActionMessage::mods"]
        [::std::mem::offset_of!(_XkbActionMessage, mods) - 64usize];
    ["Offset of field: _XkbActionMessage::message"]
        [::std::mem::offset_of!(_XkbActionMessage, message) - 68usize];
};
pub type XkbActionMessageEvent = _XkbActionMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbAccessXNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub keycode: ::std::os::raw::c_int,
    pub sk_delay: ::std::os::raw::c_int,
    pub debounce_delay: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbAccessXNotify"][::std::mem::size_of::<_XkbAccessXNotify>() - 64usize];
    ["Alignment of _XkbAccessXNotify"][::std::mem::align_of::<_XkbAccessXNotify>() - 8usize];
    ["Offset of field: _XkbAccessXNotify::type_"]
        [::std::mem::offset_of!(_XkbAccessXNotify, type_) - 0usize];
    ["Offset of field: _XkbAccessXNotify::serial"]
        [::std::mem::offset_of!(_XkbAccessXNotify, serial) - 8usize];
    ["Offset of field: _XkbAccessXNotify::send_event"]
        [::std::mem::offset_of!(_XkbAccessXNotify, send_event) - 16usize];
    ["Offset of field: _XkbAccessXNotify::display"]
        [::std::mem::offset_of!(_XkbAccessXNotify, display) - 24usize];
    ["Offset of field: _XkbAccessXNotify::time"]
        [::std::mem::offset_of!(_XkbAccessXNotify, time) - 32usize];
    ["Offset of field: _XkbAccessXNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbAccessXNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbAccessXNotify::device"]
        [::std::mem::offset_of!(_XkbAccessXNotify, device) - 44usize];
    ["Offset of field: _XkbAccessXNotify::detail"]
        [::std::mem::offset_of!(_XkbAccessXNotify, detail) - 48usize];
    ["Offset of field: _XkbAccessXNotify::keycode"]
        [::std::mem::offset_of!(_XkbAccessXNotify, keycode) - 52usize];
    ["Offset of field: _XkbAccessXNotify::sk_delay"]
        [::std::mem::offset_of!(_XkbAccessXNotify, sk_delay) - 56usize];
    ["Offset of field: _XkbAccessXNotify::debounce_delay"]
        [::std::mem::offset_of!(_XkbAccessXNotify, debounce_delay) - 60usize];
};
pub type XkbAccessXNotifyEvent = _XkbAccessXNotify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbExtensionDeviceNotify {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub time: Time,
    pub xkb_type: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub reason: ::std::os::raw::c_uint,
    pub supported: ::std::os::raw::c_uint,
    pub unsupported: ::std::os::raw::c_uint,
    pub first_btn: ::std::os::raw::c_int,
    pub num_btns: ::std::os::raw::c_int,
    pub leds_defined: ::std::os::raw::c_uint,
    pub led_state: ::std::os::raw::c_uint,
    pub led_class: ::std::os::raw::c_int,
    pub led_id: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbExtensionDeviceNotify"]
        [::std::mem::size_of::<_XkbExtensionDeviceNotify>() - 88usize];
    ["Alignment of _XkbExtensionDeviceNotify"]
        [::std::mem::align_of::<_XkbExtensionDeviceNotify>() - 8usize];
    ["Offset of field: _XkbExtensionDeviceNotify::type_"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, type_) - 0usize];
    ["Offset of field: _XkbExtensionDeviceNotify::serial"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, serial) - 8usize];
    ["Offset of field: _XkbExtensionDeviceNotify::send_event"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, send_event) - 16usize];
    ["Offset of field: _XkbExtensionDeviceNotify::display"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, display) - 24usize];
    ["Offset of field: _XkbExtensionDeviceNotify::time"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, time) - 32usize];
    ["Offset of field: _XkbExtensionDeviceNotify::xkb_type"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, xkb_type) - 40usize];
    ["Offset of field: _XkbExtensionDeviceNotify::device"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, device) - 44usize];
    ["Offset of field: _XkbExtensionDeviceNotify::reason"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, reason) - 48usize];
    ["Offset of field: _XkbExtensionDeviceNotify::supported"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, supported) - 52usize];
    ["Offset of field: _XkbExtensionDeviceNotify::unsupported"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, unsupported) - 56usize];
    ["Offset of field: _XkbExtensionDeviceNotify::first_btn"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, first_btn) - 60usize];
    ["Offset of field: _XkbExtensionDeviceNotify::num_btns"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, num_btns) - 64usize];
    ["Offset of field: _XkbExtensionDeviceNotify::leds_defined"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, leds_defined) - 68usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_state"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_state) - 72usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_class"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_class) - 76usize];
    ["Offset of field: _XkbExtensionDeviceNotify::led_id"]
        [::std::mem::offset_of!(_XkbExtensionDeviceNotify, led_id) - 80usize];
};
pub type XkbExtensionDeviceNotifyEvent = _XkbExtensionDeviceNotify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XkbEvent {
    pub type_: ::std::os::raw::c_int,
    pub any: XkbAnyEvent,
    pub new_kbd: XkbNewKeyboardNotifyEvent,
    pub map: XkbMapNotifyEvent,
    pub state: XkbStateNotifyEvent,
    pub ctrls: XkbControlsNotifyEvent,
    pub indicators: XkbIndicatorNotifyEvent,
    pub names: XkbNamesNotifyEvent,
    pub compat: XkbCompatMapNotifyEvent,
    pub bell: XkbBellNotifyEvent,
    pub message: XkbActionMessageEvent,
    pub accessx: XkbAccessXNotifyEvent,
    pub device: XkbExtensionDeviceNotifyEvent,
    pub core: XEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XkbEvent"][::std::mem::size_of::<_XkbEvent>() - 192usize];
    ["Alignment of _XkbEvent"][::std::mem::align_of::<_XkbEvent>() - 8usize];
    ["Offset of field: _XkbEvent::type_"][::std::mem::offset_of!(_XkbEvent, type_) - 0usize];
    ["Offset of field: _XkbEvent::any"][::std::mem::offset_of!(_XkbEvent, any) - 0usize];
    ["Offset of field: _XkbEvent::new_kbd"][::std::mem::offset_of!(_XkbEvent, new_kbd) - 0usize];
    ["Offset of field: _XkbEvent::map"][::std::mem::offset_of!(_XkbEvent, map) - 0usize];
    ["Offset of field: _XkbEvent::state"][::std::mem::offset_of!(_XkbEvent, state) - 0usize];
    ["Offset of field: _XkbEvent::ctrls"][::std::mem::offset_of!(_XkbEvent, ctrls) - 0usize];
    ["Offset of field: _XkbEvent::indicators"]
        [::std::mem::offset_of!(_XkbEvent, indicators) - 0usize];
    ["Offset of field: _XkbEvent::names"][::std::mem::offset_of!(_XkbEvent, names) - 0usize];
    ["Offset of field: _XkbEvent::compat"][::std::mem::offset_of!(_XkbEvent, compat) - 0usize];
    ["Offset of field: _XkbEvent::bell"][::std::mem::offset_of!(_XkbEvent, bell) - 0usize];
    ["Offset of field: _XkbEvent::message"][::std::mem::offset_of!(_XkbEvent, message) - 0usize];
    ["Offset of field: _XkbEvent::accessx"][::std::mem::offset_of!(_XkbEvent, accessx) - 0usize];
    ["Offset of field: _XkbEvent::device"][::std::mem::offset_of!(_XkbEvent, device) - 0usize];
    ["Offset of field: _XkbEvent::core"][::std::mem::offset_of!(_XkbEvent, core) - 0usize];
};
pub type XkbEvent = _XkbEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XkbKbdDpyState {
    _unused: [u8; 0],
}
pub type XkbKbdDpyStateRec = _XkbKbdDpyState;
pub type XkbKbdDpyStatePtr = *mut _XkbKbdDpyState;
unsafe extern "C" {
    pub fn XkbIgnoreExtension(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbOpenDisplay(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> *mut Display;
}
unsafe extern "C" {
    pub fn XkbQueryExtension(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbUseExtension(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLibraryVersion(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetXlibControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn XkbGetXlibControls(arg1: *mut Display) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn XkbXlibControlsImplemented() -> ::std::os::raw::c_uint;
}
pub type XkbInternAtomFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom,
>;
pub type XkbGetAtomNameFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: Atom) -> *mut ::std::os::raw::c_char,
>;
unsafe extern "C" {
    pub fn XkbSetAtomFuncs(arg1: XkbInternAtomFunc, arg2: XkbGetAtomNameFunc);
}
unsafe extern "C" {
    pub fn XkbKeycodeToKeysym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> KeySym;
}
unsafe extern "C" {
    pub fn XkbKeysymToModifiers(arg1: *mut Display, arg2: KeySym) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn XkbLookupKeySym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLookupKeyBinding(
        arg1: *mut Display,
        arg2: KeySym,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbTranslateKeyCode(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbTranslateKeySym(
        arg1: *mut Display,
        arg2: *mut KeySym,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetAutoRepeatRate(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetAutoRepeatRate(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbChangeEnabledControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbDeviceBell(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbForceDeviceBell(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbDeviceBellEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbBell(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbForceBell(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbBellEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSelectEvents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSelectEventDetails(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbNoteMapChanges(
        arg1: XkbMapChangesPtr,
        arg2: *mut XkbMapNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn XkbNoteNameChanges(
        arg1: XkbNameChangesPtr,
        arg2: *mut XkbNamesNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn XkbGetIndicatorState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetDeviceIndicatorState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetIndicatorMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetIndicatorMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetNamedIndicator(
        arg1: *mut Display,
        arg2: Atom,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: XkbIndicatorMapPtr,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetNamedDeviceIndicator(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: Atom,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: XkbIndicatorMapPtr,
        arg9: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetNamedIndicator(
        arg1: *mut Display,
        arg2: Atom,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: XkbIndicatorMapPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetNamedDeviceIndicator(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: Atom,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: XkbIndicatorMapPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLockModifiers(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLatchModifiers(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLockGroup(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbLatchGroup(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetServerInternalMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetIgnoreLockMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbVirtualModsToReal(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbComputeEffectiveMap(
        arg1: XkbDescPtr,
        arg2: XkbKeyTypePtr,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbInitCanonicalKeyTypes(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAllocKeyboard() -> XkbDescPtr;
}
unsafe extern "C" {
    pub fn XkbFreeKeyboard(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbAllocClientMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAllocServerMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbFreeClientMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbFreeServerMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbAddKeyType(
        arg1: XkbDescPtr,
        arg2: Atom,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> XkbKeyTypePtr;
}
unsafe extern "C" {
    pub fn XkbAllocIndicatorMaps(arg1: XkbDescPtr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbFreeIndicatorMaps(arg1: XkbDescPtr);
}
unsafe extern "C" {
    pub fn XkbGetMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDescPtr;
}
unsafe extern "C" {
    pub fn XkbGetUpdatedMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetMapChanges(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbRefreshKeyboardMapping(arg1: *mut XkbMapNotifyEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyTypes(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeySyms(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyActions(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyBehaviors(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetVirtualMods(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyExplicitComponents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyModifierMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetKeyVirtualModMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAllocControls(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbFreeControls(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbAllControlsMask(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbNoteControlsChanges(
        arg1: XkbControlsChangesPtr,
        arg2: *mut XkbControlsNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn XkbAllocCompatMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbFreeCompatMap(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbGetCompatMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetCompatMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAddSymInterpret(
        arg1: XkbDescPtr,
        arg2: XkbSymInterpretPtr,
        arg3: ::std::os::raw::c_int,
        arg4: XkbChangesPtr,
    ) -> XkbSymInterpretPtr;
}
unsafe extern "C" {
    pub fn XkbAllocNames(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetNames(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetNames(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbChangeNames(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbNameChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbFreeNames(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbGetState(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbStatePtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetMap(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbChangeMap(
        arg1: *mut Display,
        arg2: XkbDescPtr,
        arg3: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetDetectableAutoRepeat(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetDetectableAutoRepeat(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetAutoResetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetAutoResetControls(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetPerClientControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetPerClientControls(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbCopyKeyType(arg1: XkbKeyTypePtr, arg2: XkbKeyTypePtr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbCopyKeyTypes(
        arg1: XkbKeyTypePtr,
        arg2: XkbKeyTypePtr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbResizeKeyType(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbResizeKeySyms(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
unsafe extern "C" {
    pub fn XkbResizeKeyActions(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XkbAction;
}
unsafe extern "C" {
    pub fn XkbChangeTypesOfKey(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_int,
        arg6: XkbMapChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbChangeKeycodeRange(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbListComponents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbComponentNamesPtr,
        arg4: *mut ::std::os::raw::c_int,
    ) -> XkbComponentListPtr;
}
unsafe extern "C" {
    pub fn XkbFreeComponentList(arg1: XkbComponentListPtr);
}
unsafe extern "C" {
    pub fn XkbGetKeyboard(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDescPtr;
}
unsafe extern "C" {
    pub fn XkbGetKeyboardByName(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbComponentNamesPtr,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_int,
    ) -> XkbDescPtr;
}
unsafe extern "C" {
    pub fn XkbKeyTypesForCoreSymbols(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_int,
        arg3: *mut KeySym,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut KeySym,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbApplyCompatMapToKey(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbUpdateMapFromCore(
        arg1: XkbDescPtr,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAddDeviceLedInfo(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDeviceLedInfoPtr;
}
unsafe extern "C" {
    pub fn XkbResizeDeviceButtonActions(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbAllocDeviceInfo(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> XkbDeviceInfoPtr;
}
unsafe extern "C" {
    pub fn XkbFreeDeviceInfo(
        arg1: XkbDeviceInfoPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XkbNoteDeviceChanges(
        arg1: XkbDeviceChangesPtr,
        arg2: *mut XkbExtensionDeviceNotifyEvent,
        arg3: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    pub fn XkbGetDeviceInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> XkbDeviceInfoPtr;
}
unsafe extern "C" {
    pub fn XkbGetDeviceInfoChanges(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: XkbDeviceChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetDeviceButtonActions(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbGetDeviceLedInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetDeviceInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbDeviceInfoPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbChangeDeviceInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: XkbDeviceChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetDeviceLedInfo(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbSetDeviceButtonActions(
        arg1: *mut Display,
        arg2: XkbDeviceInfoPtr,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbToControl(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XkbSetDebuggingFlags(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbApplyVirtualModChanges(
        arg1: XkbDescPtr,
        arg2: ::std::os::raw::c_uint,
        arg3: XkbChangesPtr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbUpdateActionVirtualMods(
        arg1: XkbDescPtr,
        arg2: *mut XkbAction,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XkbUpdateKeyTypeVirtualMods(
        arg1: XkbDescPtr,
        arg2: XkbKeyTypePtr,
        arg3: ::std::os::raw::c_uint,
        arg4: XkbChangesPtr,
    );
}
unsafe extern "C" {
    pub fn XkbGetControls(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: XkbDescPtr,
    ) -> ::std::os::raw::c_int;
}
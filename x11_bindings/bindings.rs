/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2Y: u32 = 0;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 41;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const X_PROTOCOL: u32 = 11;
pub const X_PROTOCOL_REVISION: u32 = 0;
pub const X_TCP_PORT: u32 = 6000;
pub const XCB_CONN_ERROR: u32 = 1;
pub const XCB_CONN_CLOSED_EXT_NOTSUPPORTED: u32 = 2;
pub const XCB_CONN_CLOSED_MEM_INSUFFICIENT: u32 = 3;
pub const XCB_CONN_CLOSED_REQ_LEN_EXCEED: u32 = 4;
pub const XCB_CONN_CLOSED_PARSE_ERR: u32 = 5;
pub const XCB_CONN_CLOSED_INVALID_SCREEN: u32 = 6;
pub const XCB_CONN_CLOSED_FDPASSING_FAILED: u32 = 7;
pub const XCB_KEY_PRESS: u32 = 2;
pub const XCB_KEY_RELEASE: u32 = 3;
pub const XCB_BUTTON_PRESS: u32 = 4;
pub const XCB_BUTTON_RELEASE: u32 = 5;
pub const XCB_MOTION_NOTIFY: u32 = 6;
pub const XCB_ENTER_NOTIFY: u32 = 7;
pub const XCB_LEAVE_NOTIFY: u32 = 8;
pub const XCB_FOCUS_IN: u32 = 9;
pub const XCB_FOCUS_OUT: u32 = 10;
pub const XCB_KEYMAP_NOTIFY: u32 = 11;
pub const XCB_EXPOSE: u32 = 12;
pub const XCB_GRAPHICS_EXPOSURE: u32 = 13;
pub const XCB_NO_EXPOSURE: u32 = 14;
pub const XCB_VISIBILITY_NOTIFY: u32 = 15;
pub const XCB_CREATE_NOTIFY: u32 = 16;
pub const XCB_DESTROY_NOTIFY: u32 = 17;
pub const XCB_UNMAP_NOTIFY: u32 = 18;
pub const XCB_MAP_NOTIFY: u32 = 19;
pub const XCB_MAP_REQUEST: u32 = 20;
pub const XCB_REPARENT_NOTIFY: u32 = 21;
pub const XCB_CONFIGURE_NOTIFY: u32 = 22;
pub const XCB_CONFIGURE_REQUEST: u32 = 23;
pub const XCB_GRAVITY_NOTIFY: u32 = 24;
pub const XCB_RESIZE_REQUEST: u32 = 25;
pub const XCB_CIRCULATE_NOTIFY: u32 = 26;
pub const XCB_CIRCULATE_REQUEST: u32 = 27;
pub const XCB_PROPERTY_NOTIFY: u32 = 28;
pub const XCB_SELECTION_CLEAR: u32 = 29;
pub const XCB_SELECTION_REQUEST: u32 = 30;
pub const XCB_SELECTION_NOTIFY: u32 = 31;
pub const XCB_COLORMAP_NOTIFY: u32 = 32;
pub const XCB_CLIENT_MESSAGE: u32 = 33;
pub const XCB_MAPPING_NOTIFY: u32 = 34;
pub const XCB_GE_GENERIC: u32 = 35;
pub const XCB_REQUEST: u32 = 1;
pub const XCB_VALUE: u32 = 2;
pub const XCB_WINDOW: u32 = 3;
pub const XCB_PIXMAP: u32 = 4;
pub const XCB_ATOM: u32 = 5;
pub const XCB_CURSOR: u32 = 6;
pub const XCB_FONT: u32 = 7;
pub const XCB_MATCH: u32 = 8;
pub const XCB_DRAWABLE: u32 = 9;
pub const XCB_ACCESS: u32 = 10;
pub const XCB_ALLOC: u32 = 11;
pub const XCB_COLORMAP: u32 = 12;
pub const XCB_G_CONTEXT: u32 = 13;
pub const XCB_ID_CHOICE: u32 = 14;
pub const XCB_NAME: u32 = 15;
pub const XCB_LENGTH: u32 = 16;
pub const XCB_IMPLEMENTATION: u32 = 17;
pub const XCB_CREATE_WINDOW: u32 = 1;
pub const XCB_CHANGE_WINDOW_ATTRIBUTES: u32 = 2;
pub const XCB_GET_WINDOW_ATTRIBUTES: u32 = 3;
pub const XCB_DESTROY_WINDOW: u32 = 4;
pub const XCB_DESTROY_SUBWINDOWS: u32 = 5;
pub const XCB_CHANGE_SAVE_SET: u32 = 6;
pub const XCB_REPARENT_WINDOW: u32 = 7;
pub const XCB_MAP_WINDOW: u32 = 8;
pub const XCB_MAP_SUBWINDOWS: u32 = 9;
pub const XCB_UNMAP_WINDOW: u32 = 10;
pub const XCB_UNMAP_SUBWINDOWS: u32 = 11;
pub const XCB_CONFIGURE_WINDOW: u32 = 12;
pub const XCB_CIRCULATE_WINDOW: u32 = 13;
pub const XCB_GET_GEOMETRY: u32 = 14;
pub const XCB_QUERY_TREE: u32 = 15;
pub const XCB_INTERN_ATOM: u32 = 16;
pub const XCB_GET_ATOM_NAME: u32 = 17;
pub const XCB_CHANGE_PROPERTY: u32 = 18;
pub const XCB_DELETE_PROPERTY: u32 = 19;
pub const XCB_GET_PROPERTY: u32 = 20;
pub const XCB_LIST_PROPERTIES: u32 = 21;
pub const XCB_SET_SELECTION_OWNER: u32 = 22;
pub const XCB_GET_SELECTION_OWNER: u32 = 23;
pub const XCB_CONVERT_SELECTION: u32 = 24;
pub const XCB_SEND_EVENT: u32 = 25;
pub const XCB_GRAB_POINTER: u32 = 26;
pub const XCB_UNGRAB_POINTER: u32 = 27;
pub const XCB_GRAB_BUTTON: u32 = 28;
pub const XCB_UNGRAB_BUTTON: u32 = 29;
pub const XCB_CHANGE_ACTIVE_POINTER_GRAB: u32 = 30;
pub const XCB_GRAB_KEYBOARD: u32 = 31;
pub const XCB_UNGRAB_KEYBOARD: u32 = 32;
pub const XCB_GRAB_KEY: u32 = 33;
pub const XCB_UNGRAB_KEY: u32 = 34;
pub const XCB_ALLOW_EVENTS: u32 = 35;
pub const XCB_GRAB_SERVER: u32 = 36;
pub const XCB_UNGRAB_SERVER: u32 = 37;
pub const XCB_QUERY_POINTER: u32 = 38;
pub const XCB_GET_MOTION_EVENTS: u32 = 39;
pub const XCB_TRANSLATE_COORDINATES: u32 = 40;
pub const XCB_WARP_POINTER: u32 = 41;
pub const XCB_SET_INPUT_FOCUS: u32 = 42;
pub const XCB_GET_INPUT_FOCUS: u32 = 43;
pub const XCB_QUERY_KEYMAP: u32 = 44;
pub const XCB_OPEN_FONT: u32 = 45;
pub const XCB_CLOSE_FONT: u32 = 46;
pub const XCB_QUERY_FONT: u32 = 47;
pub const XCB_QUERY_TEXT_EXTENTS: u32 = 48;
pub const XCB_LIST_FONTS: u32 = 49;
pub const XCB_LIST_FONTS_WITH_INFO: u32 = 50;
pub const XCB_SET_FONT_PATH: u32 = 51;
pub const XCB_GET_FONT_PATH: u32 = 52;
pub const XCB_CREATE_PIXMAP: u32 = 53;
pub const XCB_FREE_PIXMAP: u32 = 54;
pub const XCB_CREATE_GC: u32 = 55;
pub const XCB_CHANGE_GC: u32 = 56;
pub const XCB_COPY_GC: u32 = 57;
pub const XCB_SET_DASHES: u32 = 58;
pub const XCB_SET_CLIP_RECTANGLES: u32 = 59;
pub const XCB_FREE_GC: u32 = 60;
pub const XCB_CLEAR_AREA: u32 = 61;
pub const XCB_COPY_AREA: u32 = 62;
pub const XCB_COPY_PLANE: u32 = 63;
pub const XCB_POLY_POINT: u32 = 64;
pub const XCB_POLY_LINE: u32 = 65;
pub const XCB_POLY_SEGMENT: u32 = 66;
pub const XCB_POLY_RECTANGLE: u32 = 67;
pub const XCB_POLY_ARC: u32 = 68;
pub const XCB_FILL_POLY: u32 = 69;
pub const XCB_POLY_FILL_RECTANGLE: u32 = 70;
pub const XCB_POLY_FILL_ARC: u32 = 71;
pub const XCB_PUT_IMAGE: u32 = 72;
pub const XCB_GET_IMAGE: u32 = 73;
pub const XCB_POLY_TEXT_8: u32 = 74;
pub const XCB_POLY_TEXT_16: u32 = 75;
pub const XCB_IMAGE_TEXT_8: u32 = 76;
pub const XCB_IMAGE_TEXT_16: u32 = 77;
pub const XCB_CREATE_COLORMAP: u32 = 78;
pub const XCB_FREE_COLORMAP: u32 = 79;
pub const XCB_COPY_COLORMAP_AND_FREE: u32 = 80;
pub const XCB_INSTALL_COLORMAP: u32 = 81;
pub const XCB_UNINSTALL_COLORMAP: u32 = 82;
pub const XCB_LIST_INSTALLED_COLORMAPS: u32 = 83;
pub const XCB_ALLOC_COLOR: u32 = 84;
pub const XCB_ALLOC_NAMED_COLOR: u32 = 85;
pub const XCB_ALLOC_COLOR_CELLS: u32 = 86;
pub const XCB_ALLOC_COLOR_PLANES: u32 = 87;
pub const XCB_FREE_COLORS: u32 = 88;
pub const XCB_STORE_COLORS: u32 = 89;
pub const XCB_STORE_NAMED_COLOR: u32 = 90;
pub const XCB_QUERY_COLORS: u32 = 91;
pub const XCB_LOOKUP_COLOR: u32 = 92;
pub const XCB_CREATE_CURSOR: u32 = 93;
pub const XCB_CREATE_GLYPH_CURSOR: u32 = 94;
pub const XCB_FREE_CURSOR: u32 = 95;
pub const XCB_RECOLOR_CURSOR: u32 = 96;
pub const XCB_QUERY_BEST_SIZE: u32 = 97;
pub const XCB_QUERY_EXTENSION: u32 = 98;
pub const XCB_LIST_EXTENSIONS: u32 = 99;
pub const XCB_CHANGE_KEYBOARD_MAPPING: u32 = 100;
pub const XCB_GET_KEYBOARD_MAPPING: u32 = 101;
pub const XCB_CHANGE_KEYBOARD_CONTROL: u32 = 102;
pub const XCB_GET_KEYBOARD_CONTROL: u32 = 103;
pub const XCB_BELL: u32 = 104;
pub const XCB_CHANGE_POINTER_CONTROL: u32 = 105;
pub const XCB_GET_POINTER_CONTROL: u32 = 106;
pub const XCB_SET_SCREEN_SAVER: u32 = 107;
pub const XCB_GET_SCREEN_SAVER: u32 = 108;
pub const XCB_CHANGE_HOSTS: u32 = 109;
pub const XCB_LIST_HOSTS: u32 = 110;
pub const XCB_SET_ACCESS_CONTROL: u32 = 111;
pub const XCB_SET_CLOSE_DOWN_MODE: u32 = 112;
pub const XCB_KILL_CLIENT: u32 = 113;
pub const XCB_ROTATE_PROPERTIES: u32 = 114;
pub const XCB_FORCE_SCREEN_SAVER: u32 = 115;
pub const XCB_SET_POINTER_MAPPING: u32 = 116;
pub const XCB_GET_POINTER_MAPPING: u32 = 117;
pub const XCB_SET_MODIFIER_MAPPING: u32 = 118;
pub const XCB_GET_MODIFIER_MAPPING: u32 = 119;
pub const XCB_NO_OPERATION: u32 = 127;
pub const XCB_NONE: u32 = 0;
pub const XCB_COPY_FROM_PARENT: u32 = 0;
pub const XCB_CURRENT_TIME: u32 = 0;
pub const XCB_NO_SYMBOL: u32 = 0;
pub const XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS: u32 = 18;
pub const XCB_ICCCM_NUM_WM_HINTS_ELEMENTS: u32 = 9;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 1;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 1;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const XCB_RENDER_MAJOR_VERSION: u32 = 0;
pub const XCB_RENDER_MINOR_VERSION: u32 = 11;
pub const XCB_RENDER_PICT_FORMAT: u32 = 0;
pub const XCB_RENDER_PICTURE: u32 = 1;
pub const XCB_RENDER_PICT_OP: u32 = 2;
pub const XCB_RENDER_GLYPH_SET: u32 = 3;
pub const XCB_RENDER_GLYPH: u32 = 4;
pub const XCB_RENDER_QUERY_VERSION: u32 = 0;
pub const XCB_RENDER_QUERY_PICT_FORMATS: u32 = 1;
pub const XCB_RENDER_QUERY_PICT_INDEX_VALUES: u32 = 2;
pub const XCB_RENDER_CREATE_PICTURE: u32 = 4;
pub const XCB_RENDER_CHANGE_PICTURE: u32 = 5;
pub const XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES: u32 = 6;
pub const XCB_RENDER_FREE_PICTURE: u32 = 7;
pub const XCB_RENDER_COMPOSITE: u32 = 8;
pub const XCB_RENDER_TRAPEZOIDS: u32 = 10;
pub const XCB_RENDER_TRIANGLES: u32 = 11;
pub const XCB_RENDER_TRI_STRIP: u32 = 12;
pub const XCB_RENDER_TRI_FAN: u32 = 13;
pub const XCB_RENDER_CREATE_GLYPH_SET: u32 = 17;
pub const XCB_RENDER_REFERENCE_GLYPH_SET: u32 = 18;
pub const XCB_RENDER_FREE_GLYPH_SET: u32 = 19;
pub const XCB_RENDER_ADD_GLYPHS: u32 = 20;
pub const XCB_RENDER_FREE_GLYPHS: u32 = 22;
pub const XCB_RENDER_COMPOSITE_GLYPHS_8: u32 = 23;
pub const XCB_RENDER_COMPOSITE_GLYPHS_16: u32 = 24;
pub const XCB_RENDER_COMPOSITE_GLYPHS_32: u32 = 25;
pub const XCB_RENDER_FILL_RECTANGLES: u32 = 26;
pub const XCB_RENDER_CREATE_CURSOR: u32 = 27;
pub const XCB_RENDER_SET_PICTURE_TRANSFORM: u32 = 28;
pub const XCB_RENDER_QUERY_FILTERS: u32 = 29;
pub const XCB_RENDER_SET_PICTURE_FILTER: u32 = 30;
pub const XCB_RENDER_CREATE_ANIM_CURSOR: u32 = 31;
pub const XCB_RENDER_ADD_TRAPS: u32 = 32;
pub const XCB_RENDER_CREATE_SOLID_FILL: u32 = 33;
pub const XCB_RENDER_CREATE_LINEAR_GRADIENT: u32 = 34;
pub const XCB_RENDER_CREATE_RADIAL_GRADIENT: u32 = 35;
pub const XCB_RENDER_CREATE_CONICAL_GRADIENT: u32 = 36;
pub const XCB_RANDR_MAJOR_VERSION: u32 = 1;
pub const XCB_RANDR_MINOR_VERSION: u32 = 6;
pub const XCB_RANDR_BAD_OUTPUT: u32 = 0;
pub const XCB_RANDR_BAD_CRTC: u32 = 1;
pub const XCB_RANDR_BAD_MODE: u32 = 2;
pub const XCB_RANDR_BAD_PROVIDER: u32 = 3;
pub const XCB_RANDR_QUERY_VERSION: u32 = 0;
pub const XCB_RANDR_SET_SCREEN_CONFIG: u32 = 2;
pub const XCB_RANDR_SELECT_INPUT: u32 = 4;
pub const XCB_RANDR_GET_SCREEN_INFO: u32 = 5;
pub const XCB_RANDR_GET_SCREEN_SIZE_RANGE: u32 = 6;
pub const XCB_RANDR_SET_SCREEN_SIZE: u32 = 7;
pub const XCB_RANDR_GET_SCREEN_RESOURCES: u32 = 8;
pub const XCB_RANDR_GET_OUTPUT_INFO: u32 = 9;
pub const XCB_RANDR_LIST_OUTPUT_PROPERTIES: u32 = 10;
pub const XCB_RANDR_QUERY_OUTPUT_PROPERTY: u32 = 11;
pub const XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY: u32 = 12;
pub const XCB_RANDR_CHANGE_OUTPUT_PROPERTY: u32 = 13;
pub const XCB_RANDR_DELETE_OUTPUT_PROPERTY: u32 = 14;
pub const XCB_RANDR_GET_OUTPUT_PROPERTY: u32 = 15;
pub const XCB_RANDR_CREATE_MODE: u32 = 16;
pub const XCB_RANDR_DESTROY_MODE: u32 = 17;
pub const XCB_RANDR_ADD_OUTPUT_MODE: u32 = 18;
pub const XCB_RANDR_DELETE_OUTPUT_MODE: u32 = 19;
pub const XCB_RANDR_GET_CRTC_INFO: u32 = 20;
pub const XCB_RANDR_SET_CRTC_CONFIG: u32 = 21;
pub const XCB_RANDR_GET_CRTC_GAMMA_SIZE: u32 = 22;
pub const XCB_RANDR_GET_CRTC_GAMMA: u32 = 23;
pub const XCB_RANDR_SET_CRTC_GAMMA: u32 = 24;
pub const XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT: u32 = 25;
pub const XCB_RANDR_SET_CRTC_TRANSFORM: u32 = 26;
pub const XCB_RANDR_GET_CRTC_TRANSFORM: u32 = 27;
pub const XCB_RANDR_GET_PANNING: u32 = 28;
pub const XCB_RANDR_SET_PANNING: u32 = 29;
pub const XCB_RANDR_SET_OUTPUT_PRIMARY: u32 = 30;
pub const XCB_RANDR_GET_OUTPUT_PRIMARY: u32 = 31;
pub const XCB_RANDR_GET_PROVIDERS: u32 = 32;
pub const XCB_RANDR_GET_PROVIDER_INFO: u32 = 33;
pub const XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK: u32 = 34;
pub const XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE: u32 = 35;
pub const XCB_RANDR_LIST_PROVIDER_PROPERTIES: u32 = 36;
pub const XCB_RANDR_QUERY_PROVIDER_PROPERTY: u32 = 37;
pub const XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY: u32 = 38;
pub const XCB_RANDR_CHANGE_PROVIDER_PROPERTY: u32 = 39;
pub const XCB_RANDR_DELETE_PROVIDER_PROPERTY: u32 = 40;
pub const XCB_RANDR_GET_PROVIDER_PROPERTY: u32 = 41;
pub const XCB_RANDR_SCREEN_CHANGE_NOTIFY: u32 = 0;
pub const XCB_RANDR_GET_MONITORS: u32 = 42;
pub const XCB_RANDR_SET_MONITOR: u32 = 43;
pub const XCB_RANDR_DELETE_MONITOR: u32 = 44;
pub const XCB_RANDR_CREATE_LEASE: u32 = 45;
pub const XCB_RANDR_FREE_LEASE: u32 = 46;
pub const XCB_RANDR_NOTIFY: u32 = 1;
pub const XlibSpecificationRelease: u32 = 6;
pub const None: u32 = 0;
pub const ParentRelative: u32 = 1;
pub const CopyFromParent: u32 = 0;
pub const PointerWindow: u32 = 0;
pub const InputFocus: u32 = 1;
pub const PointerRoot: u32 = 1;
pub const AnyPropertyType: u32 = 0;
pub const AnyKey: u32 = 0;
pub const AnyButton: u32 = 0;
pub const AllTemporary: u32 = 0;
pub const CurrentTime: u32 = 0;
pub const NoSymbol: u32 = 0;
pub const NoEventMask: u32 = 0;
pub const KeyPressMask: u32 = 1;
pub const KeyReleaseMask: u32 = 2;
pub const ButtonPressMask: u32 = 4;
pub const ButtonReleaseMask: u32 = 8;
pub const EnterWindowMask: u32 = 16;
pub const LeaveWindowMask: u32 = 32;
pub const PointerMotionMask: u32 = 64;
pub const PointerMotionHintMask: u32 = 128;
pub const Button1MotionMask: u32 = 256;
pub const Button2MotionMask: u32 = 512;
pub const Button3MotionMask: u32 = 1024;
pub const Button4MotionMask: u32 = 2048;
pub const Button5MotionMask: u32 = 4096;
pub const ButtonMotionMask: u32 = 8192;
pub const KeymapStateMask: u32 = 16384;
pub const ExposureMask: u32 = 32768;
pub const VisibilityChangeMask: u32 = 65536;
pub const StructureNotifyMask: u32 = 131072;
pub const ResizeRedirectMask: u32 = 262144;
pub const SubstructureNotifyMask: u32 = 524288;
pub const SubstructureRedirectMask: u32 = 1048576;
pub const FocusChangeMask: u32 = 2097152;
pub const PropertyChangeMask: u32 = 4194304;
pub const ColormapChangeMask: u32 = 8388608;
pub const OwnerGrabButtonMask: u32 = 16777216;
pub const KeyPress: u32 = 2;
pub const KeyRelease: u32 = 3;
pub const ButtonPress: u32 = 4;
pub const ButtonRelease: u32 = 5;
pub const MotionNotify: u32 = 6;
pub const EnterNotify: u32 = 7;
pub const LeaveNotify: u32 = 8;
pub const FocusIn: u32 = 9;
pub const FocusOut: u32 = 10;
pub const KeymapNotify: u32 = 11;
pub const Expose: u32 = 12;
pub const GraphicsExpose: u32 = 13;
pub const NoExpose: u32 = 14;
pub const VisibilityNotify: u32 = 15;
pub const CreateNotify: u32 = 16;
pub const DestroyNotify: u32 = 17;
pub const UnmapNotify: u32 = 18;
pub const MapNotify: u32 = 19;
pub const MapRequest: u32 = 20;
pub const ReparentNotify: u32 = 21;
pub const ConfigureNotify: u32 = 22;
pub const ConfigureRequest: u32 = 23;
pub const GravityNotify: u32 = 24;
pub const ResizeRequest: u32 = 25;
pub const CirculateNotify: u32 = 26;
pub const CirculateRequest: u32 = 27;
pub const PropertyNotify: u32 = 28;
pub const SelectionClear: u32 = 29;
pub const SelectionRequest: u32 = 30;
pub const SelectionNotify: u32 = 31;
pub const ColormapNotify: u32 = 32;
pub const ClientMessage: u32 = 33;
pub const MappingNotify: u32 = 34;
pub const GenericEvent: u32 = 35;
pub const LASTEvent: u32 = 36;
pub const ShiftMask: u32 = 1;
pub const LockMask: u32 = 2;
pub const ControlMask: u32 = 4;
pub const Mod1Mask: u32 = 8;
pub const Mod2Mask: u32 = 16;
pub const Mod3Mask: u32 = 32;
pub const Mod4Mask: u32 = 64;
pub const Mod5Mask: u32 = 128;
pub const ShiftMapIndex: u32 = 0;
pub const LockMapIndex: u32 = 1;
pub const ControlMapIndex: u32 = 2;
pub const Mod1MapIndex: u32 = 3;
pub const Mod2MapIndex: u32 = 4;
pub const Mod3MapIndex: u32 = 5;
pub const Mod4MapIndex: u32 = 6;
pub const Mod5MapIndex: u32 = 7;
pub const Button1Mask: u32 = 256;
pub const Button2Mask: u32 = 512;
pub const Button3Mask: u32 = 1024;
pub const Button4Mask: u32 = 2048;
pub const Button5Mask: u32 = 4096;
pub const AnyModifier: u32 = 32768;
pub const Button1: u32 = 1;
pub const Button2: u32 = 2;
pub const Button3: u32 = 3;
pub const Button4: u32 = 4;
pub const Button5: u32 = 5;
pub const NotifyNormal: u32 = 0;
pub const NotifyGrab: u32 = 1;
pub const NotifyUngrab: u32 = 2;
pub const NotifyWhileGrabbed: u32 = 3;
pub const NotifyHint: u32 = 1;
pub const NotifyAncestor: u32 = 0;
pub const NotifyVirtual: u32 = 1;
pub const NotifyInferior: u32 = 2;
pub const NotifyNonlinear: u32 = 3;
pub const NotifyNonlinearVirtual: u32 = 4;
pub const NotifyPointer: u32 = 5;
pub const NotifyPointerRoot: u32 = 6;
pub const NotifyDetailNone: u32 = 7;
pub const VisibilityUnobscured: u32 = 0;
pub const VisibilityPartiallyObscured: u32 = 1;
pub const VisibilityFullyObscured: u32 = 2;
pub const PlaceOnTop: u32 = 0;
pub const PlaceOnBottom: u32 = 1;
pub const FamilyInternet: u32 = 0;
pub const FamilyDECnet: u32 = 1;
pub const FamilyChaos: u32 = 2;
pub const FamilyInternet6: u32 = 6;
pub const FamilyServerInterpreted: u32 = 5;
pub const PropertyNewValue: u32 = 0;
pub const PropertyDelete: u32 = 1;
pub const ColormapUninstalled: u32 = 0;
pub const ColormapInstalled: u32 = 1;
pub const GrabModeSync: u32 = 0;
pub const GrabModeAsync: u32 = 1;
pub const GrabSuccess: u32 = 0;
pub const AlreadyGrabbed: u32 = 1;
pub const GrabInvalidTime: u32 = 2;
pub const GrabNotViewable: u32 = 3;
pub const GrabFrozen: u32 = 4;
pub const AsyncPointer: u32 = 0;
pub const SyncPointer: u32 = 1;
pub const ReplayPointer: u32 = 2;
pub const AsyncKeyboard: u32 = 3;
pub const SyncKeyboard: u32 = 4;
pub const ReplayKeyboard: u32 = 5;
pub const AsyncBoth: u32 = 6;
pub const SyncBoth: u32 = 7;
pub const RevertToParent: u32 = 2;
pub const Success: u32 = 0;
pub const BadRequest: u32 = 1;
pub const BadValue: u32 = 2;
pub const BadWindow: u32 = 3;
pub const BadPixmap: u32 = 4;
pub const BadAtom: u32 = 5;
pub const BadCursor: u32 = 6;
pub const BadFont: u32 = 7;
pub const BadMatch: u32 = 8;
pub const BadDrawable: u32 = 9;
pub const BadAccess: u32 = 10;
pub const BadAlloc: u32 = 11;
pub const BadColor: u32 = 12;
pub const BadGC: u32 = 13;
pub const BadIDChoice: u32 = 14;
pub const BadName: u32 = 15;
pub const BadLength: u32 = 16;
pub const BadImplementation: u32 = 17;
pub const FirstExtensionError: u32 = 128;
pub const LastExtensionError: u32 = 255;
pub const InputOutput: u32 = 1;
pub const InputOnly: u32 = 2;
pub const CWBackPixmap: u32 = 1;
pub const CWBackPixel: u32 = 2;
pub const CWBorderPixmap: u32 = 4;
pub const CWBorderPixel: u32 = 8;
pub const CWBitGravity: u32 = 16;
pub const CWWinGravity: u32 = 32;
pub const CWBackingStore: u32 = 64;
pub const CWBackingPlanes: u32 = 128;
pub const CWBackingPixel: u32 = 256;
pub const CWOverrideRedirect: u32 = 512;
pub const CWSaveUnder: u32 = 1024;
pub const CWEventMask: u32 = 2048;
pub const CWDontPropagate: u32 = 4096;
pub const CWColormap: u32 = 8192;
pub const CWCursor: u32 = 16384;
pub const CWX: u32 = 1;
pub const CWY: u32 = 2;
pub const CWWidth: u32 = 4;
pub const CWHeight: u32 = 8;
pub const CWBorderWidth: u32 = 16;
pub const CWSibling: u32 = 32;
pub const CWStackMode: u32 = 64;
pub const ForgetGravity: u32 = 0;
pub const NorthWestGravity: u32 = 1;
pub const NorthGravity: u32 = 2;
pub const NorthEastGravity: u32 = 3;
pub const WestGravity: u32 = 4;
pub const CenterGravity: u32 = 5;
pub const EastGravity: u32 = 6;
pub const SouthWestGravity: u32 = 7;
pub const SouthGravity: u32 = 8;
pub const SouthEastGravity: u32 = 9;
pub const StaticGravity: u32 = 10;
pub const UnmapGravity: u32 = 0;
pub const NotUseful: u32 = 0;
pub const WhenMapped: u32 = 1;
pub const Always: u32 = 2;
pub const IsUnmapped: u32 = 0;
pub const IsUnviewable: u32 = 1;
pub const IsViewable: u32 = 2;
pub const SetModeInsert: u32 = 0;
pub const SetModeDelete: u32 = 1;
pub const DestroyAll: u32 = 0;
pub const RetainPermanent: u32 = 1;
pub const RetainTemporary: u32 = 2;
pub const Above: u32 = 0;
pub const Below: u32 = 1;
pub const TopIf: u32 = 2;
pub const BottomIf: u32 = 3;
pub const Opposite: u32 = 4;
pub const RaiseLowest: u32 = 0;
pub const LowerHighest: u32 = 1;
pub const PropModeReplace: u32 = 0;
pub const PropModePrepend: u32 = 1;
pub const PropModeAppend: u32 = 2;
pub const GXclear: u32 = 0;
pub const GXand: u32 = 1;
pub const GXandReverse: u32 = 2;
pub const GXcopy: u32 = 3;
pub const GXandInverted: u32 = 4;
pub const GXnoop: u32 = 5;
pub const GXxor: u32 = 6;
pub const GXor: u32 = 7;
pub const GXnor: u32 = 8;
pub const GXequiv: u32 = 9;
pub const GXinvert: u32 = 10;
pub const GXorReverse: u32 = 11;
pub const GXcopyInverted: u32 = 12;
pub const GXorInverted: u32 = 13;
pub const GXnand: u32 = 14;
pub const GXset: u32 = 15;
pub const LineSolid: u32 = 0;
pub const LineOnOffDash: u32 = 1;
pub const LineDoubleDash: u32 = 2;
pub const CapNotLast: u32 = 0;
pub const CapButt: u32 = 1;
pub const CapRound: u32 = 2;
pub const CapProjecting: u32 = 3;
pub const JoinMiter: u32 = 0;
pub const JoinRound: u32 = 1;
pub const JoinBevel: u32 = 2;
pub const FillSolid: u32 = 0;
pub const FillTiled: u32 = 1;
pub const FillStippled: u32 = 2;
pub const FillOpaqueStippled: u32 = 3;
pub const EvenOddRule: u32 = 0;
pub const WindingRule: u32 = 1;
pub const ClipByChildren: u32 = 0;
pub const IncludeInferiors: u32 = 1;
pub const Unsorted: u32 = 0;
pub const YSorted: u32 = 1;
pub const YXSorted: u32 = 2;
pub const YXBanded: u32 = 3;
pub const CoordModeOrigin: u32 = 0;
pub const CoordModePrevious: u32 = 1;
pub const Complex: u32 = 0;
pub const Nonconvex: u32 = 1;
pub const Convex: u32 = 2;
pub const ArcChord: u32 = 0;
pub const ArcPieSlice: u32 = 1;
pub const GCFunction: u32 = 1;
pub const GCPlaneMask: u32 = 2;
pub const GCForeground: u32 = 4;
pub const GCBackground: u32 = 8;
pub const GCLineWidth: u32 = 16;
pub const GCLineStyle: u32 = 32;
pub const GCCapStyle: u32 = 64;
pub const GCJoinStyle: u32 = 128;
pub const GCFillStyle: u32 = 256;
pub const GCFillRule: u32 = 512;
pub const GCTile: u32 = 1024;
pub const GCStipple: u32 = 2048;
pub const GCTileStipXOrigin: u32 = 4096;
pub const GCTileStipYOrigin: u32 = 8192;
pub const GCFont: u32 = 16384;
pub const GCSubwindowMode: u32 = 32768;
pub const GCGraphicsExposures: u32 = 65536;
pub const GCClipXOrigin: u32 = 131072;
pub const GCClipYOrigin: u32 = 262144;
pub const GCClipMask: u32 = 524288;
pub const GCDashOffset: u32 = 1048576;
pub const GCDashList: u32 = 2097152;
pub const GCArcMode: u32 = 4194304;
pub const GCLastBit: u32 = 22;
pub const FontLeftToRight: u32 = 0;
pub const FontRightToLeft: u32 = 1;
pub const FontChange: u32 = 255;
pub const XYBitmap: u32 = 0;
pub const XYPixmap: u32 = 1;
pub const ZPixmap: u32 = 2;
pub const AllocNone: u32 = 0;
pub const AllocAll: u32 = 1;
pub const DoRed: u32 = 1;
pub const DoGreen: u32 = 2;
pub const DoBlue: u32 = 4;
pub const CursorShape: u32 = 0;
pub const TileShape: u32 = 1;
pub const StippleShape: u32 = 2;
pub const AutoRepeatModeOff: u32 = 0;
pub const AutoRepeatModeOn: u32 = 1;
pub const AutoRepeatModeDefault: u32 = 2;
pub const LedModeOff: u32 = 0;
pub const LedModeOn: u32 = 1;
pub const KBKeyClickPercent: u32 = 1;
pub const KBBellPercent: u32 = 2;
pub const KBBellPitch: u32 = 4;
pub const KBBellDuration: u32 = 8;
pub const KBLed: u32 = 16;
pub const KBLedMode: u32 = 32;
pub const KBKey: u32 = 64;
pub const KBAutoRepeatMode: u32 = 128;
pub const MappingSuccess: u32 = 0;
pub const MappingBusy: u32 = 1;
pub const MappingFailed: u32 = 2;
pub const MappingModifier: u32 = 0;
pub const MappingKeyboard: u32 = 1;
pub const MappingPointer: u32 = 2;
pub const DontPreferBlanking: u32 = 0;
pub const PreferBlanking: u32 = 1;
pub const DefaultBlanking: u32 = 2;
pub const DisableScreenSaver: u32 = 0;
pub const DisableScreenInterval: u32 = 0;
pub const DontAllowExposures: u32 = 0;
pub const AllowExposures: u32 = 1;
pub const DefaultExposures: u32 = 2;
pub const ScreenSaverReset: u32 = 0;
pub const ScreenSaverActive: u32 = 1;
pub const HostInsert: u32 = 0;
pub const HostDelete: u32 = 1;
pub const EnableAccess: u32 = 1;
pub const DisableAccess: u32 = 0;
pub const StaticGray: u32 = 0;
pub const GrayScale: u32 = 1;
pub const StaticColor: u32 = 2;
pub const PseudoColor: u32 = 3;
pub const TrueColor: u32 = 4;
pub const DirectColor: u32 = 5;
pub const LSBFirst: u32 = 0;
pub const MSBFirst: u32 = 1;
pub const NeedFunctionPrototypes: u32 = 1;
pub const NeedVarargsPrototypes: u32 = 1;
pub const NeedNestedPrototypes: u32 = 1;
pub const FUNCPROTO: u32 = 15;
pub const NeedWidePrototypes: u32 = 0;
pub const X_HAVE_UTF8_STRING: u32 = 1;
pub const True: u32 = 1;
pub const False: u32 = 0;
pub const QueuedAlready: u32 = 0;
pub const QueuedAfterReading: u32 = 1;
pub const QueuedAfterFlush: u32 = 2;
pub const XNRequiredCharSet: &[u8; 16] = b"requiredCharSet\0";
pub const XNQueryOrientation: &[u8; 17] = b"queryOrientation\0";
pub const XNBaseFontName: &[u8; 13] = b"baseFontName\0";
pub const XNOMAutomatic: &[u8; 12] = b"omAutomatic\0";
pub const XNMissingCharSet: &[u8; 15] = b"missingCharSet\0";
pub const XNDefaultString: &[u8; 14] = b"defaultString\0";
pub const XNOrientation: &[u8; 12] = b"orientation\0";
pub const XNDirectionalDependentDrawing: &[u8; 28] = b"directionalDependentDrawing\0";
pub const XNContextualDrawing: &[u8; 18] = b"contextualDrawing\0";
pub const XNFontInfo: &[u8; 9] = b"fontInfo\0";
pub const XIMPreeditArea: u32 = 1;
pub const XIMPreeditCallbacks: u32 = 2;
pub const XIMPreeditPosition: u32 = 4;
pub const XIMPreeditNothing: u32 = 8;
pub const XIMPreeditNone: u32 = 16;
pub const XIMStatusArea: u32 = 256;
pub const XIMStatusCallbacks: u32 = 512;
pub const XIMStatusNothing: u32 = 1024;
pub const XIMStatusNone: u32 = 2048;
pub const XNVaNestedList: &[u8; 15] = b"XNVaNestedList\0";
pub const XNQueryInputStyle: &[u8; 16] = b"queryInputStyle\0";
pub const XNClientWindow: &[u8; 13] = b"clientWindow\0";
pub const XNInputStyle: &[u8; 11] = b"inputStyle\0";
pub const XNFocusWindow: &[u8; 12] = b"focusWindow\0";
pub const XNResourceName: &[u8; 13] = b"resourceName\0";
pub const XNResourceClass: &[u8; 14] = b"resourceClass\0";
pub const XNGeometryCallback: &[u8; 17] = b"geometryCallback\0";
pub const XNDestroyCallback: &[u8; 16] = b"destroyCallback\0";
pub const XNFilterEvents: &[u8; 13] = b"filterEvents\0";
pub const XNPreeditStartCallback: &[u8; 21] = b"preeditStartCallback\0";
pub const XNPreeditDoneCallback: &[u8; 20] = b"preeditDoneCallback\0";
pub const XNPreeditDrawCallback: &[u8; 20] = b"preeditDrawCallback\0";
pub const XNPreeditCaretCallback: &[u8; 21] = b"preeditCaretCallback\0";
pub const XNPreeditStateNotifyCallback: &[u8; 27] = b"preeditStateNotifyCallback\0";
pub const XNPreeditAttributes: &[u8; 18] = b"preeditAttributes\0";
pub const XNStatusStartCallback: &[u8; 20] = b"statusStartCallback\0";
pub const XNStatusDoneCallback: &[u8; 19] = b"statusDoneCallback\0";
pub const XNStatusDrawCallback: &[u8; 19] = b"statusDrawCallback\0";
pub const XNStatusAttributes: &[u8; 17] = b"statusAttributes\0";
pub const XNArea: &[u8; 5] = b"area\0";
pub const XNAreaNeeded: &[u8; 11] = b"areaNeeded\0";
pub const XNSpotLocation: &[u8; 13] = b"spotLocation\0";
pub const XNColormap: &[u8; 9] = b"colorMap\0";
pub const XNStdColormap: &[u8; 12] = b"stdColorMap\0";
pub const XNForeground: &[u8; 11] = b"foreground\0";
pub const XNBackground: &[u8; 11] = b"background\0";
pub const XNBackgroundPixmap: &[u8; 17] = b"backgroundPixmap\0";
pub const XNFontSet: &[u8; 8] = b"fontSet\0";
pub const XNLineSpace: &[u8; 10] = b"lineSpace\0";
pub const XNCursor: &[u8; 7] = b"cursor\0";
pub const XNQueryIMValuesList: &[u8; 18] = b"queryIMValuesList\0";
pub const XNQueryICValuesList: &[u8; 18] = b"queryICValuesList\0";
pub const XNVisiblePosition: &[u8; 16] = b"visiblePosition\0";
pub const XNR6PreeditCallback: &[u8; 18] = b"r6PreeditCallback\0";
pub const XNStringConversionCallback: &[u8; 25] = b"stringConversionCallback\0";
pub const XNStringConversion: &[u8; 17] = b"stringConversion\0";
pub const XNResetState: &[u8; 11] = b"resetState\0";
pub const XNHotKey: &[u8; 7] = b"hotKey\0";
pub const XNHotKeyState: &[u8; 12] = b"hotKeyState\0";
pub const XNPreeditState: &[u8; 13] = b"preeditState\0";
pub const XNSeparatorofNestedList: &[u8; 22] = b"separatorofNestedList\0";
pub const XBufferOverflow: i32 = -1;
pub const XLookupNone: u32 = 1;
pub const XLookupChars: u32 = 2;
pub const XLookupKeySym: u32 = 3;
pub const XLookupBoth: u32 = 4;
pub const XIMReverse: u32 = 1;
pub const XIMUnderline: u32 = 2;
pub const XIMHighlight: u32 = 4;
pub const XIMPrimary: u32 = 32;
pub const XIMSecondary: u32 = 64;
pub const XIMTertiary: u32 = 128;
pub const XIMVisibleToForward: u32 = 256;
pub const XIMVisibleToBackword: u32 = 512;
pub const XIMVisibleToCenter: u32 = 1024;
pub const XIMPreeditUnKnown: u32 = 0;
pub const XIMPreeditEnable: u32 = 1;
pub const XIMPreeditDisable: u32 = 2;
pub const XIMInitialState: u32 = 1;
pub const XIMPreserveState: u32 = 2;
pub const XIMStringConversionLeftEdge: u32 = 1;
pub const XIMStringConversionRightEdge: u32 = 2;
pub const XIMStringConversionTopEdge: u32 = 4;
pub const XIMStringConversionBottomEdge: u32 = 8;
pub const XIMStringConversionConcealed: u32 = 16;
pub const XIMStringConversionWrapped: u32 = 32;
pub const XIMStringConversionBuffer: u32 = 1;
pub const XIMStringConversionLine: u32 = 2;
pub const XIMStringConversionWord: u32 = 3;
pub const XIMStringConversionChar: u32 = 4;
pub const XIMStringConversionSubstitution: u32 = 1;
pub const XIMStringConversionRetrieval: u32 = 2;
pub const XIMHotKeyStateON: u32 = 1;
pub const XIMHotKeyStateOFF: u32 = 2;
pub const XTestNumberEvents: u32 = 0;
pub const XTestNumberErrors: u32 = 0;
pub const XTestMajorVersion: u32 = 2;
pub const XTestMinorVersion: u32 = 2;
pub const XTestExtensionName: &[u8; 6] = b"XTEST\0";
pub const sz_xGetExtensionVersionReq: u32 = 8;
pub const sz_xGetExtensionVersionReply: u32 = 32;
pub const sz_xListInputDevicesReq: u32 = 4;
pub const sz_xListInputDevicesReply: u32 = 32;
pub const sz_xOpenDeviceReq: u32 = 8;
pub const sz_xOpenDeviceReply: u32 = 32;
pub const sz_xCloseDeviceReq: u32 = 8;
pub const sz_xSetDeviceModeReq: u32 = 8;
pub const sz_xSetDeviceModeReply: u32 = 32;
pub const sz_xSelectExtensionEventReq: u32 = 12;
pub const sz_xGetSelectedExtensionEventsReq: u32 = 8;
pub const sz_xGetSelectedExtensionEventsReply: u32 = 32;
pub const sz_xChangeDeviceDontPropagateListReq: u32 = 12;
pub const sz_xGetDeviceDontPropagateListReq: u32 = 8;
pub const sz_xGetDeviceDontPropagateListReply: u32 = 32;
pub const sz_xGetDeviceMotionEventsReq: u32 = 16;
pub const sz_xGetDeviceMotionEventsReply: u32 = 32;
pub const sz_xChangeKeyboardDeviceReq: u32 = 8;
pub const sz_xChangeKeyboardDeviceReply: u32 = 32;
pub const sz_xChangePointerDeviceReq: u32 = 8;
pub const sz_xChangePointerDeviceReply: u32 = 32;
pub const sz_xGrabDeviceReq: u32 = 20;
pub const sz_xGrabDeviceReply: u32 = 32;
pub const sz_xUngrabDeviceReq: u32 = 12;
pub const sz_xGrabDeviceKeyReq: u32 = 20;
pub const sz_xGrabDeviceKeyReply: u32 = 32;
pub const sz_xUngrabDeviceKeyReq: u32 = 16;
pub const sz_xGrabDeviceButtonReq: u32 = 20;
pub const sz_xGrabDeviceButtonReply: u32 = 32;
pub const sz_xUngrabDeviceButtonReq: u32 = 16;
pub const sz_xAllowDeviceEventsReq: u32 = 12;
pub const sz_xGetDeviceFocusReq: u32 = 8;
pub const sz_xGetDeviceFocusReply: u32 = 32;
pub const sz_xSetDeviceFocusReq: u32 = 16;
pub const sz_xGetFeedbackControlReq: u32 = 8;
pub const sz_xGetFeedbackControlReply: u32 = 32;
pub const sz_xChangeFeedbackControlReq: u32 = 12;
pub const sz_xGetDeviceKeyMappingReq: u32 = 8;
pub const sz_xGetDeviceKeyMappingReply: u32 = 32;
pub const sz_xChangeDeviceKeyMappingReq: u32 = 8;
pub const sz_xGetDeviceModifierMappingReq: u32 = 8;
pub const sz_xSetDeviceModifierMappingReq: u32 = 8;
pub const sz_xSetDeviceModifierMappingReply: u32 = 32;
pub const sz_xGetDeviceButtonMappingReq: u32 = 8;
pub const sz_xGetDeviceButtonMappingReply: u32 = 32;
pub const sz_xSetDeviceButtonMappingReq: u32 = 8;
pub const sz_xSetDeviceButtonMappingReply: u32 = 32;
pub const sz_xQueryDeviceStateReq: u32 = 8;
pub const sz_xQueryDeviceStateReply: u32 = 32;
pub const sz_xSendExtensionEventReq: u32 = 16;
pub const sz_xDeviceBellReq: u32 = 8;
pub const sz_xSetDeviceValuatorsReq: u32 = 8;
pub const sz_xSetDeviceValuatorsReply: u32 = 32;
pub const sz_xGetDeviceControlReq: u32 = 8;
pub const sz_xGetDeviceControlReply: u32 = 32;
pub const sz_xChangeDeviceControlReq: u32 = 8;
pub const sz_xChangeDeviceControlReply: u32 = 32;
pub const sz_xListDevicePropertiesReq: u32 = 8;
pub const sz_xListDevicePropertiesReply: u32 = 32;
pub const sz_xChangeDevicePropertyReq: u32 = 20;
pub const sz_xDeleteDevicePropertyReq: u32 = 12;
pub const sz_xGetDevicePropertyReq: u32 = 24;
pub const sz_xGetDevicePropertyReply: u32 = 32;
pub const INAME: &[u8; 16] = b"XInputExtension\0";
pub const XI_KEYBOARD: &[u8; 9] = b"KEYBOARD\0";
pub const XI_MOUSE: &[u8; 6] = b"MOUSE\0";
pub const XI_TABLET: &[u8; 7] = b"TABLET\0";
pub const XI_TOUCHSCREEN: &[u8; 12] = b"TOUCHSCREEN\0";
pub const XI_TOUCHPAD: &[u8; 9] = b"TOUCHPAD\0";
pub const XI_BARCODE: &[u8; 8] = b"BARCODE\0";
pub const XI_BUTTONBOX: &[u8; 10] = b"BUTTONBOX\0";
pub const XI_KNOB_BOX: &[u8; 9] = b"KNOB_BOX\0";
pub const XI_ONE_KNOB: &[u8; 9] = b"ONE_KNOB\0";
pub const XI_NINE_KNOB: &[u8; 10] = b"NINE_KNOB\0";
pub const XI_TRACKBALL: &[u8; 10] = b"TRACKBALL\0";
pub const XI_QUADRATURE: &[u8; 11] = b"QUADRATURE\0";
pub const XI_ID_MODULE: &[u8; 10] = b"ID_MODULE\0";
pub const XI_SPACEBALL: &[u8; 10] = b"SPACEBALL\0";
pub const XI_DATAGLOVE: &[u8; 10] = b"DATAGLOVE\0";
pub const XI_EYETRACKER: &[u8; 11] = b"EYETRACKER\0";
pub const XI_CURSORKEYS: &[u8; 11] = b"CURSORKEYS\0";
pub const XI_FOOTMOUSE: &[u8; 10] = b"FOOTMOUSE\0";
pub const XI_JOYSTICK: &[u8; 9] = b"JOYSTICK\0";
pub const Dont_Check: u32 = 0;
pub const XInput_Initial_Release: u32 = 1;
pub const XInput_Add_XDeviceBell: u32 = 2;
pub const XInput_Add_XSetDeviceValuators: u32 = 3;
pub const XInput_Add_XChangeDeviceControl: u32 = 4;
pub const XInput_Add_DevicePresenceNotify: u32 = 5;
pub const XInput_Add_DeviceProperties: u32 = 6;
pub const XI_Absent: u32 = 0;
pub const XI_Present: u32 = 1;
pub const XI_Initial_Release_Major: u32 = 1;
pub const XI_Initial_Release_Minor: u32 = 0;
pub const XI_Add_XDeviceBell_Major: u32 = 1;
pub const XI_Add_XDeviceBell_Minor: u32 = 1;
pub const XI_Add_XSetDeviceValuators_Major: u32 = 1;
pub const XI_Add_XSetDeviceValuators_Minor: u32 = 2;
pub const XI_Add_XChangeDeviceControl_Major: u32 = 1;
pub const XI_Add_XChangeDeviceControl_Minor: u32 = 3;
pub const XI_Add_DevicePresenceNotify_Major: u32 = 1;
pub const XI_Add_DevicePresenceNotify_Minor: u32 = 4;
pub const XI_Add_DeviceProperties_Major: u32 = 1;
pub const XI_Add_DeviceProperties_Minor: u32 = 5;
pub const DEVICE_RESOLUTION: u32 = 1;
pub const DEVICE_ABS_CALIB: u32 = 2;
pub const DEVICE_CORE: u32 = 3;
pub const DEVICE_ENABLE: u32 = 4;
pub const DEVICE_ABS_AREA: u32 = 5;
pub const NoSuchExtension: u32 = 1;
pub const COUNT: u32 = 0;
pub const CREATE: u32 = 1;
pub const NewPointer: u32 = 0;
pub const NewKeyboard: u32 = 1;
pub const XPOINTER: u32 = 0;
pub const XKEYBOARD: u32 = 1;
pub const UseXKeyboard: u32 = 255;
pub const IsXPointer: u32 = 0;
pub const IsXKeyboard: u32 = 1;
pub const IsXExtensionDevice: u32 = 2;
pub const IsXExtensionKeyboard: u32 = 3;
pub const IsXExtensionPointer: u32 = 4;
pub const AsyncThisDevice: u32 = 0;
pub const SyncThisDevice: u32 = 1;
pub const ReplayThisDevice: u32 = 2;
pub const AsyncOtherDevices: u32 = 3;
pub const AsyncAll: u32 = 4;
pub const SyncAll: u32 = 5;
pub const FollowKeyboard: u32 = 3;
pub const RevertToFollowKeyboard: u32 = 3;
pub const DvAccelNum: u32 = 1;
pub const DvAccelDenom: u32 = 2;
pub const DvThreshold: u32 = 4;
pub const DvKeyClickPercent: u32 = 1;
pub const DvPercent: u32 = 2;
pub const DvPitch: u32 = 4;
pub const DvDuration: u32 = 8;
pub const DvLed: u32 = 16;
pub const DvLedMode: u32 = 32;
pub const DvKey: u32 = 64;
pub const DvAutoRepeatMode: u32 = 128;
pub const DvString: u32 = 1;
pub const DvInteger: u32 = 1;
pub const DeviceMode: u32 = 1;
pub const Relative: u32 = 0;
pub const Absolute: u32 = 1;
pub const ProximityState: u32 = 2;
pub const InProximity: u32 = 0;
pub const OutOfProximity: u32 = 2;
pub const AddToList: u32 = 0;
pub const DeleteFromList: u32 = 1;
pub const KeyClass: u32 = 0;
pub const ButtonClass: u32 = 1;
pub const ValuatorClass: u32 = 2;
pub const FeedbackClass: u32 = 3;
pub const ProximityClass: u32 = 4;
pub const FocusClass: u32 = 5;
pub const OtherClass: u32 = 6;
pub const AttachClass: u32 = 7;
pub const KbdFeedbackClass: u32 = 0;
pub const PtrFeedbackClass: u32 = 1;
pub const StringFeedbackClass: u32 = 2;
pub const IntegerFeedbackClass: u32 = 3;
pub const LedFeedbackClass: u32 = 4;
pub const BellFeedbackClass: u32 = 5;
pub const _devicePointerMotionHint: u32 = 0;
pub const _deviceButton1Motion: u32 = 1;
pub const _deviceButton2Motion: u32 = 2;
pub const _deviceButton3Motion: u32 = 3;
pub const _deviceButton4Motion: u32 = 4;
pub const _deviceButton5Motion: u32 = 5;
pub const _deviceButtonMotion: u32 = 6;
pub const _deviceButtonGrab: u32 = 7;
pub const _deviceOwnerGrabButton: u32 = 8;
pub const _noExtensionEvent: u32 = 9;
pub const _devicePresence: u32 = 0;
pub const _deviceEnter: u32 = 0;
pub const _deviceLeave: u32 = 1;
pub const DeviceAdded: u32 = 0;
pub const DeviceRemoved: u32 = 1;
pub const DeviceEnabled: u32 = 2;
pub const DeviceDisabled: u32 = 3;
pub const DeviceUnrecoverable: u32 = 4;
pub const DeviceControlChanged: u32 = 5;
pub const XI_BadDevice: u32 = 0;
pub const XI_BadEvent: u32 = 1;
pub const XI_BadMode: u32 = 2;
pub const XI_DeviceBusy: u32 = 3;
pub const XI_BadClass: u32 = 4;
pub const _deviceKeyPress: u32 = 0;
pub const _deviceKeyRelease: u32 = 1;
pub const _deviceButtonPress: u32 = 0;
pub const _deviceButtonRelease: u32 = 1;
pub const _deviceMotionNotify: u32 = 0;
pub const _deviceFocusIn: u32 = 0;
pub const _deviceFocusOut: u32 = 1;
pub const _proximityIn: u32 = 0;
pub const _proximityOut: u32 = 1;
pub const _deviceStateNotify: u32 = 0;
pub const _deviceMappingNotify: u32 = 1;
pub const _changeDeviceNotify: u32 = 2;
pub const _propertyNotify: u32 = 6;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 40usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 16usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 28usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 32usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
unsafe extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
unsafe extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
unsafe extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
unsafe extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
unsafe extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_self() -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
unsafe extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
unsafe extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
unsafe extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
unsafe extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_connection_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_iterator_t {
    pub data: *mut ::std::os::raw::c_void,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_iterator_t"][::std::mem::size_of::<xcb_generic_iterator_t>() - 16usize];
    ["Alignment of xcb_generic_iterator_t"]
        [::std::mem::align_of::<xcb_generic_iterator_t>() - 8usize];
    ["Offset of field: xcb_generic_iterator_t::data"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, data) - 0usize];
    ["Offset of field: xcb_generic_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_generic_iterator_t::index"]
        [::std::mem::offset_of!(xcb_generic_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_reply_t"][::std::mem::size_of::<xcb_generic_reply_t>() - 8usize];
    ["Alignment of xcb_generic_reply_t"][::std::mem::align_of::<xcb_generic_reply_t>() - 4usize];
    ["Offset of field: xcb_generic_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_generic_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_reply_t::length"]
        [::std::mem::offset_of!(xcb_generic_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub pad: [u32; 7usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_event_t"][::std::mem::size_of::<xcb_generic_event_t>() - 36usize];
    ["Alignment of xcb_generic_event_t"][::std::mem::align_of::<xcb_generic_event_t>() - 4usize];
    ["Offset of field: xcb_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_event_t, pad0) - 1usize];
    ["Offset of field: xcb_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_event_t::pad"]
        [::std::mem::offset_of!(xcb_generic_event_t, pad) - 4usize];
    ["Offset of field: xcb_generic_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_generic_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_raw_generic_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub pad: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_raw_generic_event_t"][::std::mem::size_of::<xcb_raw_generic_event_t>() - 32usize];
    ["Alignment of xcb_raw_generic_event_t"]
        [::std::mem::align_of::<xcb_raw_generic_event_t>() - 4usize];
    ["Offset of field: xcb_raw_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_raw_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, pad0) - 1usize];
    ["Offset of field: xcb_raw_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_raw_generic_event_t::pad"]
        [::std::mem::offset_of!(xcb_raw_generic_event_t, pad) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ge_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub event_type: u16,
    pub pad1: u16,
    pub pad: [u32; 5usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ge_event_t"][::std::mem::size_of::<xcb_ge_event_t>() - 36usize];
    ["Alignment of xcb_ge_event_t"][::std::mem::align_of::<xcb_ge_event_t>() - 4usize];
    ["Offset of field: xcb_ge_event_t::response_type"]
        [::std::mem::offset_of!(xcb_ge_event_t, response_type) - 0usize];
    ["Offset of field: xcb_ge_event_t::pad0"]
        [::std::mem::offset_of!(xcb_ge_event_t, pad0) - 1usize];
    ["Offset of field: xcb_ge_event_t::sequence"]
        [::std::mem::offset_of!(xcb_ge_event_t, sequence) - 2usize];
    ["Offset of field: xcb_ge_event_t::length"]
        [::std::mem::offset_of!(xcb_ge_event_t, length) - 4usize];
    ["Offset of field: xcb_ge_event_t::event_type"]
        [::std::mem::offset_of!(xcb_ge_event_t, event_type) - 8usize];
    ["Offset of field: xcb_ge_event_t::pad1"]
        [::std::mem::offset_of!(xcb_ge_event_t, pad1) - 10usize];
    ["Offset of field: xcb_ge_event_t::pad"][::std::mem::offset_of!(xcb_ge_event_t, pad) - 12usize];
    ["Offset of field: xcb_ge_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_ge_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub resource_id: u32,
    pub minor_code: u16,
    pub major_code: u8,
    pub pad0: u8,
    pub pad: [u32; 5usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_generic_error_t"][::std::mem::size_of::<xcb_generic_error_t>() - 36usize];
    ["Alignment of xcb_generic_error_t"][::std::mem::align_of::<xcb_generic_error_t>() - 4usize];
    ["Offset of field: xcb_generic_error_t::response_type"]
        [::std::mem::offset_of!(xcb_generic_error_t, response_type) - 0usize];
    ["Offset of field: xcb_generic_error_t::error_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, error_code) - 1usize];
    ["Offset of field: xcb_generic_error_t::sequence"]
        [::std::mem::offset_of!(xcb_generic_error_t, sequence) - 2usize];
    ["Offset of field: xcb_generic_error_t::resource_id"]
        [::std::mem::offset_of!(xcb_generic_error_t, resource_id) - 4usize];
    ["Offset of field: xcb_generic_error_t::minor_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, minor_code) - 8usize];
    ["Offset of field: xcb_generic_error_t::major_code"]
        [::std::mem::offset_of!(xcb_generic_error_t, major_code) - 10usize];
    ["Offset of field: xcb_generic_error_t::pad0"]
        [::std::mem::offset_of!(xcb_generic_error_t, pad0) - 11usize];
    ["Offset of field: xcb_generic_error_t::pad"]
        [::std::mem::offset_of!(xcb_generic_error_t, pad) - 12usize];
    ["Offset of field: xcb_generic_error_t::full_sequence"]
        [::std::mem::offset_of!(xcb_generic_error_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_void_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_void_cookie_t"][::std::mem::size_of::<xcb_void_cookie_t>() - 4usize];
    ["Alignment of xcb_void_cookie_t"][::std::mem::align_of::<xcb_void_cookie_t>() - 4usize];
    ["Offset of field: xcb_void_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_void_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_char2b_t {
    pub byte1: u8,
    pub byte2: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_char2b_t"][::std::mem::size_of::<xcb_char2b_t>() - 2usize];
    ["Alignment of xcb_char2b_t"][::std::mem::align_of::<xcb_char2b_t>() - 1usize];
    ["Offset of field: xcb_char2b_t::byte1"][::std::mem::offset_of!(xcb_char2b_t, byte1) - 0usize];
    ["Offset of field: xcb_char2b_t::byte2"][::std::mem::offset_of!(xcb_char2b_t, byte2) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_char2b_iterator_t {
    pub data: *mut xcb_char2b_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_char2b_iterator_t"][::std::mem::size_of::<xcb_char2b_iterator_t>() - 16usize];
    ["Alignment of xcb_char2b_iterator_t"]
        [::std::mem::align_of::<xcb_char2b_iterator_t>() - 8usize];
    ["Offset of field: xcb_char2b_iterator_t::data"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, data) - 0usize];
    ["Offset of field: xcb_char2b_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_char2b_iterator_t::index"]
        [::std::mem::offset_of!(xcb_char2b_iterator_t, index) - 12usize];
};
pub type xcb_window_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_window_iterator_t {
    pub data: *mut xcb_window_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_window_iterator_t"][::std::mem::size_of::<xcb_window_iterator_t>() - 16usize];
    ["Alignment of xcb_window_iterator_t"]
        [::std::mem::align_of::<xcb_window_iterator_t>() - 8usize];
    ["Offset of field: xcb_window_iterator_t::data"]
        [::std::mem::offset_of!(xcb_window_iterator_t, data) - 0usize];
    ["Offset of field: xcb_window_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_window_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_window_iterator_t::index"]
        [::std::mem::offset_of!(xcb_window_iterator_t, index) - 12usize];
};
pub type xcb_pixmap_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_pixmap_iterator_t {
    pub data: *mut xcb_pixmap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_pixmap_iterator_t"][::std::mem::size_of::<xcb_pixmap_iterator_t>() - 16usize];
    ["Alignment of xcb_pixmap_iterator_t"]
        [::std::mem::align_of::<xcb_pixmap_iterator_t>() - 8usize];
    ["Offset of field: xcb_pixmap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_pixmap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_pixmap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_pixmap_iterator_t, index) - 12usize];
};
pub type xcb_cursor_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_cursor_iterator_t {
    pub data: *mut xcb_cursor_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_cursor_iterator_t"][::std::mem::size_of::<xcb_cursor_iterator_t>() - 16usize];
    ["Alignment of xcb_cursor_iterator_t"]
        [::std::mem::align_of::<xcb_cursor_iterator_t>() - 8usize];
    ["Offset of field: xcb_cursor_iterator_t::data"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, data) - 0usize];
    ["Offset of field: xcb_cursor_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_cursor_iterator_t::index"]
        [::std::mem::offset_of!(xcb_cursor_iterator_t, index) - 12usize];
};
pub type xcb_font_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_font_iterator_t {
    pub data: *mut xcb_font_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_font_iterator_t"][::std::mem::size_of::<xcb_font_iterator_t>() - 16usize];
    ["Alignment of xcb_font_iterator_t"][::std::mem::align_of::<xcb_font_iterator_t>() - 8usize];
    ["Offset of field: xcb_font_iterator_t::data"]
        [::std::mem::offset_of!(xcb_font_iterator_t, data) - 0usize];
    ["Offset of field: xcb_font_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_font_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_font_iterator_t::index"]
        [::std::mem::offset_of!(xcb_font_iterator_t, index) - 12usize];
};
pub type xcb_gcontext_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_gcontext_iterator_t {
    pub data: *mut xcb_gcontext_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_gcontext_iterator_t"][::std::mem::size_of::<xcb_gcontext_iterator_t>() - 16usize];
    ["Alignment of xcb_gcontext_iterator_t"]
        [::std::mem::align_of::<xcb_gcontext_iterator_t>() - 8usize];
    ["Offset of field: xcb_gcontext_iterator_t::data"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, data) - 0usize];
    ["Offset of field: xcb_gcontext_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_gcontext_iterator_t::index"]
        [::std::mem::offset_of!(xcb_gcontext_iterator_t, index) - 12usize];
};
pub type xcb_colormap_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_colormap_iterator_t {
    pub data: *mut xcb_colormap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_colormap_iterator_t"][::std::mem::size_of::<xcb_colormap_iterator_t>() - 16usize];
    ["Alignment of xcb_colormap_iterator_t"]
        [::std::mem::align_of::<xcb_colormap_iterator_t>() - 8usize];
    ["Offset of field: xcb_colormap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_colormap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_colormap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_colormap_iterator_t, index) - 12usize];
};
pub type xcb_atom_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_atom_iterator_t {
    pub data: *mut xcb_atom_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_atom_iterator_t"][::std::mem::size_of::<xcb_atom_iterator_t>() - 16usize];
    ["Alignment of xcb_atom_iterator_t"][::std::mem::align_of::<xcb_atom_iterator_t>() - 8usize];
    ["Offset of field: xcb_atom_iterator_t::data"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, data) - 0usize];
    ["Offset of field: xcb_atom_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_atom_iterator_t::index"]
        [::std::mem::offset_of!(xcb_atom_iterator_t, index) - 12usize];
};
pub type xcb_drawable_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_drawable_iterator_t {
    pub data: *mut xcb_drawable_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_drawable_iterator_t"][::std::mem::size_of::<xcb_drawable_iterator_t>() - 16usize];
    ["Alignment of xcb_drawable_iterator_t"]
        [::std::mem::align_of::<xcb_drawable_iterator_t>() - 8usize];
    ["Offset of field: xcb_drawable_iterator_t::data"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, data) - 0usize];
    ["Offset of field: xcb_drawable_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_drawable_iterator_t::index"]
        [::std::mem::offset_of!(xcb_drawable_iterator_t, index) - 12usize];
};
pub type xcb_fontable_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontable_iterator_t {
    pub data: *mut xcb_fontable_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontable_iterator_t"][::std::mem::size_of::<xcb_fontable_iterator_t>() - 16usize];
    ["Alignment of xcb_fontable_iterator_t"]
        [::std::mem::align_of::<xcb_fontable_iterator_t>() - 8usize];
    ["Offset of field: xcb_fontable_iterator_t::data"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, data) - 0usize];
    ["Offset of field: xcb_fontable_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_fontable_iterator_t::index"]
        [::std::mem::offset_of!(xcb_fontable_iterator_t, index) - 12usize];
};
pub type xcb_bool32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_bool32_iterator_t {
    pub data: *mut xcb_bool32_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_bool32_iterator_t"][::std::mem::size_of::<xcb_bool32_iterator_t>() - 16usize];
    ["Alignment of xcb_bool32_iterator_t"]
        [::std::mem::align_of::<xcb_bool32_iterator_t>() - 8usize];
    ["Offset of field: xcb_bool32_iterator_t::data"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, data) - 0usize];
    ["Offset of field: xcb_bool32_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_bool32_iterator_t::index"]
        [::std::mem::offset_of!(xcb_bool32_iterator_t, index) - 12usize];
};
pub type xcb_visualid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualid_iterator_t {
    pub data: *mut xcb_visualid_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualid_iterator_t"][::std::mem::size_of::<xcb_visualid_iterator_t>() - 16usize];
    ["Alignment of xcb_visualid_iterator_t"]
        [::std::mem::align_of::<xcb_visualid_iterator_t>() - 8usize];
    ["Offset of field: xcb_visualid_iterator_t::data"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, data) - 0usize];
    ["Offset of field: xcb_visualid_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_visualid_iterator_t::index"]
        [::std::mem::offset_of!(xcb_visualid_iterator_t, index) - 12usize];
};
pub type xcb_timestamp_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timestamp_iterator_t {
    pub data: *mut xcb_timestamp_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timestamp_iterator_t"]
        [::std::mem::size_of::<xcb_timestamp_iterator_t>() - 16usize];
    ["Alignment of xcb_timestamp_iterator_t"]
        [::std::mem::align_of::<xcb_timestamp_iterator_t>() - 8usize];
    ["Offset of field: xcb_timestamp_iterator_t::data"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, data) - 0usize];
    ["Offset of field: xcb_timestamp_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_timestamp_iterator_t::index"]
        [::std::mem::offset_of!(xcb_timestamp_iterator_t, index) - 12usize];
};
pub type xcb_keysym_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keysym_iterator_t {
    pub data: *mut xcb_keysym_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keysym_iterator_t"][::std::mem::size_of::<xcb_keysym_iterator_t>() - 16usize];
    ["Alignment of xcb_keysym_iterator_t"]
        [::std::mem::align_of::<xcb_keysym_iterator_t>() - 8usize];
    ["Offset of field: xcb_keysym_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keysym_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keysym_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keysym_iterator_t, index) - 12usize];
};
pub type xcb_keycode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keycode_iterator_t {
    pub data: *mut xcb_keycode_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keycode_iterator_t"][::std::mem::size_of::<xcb_keycode_iterator_t>() - 16usize];
    ["Alignment of xcb_keycode_iterator_t"]
        [::std::mem::align_of::<xcb_keycode_iterator_t>() - 8usize];
    ["Offset of field: xcb_keycode_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keycode_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keycode_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keycode_iterator_t, index) - 12usize];
};
pub type xcb_keycode32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keycode32_iterator_t {
    pub data: *mut xcb_keycode32_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keycode32_iterator_t"]
        [::std::mem::size_of::<xcb_keycode32_iterator_t>() - 16usize];
    ["Alignment of xcb_keycode32_iterator_t"]
        [::std::mem::align_of::<xcb_keycode32_iterator_t>() - 8usize];
    ["Offset of field: xcb_keycode32_iterator_t::data"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, data) - 0usize];
    ["Offset of field: xcb_keycode32_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_keycode32_iterator_t::index"]
        [::std::mem::offset_of!(xcb_keycode32_iterator_t, index) - 12usize];
};
pub type xcb_button_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_button_iterator_t {
    pub data: *mut xcb_button_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_button_iterator_t"][::std::mem::size_of::<xcb_button_iterator_t>() - 16usize];
    ["Alignment of xcb_button_iterator_t"]
        [::std::mem::align_of::<xcb_button_iterator_t>() - 8usize];
    ["Offset of field: xcb_button_iterator_t::data"]
        [::std::mem::offset_of!(xcb_button_iterator_t, data) - 0usize];
    ["Offset of field: xcb_button_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_button_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_button_iterator_t::index"]
        [::std::mem::offset_of!(xcb_button_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_point_t {
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_point_t"][::std::mem::size_of::<xcb_point_t>() - 4usize];
    ["Alignment of xcb_point_t"][::std::mem::align_of::<xcb_point_t>() - 2usize];
    ["Offset of field: xcb_point_t::x"][::std::mem::offset_of!(xcb_point_t, x) - 0usize];
    ["Offset of field: xcb_point_t::y"][::std::mem::offset_of!(xcb_point_t, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_point_iterator_t {
    pub data: *mut xcb_point_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_point_iterator_t"][::std::mem::size_of::<xcb_point_iterator_t>() - 16usize];
    ["Alignment of xcb_point_iterator_t"][::std::mem::align_of::<xcb_point_iterator_t>() - 8usize];
    ["Offset of field: xcb_point_iterator_t::data"]
        [::std::mem::offset_of!(xcb_point_iterator_t, data) - 0usize];
    ["Offset of field: xcb_point_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_point_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_point_iterator_t::index"]
        [::std::mem::offset_of!(xcb_point_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rectangle_t {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rectangle_t"][::std::mem::size_of::<xcb_rectangle_t>() - 8usize];
    ["Alignment of xcb_rectangle_t"][::std::mem::align_of::<xcb_rectangle_t>() - 2usize];
    ["Offset of field: xcb_rectangle_t::x"][::std::mem::offset_of!(xcb_rectangle_t, x) - 0usize];
    ["Offset of field: xcb_rectangle_t::y"][::std::mem::offset_of!(xcb_rectangle_t, y) - 2usize];
    ["Offset of field: xcb_rectangle_t::width"]
        [::std::mem::offset_of!(xcb_rectangle_t, width) - 4usize];
    ["Offset of field: xcb_rectangle_t::height"]
        [::std::mem::offset_of!(xcb_rectangle_t, height) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rectangle_iterator_t {
    pub data: *mut xcb_rectangle_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rectangle_iterator_t"]
        [::std::mem::size_of::<xcb_rectangle_iterator_t>() - 16usize];
    ["Alignment of xcb_rectangle_iterator_t"]
        [::std::mem::align_of::<xcb_rectangle_iterator_t>() - 8usize];
    ["Offset of field: xcb_rectangle_iterator_t::data"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, data) - 0usize];
    ["Offset of field: xcb_rectangle_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_rectangle_iterator_t::index"]
        [::std::mem::offset_of!(xcb_rectangle_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_arc_t {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub angle1: i16,
    pub angle2: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_arc_t"][::std::mem::size_of::<xcb_arc_t>() - 12usize];
    ["Alignment of xcb_arc_t"][::std::mem::align_of::<xcb_arc_t>() - 2usize];
    ["Offset of field: xcb_arc_t::x"][::std::mem::offset_of!(xcb_arc_t, x) - 0usize];
    ["Offset of field: xcb_arc_t::y"][::std::mem::offset_of!(xcb_arc_t, y) - 2usize];
    ["Offset of field: xcb_arc_t::width"][::std::mem::offset_of!(xcb_arc_t, width) - 4usize];
    ["Offset of field: xcb_arc_t::height"][::std::mem::offset_of!(xcb_arc_t, height) - 6usize];
    ["Offset of field: xcb_arc_t::angle1"][::std::mem::offset_of!(xcb_arc_t, angle1) - 8usize];
    ["Offset of field: xcb_arc_t::angle2"][::std::mem::offset_of!(xcb_arc_t, angle2) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_arc_iterator_t {
    pub data: *mut xcb_arc_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_arc_iterator_t"][::std::mem::size_of::<xcb_arc_iterator_t>() - 16usize];
    ["Alignment of xcb_arc_iterator_t"][::std::mem::align_of::<xcb_arc_iterator_t>() - 8usize];
    ["Offset of field: xcb_arc_iterator_t::data"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, data) - 0usize];
    ["Offset of field: xcb_arc_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_arc_iterator_t::index"]
        [::std::mem::offset_of!(xcb_arc_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_format_t {
    pub depth: u8,
    pub bits_per_pixel: u8,
    pub scanline_pad: u8,
    pub pad0: [u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_format_t"][::std::mem::size_of::<xcb_format_t>() - 8usize];
    ["Alignment of xcb_format_t"][::std::mem::align_of::<xcb_format_t>() - 1usize];
    ["Offset of field: xcb_format_t::depth"][::std::mem::offset_of!(xcb_format_t, depth) - 0usize];
    ["Offset of field: xcb_format_t::bits_per_pixel"]
        [::std::mem::offset_of!(xcb_format_t, bits_per_pixel) - 1usize];
    ["Offset of field: xcb_format_t::scanline_pad"]
        [::std::mem::offset_of!(xcb_format_t, scanline_pad) - 2usize];
    ["Offset of field: xcb_format_t::pad0"][::std::mem::offset_of!(xcb_format_t, pad0) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_format_iterator_t {
    pub data: *mut xcb_format_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_format_iterator_t"][::std::mem::size_of::<xcb_format_iterator_t>() - 16usize];
    ["Alignment of xcb_format_iterator_t"]
        [::std::mem::align_of::<xcb_format_iterator_t>() - 8usize];
    ["Offset of field: xcb_format_iterator_t::data"]
        [::std::mem::offset_of!(xcb_format_iterator_t, data) - 0usize];
    ["Offset of field: xcb_format_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_format_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_format_iterator_t::index"]
        [::std::mem::offset_of!(xcb_format_iterator_t, index) - 12usize];
};
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_STATIC_GRAY: xcb_visual_class_t = 0;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_GRAY_SCALE: xcb_visual_class_t = 1;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_STATIC_COLOR: xcb_visual_class_t = 2;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_PSEUDO_COLOR: xcb_visual_class_t = 3;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_TRUE_COLOR: xcb_visual_class_t = 4;
pub const xcb_visual_class_t_XCB_VISUAL_CLASS_DIRECT_COLOR: xcb_visual_class_t = 5;
pub type xcb_visual_class_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualtype_t {
    pub visual_id: xcb_visualid_t,
    pub _class: u8,
    pub bits_per_rgb_value: u8,
    pub colormap_entries: u16,
    pub red_mask: u32,
    pub green_mask: u32,
    pub blue_mask: u32,
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualtype_t"][::std::mem::size_of::<xcb_visualtype_t>() - 24usize];
    ["Alignment of xcb_visualtype_t"][::std::mem::align_of::<xcb_visualtype_t>() - 4usize];
    ["Offset of field: xcb_visualtype_t::visual_id"]
        [::std::mem::offset_of!(xcb_visualtype_t, visual_id) - 0usize];
    ["Offset of field: xcb_visualtype_t::_class"]
        [::std::mem::offset_of!(xcb_visualtype_t, _class) - 4usize];
    ["Offset of field: xcb_visualtype_t::bits_per_rgb_value"]
        [::std::mem::offset_of!(xcb_visualtype_t, bits_per_rgb_value) - 5usize];
    ["Offset of field: xcb_visualtype_t::colormap_entries"]
        [::std::mem::offset_of!(xcb_visualtype_t, colormap_entries) - 6usize];
    ["Offset of field: xcb_visualtype_t::red_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, red_mask) - 8usize];
    ["Offset of field: xcb_visualtype_t::green_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, green_mask) - 12usize];
    ["Offset of field: xcb_visualtype_t::blue_mask"]
        [::std::mem::offset_of!(xcb_visualtype_t, blue_mask) - 16usize];
    ["Offset of field: xcb_visualtype_t::pad0"]
        [::std::mem::offset_of!(xcb_visualtype_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visualtype_iterator_t {
    pub data: *mut xcb_visualtype_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visualtype_iterator_t"]
        [::std::mem::size_of::<xcb_visualtype_iterator_t>() - 16usize];
    ["Alignment of xcb_visualtype_iterator_t"]
        [::std::mem::align_of::<xcb_visualtype_iterator_t>() - 8usize];
    ["Offset of field: xcb_visualtype_iterator_t::data"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, data) - 0usize];
    ["Offset of field: xcb_visualtype_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_visualtype_iterator_t::index"]
        [::std::mem::offset_of!(xcb_visualtype_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_depth_t {
    pub depth: u8,
    pub pad0: u8,
    pub visuals_len: u16,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_depth_t"][::std::mem::size_of::<xcb_depth_t>() - 8usize];
    ["Alignment of xcb_depth_t"][::std::mem::align_of::<xcb_depth_t>() - 2usize];
    ["Offset of field: xcb_depth_t::depth"][::std::mem::offset_of!(xcb_depth_t, depth) - 0usize];
    ["Offset of field: xcb_depth_t::pad0"][::std::mem::offset_of!(xcb_depth_t, pad0) - 1usize];
    ["Offset of field: xcb_depth_t::visuals_len"]
        [::std::mem::offset_of!(xcb_depth_t, visuals_len) - 2usize];
    ["Offset of field: xcb_depth_t::pad1"][::std::mem::offset_of!(xcb_depth_t, pad1) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_depth_iterator_t {
    pub data: *mut xcb_depth_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_depth_iterator_t"][::std::mem::size_of::<xcb_depth_iterator_t>() - 16usize];
    ["Alignment of xcb_depth_iterator_t"][::std::mem::align_of::<xcb_depth_iterator_t>() - 8usize];
    ["Offset of field: xcb_depth_iterator_t::data"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, data) - 0usize];
    ["Offset of field: xcb_depth_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_depth_iterator_t::index"]
        [::std::mem::offset_of!(xcb_depth_iterator_t, index) - 12usize];
};
pub const xcb_event_mask_t_XCB_EVENT_MASK_NO_EVENT: xcb_event_mask_t = 0;
pub const xcb_event_mask_t_XCB_EVENT_MASK_KEY_PRESS: xcb_event_mask_t = 1;
pub const xcb_event_mask_t_XCB_EVENT_MASK_KEY_RELEASE: xcb_event_mask_t = 2;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_PRESS: xcb_event_mask_t = 4;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_RELEASE: xcb_event_mask_t = 8;
pub const xcb_event_mask_t_XCB_EVENT_MASK_ENTER_WINDOW: xcb_event_mask_t = 16;
pub const xcb_event_mask_t_XCB_EVENT_MASK_LEAVE_WINDOW: xcb_event_mask_t = 32;
pub const xcb_event_mask_t_XCB_EVENT_MASK_POINTER_MOTION: xcb_event_mask_t = 64;
pub const xcb_event_mask_t_XCB_EVENT_MASK_POINTER_MOTION_HINT: xcb_event_mask_t = 128;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_1_MOTION: xcb_event_mask_t = 256;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_2_MOTION: xcb_event_mask_t = 512;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_3_MOTION: xcb_event_mask_t = 1024;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_4_MOTION: xcb_event_mask_t = 2048;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_5_MOTION: xcb_event_mask_t = 4096;
pub const xcb_event_mask_t_XCB_EVENT_MASK_BUTTON_MOTION: xcb_event_mask_t = 8192;
pub const xcb_event_mask_t_XCB_EVENT_MASK_KEYMAP_STATE: xcb_event_mask_t = 16384;
pub const xcb_event_mask_t_XCB_EVENT_MASK_EXPOSURE: xcb_event_mask_t = 32768;
pub const xcb_event_mask_t_XCB_EVENT_MASK_VISIBILITY_CHANGE: xcb_event_mask_t = 65536;
pub const xcb_event_mask_t_XCB_EVENT_MASK_STRUCTURE_NOTIFY: xcb_event_mask_t = 131072;
pub const xcb_event_mask_t_XCB_EVENT_MASK_RESIZE_REDIRECT: xcb_event_mask_t = 262144;
pub const xcb_event_mask_t_XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY: xcb_event_mask_t = 524288;
pub const xcb_event_mask_t_XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT: xcb_event_mask_t = 1048576;
pub const xcb_event_mask_t_XCB_EVENT_MASK_FOCUS_CHANGE: xcb_event_mask_t = 2097152;
pub const xcb_event_mask_t_XCB_EVENT_MASK_PROPERTY_CHANGE: xcb_event_mask_t = 4194304;
pub const xcb_event_mask_t_XCB_EVENT_MASK_COLOR_MAP_CHANGE: xcb_event_mask_t = 8388608;
pub const xcb_event_mask_t_XCB_EVENT_MASK_OWNER_GRAB_BUTTON: xcb_event_mask_t = 16777216;
pub type xcb_event_mask_t = ::std::os::raw::c_uint;
pub const xcb_backing_store_t_XCB_BACKING_STORE_NOT_USEFUL: xcb_backing_store_t = 0;
pub const xcb_backing_store_t_XCB_BACKING_STORE_WHEN_MAPPED: xcb_backing_store_t = 1;
pub const xcb_backing_store_t_XCB_BACKING_STORE_ALWAYS: xcb_backing_store_t = 2;
pub type xcb_backing_store_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_screen_t {
    pub root: xcb_window_t,
    pub default_colormap: xcb_colormap_t,
    pub white_pixel: u32,
    pub black_pixel: u32,
    pub current_input_masks: u32,
    pub width_in_pixels: u16,
    pub height_in_pixels: u16,
    pub width_in_millimeters: u16,
    pub height_in_millimeters: u16,
    pub min_installed_maps: u16,
    pub max_installed_maps: u16,
    pub root_visual: xcb_visualid_t,
    pub backing_stores: u8,
    pub save_unders: u8,
    pub root_depth: u8,
    pub allowed_depths_len: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_screen_t"][::std::mem::size_of::<xcb_screen_t>() - 40usize];
    ["Alignment of xcb_screen_t"][::std::mem::align_of::<xcb_screen_t>() - 4usize];
    ["Offset of field: xcb_screen_t::root"][::std::mem::offset_of!(xcb_screen_t, root) - 0usize];
    ["Offset of field: xcb_screen_t::default_colormap"]
        [::std::mem::offset_of!(xcb_screen_t, default_colormap) - 4usize];
    ["Offset of field: xcb_screen_t::white_pixel"]
        [::std::mem::offset_of!(xcb_screen_t, white_pixel) - 8usize];
    ["Offset of field: xcb_screen_t::black_pixel"]
        [::std::mem::offset_of!(xcb_screen_t, black_pixel) - 12usize];
    ["Offset of field: xcb_screen_t::current_input_masks"]
        [::std::mem::offset_of!(xcb_screen_t, current_input_masks) - 16usize];
    ["Offset of field: xcb_screen_t::width_in_pixels"]
        [::std::mem::offset_of!(xcb_screen_t, width_in_pixels) - 20usize];
    ["Offset of field: xcb_screen_t::height_in_pixels"]
        [::std::mem::offset_of!(xcb_screen_t, height_in_pixels) - 22usize];
    ["Offset of field: xcb_screen_t::width_in_millimeters"]
        [::std::mem::offset_of!(xcb_screen_t, width_in_millimeters) - 24usize];
    ["Offset of field: xcb_screen_t::height_in_millimeters"]
        [::std::mem::offset_of!(xcb_screen_t, height_in_millimeters) - 26usize];
    ["Offset of field: xcb_screen_t::min_installed_maps"]
        [::std::mem::offset_of!(xcb_screen_t, min_installed_maps) - 28usize];
    ["Offset of field: xcb_screen_t::max_installed_maps"]
        [::std::mem::offset_of!(xcb_screen_t, max_installed_maps) - 30usize];
    ["Offset of field: xcb_screen_t::root_visual"]
        [::std::mem::offset_of!(xcb_screen_t, root_visual) - 32usize];
    ["Offset of field: xcb_screen_t::backing_stores"]
        [::std::mem::offset_of!(xcb_screen_t, backing_stores) - 36usize];
    ["Offset of field: xcb_screen_t::save_unders"]
        [::std::mem::offset_of!(xcb_screen_t, save_unders) - 37usize];
    ["Offset of field: xcb_screen_t::root_depth"]
        [::std::mem::offset_of!(xcb_screen_t, root_depth) - 38usize];
    ["Offset of field: xcb_screen_t::allowed_depths_len"]
        [::std::mem::offset_of!(xcb_screen_t, allowed_depths_len) - 39usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_screen_iterator_t {
    pub data: *mut xcb_screen_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_screen_iterator_t"][::std::mem::size_of::<xcb_screen_iterator_t>() - 16usize];
    ["Alignment of xcb_screen_iterator_t"]
        [::std::mem::align_of::<xcb_screen_iterator_t>() - 8usize];
    ["Offset of field: xcb_screen_iterator_t::data"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, data) - 0usize];
    ["Offset of field: xcb_screen_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_screen_iterator_t::index"]
        [::std::mem::offset_of!(xcb_screen_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_request_t {
    pub byte_order: u8,
    pub pad0: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub authorization_protocol_name_len: u16,
    pub authorization_protocol_data_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_request_t"][::std::mem::size_of::<xcb_setup_request_t>() - 12usize];
    ["Alignment of xcb_setup_request_t"][::std::mem::align_of::<xcb_setup_request_t>() - 2usize];
    ["Offset of field: xcb_setup_request_t::byte_order"]
        [::std::mem::offset_of!(xcb_setup_request_t, byte_order) - 0usize];
    ["Offset of field: xcb_setup_request_t::pad0"]
        [::std::mem::offset_of!(xcb_setup_request_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_request_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_request_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_request_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_request_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_request_t::authorization_protocol_name_len"]
        [::std::mem::offset_of!(xcb_setup_request_t, authorization_protocol_name_len) - 6usize];
    ["Offset of field: xcb_setup_request_t::authorization_protocol_data_len"]
        [::std::mem::offset_of!(xcb_setup_request_t, authorization_protocol_data_len) - 8usize];
    ["Offset of field: xcb_setup_request_t::pad1"]
        [::std::mem::offset_of!(xcb_setup_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_request_iterator_t {
    pub data: *mut xcb_setup_request_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_request_iterator_t"]
        [::std::mem::size_of::<xcb_setup_request_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_request_iterator_t"]
        [::std::mem::align_of::<xcb_setup_request_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_request_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_request_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_request_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_request_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_failed_t {
    pub status: u8,
    pub reason_len: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_failed_t"][::std::mem::size_of::<xcb_setup_failed_t>() - 8usize];
    ["Alignment of xcb_setup_failed_t"][::std::mem::align_of::<xcb_setup_failed_t>() - 2usize];
    ["Offset of field: xcb_setup_failed_t::status"]
        [::std::mem::offset_of!(xcb_setup_failed_t, status) - 0usize];
    ["Offset of field: xcb_setup_failed_t::reason_len"]
        [::std::mem::offset_of!(xcb_setup_failed_t, reason_len) - 1usize];
    ["Offset of field: xcb_setup_failed_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_failed_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_failed_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_failed_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_failed_t::length"]
        [::std::mem::offset_of!(xcb_setup_failed_t, length) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_failed_iterator_t {
    pub data: *mut xcb_setup_failed_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_failed_iterator_t"]
        [::std::mem::size_of::<xcb_setup_failed_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_failed_iterator_t"]
        [::std::mem::align_of::<xcb_setup_failed_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_failed_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_failed_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_failed_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_failed_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_authenticate_t {
    pub status: u8,
    pub pad0: [u8; 5usize],
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_authenticate_t"]
        [::std::mem::size_of::<xcb_setup_authenticate_t>() - 8usize];
    ["Alignment of xcb_setup_authenticate_t"]
        [::std::mem::align_of::<xcb_setup_authenticate_t>() - 2usize];
    ["Offset of field: xcb_setup_authenticate_t::status"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, status) - 0usize];
    ["Offset of field: xcb_setup_authenticate_t::pad0"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_authenticate_t::length"]
        [::std::mem::offset_of!(xcb_setup_authenticate_t, length) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_authenticate_iterator_t {
    pub data: *mut xcb_setup_authenticate_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_authenticate_iterator_t"]
        [::std::mem::size_of::<xcb_setup_authenticate_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_authenticate_iterator_t"]
        [::std::mem::align_of::<xcb_setup_authenticate_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_authenticate_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_authenticate_iterator_t, index) - 12usize];
};
pub const xcb_image_order_t_XCB_IMAGE_ORDER_LSB_FIRST: xcb_image_order_t = 0;
pub const xcb_image_order_t_XCB_IMAGE_ORDER_MSB_FIRST: xcb_image_order_t = 1;
pub type xcb_image_order_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_t {
    pub status: u8,
    pub pad0: u8,
    pub protocol_major_version: u16,
    pub protocol_minor_version: u16,
    pub length: u16,
    pub release_number: u32,
    pub resource_id_base: u32,
    pub resource_id_mask: u32,
    pub motion_buffer_size: u32,
    pub vendor_len: u16,
    pub maximum_request_length: u16,
    pub roots_len: u8,
    pub pixmap_formats_len: u8,
    pub image_byte_order: u8,
    pub bitmap_format_bit_order: u8,
    pub bitmap_format_scanline_unit: u8,
    pub bitmap_format_scanline_pad: u8,
    pub min_keycode: xcb_keycode_t,
    pub max_keycode: xcb_keycode_t,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_t"][::std::mem::size_of::<xcb_setup_t>() - 40usize];
    ["Alignment of xcb_setup_t"][::std::mem::align_of::<xcb_setup_t>() - 4usize];
    ["Offset of field: xcb_setup_t::status"][::std::mem::offset_of!(xcb_setup_t, status) - 0usize];
    ["Offset of field: xcb_setup_t::pad0"][::std::mem::offset_of!(xcb_setup_t, pad0) - 1usize];
    ["Offset of field: xcb_setup_t::protocol_major_version"]
        [::std::mem::offset_of!(xcb_setup_t, protocol_major_version) - 2usize];
    ["Offset of field: xcb_setup_t::protocol_minor_version"]
        [::std::mem::offset_of!(xcb_setup_t, protocol_minor_version) - 4usize];
    ["Offset of field: xcb_setup_t::length"][::std::mem::offset_of!(xcb_setup_t, length) - 6usize];
    ["Offset of field: xcb_setup_t::release_number"]
        [::std::mem::offset_of!(xcb_setup_t, release_number) - 8usize];
    ["Offset of field: xcb_setup_t::resource_id_base"]
        [::std::mem::offset_of!(xcb_setup_t, resource_id_base) - 12usize];
    ["Offset of field: xcb_setup_t::resource_id_mask"]
        [::std::mem::offset_of!(xcb_setup_t, resource_id_mask) - 16usize];
    ["Offset of field: xcb_setup_t::motion_buffer_size"]
        [::std::mem::offset_of!(xcb_setup_t, motion_buffer_size) - 20usize];
    ["Offset of field: xcb_setup_t::vendor_len"]
        [::std::mem::offset_of!(xcb_setup_t, vendor_len) - 24usize];
    ["Offset of field: xcb_setup_t::maximum_request_length"]
        [::std::mem::offset_of!(xcb_setup_t, maximum_request_length) - 26usize];
    ["Offset of field: xcb_setup_t::roots_len"]
        [::std::mem::offset_of!(xcb_setup_t, roots_len) - 28usize];
    ["Offset of field: xcb_setup_t::pixmap_formats_len"]
        [::std::mem::offset_of!(xcb_setup_t, pixmap_formats_len) - 29usize];
    ["Offset of field: xcb_setup_t::image_byte_order"]
        [::std::mem::offset_of!(xcb_setup_t, image_byte_order) - 30usize];
    ["Offset of field: xcb_setup_t::bitmap_format_bit_order"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_bit_order) - 31usize];
    ["Offset of field: xcb_setup_t::bitmap_format_scanline_unit"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_scanline_unit) - 32usize];
    ["Offset of field: xcb_setup_t::bitmap_format_scanline_pad"]
        [::std::mem::offset_of!(xcb_setup_t, bitmap_format_scanline_pad) - 33usize];
    ["Offset of field: xcb_setup_t::min_keycode"]
        [::std::mem::offset_of!(xcb_setup_t, min_keycode) - 34usize];
    ["Offset of field: xcb_setup_t::max_keycode"]
        [::std::mem::offset_of!(xcb_setup_t, max_keycode) - 35usize];
    ["Offset of field: xcb_setup_t::pad1"][::std::mem::offset_of!(xcb_setup_t, pad1) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_setup_iterator_t {
    pub data: *mut xcb_setup_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_setup_iterator_t"][::std::mem::size_of::<xcb_setup_iterator_t>() - 16usize];
    ["Alignment of xcb_setup_iterator_t"][::std::mem::align_of::<xcb_setup_iterator_t>() - 8usize];
    ["Offset of field: xcb_setup_iterator_t::data"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, data) - 0usize];
    ["Offset of field: xcb_setup_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_setup_iterator_t::index"]
        [::std::mem::offset_of!(xcb_setup_iterator_t, index) - 12usize];
};
pub const xcb_mod_mask_t_XCB_MOD_MASK_SHIFT: xcb_mod_mask_t = 1;
pub const xcb_mod_mask_t_XCB_MOD_MASK_LOCK: xcb_mod_mask_t = 2;
pub const xcb_mod_mask_t_XCB_MOD_MASK_CONTROL: xcb_mod_mask_t = 4;
pub const xcb_mod_mask_t_XCB_MOD_MASK_1: xcb_mod_mask_t = 8;
pub const xcb_mod_mask_t_XCB_MOD_MASK_2: xcb_mod_mask_t = 16;
pub const xcb_mod_mask_t_XCB_MOD_MASK_3: xcb_mod_mask_t = 32;
pub const xcb_mod_mask_t_XCB_MOD_MASK_4: xcb_mod_mask_t = 64;
pub const xcb_mod_mask_t_XCB_MOD_MASK_5: xcb_mod_mask_t = 128;
pub const xcb_mod_mask_t_XCB_MOD_MASK_ANY: xcb_mod_mask_t = 32768;
pub type xcb_mod_mask_t = ::std::os::raw::c_uint;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_SHIFT: xcb_key_but_mask_t = 1;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_LOCK: xcb_key_but_mask_t = 2;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_CONTROL: xcb_key_but_mask_t = 4;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_MOD_1: xcb_key_but_mask_t = 8;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_MOD_2: xcb_key_but_mask_t = 16;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_MOD_3: xcb_key_but_mask_t = 32;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_MOD_4: xcb_key_but_mask_t = 64;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_MOD_5: xcb_key_but_mask_t = 128;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_BUTTON_1: xcb_key_but_mask_t = 256;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_BUTTON_2: xcb_key_but_mask_t = 512;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_BUTTON_3: xcb_key_but_mask_t = 1024;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_BUTTON_4: xcb_key_but_mask_t = 2048;
pub const xcb_key_but_mask_t_XCB_KEY_BUT_MASK_BUTTON_5: xcb_key_but_mask_t = 4096;
pub type xcb_key_but_mask_t = ::std::os::raw::c_uint;
pub const xcb_window_enum_t_XCB_WINDOW_NONE: xcb_window_enum_t = 0;
pub type xcb_window_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_key_press_event_t {
    pub response_type: u8,
    pub detail: xcb_keycode_t,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_key_press_event_t"][::std::mem::size_of::<xcb_key_press_event_t>() - 32usize];
    ["Alignment of xcb_key_press_event_t"]
        [::std::mem::align_of::<xcb_key_press_event_t>() - 4usize];
    ["Offset of field: xcb_key_press_event_t::response_type"]
        [::std::mem::offset_of!(xcb_key_press_event_t, response_type) - 0usize];
    ["Offset of field: xcb_key_press_event_t::detail"]
        [::std::mem::offset_of!(xcb_key_press_event_t, detail) - 1usize];
    ["Offset of field: xcb_key_press_event_t::sequence"]
        [::std::mem::offset_of!(xcb_key_press_event_t, sequence) - 2usize];
    ["Offset of field: xcb_key_press_event_t::time"]
        [::std::mem::offset_of!(xcb_key_press_event_t, time) - 4usize];
    ["Offset of field: xcb_key_press_event_t::root"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root) - 8usize];
    ["Offset of field: xcb_key_press_event_t::event"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event) - 12usize];
    ["Offset of field: xcb_key_press_event_t::child"]
        [::std::mem::offset_of!(xcb_key_press_event_t, child) - 16usize];
    ["Offset of field: xcb_key_press_event_t::root_x"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root_x) - 20usize];
    ["Offset of field: xcb_key_press_event_t::root_y"]
        [::std::mem::offset_of!(xcb_key_press_event_t, root_y) - 22usize];
    ["Offset of field: xcb_key_press_event_t::event_x"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event_x) - 24usize];
    ["Offset of field: xcb_key_press_event_t::event_y"]
        [::std::mem::offset_of!(xcb_key_press_event_t, event_y) - 26usize];
    ["Offset of field: xcb_key_press_event_t::state"]
        [::std::mem::offset_of!(xcb_key_press_event_t, state) - 28usize];
    ["Offset of field: xcb_key_press_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_key_press_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_key_press_event_t::pad0"]
        [::std::mem::offset_of!(xcb_key_press_event_t, pad0) - 31usize];
};
pub type xcb_key_release_event_t = xcb_key_press_event_t;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_1: xcb_button_mask_t = 256;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_2: xcb_button_mask_t = 512;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_3: xcb_button_mask_t = 1024;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_4: xcb_button_mask_t = 2048;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_5: xcb_button_mask_t = 4096;
pub const xcb_button_mask_t_XCB_BUTTON_MASK_ANY: xcb_button_mask_t = 32768;
pub type xcb_button_mask_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_button_press_event_t {
    pub response_type: u8,
    pub detail: xcb_button_t,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_button_press_event_t"]
        [::std::mem::size_of::<xcb_button_press_event_t>() - 32usize];
    ["Alignment of xcb_button_press_event_t"]
        [::std::mem::align_of::<xcb_button_press_event_t>() - 4usize];
    ["Offset of field: xcb_button_press_event_t::response_type"]
        [::std::mem::offset_of!(xcb_button_press_event_t, response_type) - 0usize];
    ["Offset of field: xcb_button_press_event_t::detail"]
        [::std::mem::offset_of!(xcb_button_press_event_t, detail) - 1usize];
    ["Offset of field: xcb_button_press_event_t::sequence"]
        [::std::mem::offset_of!(xcb_button_press_event_t, sequence) - 2usize];
    ["Offset of field: xcb_button_press_event_t::time"]
        [::std::mem::offset_of!(xcb_button_press_event_t, time) - 4usize];
    ["Offset of field: xcb_button_press_event_t::root"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root) - 8usize];
    ["Offset of field: xcb_button_press_event_t::event"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event) - 12usize];
    ["Offset of field: xcb_button_press_event_t::child"]
        [::std::mem::offset_of!(xcb_button_press_event_t, child) - 16usize];
    ["Offset of field: xcb_button_press_event_t::root_x"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root_x) - 20usize];
    ["Offset of field: xcb_button_press_event_t::root_y"]
        [::std::mem::offset_of!(xcb_button_press_event_t, root_y) - 22usize];
    ["Offset of field: xcb_button_press_event_t::event_x"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event_x) - 24usize];
    ["Offset of field: xcb_button_press_event_t::event_y"]
        [::std::mem::offset_of!(xcb_button_press_event_t, event_y) - 26usize];
    ["Offset of field: xcb_button_press_event_t::state"]
        [::std::mem::offset_of!(xcb_button_press_event_t, state) - 28usize];
    ["Offset of field: xcb_button_press_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_button_press_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_button_press_event_t::pad0"]
        [::std::mem::offset_of!(xcb_button_press_event_t, pad0) - 31usize];
};
pub type xcb_button_release_event_t = xcb_button_press_event_t;
pub const xcb_motion_t_XCB_MOTION_NORMAL: xcb_motion_t = 0;
pub const xcb_motion_t_XCB_MOTION_HINT: xcb_motion_t = 1;
pub type xcb_motion_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_motion_notify_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_motion_notify_event_t"]
        [::std::mem::size_of::<xcb_motion_notify_event_t>() - 32usize];
    ["Alignment of xcb_motion_notify_event_t"]
        [::std::mem::align_of::<xcb_motion_notify_event_t>() - 4usize];
    ["Offset of field: xcb_motion_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_motion_notify_event_t::detail"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, detail) - 1usize];
    ["Offset of field: xcb_motion_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_motion_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_motion_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root) - 8usize];
    ["Offset of field: xcb_motion_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event) - 12usize];
    ["Offset of field: xcb_motion_notify_event_t::child"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, child) - 16usize];
    ["Offset of field: xcb_motion_notify_event_t::root_x"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root_x) - 20usize];
    ["Offset of field: xcb_motion_notify_event_t::root_y"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, root_y) - 22usize];
    ["Offset of field: xcb_motion_notify_event_t::event_x"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event_x) - 24usize];
    ["Offset of field: xcb_motion_notify_event_t::event_y"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, event_y) - 26usize];
    ["Offset of field: xcb_motion_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, state) - 28usize];
    ["Offset of field: xcb_motion_notify_event_t::same_screen"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, same_screen) - 30usize];
    ["Offset of field: xcb_motion_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_motion_notify_event_t, pad0) - 31usize];
};
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_ANCESTOR: xcb_notify_detail_t = 0;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_VIRTUAL: xcb_notify_detail_t = 1;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_INFERIOR: xcb_notify_detail_t = 2;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_NONLINEAR: xcb_notify_detail_t = 3;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL: xcb_notify_detail_t = 4;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_POINTER: xcb_notify_detail_t = 5;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_POINTER_ROOT: xcb_notify_detail_t = 6;
pub const xcb_notify_detail_t_XCB_NOTIFY_DETAIL_NONE: xcb_notify_detail_t = 7;
pub type xcb_notify_detail_t = ::std::os::raw::c_uint;
pub const xcb_notify_mode_t_XCB_NOTIFY_MODE_NORMAL: xcb_notify_mode_t = 0;
pub const xcb_notify_mode_t_XCB_NOTIFY_MODE_GRAB: xcb_notify_mode_t = 1;
pub const xcb_notify_mode_t_XCB_NOTIFY_MODE_UNGRAB: xcb_notify_mode_t = 2;
pub const xcb_notify_mode_t_XCB_NOTIFY_MODE_WHILE_GRABBED: xcb_notify_mode_t = 3;
pub type xcb_notify_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_enter_notify_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub mode: u8,
    pub same_screen_focus: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_enter_notify_event_t"]
        [::std::mem::size_of::<xcb_enter_notify_event_t>() - 32usize];
    ["Alignment of xcb_enter_notify_event_t"]
        [::std::mem::align_of::<xcb_enter_notify_event_t>() - 4usize];
    ["Offset of field: xcb_enter_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_enter_notify_event_t::detail"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, detail) - 1usize];
    ["Offset of field: xcb_enter_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_enter_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_enter_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root) - 8usize];
    ["Offset of field: xcb_enter_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event) - 12usize];
    ["Offset of field: xcb_enter_notify_event_t::child"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, child) - 16usize];
    ["Offset of field: xcb_enter_notify_event_t::root_x"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root_x) - 20usize];
    ["Offset of field: xcb_enter_notify_event_t::root_y"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, root_y) - 22usize];
    ["Offset of field: xcb_enter_notify_event_t::event_x"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event_x) - 24usize];
    ["Offset of field: xcb_enter_notify_event_t::event_y"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, event_y) - 26usize];
    ["Offset of field: xcb_enter_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, state) - 28usize];
    ["Offset of field: xcb_enter_notify_event_t::mode"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, mode) - 30usize];
    ["Offset of field: xcb_enter_notify_event_t::same_screen_focus"]
        [::std::mem::offset_of!(xcb_enter_notify_event_t, same_screen_focus) - 31usize];
};
pub type xcb_leave_notify_event_t = xcb_enter_notify_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_focus_in_event_t {
    pub response_type: u8,
    pub detail: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub mode: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_focus_in_event_t"][::std::mem::size_of::<xcb_focus_in_event_t>() - 12usize];
    ["Alignment of xcb_focus_in_event_t"][::std::mem::align_of::<xcb_focus_in_event_t>() - 4usize];
    ["Offset of field: xcb_focus_in_event_t::response_type"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, response_type) - 0usize];
    ["Offset of field: xcb_focus_in_event_t::detail"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, detail) - 1usize];
    ["Offset of field: xcb_focus_in_event_t::sequence"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, sequence) - 2usize];
    ["Offset of field: xcb_focus_in_event_t::event"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, event) - 4usize];
    ["Offset of field: xcb_focus_in_event_t::mode"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, mode) - 8usize];
    ["Offset of field: xcb_focus_in_event_t::pad0"]
        [::std::mem::offset_of!(xcb_focus_in_event_t, pad0) - 9usize];
};
pub type xcb_focus_out_event_t = xcb_focus_in_event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_keymap_notify_event_t {
    pub response_type: u8,
    pub keys: [u8; 31usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_keymap_notify_event_t"]
        [::std::mem::size_of::<xcb_keymap_notify_event_t>() - 32usize];
    ["Alignment of xcb_keymap_notify_event_t"]
        [::std::mem::align_of::<xcb_keymap_notify_event_t>() - 1usize];
    ["Offset of field: xcb_keymap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_keymap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_keymap_notify_event_t::keys"]
        [::std::mem::offset_of!(xcb_keymap_notify_event_t, keys) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_expose_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub count: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_expose_event_t"][::std::mem::size_of::<xcb_expose_event_t>() - 20usize];
    ["Alignment of xcb_expose_event_t"][::std::mem::align_of::<xcb_expose_event_t>() - 4usize];
    ["Offset of field: xcb_expose_event_t::response_type"]
        [::std::mem::offset_of!(xcb_expose_event_t, response_type) - 0usize];
    ["Offset of field: xcb_expose_event_t::pad0"]
        [::std::mem::offset_of!(xcb_expose_event_t, pad0) - 1usize];
    ["Offset of field: xcb_expose_event_t::sequence"]
        [::std::mem::offset_of!(xcb_expose_event_t, sequence) - 2usize];
    ["Offset of field: xcb_expose_event_t::window"]
        [::std::mem::offset_of!(xcb_expose_event_t, window) - 4usize];
    ["Offset of field: xcb_expose_event_t::x"]
        [::std::mem::offset_of!(xcb_expose_event_t, x) - 8usize];
    ["Offset of field: xcb_expose_event_t::y"]
        [::std::mem::offset_of!(xcb_expose_event_t, y) - 10usize];
    ["Offset of field: xcb_expose_event_t::width"]
        [::std::mem::offset_of!(xcb_expose_event_t, width) - 12usize];
    ["Offset of field: xcb_expose_event_t::height"]
        [::std::mem::offset_of!(xcb_expose_event_t, height) - 14usize];
    ["Offset of field: xcb_expose_event_t::count"]
        [::std::mem::offset_of!(xcb_expose_event_t, count) - 16usize];
    ["Offset of field: xcb_expose_event_t::pad1"]
        [::std::mem::offset_of!(xcb_expose_event_t, pad1) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_graphics_exposure_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub drawable: xcb_drawable_t,
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub minor_opcode: u16,
    pub count: u16,
    pub major_opcode: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_graphics_exposure_event_t"]
        [::std::mem::size_of::<xcb_graphics_exposure_event_t>() - 24usize];
    ["Alignment of xcb_graphics_exposure_event_t"]
        [::std::mem::align_of::<xcb_graphics_exposure_event_t>() - 4usize];
    ["Offset of field: xcb_graphics_exposure_event_t::response_type"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, response_type) - 0usize];
    ["Offset of field: xcb_graphics_exposure_event_t::pad0"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, pad0) - 1usize];
    ["Offset of field: xcb_graphics_exposure_event_t::sequence"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, sequence) - 2usize];
    ["Offset of field: xcb_graphics_exposure_event_t::drawable"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, drawable) - 4usize];
    ["Offset of field: xcb_graphics_exposure_event_t::x"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, x) - 8usize];
    ["Offset of field: xcb_graphics_exposure_event_t::y"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, y) - 10usize];
    ["Offset of field: xcb_graphics_exposure_event_t::width"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, width) - 12usize];
    ["Offset of field: xcb_graphics_exposure_event_t::height"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, height) - 14usize];
    ["Offset of field: xcb_graphics_exposure_event_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, minor_opcode) - 16usize];
    ["Offset of field: xcb_graphics_exposure_event_t::count"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, count) - 18usize];
    ["Offset of field: xcb_graphics_exposure_event_t::major_opcode"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, major_opcode) - 20usize];
    ["Offset of field: xcb_graphics_exposure_event_t::pad1"]
        [::std::mem::offset_of!(xcb_graphics_exposure_event_t, pad1) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_no_exposure_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub drawable: xcb_drawable_t,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_no_exposure_event_t"][::std::mem::size_of::<xcb_no_exposure_event_t>() - 12usize];
    ["Alignment of xcb_no_exposure_event_t"]
        [::std::mem::align_of::<xcb_no_exposure_event_t>() - 4usize];
    ["Offset of field: xcb_no_exposure_event_t::response_type"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, response_type) - 0usize];
    ["Offset of field: xcb_no_exposure_event_t::pad0"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, pad0) - 1usize];
    ["Offset of field: xcb_no_exposure_event_t::sequence"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, sequence) - 2usize];
    ["Offset of field: xcb_no_exposure_event_t::drawable"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, drawable) - 4usize];
    ["Offset of field: xcb_no_exposure_event_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_no_exposure_event_t::major_opcode"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, major_opcode) - 10usize];
    ["Offset of field: xcb_no_exposure_event_t::pad1"]
        [::std::mem::offset_of!(xcb_no_exposure_event_t, pad1) - 11usize];
};
pub const xcb_visibility_t_XCB_VISIBILITY_UNOBSCURED: xcb_visibility_t = 0;
pub const xcb_visibility_t_XCB_VISIBILITY_PARTIALLY_OBSCURED: xcb_visibility_t = 1;
pub const xcb_visibility_t_XCB_VISIBILITY_FULLY_OBSCURED: xcb_visibility_t = 2;
pub type xcb_visibility_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_visibility_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub state: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_visibility_notify_event_t"]
        [::std::mem::size_of::<xcb_visibility_notify_event_t>() - 12usize];
    ["Alignment of xcb_visibility_notify_event_t"]
        [::std::mem::align_of::<xcb_visibility_notify_event_t>() - 4usize];
    ["Offset of field: xcb_visibility_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_visibility_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_visibility_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_visibility_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_visibility_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, state) - 8usize];
    ["Offset of field: xcb_visibility_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_visibility_notify_event_t, pad1) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub override_redirect: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_notify_event_t"]
        [::std::mem::size_of::<xcb_create_notify_event_t>() - 24usize];
    ["Alignment of xcb_create_notify_event_t"]
        [::std::mem::align_of::<xcb_create_notify_event_t>() - 4usize];
    ["Offset of field: xcb_create_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_create_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_create_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_create_notify_event_t::parent"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, parent) - 4usize];
    ["Offset of field: xcb_create_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_create_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, x) - 12usize];
    ["Offset of field: xcb_create_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, y) - 14usize];
    ["Offset of field: xcb_create_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, width) - 16usize];
    ["Offset of field: xcb_create_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, height) - 18usize];
    ["Offset of field: xcb_create_notify_event_t::border_width"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, border_width) - 20usize];
    ["Offset of field: xcb_create_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, override_redirect) - 22usize];
    ["Offset of field: xcb_create_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_create_notify_event_t, pad1) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_notify_event_t"]
        [::std::mem::size_of::<xcb_destroy_notify_event_t>() - 12usize];
    ["Alignment of xcb_destroy_notify_event_t"]
        [::std::mem::align_of::<xcb_destroy_notify_event_t>() - 4usize];
    ["Offset of field: xcb_destroy_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_destroy_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_destroy_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_destroy_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_destroy_notify_event_t, window) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub from_configure: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_notify_event_t"]
        [::std::mem::size_of::<xcb_unmap_notify_event_t>() - 16usize];
    ["Alignment of xcb_unmap_notify_event_t"]
        [::std::mem::align_of::<xcb_unmap_notify_event_t>() - 4usize];
    ["Offset of field: xcb_unmap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_unmap_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_unmap_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_unmap_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_unmap_notify_event_t::from_configure"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, from_configure) - 12usize];
    ["Offset of field: xcb_unmap_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_unmap_notify_event_t, pad1) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub override_redirect: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_notify_event_t"][::std::mem::size_of::<xcb_map_notify_event_t>() - 16usize];
    ["Alignment of xcb_map_notify_event_t"]
        [::std::mem::align_of::<xcb_map_notify_event_t>() - 4usize];
    ["Offset of field: xcb_map_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_map_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_map_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_map_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_map_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_map_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, override_redirect) - 12usize];
    ["Offset of field: xcb_map_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_map_notify_event_t, pad1) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_request_event_t"][::std::mem::size_of::<xcb_map_request_event_t>() - 12usize];
    ["Alignment of xcb_map_request_event_t"]
        [::std::mem::align_of::<xcb_map_request_event_t>() - 4usize];
    ["Offset of field: xcb_map_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_map_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_map_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_map_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_map_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_map_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_map_request_event_t::parent"]
        [::std::mem::offset_of!(xcb_map_request_event_t, parent) - 4usize];
    ["Offset of field: xcb_map_request_event_t::window"]
        [::std::mem::offset_of!(xcb_map_request_event_t, window) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_reparent_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub override_redirect: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_reparent_notify_event_t"]
        [::std::mem::size_of::<xcb_reparent_notify_event_t>() - 24usize];
    ["Alignment of xcb_reparent_notify_event_t"]
        [::std::mem::align_of::<xcb_reparent_notify_event_t>() - 4usize];
    ["Offset of field: xcb_reparent_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_reparent_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_reparent_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_reparent_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_reparent_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_reparent_notify_event_t::parent"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, parent) - 12usize];
    ["Offset of field: xcb_reparent_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, x) - 16usize];
    ["Offset of field: xcb_reparent_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, y) - 18usize];
    ["Offset of field: xcb_reparent_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, override_redirect) - 20usize];
    ["Offset of field: xcb_reparent_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_reparent_notify_event_t, pad1) - 21usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub above_sibling: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub override_redirect: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_notify_event_t"]
        [::std::mem::size_of::<xcb_configure_notify_event_t>() - 28usize];
    ["Alignment of xcb_configure_notify_event_t"]
        [::std::mem::align_of::<xcb_configure_notify_event_t>() - 4usize];
    ["Offset of field: xcb_configure_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_configure_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_configure_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_configure_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_configure_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_configure_notify_event_t::above_sibling"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, above_sibling) - 12usize];
    ["Offset of field: xcb_configure_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, x) - 16usize];
    ["Offset of field: xcb_configure_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, y) - 18usize];
    ["Offset of field: xcb_configure_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, width) - 20usize];
    ["Offset of field: xcb_configure_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, height) - 22usize];
    ["Offset of field: xcb_configure_notify_event_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, border_width) - 24usize];
    ["Offset of field: xcb_configure_notify_event_t::override_redirect"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, override_redirect) - 26usize];
    ["Offset of field: xcb_configure_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_configure_notify_event_t, pad1) - 27usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_request_event_t {
    pub response_type: u8,
    pub stack_mode: u8,
    pub sequence: u16,
    pub parent: xcb_window_t,
    pub window: xcb_window_t,
    pub sibling: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub value_mask: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_request_event_t"]
        [::std::mem::size_of::<xcb_configure_request_event_t>() - 28usize];
    ["Alignment of xcb_configure_request_event_t"]
        [::std::mem::align_of::<xcb_configure_request_event_t>() - 4usize];
    ["Offset of field: xcb_configure_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_configure_request_event_t::stack_mode"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, stack_mode) - 1usize];
    ["Offset of field: xcb_configure_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_configure_request_event_t::parent"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, parent) - 4usize];
    ["Offset of field: xcb_configure_request_event_t::window"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, window) - 8usize];
    ["Offset of field: xcb_configure_request_event_t::sibling"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, sibling) - 12usize];
    ["Offset of field: xcb_configure_request_event_t::x"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, x) - 16usize];
    ["Offset of field: xcb_configure_request_event_t::y"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, y) - 18usize];
    ["Offset of field: xcb_configure_request_event_t::width"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, width) - 20usize];
    ["Offset of field: xcb_configure_request_event_t::height"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, height) - 22usize];
    ["Offset of field: xcb_configure_request_event_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, border_width) - 24usize];
    ["Offset of field: xcb_configure_request_event_t::value_mask"]
        [::std::mem::offset_of!(xcb_configure_request_event_t, value_mask) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_gravity_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_gravity_notify_event_t"]
        [::std::mem::size_of::<xcb_gravity_notify_event_t>() - 16usize];
    ["Alignment of xcb_gravity_notify_event_t"]
        [::std::mem::align_of::<xcb_gravity_notify_event_t>() - 4usize];
    ["Offset of field: xcb_gravity_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_gravity_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_gravity_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_gravity_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_gravity_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_gravity_notify_event_t::x"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, x) - 12usize];
    ["Offset of field: xcb_gravity_notify_event_t::y"]
        [::std::mem::offset_of!(xcb_gravity_notify_event_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_resize_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_resize_request_event_t"]
        [::std::mem::size_of::<xcb_resize_request_event_t>() - 12usize];
    ["Alignment of xcb_resize_request_event_t"]
        [::std::mem::align_of::<xcb_resize_request_event_t>() - 4usize];
    ["Offset of field: xcb_resize_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_resize_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_resize_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_resize_request_event_t::window"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, window) - 4usize];
    ["Offset of field: xcb_resize_request_event_t::width"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, width) - 8usize];
    ["Offset of field: xcb_resize_request_event_t::height"]
        [::std::mem::offset_of!(xcb_resize_request_event_t, height) - 10usize];
};
pub const xcb_place_t_XCB_PLACE_ON_TOP: xcb_place_t = 0;
pub const xcb_place_t_XCB_PLACE_ON_BOTTOM: xcb_place_t = 1;
pub type xcb_place_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_circulate_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub event: xcb_window_t,
    pub window: xcb_window_t,
    pub pad1: [u8; 4usize],
    pub place: u8,
    pub pad2: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_circulate_notify_event_t"]
        [::std::mem::size_of::<xcb_circulate_notify_event_t>() - 20usize];
    ["Alignment of xcb_circulate_notify_event_t"]
        [::std::mem::align_of::<xcb_circulate_notify_event_t>() - 4usize];
    ["Offset of field: xcb_circulate_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_circulate_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_circulate_notify_event_t::event"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, event) - 4usize];
    ["Offset of field: xcb_circulate_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, window) - 8usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad1) - 12usize];
    ["Offset of field: xcb_circulate_notify_event_t::place"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, place) - 16usize];
    ["Offset of field: xcb_circulate_notify_event_t::pad2"]
        [::std::mem::offset_of!(xcb_circulate_notify_event_t, pad2) - 17usize];
};
pub type xcb_circulate_request_event_t = xcb_circulate_notify_event_t;
pub const xcb_property_t_XCB_PROPERTY_NEW_VALUE: xcb_property_t = 0;
pub const xcb_property_t_XCB_PROPERTY_DELETE: xcb_property_t = 1;
pub type xcb_property_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_property_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub atom: xcb_atom_t,
    pub time: xcb_timestamp_t,
    pub state: u8,
    pub pad1: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_property_notify_event_t"]
        [::std::mem::size_of::<xcb_property_notify_event_t>() - 20usize];
    ["Alignment of xcb_property_notify_event_t"]
        [::std::mem::align_of::<xcb_property_notify_event_t>() - 4usize];
    ["Offset of field: xcb_property_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_property_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_property_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_property_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_property_notify_event_t::atom"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, atom) - 8usize];
    ["Offset of field: xcb_property_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, time) - 12usize];
    ["Offset of field: xcb_property_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, state) - 16usize];
    ["Offset of field: xcb_property_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_property_notify_event_t, pad1) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_clear_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_clear_event_t"]
        [::std::mem::size_of::<xcb_selection_clear_event_t>() - 16usize];
    ["Alignment of xcb_selection_clear_event_t"]
        [::std::mem::align_of::<xcb_selection_clear_event_t>() - 4usize];
    ["Offset of field: xcb_selection_clear_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_clear_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_clear_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_clear_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_clear_event_t::owner"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, owner) - 8usize];
    ["Offset of field: xcb_selection_clear_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_clear_event_t, selection) - 12usize];
};
pub const xcb_time_t_XCB_TIME_CURRENT_TIME: xcb_time_t = 0;
pub type xcb_time_t = ::std::os::raw::c_uint;
pub const xcb_atom_enum_t_XCB_ATOM_NONE: xcb_atom_enum_t = 0;
pub const xcb_atom_enum_t_XCB_ATOM_ANY: xcb_atom_enum_t = 0;
pub const xcb_atom_enum_t_XCB_ATOM_PRIMARY: xcb_atom_enum_t = 1;
pub const xcb_atom_enum_t_XCB_ATOM_SECONDARY: xcb_atom_enum_t = 2;
pub const xcb_atom_enum_t_XCB_ATOM_ARC: xcb_atom_enum_t = 3;
pub const xcb_atom_enum_t_XCB_ATOM_ATOM: xcb_atom_enum_t = 4;
pub const xcb_atom_enum_t_XCB_ATOM_BITMAP: xcb_atom_enum_t = 5;
pub const xcb_atom_enum_t_XCB_ATOM_CARDINAL: xcb_atom_enum_t = 6;
pub const xcb_atom_enum_t_XCB_ATOM_COLORMAP: xcb_atom_enum_t = 7;
pub const xcb_atom_enum_t_XCB_ATOM_CURSOR: xcb_atom_enum_t = 8;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER0: xcb_atom_enum_t = 9;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER1: xcb_atom_enum_t = 10;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER2: xcb_atom_enum_t = 11;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER3: xcb_atom_enum_t = 12;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER4: xcb_atom_enum_t = 13;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER5: xcb_atom_enum_t = 14;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER6: xcb_atom_enum_t = 15;
pub const xcb_atom_enum_t_XCB_ATOM_CUT_BUFFER7: xcb_atom_enum_t = 16;
pub const xcb_atom_enum_t_XCB_ATOM_DRAWABLE: xcb_atom_enum_t = 17;
pub const xcb_atom_enum_t_XCB_ATOM_FONT: xcb_atom_enum_t = 18;
pub const xcb_atom_enum_t_XCB_ATOM_INTEGER: xcb_atom_enum_t = 19;
pub const xcb_atom_enum_t_XCB_ATOM_PIXMAP: xcb_atom_enum_t = 20;
pub const xcb_atom_enum_t_XCB_ATOM_POINT: xcb_atom_enum_t = 21;
pub const xcb_atom_enum_t_XCB_ATOM_RECTANGLE: xcb_atom_enum_t = 22;
pub const xcb_atom_enum_t_XCB_ATOM_RESOURCE_MANAGER: xcb_atom_enum_t = 23;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_COLOR_MAP: xcb_atom_enum_t = 24;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_BEST_MAP: xcb_atom_enum_t = 25;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_BLUE_MAP: xcb_atom_enum_t = 26;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_DEFAULT_MAP: xcb_atom_enum_t = 27;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_GRAY_MAP: xcb_atom_enum_t = 28;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_GREEN_MAP: xcb_atom_enum_t = 29;
pub const xcb_atom_enum_t_XCB_ATOM_RGB_RED_MAP: xcb_atom_enum_t = 30;
pub const xcb_atom_enum_t_XCB_ATOM_STRING: xcb_atom_enum_t = 31;
pub const xcb_atom_enum_t_XCB_ATOM_VISUALID: xcb_atom_enum_t = 32;
pub const xcb_atom_enum_t_XCB_ATOM_WINDOW: xcb_atom_enum_t = 33;
pub const xcb_atom_enum_t_XCB_ATOM_WM_COMMAND: xcb_atom_enum_t = 34;
pub const xcb_atom_enum_t_XCB_ATOM_WM_HINTS: xcb_atom_enum_t = 35;
pub const xcb_atom_enum_t_XCB_ATOM_WM_CLIENT_MACHINE: xcb_atom_enum_t = 36;
pub const xcb_atom_enum_t_XCB_ATOM_WM_ICON_NAME: xcb_atom_enum_t = 37;
pub const xcb_atom_enum_t_XCB_ATOM_WM_ICON_SIZE: xcb_atom_enum_t = 38;
pub const xcb_atom_enum_t_XCB_ATOM_WM_NAME: xcb_atom_enum_t = 39;
pub const xcb_atom_enum_t_XCB_ATOM_WM_NORMAL_HINTS: xcb_atom_enum_t = 40;
pub const xcb_atom_enum_t_XCB_ATOM_WM_SIZE_HINTS: xcb_atom_enum_t = 41;
pub const xcb_atom_enum_t_XCB_ATOM_WM_ZOOM_HINTS: xcb_atom_enum_t = 42;
pub const xcb_atom_enum_t_XCB_ATOM_MIN_SPACE: xcb_atom_enum_t = 43;
pub const xcb_atom_enum_t_XCB_ATOM_NORM_SPACE: xcb_atom_enum_t = 44;
pub const xcb_atom_enum_t_XCB_ATOM_MAX_SPACE: xcb_atom_enum_t = 45;
pub const xcb_atom_enum_t_XCB_ATOM_END_SPACE: xcb_atom_enum_t = 46;
pub const xcb_atom_enum_t_XCB_ATOM_SUPERSCRIPT_X: xcb_atom_enum_t = 47;
pub const xcb_atom_enum_t_XCB_ATOM_SUPERSCRIPT_Y: xcb_atom_enum_t = 48;
pub const xcb_atom_enum_t_XCB_ATOM_SUBSCRIPT_X: xcb_atom_enum_t = 49;
pub const xcb_atom_enum_t_XCB_ATOM_SUBSCRIPT_Y: xcb_atom_enum_t = 50;
pub const xcb_atom_enum_t_XCB_ATOM_UNDERLINE_POSITION: xcb_atom_enum_t = 51;
pub const xcb_atom_enum_t_XCB_ATOM_UNDERLINE_THICKNESS: xcb_atom_enum_t = 52;
pub const xcb_atom_enum_t_XCB_ATOM_STRIKEOUT_ASCENT: xcb_atom_enum_t = 53;
pub const xcb_atom_enum_t_XCB_ATOM_STRIKEOUT_DESCENT: xcb_atom_enum_t = 54;
pub const xcb_atom_enum_t_XCB_ATOM_ITALIC_ANGLE: xcb_atom_enum_t = 55;
pub const xcb_atom_enum_t_XCB_ATOM_X_HEIGHT: xcb_atom_enum_t = 56;
pub const xcb_atom_enum_t_XCB_ATOM_QUAD_WIDTH: xcb_atom_enum_t = 57;
pub const xcb_atom_enum_t_XCB_ATOM_WEIGHT: xcb_atom_enum_t = 58;
pub const xcb_atom_enum_t_XCB_ATOM_POINT_SIZE: xcb_atom_enum_t = 59;
pub const xcb_atom_enum_t_XCB_ATOM_RESOLUTION: xcb_atom_enum_t = 60;
pub const xcb_atom_enum_t_XCB_ATOM_COPYRIGHT: xcb_atom_enum_t = 61;
pub const xcb_atom_enum_t_XCB_ATOM_NOTICE: xcb_atom_enum_t = 62;
pub const xcb_atom_enum_t_XCB_ATOM_FONT_NAME: xcb_atom_enum_t = 63;
pub const xcb_atom_enum_t_XCB_ATOM_FAMILY_NAME: xcb_atom_enum_t = 64;
pub const xcb_atom_enum_t_XCB_ATOM_FULL_NAME: xcb_atom_enum_t = 65;
pub const xcb_atom_enum_t_XCB_ATOM_CAP_HEIGHT: xcb_atom_enum_t = 66;
pub const xcb_atom_enum_t_XCB_ATOM_WM_CLASS: xcb_atom_enum_t = 67;
pub const xcb_atom_enum_t_XCB_ATOM_WM_TRANSIENT_FOR: xcb_atom_enum_t = 68;
pub type xcb_atom_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_request_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub owner: xcb_window_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_request_event_t"]
        [::std::mem::size_of::<xcb_selection_request_event_t>() - 28usize];
    ["Alignment of xcb_selection_request_event_t"]
        [::std::mem::align_of::<xcb_selection_request_event_t>() - 4usize];
    ["Offset of field: xcb_selection_request_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_request_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_request_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_request_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_request_event_t::owner"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, owner) - 8usize];
    ["Offset of field: xcb_selection_request_event_t::requestor"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, requestor) - 12usize];
    ["Offset of field: xcb_selection_request_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, selection) - 16usize];
    ["Offset of field: xcb_selection_request_event_t::target"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, target) - 20usize];
    ["Offset of field: xcb_selection_request_event_t::property"]
        [::std::mem::offset_of!(xcb_selection_request_event_t, property) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_selection_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_selection_notify_event_t"]
        [::std::mem::size_of::<xcb_selection_notify_event_t>() - 24usize];
    ["Alignment of xcb_selection_notify_event_t"]
        [::std::mem::align_of::<xcb_selection_notify_event_t>() - 4usize];
    ["Offset of field: xcb_selection_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_selection_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_selection_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_selection_notify_event_t::time"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, time) - 4usize];
    ["Offset of field: xcb_selection_notify_event_t::requestor"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, requestor) - 8usize];
    ["Offset of field: xcb_selection_notify_event_t::selection"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, selection) - 12usize];
    ["Offset of field: xcb_selection_notify_event_t::target"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, target) - 16usize];
    ["Offset of field: xcb_selection_notify_event_t::property"]
        [::std::mem::offset_of!(xcb_selection_notify_event_t, property) - 20usize];
};
pub const xcb_colormap_state_t_XCB_COLORMAP_STATE_UNINSTALLED: xcb_colormap_state_t = 0;
pub const xcb_colormap_state_t_XCB_COLORMAP_STATE_INSTALLED: xcb_colormap_state_t = 1;
pub type xcb_colormap_state_t = ::std::os::raw::c_uint;
pub const xcb_colormap_enum_t_XCB_COLORMAP_NONE: xcb_colormap_enum_t = 0;
pub type xcb_colormap_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_colormap_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub colormap: xcb_colormap_t,
    pub _new: u8,
    pub state: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_colormap_notify_event_t"]
        [::std::mem::size_of::<xcb_colormap_notify_event_t>() - 16usize];
    ["Alignment of xcb_colormap_notify_event_t"]
        [::std::mem::align_of::<xcb_colormap_notify_event_t>() - 4usize];
    ["Offset of field: xcb_colormap_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_colormap_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_colormap_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_colormap_notify_event_t::window"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, window) - 4usize];
    ["Offset of field: xcb_colormap_notify_event_t::colormap"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, colormap) - 8usize];
    ["Offset of field: xcb_colormap_notify_event_t::_new"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, _new) - 12usize];
    ["Offset of field: xcb_colormap_notify_event_t::state"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, state) - 13usize];
    ["Offset of field: xcb_colormap_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_colormap_notify_event_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_client_message_data_t {
    pub data8: [u8; 20usize],
    pub data16: [u16; 10usize],
    pub data32: [u32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_data_t"]
        [::std::mem::size_of::<xcb_client_message_data_t>() - 20usize];
    ["Alignment of xcb_client_message_data_t"]
        [::std::mem::align_of::<xcb_client_message_data_t>() - 4usize];
    ["Offset of field: xcb_client_message_data_t::data8"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data8) - 0usize];
    ["Offset of field: xcb_client_message_data_t::data16"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data16) - 0usize];
    ["Offset of field: xcb_client_message_data_t::data32"]
        [::std::mem::offset_of!(xcb_client_message_data_t, data32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_client_message_data_iterator_t {
    pub data: *mut xcb_client_message_data_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_data_iterator_t"]
        [::std::mem::size_of::<xcb_client_message_data_iterator_t>() - 16usize];
    ["Alignment of xcb_client_message_data_iterator_t"]
        [::std::mem::align_of::<xcb_client_message_data_iterator_t>() - 8usize];
    ["Offset of field: xcb_client_message_data_iterator_t::data"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, data) - 0usize];
    ["Offset of field: xcb_client_message_data_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_client_message_data_iterator_t::index"]
        [::std::mem::offset_of!(xcb_client_message_data_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcb_client_message_event_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub window: xcb_window_t,
    pub type_: xcb_atom_t,
    pub data: xcb_client_message_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_client_message_event_t"]
        [::std::mem::size_of::<xcb_client_message_event_t>() - 32usize];
    ["Alignment of xcb_client_message_event_t"]
        [::std::mem::align_of::<xcb_client_message_event_t>() - 4usize];
    ["Offset of field: xcb_client_message_event_t::response_type"]
        [::std::mem::offset_of!(xcb_client_message_event_t, response_type) - 0usize];
    ["Offset of field: xcb_client_message_event_t::format"]
        [::std::mem::offset_of!(xcb_client_message_event_t, format) - 1usize];
    ["Offset of field: xcb_client_message_event_t::sequence"]
        [::std::mem::offset_of!(xcb_client_message_event_t, sequence) - 2usize];
    ["Offset of field: xcb_client_message_event_t::window"]
        [::std::mem::offset_of!(xcb_client_message_event_t, window) - 4usize];
    ["Offset of field: xcb_client_message_event_t::type_"]
        [::std::mem::offset_of!(xcb_client_message_event_t, type_) - 8usize];
    ["Offset of field: xcb_client_message_event_t::data"]
        [::std::mem::offset_of!(xcb_client_message_event_t, data) - 12usize];
};
pub const xcb_mapping_t_XCB_MAPPING_MODIFIER: xcb_mapping_t = 0;
pub const xcb_mapping_t_XCB_MAPPING_KEYBOARD: xcb_mapping_t = 1;
pub const xcb_mapping_t_XCB_MAPPING_POINTER: xcb_mapping_t = 2;
pub type xcb_mapping_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_mapping_notify_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub request: u8,
    pub first_keycode: xcb_keycode_t,
    pub count: u8,
    pub pad1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_mapping_notify_event_t"]
        [::std::mem::size_of::<xcb_mapping_notify_event_t>() - 8usize];
    ["Alignment of xcb_mapping_notify_event_t"]
        [::std::mem::align_of::<xcb_mapping_notify_event_t>() - 2usize];
    ["Offset of field: xcb_mapping_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_mapping_notify_event_t::pad0"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, pad0) - 1usize];
    ["Offset of field: xcb_mapping_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_mapping_notify_event_t::request"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, request) - 4usize];
    ["Offset of field: xcb_mapping_notify_event_t::first_keycode"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, first_keycode) - 5usize];
    ["Offset of field: xcb_mapping_notify_event_t::count"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, count) - 6usize];
    ["Offset of field: xcb_mapping_notify_event_t::pad1"]
        [::std::mem::offset_of!(xcb_mapping_notify_event_t, pad1) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ge_generic_event_t {
    pub response_type: u8,
    pub extension: u8,
    pub sequence: u16,
    pub length: u32,
    pub event_type: u16,
    pub pad0: [u8; 22usize],
    pub full_sequence: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ge_generic_event_t"][::std::mem::size_of::<xcb_ge_generic_event_t>() - 36usize];
    ["Alignment of xcb_ge_generic_event_t"]
        [::std::mem::align_of::<xcb_ge_generic_event_t>() - 4usize];
    ["Offset of field: xcb_ge_generic_event_t::response_type"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, response_type) - 0usize];
    ["Offset of field: xcb_ge_generic_event_t::extension"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, extension) - 1usize];
    ["Offset of field: xcb_ge_generic_event_t::sequence"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, sequence) - 2usize];
    ["Offset of field: xcb_ge_generic_event_t::length"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, length) - 4usize];
    ["Offset of field: xcb_ge_generic_event_t::event_type"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, event_type) - 8usize];
    ["Offset of field: xcb_ge_generic_event_t::pad0"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, pad0) - 10usize];
    ["Offset of field: xcb_ge_generic_event_t::full_sequence"]
        [::std::mem::offset_of!(xcb_ge_generic_event_t, full_sequence) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_request_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_request_error_t"][::std::mem::size_of::<xcb_request_error_t>() - 12usize];
    ["Alignment of xcb_request_error_t"][::std::mem::align_of::<xcb_request_error_t>() - 4usize];
    ["Offset of field: xcb_request_error_t::response_type"]
        [::std::mem::offset_of!(xcb_request_error_t, response_type) - 0usize];
    ["Offset of field: xcb_request_error_t::error_code"]
        [::std::mem::offset_of!(xcb_request_error_t, error_code) - 1usize];
    ["Offset of field: xcb_request_error_t::sequence"]
        [::std::mem::offset_of!(xcb_request_error_t, sequence) - 2usize];
    ["Offset of field: xcb_request_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_request_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_request_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_request_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_request_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_request_error_t, major_opcode) - 10usize];
    ["Offset of field: xcb_request_error_t::pad0"]
        [::std::mem::offset_of!(xcb_request_error_t, pad0) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_value_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_value_error_t"][::std::mem::size_of::<xcb_value_error_t>() - 12usize];
    ["Alignment of xcb_value_error_t"][::std::mem::align_of::<xcb_value_error_t>() - 4usize];
    ["Offset of field: xcb_value_error_t::response_type"]
        [::std::mem::offset_of!(xcb_value_error_t, response_type) - 0usize];
    ["Offset of field: xcb_value_error_t::error_code"]
        [::std::mem::offset_of!(xcb_value_error_t, error_code) - 1usize];
    ["Offset of field: xcb_value_error_t::sequence"]
        [::std::mem::offset_of!(xcb_value_error_t, sequence) - 2usize];
    ["Offset of field: xcb_value_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_value_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_value_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_value_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_value_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_value_error_t, major_opcode) - 10usize];
    ["Offset of field: xcb_value_error_t::pad0"]
        [::std::mem::offset_of!(xcb_value_error_t, pad0) - 11usize];
};
pub type xcb_window_error_t = xcb_value_error_t;
pub type xcb_pixmap_error_t = xcb_value_error_t;
pub type xcb_atom_error_t = xcb_value_error_t;
pub type xcb_cursor_error_t = xcb_value_error_t;
pub type xcb_font_error_t = xcb_value_error_t;
pub type xcb_match_error_t = xcb_request_error_t;
pub type xcb_drawable_error_t = xcb_value_error_t;
pub type xcb_access_error_t = xcb_request_error_t;
pub type xcb_alloc_error_t = xcb_request_error_t;
pub type xcb_colormap_error_t = xcb_value_error_t;
pub type xcb_g_context_error_t = xcb_value_error_t;
pub type xcb_id_choice_error_t = xcb_value_error_t;
pub type xcb_name_error_t = xcb_request_error_t;
pub type xcb_length_error_t = xcb_request_error_t;
pub type xcb_implementation_error_t = xcb_request_error_t;
pub const xcb_window_class_t_XCB_WINDOW_CLASS_COPY_FROM_PARENT: xcb_window_class_t = 0;
pub const xcb_window_class_t_XCB_WINDOW_CLASS_INPUT_OUTPUT: xcb_window_class_t = 1;
pub const xcb_window_class_t_XCB_WINDOW_CLASS_INPUT_ONLY: xcb_window_class_t = 2;
pub type xcb_window_class_t = ::std::os::raw::c_uint;
pub const xcb_cw_t_XCB_CW_BACK_PIXMAP: xcb_cw_t = 1;
pub const xcb_cw_t_XCB_CW_BACK_PIXEL: xcb_cw_t = 2;
pub const xcb_cw_t_XCB_CW_BORDER_PIXMAP: xcb_cw_t = 4;
pub const xcb_cw_t_XCB_CW_BORDER_PIXEL: xcb_cw_t = 8;
pub const xcb_cw_t_XCB_CW_BIT_GRAVITY: xcb_cw_t = 16;
pub const xcb_cw_t_XCB_CW_WIN_GRAVITY: xcb_cw_t = 32;
pub const xcb_cw_t_XCB_CW_BACKING_STORE: xcb_cw_t = 64;
pub const xcb_cw_t_XCB_CW_BACKING_PLANES: xcb_cw_t = 128;
pub const xcb_cw_t_XCB_CW_BACKING_PIXEL: xcb_cw_t = 256;
pub const xcb_cw_t_XCB_CW_OVERRIDE_REDIRECT: xcb_cw_t = 512;
pub const xcb_cw_t_XCB_CW_SAVE_UNDER: xcb_cw_t = 1024;
pub const xcb_cw_t_XCB_CW_EVENT_MASK: xcb_cw_t = 2048;
pub const xcb_cw_t_XCB_CW_DONT_PROPAGATE: xcb_cw_t = 4096;
pub const xcb_cw_t_XCB_CW_COLORMAP: xcb_cw_t = 8192;
pub const xcb_cw_t_XCB_CW_CURSOR: xcb_cw_t = 16384;
pub type xcb_cw_t = ::std::os::raw::c_uint;
pub const xcb_back_pixmap_t_XCB_BACK_PIXMAP_NONE: xcb_back_pixmap_t = 0;
pub const xcb_back_pixmap_t_XCB_BACK_PIXMAP_PARENT_RELATIVE: xcb_back_pixmap_t = 1;
pub type xcb_back_pixmap_t = ::std::os::raw::c_uint;
pub const xcb_gravity_t_XCB_GRAVITY_BIT_FORGET: xcb_gravity_t = 0;
pub const xcb_gravity_t_XCB_GRAVITY_WIN_UNMAP: xcb_gravity_t = 0;
pub const xcb_gravity_t_XCB_GRAVITY_NORTH_WEST: xcb_gravity_t = 1;
pub const xcb_gravity_t_XCB_GRAVITY_NORTH: xcb_gravity_t = 2;
pub const xcb_gravity_t_XCB_GRAVITY_NORTH_EAST: xcb_gravity_t = 3;
pub const xcb_gravity_t_XCB_GRAVITY_WEST: xcb_gravity_t = 4;
pub const xcb_gravity_t_XCB_GRAVITY_CENTER: xcb_gravity_t = 5;
pub const xcb_gravity_t_XCB_GRAVITY_EAST: xcb_gravity_t = 6;
pub const xcb_gravity_t_XCB_GRAVITY_SOUTH_WEST: xcb_gravity_t = 7;
pub const xcb_gravity_t_XCB_GRAVITY_SOUTH: xcb_gravity_t = 8;
pub const xcb_gravity_t_XCB_GRAVITY_SOUTH_EAST: xcb_gravity_t = 9;
pub const xcb_gravity_t_XCB_GRAVITY_STATIC: xcb_gravity_t = 10;
pub type xcb_gravity_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_window_value_list_t {
    pub background_pixmap: xcb_pixmap_t,
    pub background_pixel: u32,
    pub border_pixmap: xcb_pixmap_t,
    pub border_pixel: u32,
    pub bit_gravity: u32,
    pub win_gravity: u32,
    pub backing_store: u32,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub override_redirect: xcb_bool32_t,
    pub save_under: xcb_bool32_t,
    pub event_mask: u32,
    pub do_not_propogate_mask: u32,
    pub colormap: xcb_colormap_t,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_window_value_list_t"]
        [::std::mem::size_of::<xcb_create_window_value_list_t>() - 60usize];
    ["Alignment of xcb_create_window_value_list_t"]
        [::std::mem::align_of::<xcb_create_window_value_list_t>() - 4usize];
    ["Offset of field: xcb_create_window_value_list_t::background_pixmap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, background_pixmap) - 0usize];
    ["Offset of field: xcb_create_window_value_list_t::background_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, background_pixel) - 4usize];
    ["Offset of field: xcb_create_window_value_list_t::border_pixmap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, border_pixmap) - 8usize];
    ["Offset of field: xcb_create_window_value_list_t::border_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, border_pixel) - 12usize];
    ["Offset of field: xcb_create_window_value_list_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, bit_gravity) - 16usize];
    ["Offset of field: xcb_create_window_value_list_t::win_gravity"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, win_gravity) - 20usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_store"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_store) - 24usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_planes"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_planes) - 28usize];
    ["Offset of field: xcb_create_window_value_list_t::backing_pixel"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, backing_pixel) - 32usize];
    ["Offset of field: xcb_create_window_value_list_t::override_redirect"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, override_redirect) - 36usize];
    ["Offset of field: xcb_create_window_value_list_t::save_under"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, save_under) - 40usize];
    ["Offset of field: xcb_create_window_value_list_t::event_mask"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, event_mask) - 44usize];
    ["Offset of field: xcb_create_window_value_list_t::do_not_propogate_mask"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, do_not_propogate_mask) - 48usize];
    ["Offset of field: xcb_create_window_value_list_t::colormap"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, colormap) - 52usize];
    ["Offset of field: xcb_create_window_value_list_t::cursor"]
        [::std::mem::offset_of!(xcb_create_window_value_list_t, cursor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_window_request_t {
    pub major_opcode: u8,
    pub depth: u8,
    pub length: u16,
    pub wid: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub _class: u16,
    pub visual: xcb_visualid_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_window_request_t"]
        [::std::mem::size_of::<xcb_create_window_request_t>() - 32usize];
    ["Alignment of xcb_create_window_request_t"]
        [::std::mem::align_of::<xcb_create_window_request_t>() - 4usize];
    ["Offset of field: xcb_create_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_window_request_t::depth"]
        [::std::mem::offset_of!(xcb_create_window_request_t, depth) - 1usize];
    ["Offset of field: xcb_create_window_request_t::length"]
        [::std::mem::offset_of!(xcb_create_window_request_t, length) - 2usize];
    ["Offset of field: xcb_create_window_request_t::wid"]
        [::std::mem::offset_of!(xcb_create_window_request_t, wid) - 4usize];
    ["Offset of field: xcb_create_window_request_t::parent"]
        [::std::mem::offset_of!(xcb_create_window_request_t, parent) - 8usize];
    ["Offset of field: xcb_create_window_request_t::x"]
        [::std::mem::offset_of!(xcb_create_window_request_t, x) - 12usize];
    ["Offset of field: xcb_create_window_request_t::y"]
        [::std::mem::offset_of!(xcb_create_window_request_t, y) - 14usize];
    ["Offset of field: xcb_create_window_request_t::width"]
        [::std::mem::offset_of!(xcb_create_window_request_t, width) - 16usize];
    ["Offset of field: xcb_create_window_request_t::height"]
        [::std::mem::offset_of!(xcb_create_window_request_t, height) - 18usize];
    ["Offset of field: xcb_create_window_request_t::border_width"]
        [::std::mem::offset_of!(xcb_create_window_request_t, border_width) - 20usize];
    ["Offset of field: xcb_create_window_request_t::_class"]
        [::std::mem::offset_of!(xcb_create_window_request_t, _class) - 22usize];
    ["Offset of field: xcb_create_window_request_t::visual"]
        [::std::mem::offset_of!(xcb_create_window_request_t, visual) - 24usize];
    ["Offset of field: xcb_create_window_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_create_window_request_t, value_mask) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_window_attributes_value_list_t {
    pub background_pixmap: xcb_pixmap_t,
    pub background_pixel: u32,
    pub border_pixmap: xcb_pixmap_t,
    pub border_pixel: u32,
    pub bit_gravity: u32,
    pub win_gravity: u32,
    pub backing_store: u32,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub override_redirect: xcb_bool32_t,
    pub save_under: xcb_bool32_t,
    pub event_mask: u32,
    pub do_not_propogate_mask: u32,
    pub colormap: xcb_colormap_t,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_window_attributes_value_list_t"]
        [::std::mem::size_of::<xcb_change_window_attributes_value_list_t>() - 60usize];
    ["Alignment of xcb_change_window_attributes_value_list_t"]
        [::std::mem::align_of::<xcb_change_window_attributes_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::background_pixmap"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        background_pixmap
    ) - 0usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::background_pixel"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        background_pixel
    ) - 4usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::border_pixmap"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, border_pixmap) - 8usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::border_pixel"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, border_pixel) - 12usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, bit_gravity) - 16usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::win_gravity"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, win_gravity) - 20usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_store"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_store
    ) - 24usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_planes"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_planes
    ) - 28usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::backing_pixel"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        backing_pixel
    ) - 32usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::override_redirect"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        override_redirect
    ) - 36usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::save_under"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, save_under) - 40usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::event_mask"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, event_mask) - 44usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::do_not_propogate_mask"][::std::mem::offset_of!(
        xcb_change_window_attributes_value_list_t,
        do_not_propogate_mask
    )
        - 48usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::colormap"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, colormap) - 52usize];
    ["Offset of field: xcb_change_window_attributes_value_list_t::cursor"]
        [::std::mem::offset_of!(xcb_change_window_attributes_value_list_t, cursor) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_window_attributes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_window_attributes_request_t"]
        [::std::mem::size_of::<xcb_change_window_attributes_request_t>() - 12usize];
    ["Alignment of xcb_change_window_attributes_request_t"]
        [::std::mem::align_of::<xcb_change_window_attributes_request_t>() - 4usize];
    ["Offset of field: xcb_change_window_attributes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_window_attributes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_window_attributes_request_t::length"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, length) - 2usize];
    ["Offset of field: xcb_change_window_attributes_request_t::window"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, window) - 4usize];
    ["Offset of field: xcb_change_window_attributes_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_window_attributes_request_t, value_mask) - 8usize];
};
pub const xcb_map_state_t_XCB_MAP_STATE_UNMAPPED: xcb_map_state_t = 0;
pub const xcb_map_state_t_XCB_MAP_STATE_UNVIEWABLE: xcb_map_state_t = 1;
pub const xcb_map_state_t_XCB_MAP_STATE_VIEWABLE: xcb_map_state_t = 2;
pub type xcb_map_state_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_cookie_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_cookie_t>() - 4usize];
    ["Alignment of xcb_get_window_attributes_cookie_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_window_attributes_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_request_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_request_t>() - 8usize];
    ["Alignment of xcb_get_window_attributes_request_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_request_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_window_attributes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_window_attributes_request_t::length"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, length) - 2usize];
    ["Offset of field: xcb_get_window_attributes_request_t::window"]
        [::std::mem::offset_of!(xcb_get_window_attributes_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_window_attributes_reply_t {
    pub response_type: u8,
    pub backing_store: u8,
    pub sequence: u16,
    pub length: u32,
    pub visual: xcb_visualid_t,
    pub _class: u16,
    pub bit_gravity: u8,
    pub win_gravity: u8,
    pub backing_planes: u32,
    pub backing_pixel: u32,
    pub save_under: u8,
    pub map_is_installed: u8,
    pub map_state: u8,
    pub override_redirect: u8,
    pub colormap: xcb_colormap_t,
    pub all_event_masks: u32,
    pub your_event_mask: u32,
    pub do_not_propagate_mask: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_window_attributes_reply_t"]
        [::std::mem::size_of::<xcb_get_window_attributes_reply_t>() - 44usize];
    ["Alignment of xcb_get_window_attributes_reply_t"]
        [::std::mem::align_of::<xcb_get_window_attributes_reply_t>() - 4usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_store"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_store) - 1usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::visual"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, visual) - 8usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::_class"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, _class) - 12usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::bit_gravity"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, bit_gravity) - 14usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::win_gravity"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, win_gravity) - 15usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_planes"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_planes) - 16usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::backing_pixel"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, backing_pixel) - 20usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::save_under"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, save_under) - 24usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::map_is_installed"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, map_is_installed) - 25usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::map_state"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, map_state) - 26usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::override_redirect"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, override_redirect) - 27usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::colormap"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, colormap) - 28usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::all_event_masks"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, all_event_masks) - 32usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::your_event_mask"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, your_event_mask) - 36usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::do_not_propagate_mask"][::std::mem::offset_of!(
        xcb_get_window_attributes_reply_t,
        do_not_propagate_mask
    ) - 40usize];
    ["Offset of field: xcb_get_window_attributes_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_window_attributes_reply_t, pad0) - 42usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_window_request_t"]
        [::std::mem::size_of::<xcb_destroy_window_request_t>() - 8usize];
    ["Alignment of xcb_destroy_window_request_t"]
        [::std::mem::align_of::<xcb_destroy_window_request_t>() - 4usize];
    ["Offset of field: xcb_destroy_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_destroy_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_window_request_t::length"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, length) - 2usize];
    ["Offset of field: xcb_destroy_window_request_t::window"]
        [::std::mem::offset_of!(xcb_destroy_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_destroy_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_destroy_subwindows_request_t"]
        [::std::mem::size_of::<xcb_destroy_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_destroy_subwindows_request_t"]
        [::std::mem::align_of::<xcb_destroy_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_destroy_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_destroy_subwindows_request_t, window) - 4usize];
};
pub const xcb_set_mode_t_XCB_SET_MODE_INSERT: xcb_set_mode_t = 0;
pub const xcb_set_mode_t_XCB_SET_MODE_DELETE: xcb_set_mode_t = 1;
pub type xcb_set_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_save_set_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_save_set_request_t"]
        [::std::mem::size_of::<xcb_change_save_set_request_t>() - 8usize];
    ["Alignment of xcb_change_save_set_request_t"]
        [::std::mem::align_of::<xcb_change_save_set_request_t>() - 4usize];
    ["Offset of field: xcb_change_save_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_save_set_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_save_set_request_t::length"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, length) - 2usize];
    ["Offset of field: xcb_change_save_set_request_t::window"]
        [::std::mem::offset_of!(xcb_change_save_set_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_reparent_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub parent: xcb_window_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_reparent_window_request_t"]
        [::std::mem::size_of::<xcb_reparent_window_request_t>() - 16usize];
    ["Alignment of xcb_reparent_window_request_t"]
        [::std::mem::align_of::<xcb_reparent_window_request_t>() - 4usize];
    ["Offset of field: xcb_reparent_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_reparent_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_reparent_window_request_t::length"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, length) - 2usize];
    ["Offset of field: xcb_reparent_window_request_t::window"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, window) - 4usize];
    ["Offset of field: xcb_reparent_window_request_t::parent"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, parent) - 8usize];
    ["Offset of field: xcb_reparent_window_request_t::x"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, x) - 12usize];
    ["Offset of field: xcb_reparent_window_request_t::y"]
        [::std::mem::offset_of!(xcb_reparent_window_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_window_request_t"]
        [::std::mem::size_of::<xcb_map_window_request_t>() - 8usize];
    ["Alignment of xcb_map_window_request_t"]
        [::std::mem::align_of::<xcb_map_window_request_t>() - 4usize];
    ["Offset of field: xcb_map_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_map_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_map_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_map_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_map_window_request_t::length"]
        [::std::mem::offset_of!(xcb_map_window_request_t, length) - 2usize];
    ["Offset of field: xcb_map_window_request_t::window"]
        [::std::mem::offset_of!(xcb_map_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_map_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_map_subwindows_request_t"]
        [::std::mem::size_of::<xcb_map_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_map_subwindows_request_t"]
        [::std::mem::align_of::<xcb_map_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_map_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_map_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_map_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_map_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_map_subwindows_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_window_request_t"]
        [::std::mem::size_of::<xcb_unmap_window_request_t>() - 8usize];
    ["Alignment of xcb_unmap_window_request_t"]
        [::std::mem::align_of::<xcb_unmap_window_request_t>() - 4usize];
    ["Offset of field: xcb_unmap_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_unmap_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_window_request_t::length"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, length) - 2usize];
    ["Offset of field: xcb_unmap_window_request_t::window"]
        [::std::mem::offset_of!(xcb_unmap_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_unmap_subwindows_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_unmap_subwindows_request_t"]
        [::std::mem::size_of::<xcb_unmap_subwindows_request_t>() - 8usize];
    ["Alignment of xcb_unmap_subwindows_request_t"]
        [::std::mem::align_of::<xcb_unmap_subwindows_request_t>() - 4usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::pad0"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, pad0) - 1usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::length"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, length) - 2usize];
    ["Offset of field: xcb_unmap_subwindows_request_t::window"]
        [::std::mem::offset_of!(xcb_unmap_subwindows_request_t, window) - 4usize];
};
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_X: xcb_config_window_t = 1;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_Y: xcb_config_window_t = 2;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_WIDTH: xcb_config_window_t = 4;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_HEIGHT: xcb_config_window_t = 8;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_BORDER_WIDTH: xcb_config_window_t = 16;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_SIBLING: xcb_config_window_t = 32;
pub const xcb_config_window_t_XCB_CONFIG_WINDOW_STACK_MODE: xcb_config_window_t = 64;
pub type xcb_config_window_t = ::std::os::raw::c_uint;
pub const xcb_stack_mode_t_XCB_STACK_MODE_ABOVE: xcb_stack_mode_t = 0;
pub const xcb_stack_mode_t_XCB_STACK_MODE_BELOW: xcb_stack_mode_t = 1;
pub const xcb_stack_mode_t_XCB_STACK_MODE_TOP_IF: xcb_stack_mode_t = 2;
pub const xcb_stack_mode_t_XCB_STACK_MODE_BOTTOM_IF: xcb_stack_mode_t = 3;
pub const xcb_stack_mode_t_XCB_STACK_MODE_OPPOSITE: xcb_stack_mode_t = 4;
pub type xcb_stack_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_window_value_list_t {
    pub x: i32,
    pub y: i32,
    pub width: u32,
    pub height: u32,
    pub border_width: u32,
    pub sibling: xcb_window_t,
    pub stack_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_window_value_list_t"]
        [::std::mem::size_of::<xcb_configure_window_value_list_t>() - 28usize];
    ["Alignment of xcb_configure_window_value_list_t"]
        [::std::mem::align_of::<xcb_configure_window_value_list_t>() - 4usize];
    ["Offset of field: xcb_configure_window_value_list_t::x"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, x) - 0usize];
    ["Offset of field: xcb_configure_window_value_list_t::y"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, y) - 4usize];
    ["Offset of field: xcb_configure_window_value_list_t::width"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, width) - 8usize];
    ["Offset of field: xcb_configure_window_value_list_t::height"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, height) - 12usize];
    ["Offset of field: xcb_configure_window_value_list_t::border_width"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, border_width) - 16usize];
    ["Offset of field: xcb_configure_window_value_list_t::sibling"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, sibling) - 20usize];
    ["Offset of field: xcb_configure_window_value_list_t::stack_mode"]
        [::std::mem::offset_of!(xcb_configure_window_value_list_t, stack_mode) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_configure_window_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub value_mask: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_configure_window_request_t"]
        [::std::mem::size_of::<xcb_configure_window_request_t>() - 12usize];
    ["Alignment of xcb_configure_window_request_t"]
        [::std::mem::align_of::<xcb_configure_window_request_t>() - 4usize];
    ["Offset of field: xcb_configure_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_configure_window_request_t::pad0"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, pad0) - 1usize];
    ["Offset of field: xcb_configure_window_request_t::length"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, length) - 2usize];
    ["Offset of field: xcb_configure_window_request_t::window"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, window) - 4usize];
    ["Offset of field: xcb_configure_window_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, value_mask) - 8usize];
    ["Offset of field: xcb_configure_window_request_t::pad1"]
        [::std::mem::offset_of!(xcb_configure_window_request_t, pad1) - 10usize];
};
pub const xcb_circulate_t_XCB_CIRCULATE_RAISE_LOWEST: xcb_circulate_t = 0;
pub const xcb_circulate_t_XCB_CIRCULATE_LOWER_HIGHEST: xcb_circulate_t = 1;
pub type xcb_circulate_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_circulate_window_request_t {
    pub major_opcode: u8,
    pub direction: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_circulate_window_request_t"]
        [::std::mem::size_of::<xcb_circulate_window_request_t>() - 8usize];
    ["Alignment of xcb_circulate_window_request_t"]
        [::std::mem::align_of::<xcb_circulate_window_request_t>() - 4usize];
    ["Offset of field: xcb_circulate_window_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_circulate_window_request_t::direction"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, direction) - 1usize];
    ["Offset of field: xcb_circulate_window_request_t::length"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, length) - 2usize];
    ["Offset of field: xcb_circulate_window_request_t::window"]
        [::std::mem::offset_of!(xcb_circulate_window_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_cookie_t"]
        [::std::mem::size_of::<xcb_get_geometry_cookie_t>() - 4usize];
    ["Alignment of xcb_get_geometry_cookie_t"]
        [::std::mem::align_of::<xcb_get_geometry_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_geometry_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_request_t"]
        [::std::mem::size_of::<xcb_get_geometry_request_t>() - 8usize];
    ["Alignment of xcb_get_geometry_request_t"]
        [::std::mem::align_of::<xcb_get_geometry_request_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_geometry_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_geometry_request_t::length"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, length) - 2usize];
    ["Offset of field: xcb_get_geometry_request_t::drawable"]
        [::std::mem::offset_of!(xcb_get_geometry_request_t, drawable) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_geometry_reply_t {
    pub response_type: u8,
    pub depth: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub border_width: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_geometry_reply_t"]
        [::std::mem::size_of::<xcb_get_geometry_reply_t>() - 24usize];
    ["Alignment of xcb_get_geometry_reply_t"]
        [::std::mem::align_of::<xcb_get_geometry_reply_t>() - 4usize];
    ["Offset of field: xcb_get_geometry_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_geometry_reply_t::depth"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, depth) - 1usize];
    ["Offset of field: xcb_get_geometry_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_geometry_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_geometry_reply_t::root"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, root) - 8usize];
    ["Offset of field: xcb_get_geometry_reply_t::x"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, x) - 12usize];
    ["Offset of field: xcb_get_geometry_reply_t::y"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, y) - 14usize];
    ["Offset of field: xcb_get_geometry_reply_t::width"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, width) - 16usize];
    ["Offset of field: xcb_get_geometry_reply_t::height"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, height) - 18usize];
    ["Offset of field: xcb_get_geometry_reply_t::border_width"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, border_width) - 20usize];
    ["Offset of field: xcb_get_geometry_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_geometry_reply_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_cookie_t"][::std::mem::size_of::<xcb_query_tree_cookie_t>() - 4usize];
    ["Alignment of xcb_query_tree_cookie_t"]
        [::std::mem::align_of::<xcb_query_tree_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_tree_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_tree_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_request_t"]
        [::std::mem::size_of::<xcb_query_tree_request_t>() - 8usize];
    ["Alignment of xcb_query_tree_request_t"]
        [::std::mem::align_of::<xcb_query_tree_request_t>() - 4usize];
    ["Offset of field: xcb_query_tree_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_tree_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_tree_request_t::length"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, length) - 2usize];
    ["Offset of field: xcb_query_tree_request_t::window"]
        [::std::mem::offset_of!(xcb_query_tree_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_tree_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub parent: xcb_window_t,
    pub children_len: u16,
    pub pad1: [u8; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_tree_reply_t"][::std::mem::size_of::<xcb_query_tree_reply_t>() - 32usize];
    ["Alignment of xcb_query_tree_reply_t"]
        [::std::mem::align_of::<xcb_query_tree_reply_t>() - 4usize];
    ["Offset of field: xcb_query_tree_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_tree_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_tree_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_tree_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_tree_reply_t::root"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, root) - 8usize];
    ["Offset of field: xcb_query_tree_reply_t::parent"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, parent) - 12usize];
    ["Offset of field: xcb_query_tree_reply_t::children_len"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, children_len) - 16usize];
    ["Offset of field: xcb_query_tree_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_tree_reply_t, pad1) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_cookie_t"]
        [::std::mem::size_of::<xcb_intern_atom_cookie_t>() - 4usize];
    ["Alignment of xcb_intern_atom_cookie_t"]
        [::std::mem::align_of::<xcb_intern_atom_cookie_t>() - 4usize];
    ["Offset of field: xcb_intern_atom_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_intern_atom_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_request_t {
    pub major_opcode: u8,
    pub only_if_exists: u8,
    pub length: u16,
    pub name_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_request_t"]
        [::std::mem::size_of::<xcb_intern_atom_request_t>() - 8usize];
    ["Alignment of xcb_intern_atom_request_t"]
        [::std::mem::align_of::<xcb_intern_atom_request_t>() - 2usize];
    ["Offset of field: xcb_intern_atom_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_intern_atom_request_t::only_if_exists"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, only_if_exists) - 1usize];
    ["Offset of field: xcb_intern_atom_request_t::length"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, length) - 2usize];
    ["Offset of field: xcb_intern_atom_request_t::name_len"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, name_len) - 4usize];
    ["Offset of field: xcb_intern_atom_request_t::pad0"]
        [::std::mem::offset_of!(xcb_intern_atom_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_intern_atom_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub atom: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_intern_atom_reply_t"][::std::mem::size_of::<xcb_intern_atom_reply_t>() - 12usize];
    ["Alignment of xcb_intern_atom_reply_t"]
        [::std::mem::align_of::<xcb_intern_atom_reply_t>() - 4usize];
    ["Offset of field: xcb_intern_atom_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_intern_atom_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_intern_atom_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_intern_atom_reply_t::length"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, length) - 4usize];
    ["Offset of field: xcb_intern_atom_reply_t::atom"]
        [::std::mem::offset_of!(xcb_intern_atom_reply_t, atom) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_cookie_t"]
        [::std::mem::size_of::<xcb_get_atom_name_cookie_t>() - 4usize];
    ["Alignment of xcb_get_atom_name_cookie_t"]
        [::std::mem::align_of::<xcb_get_atom_name_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_atom_name_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub atom: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_request_t"]
        [::std::mem::size_of::<xcb_get_atom_name_request_t>() - 8usize];
    ["Alignment of xcb_get_atom_name_request_t"]
        [::std::mem::align_of::<xcb_get_atom_name_request_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_atom_name_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_atom_name_request_t::length"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, length) - 2usize];
    ["Offset of field: xcb_get_atom_name_request_t::atom"]
        [::std::mem::offset_of!(xcb_get_atom_name_request_t, atom) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_atom_name_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub name_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_atom_name_reply_t"]
        [::std::mem::size_of::<xcb_get_atom_name_reply_t>() - 32usize];
    ["Alignment of xcb_get_atom_name_reply_t"]
        [::std::mem::align_of::<xcb_get_atom_name_reply_t>() - 4usize];
    ["Offset of field: xcb_get_atom_name_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_atom_name_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_atom_name_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_atom_name_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_atom_name_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, name_len) - 8usize];
    ["Offset of field: xcb_get_atom_name_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_atom_name_reply_t, pad1) - 10usize];
};
pub const xcb_prop_mode_t_XCB_PROP_MODE_REPLACE: xcb_prop_mode_t = 0;
pub const xcb_prop_mode_t_XCB_PROP_MODE_PREPEND: xcb_prop_mode_t = 1;
pub const xcb_prop_mode_t_XCB_PROP_MODE_APPEND: xcb_prop_mode_t = 2;
pub type xcb_prop_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_property_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub pad0: [u8; 3usize],
    pub data_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_property_request_t"]
        [::std::mem::size_of::<xcb_change_property_request_t>() - 24usize];
    ["Alignment of xcb_change_property_request_t"]
        [::std::mem::align_of::<xcb_change_property_request_t>() - 4usize];
    ["Offset of field: xcb_change_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_property_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_property_request_t::length"]
        [::std::mem::offset_of!(xcb_change_property_request_t, length) - 2usize];
    ["Offset of field: xcb_change_property_request_t::window"]
        [::std::mem::offset_of!(xcb_change_property_request_t, window) - 4usize];
    ["Offset of field: xcb_change_property_request_t::property"]
        [::std::mem::offset_of!(xcb_change_property_request_t, property) - 8usize];
    ["Offset of field: xcb_change_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_change_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_change_property_request_t::format"]
        [::std::mem::offset_of!(xcb_change_property_request_t, format) - 16usize];
    ["Offset of field: xcb_change_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_property_request_t, pad0) - 17usize];
    ["Offset of field: xcb_change_property_request_t::data_len"]
        [::std::mem::offset_of!(xcb_change_property_request_t, data_len) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_delete_property_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_delete_property_request_t"]
        [::std::mem::size_of::<xcb_delete_property_request_t>() - 12usize];
    ["Alignment of xcb_delete_property_request_t"]
        [::std::mem::align_of::<xcb_delete_property_request_t>() - 4usize];
    ["Offset of field: xcb_delete_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_delete_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, pad0) - 1usize];
    ["Offset of field: xcb_delete_property_request_t::length"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, length) - 2usize];
    ["Offset of field: xcb_delete_property_request_t::window"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, window) - 4usize];
    ["Offset of field: xcb_delete_property_request_t::property"]
        [::std::mem::offset_of!(xcb_delete_property_request_t, property) - 8usize];
};
pub const xcb_get_property_type_t_XCB_GET_PROPERTY_TYPE_ANY: xcb_get_property_type_t = 0;
pub type xcb_get_property_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_cookie_t"]
        [::std::mem::size_of::<xcb_get_property_cookie_t>() - 4usize];
    ["Alignment of xcb_get_property_cookie_t"]
        [::std::mem::align_of::<xcb_get_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_request_t {
    pub major_opcode: u8,
    pub _delete: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_request_t"]
        [::std::mem::size_of::<xcb_get_property_request_t>() - 24usize];
    ["Alignment of xcb_get_property_request_t"]
        [::std::mem::align_of::<xcb_get_property_request_t>() - 4usize];
    ["Offset of field: xcb_get_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_get_property_request_t, _delete) - 1usize];
    ["Offset of field: xcb_get_property_request_t::length"]
        [::std::mem::offset_of!(xcb_get_property_request_t, length) - 2usize];
    ["Offset of field: xcb_get_property_request_t::window"]
        [::std::mem::offset_of!(xcb_get_property_request_t, window) - 4usize];
    ["Offset of field: xcb_get_property_request_t::property"]
        [::std::mem::offset_of!(xcb_get_property_request_t, property) - 8usize];
    ["Offset of field: xcb_get_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_get_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_get_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_get_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_get_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_get_property_request_t, long_length) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub value_len: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_property_reply_t"]
        [::std::mem::size_of::<xcb_get_property_reply_t>() - 32usize];
    ["Alignment of xcb_get_property_reply_t"]
        [::std::mem::align_of::<xcb_get_property_reply_t>() - 4usize];
    ["Offset of field: xcb_get_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_get_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_get_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_get_property_reply_t::value_len"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, value_len) - 16usize];
    ["Offset of field: xcb_get_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_cookie_t"]
        [::std::mem::size_of::<xcb_list_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_list_properties_cookie_t"]
        [::std::mem::align_of::<xcb_list_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_request_t"]
        [::std::mem::size_of::<xcb_list_properties_request_t>() - 8usize];
    ["Alignment of xcb_list_properties_request_t"]
        [::std::mem::align_of::<xcb_list_properties_request_t>() - 4usize];
    ["Offset of field: xcb_list_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_properties_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_list_properties_request_t::window"]
        [::std::mem::offset_of!(xcb_list_properties_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub atoms_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_properties_reply_t"]
        [::std::mem::size_of::<xcb_list_properties_reply_t>() - 32usize];
    ["Alignment of xcb_list_properties_reply_t"]
        [::std::mem::align_of::<xcb_list_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_list_properties_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_properties_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, atoms_len) - 8usize];
    ["Offset of field: xcb_list_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_selection_owner_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub owner: xcb_window_t,
    pub selection: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_selection_owner_request_t"]
        [::std::mem::size_of::<xcb_set_selection_owner_request_t>() - 16usize];
    ["Alignment of xcb_set_selection_owner_request_t"]
        [::std::mem::align_of::<xcb_set_selection_owner_request_t>() - 4usize];
    ["Offset of field: xcb_set_selection_owner_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_selection_owner_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_selection_owner_request_t::length"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, length) - 2usize];
    ["Offset of field: xcb_set_selection_owner_request_t::owner"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, owner) - 4usize];
    ["Offset of field: xcb_set_selection_owner_request_t::selection"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, selection) - 8usize];
    ["Offset of field: xcb_set_selection_owner_request_t::time"]
        [::std::mem::offset_of!(xcb_set_selection_owner_request_t, time) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_cookie_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_cookie_t>() - 4usize];
    ["Alignment of xcb_get_selection_owner_cookie_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_selection_owner_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub selection: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_request_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_request_t>() - 8usize];
    ["Alignment of xcb_get_selection_owner_request_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_request_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_selection_owner_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_selection_owner_request_t::length"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, length) - 2usize];
    ["Offset of field: xcb_get_selection_owner_request_t::selection"]
        [::std::mem::offset_of!(xcb_get_selection_owner_request_t, selection) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_selection_owner_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub owner: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_selection_owner_reply_t"]
        [::std::mem::size_of::<xcb_get_selection_owner_reply_t>() - 12usize];
    ["Alignment of xcb_get_selection_owner_reply_t"]
        [::std::mem::align_of::<xcb_get_selection_owner_reply_t>() - 4usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_selection_owner_reply_t::owner"]
        [::std::mem::offset_of!(xcb_get_selection_owner_reply_t, owner) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_convert_selection_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub requestor: xcb_window_t,
    pub selection: xcb_atom_t,
    pub target: xcb_atom_t,
    pub property: xcb_atom_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_convert_selection_request_t"]
        [::std::mem::size_of::<xcb_convert_selection_request_t>() - 24usize];
    ["Alignment of xcb_convert_selection_request_t"]
        [::std::mem::align_of::<xcb_convert_selection_request_t>() - 4usize];
    ["Offset of field: xcb_convert_selection_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_convert_selection_request_t::pad0"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, pad0) - 1usize];
    ["Offset of field: xcb_convert_selection_request_t::length"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, length) - 2usize];
    ["Offset of field: xcb_convert_selection_request_t::requestor"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, requestor) - 4usize];
    ["Offset of field: xcb_convert_selection_request_t::selection"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, selection) - 8usize];
    ["Offset of field: xcb_convert_selection_request_t::target"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, target) - 12usize];
    ["Offset of field: xcb_convert_selection_request_t::property"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, property) - 16usize];
    ["Offset of field: xcb_convert_selection_request_t::time"]
        [::std::mem::offset_of!(xcb_convert_selection_request_t, time) - 20usize];
};
pub const xcb_send_event_dest_t_XCB_SEND_EVENT_DEST_POINTER_WINDOW: xcb_send_event_dest_t = 0;
pub const xcb_send_event_dest_t_XCB_SEND_EVENT_DEST_ITEM_FOCUS: xcb_send_event_dest_t = 1;
pub type xcb_send_event_dest_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_send_event_request_t {
    pub major_opcode: u8,
    pub propagate: u8,
    pub length: u16,
    pub destination: xcb_window_t,
    pub event_mask: u32,
    pub event: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_send_event_request_t"]
        [::std::mem::size_of::<xcb_send_event_request_t>() - 44usize];
    ["Alignment of xcb_send_event_request_t"]
        [::std::mem::align_of::<xcb_send_event_request_t>() - 4usize];
    ["Offset of field: xcb_send_event_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_send_event_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_send_event_request_t::propagate"]
        [::std::mem::offset_of!(xcb_send_event_request_t, propagate) - 1usize];
    ["Offset of field: xcb_send_event_request_t::length"]
        [::std::mem::offset_of!(xcb_send_event_request_t, length) - 2usize];
    ["Offset of field: xcb_send_event_request_t::destination"]
        [::std::mem::offset_of!(xcb_send_event_request_t, destination) - 4usize];
    ["Offset of field: xcb_send_event_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_send_event_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_send_event_request_t::event"]
        [::std::mem::offset_of!(xcb_send_event_request_t, event) - 12usize];
};
pub const xcb_grab_mode_t_XCB_GRAB_MODE_SYNC: xcb_grab_mode_t = 0;
pub const xcb_grab_mode_t_XCB_GRAB_MODE_ASYNC: xcb_grab_mode_t = 1;
pub type xcb_grab_mode_t = ::std::os::raw::c_uint;
pub const xcb_grab_status_t_XCB_GRAB_STATUS_SUCCESS: xcb_grab_status_t = 0;
pub const xcb_grab_status_t_XCB_GRAB_STATUS_ALREADY_GRABBED: xcb_grab_status_t = 1;
pub const xcb_grab_status_t_XCB_GRAB_STATUS_INVALID_TIME: xcb_grab_status_t = 2;
pub const xcb_grab_status_t_XCB_GRAB_STATUS_NOT_VIEWABLE: xcb_grab_status_t = 3;
pub const xcb_grab_status_t_XCB_GRAB_STATUS_FROZEN: xcb_grab_status_t = 4;
pub type xcb_grab_status_t = ::std::os::raw::c_uint;
pub const xcb_cursor_enum_t_XCB_CURSOR_NONE: xcb_cursor_enum_t = 0;
pub type xcb_cursor_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_cookie_t"]
        [::std::mem::size_of::<xcb_grab_pointer_cookie_t>() - 4usize];
    ["Alignment of xcb_grab_pointer_cookie_t"]
        [::std::mem::align_of::<xcb_grab_pointer_cookie_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_pointer_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub event_mask: u16,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_request_t"]
        [::std::mem::size_of::<xcb_grab_pointer_request_t>() - 24usize];
    ["Alignment of xcb_grab_pointer_request_t"]
        [::std::mem::align_of::<xcb_grab_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_pointer_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_pointer_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_pointer_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_grab_pointer_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, pointer_mode) - 10usize];
    ["Offset of field: xcb_grab_pointer_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, keyboard_mode) - 11usize];
    ["Offset of field: xcb_grab_pointer_request_t::confine_to"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, confine_to) - 12usize];
    ["Offset of field: xcb_grab_pointer_request_t::cursor"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, cursor) - 16usize];
    ["Offset of field: xcb_grab_pointer_request_t::time"]
        [::std::mem::offset_of!(xcb_grab_pointer_request_t, time) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_pointer_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_pointer_reply_t"]
        [::std::mem::size_of::<xcb_grab_pointer_reply_t>() - 8usize];
    ["Alignment of xcb_grab_pointer_reply_t"]
        [::std::mem::align_of::<xcb_grab_pointer_reply_t>() - 4usize];
    ["Offset of field: xcb_grab_pointer_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_grab_pointer_reply_t::status"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, status) - 1usize];
    ["Offset of field: xcb_grab_pointer_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_grab_pointer_reply_t::length"]
        [::std::mem::offset_of!(xcb_grab_pointer_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_pointer_request_t"]
        [::std::mem::size_of::<xcb_ungrab_pointer_request_t>() - 8usize];
    ["Alignment of xcb_ungrab_pointer_request_t"]
        [::std::mem::align_of::<xcb_ungrab_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_pointer_request_t::time"]
        [::std::mem::offset_of!(xcb_ungrab_pointer_request_t, time) - 4usize];
};
pub const xcb_button_index_t_XCB_BUTTON_INDEX_ANY: xcb_button_index_t = 0;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_1: xcb_button_index_t = 1;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_2: xcb_button_index_t = 2;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_3: xcb_button_index_t = 3;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_4: xcb_button_index_t = 4;
pub const xcb_button_index_t_XCB_BUTTON_INDEX_5: xcb_button_index_t = 5;
pub type xcb_button_index_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_button_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub event_mask: u16,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub confine_to: xcb_window_t,
    pub cursor: xcb_cursor_t,
    pub button: u8,
    pub pad0: u8,
    pub modifiers: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_button_request_t"]
        [::std::mem::size_of::<xcb_grab_button_request_t>() - 24usize];
    ["Alignment of xcb_grab_button_request_t"]
        [::std::mem::align_of::<xcb_grab_button_request_t>() - 4usize];
    ["Offset of field: xcb_grab_button_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_button_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_button_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_button_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_button_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, event_mask) - 8usize];
    ["Offset of field: xcb_grab_button_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, pointer_mode) - 10usize];
    ["Offset of field: xcb_grab_button_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, keyboard_mode) - 11usize];
    ["Offset of field: xcb_grab_button_request_t::confine_to"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, confine_to) - 12usize];
    ["Offset of field: xcb_grab_button_request_t::cursor"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, cursor) - 16usize];
    ["Offset of field: xcb_grab_button_request_t::button"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, button) - 20usize];
    ["Offset of field: xcb_grab_button_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, pad0) - 21usize];
    ["Offset of field: xcb_grab_button_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_grab_button_request_t, modifiers) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_button_request_t {
    pub major_opcode: u8,
    pub button: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_button_request_t"]
        [::std::mem::size_of::<xcb_ungrab_button_request_t>() - 12usize];
    ["Alignment of xcb_ungrab_button_request_t"]
        [::std::mem::align_of::<xcb_ungrab_button_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_button_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_button_request_t::button"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, button) - 1usize];
    ["Offset of field: xcb_ungrab_button_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_button_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_ungrab_button_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_ungrab_button_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_button_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_active_pointer_grab_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
    pub time: xcb_timestamp_t,
    pub event_mask: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_active_pointer_grab_request_t"]
        [::std::mem::size_of::<xcb_change_active_pointer_grab_request_t>() - 16usize];
    ["Alignment of xcb_change_active_pointer_grab_request_t"]
        [::std::mem::align_of::<xcb_change_active_pointer_grab_request_t>() - 4usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::length"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, length) - 2usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::cursor"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, cursor) - 4usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::time"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, time) - 8usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::event_mask"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, event_mask) - 12usize];
    ["Offset of field: xcb_change_active_pointer_grab_request_t::pad1"]
        [::std::mem::offset_of!(xcb_change_active_pointer_grab_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_cookie_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_cookie_t>() - 4usize];
    ["Alignment of xcb_grab_keyboard_cookie_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_cookie_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_keyboard_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub time: xcb_timestamp_t,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_request_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_request_t>() - 16usize];
    ["Alignment of xcb_grab_keyboard_request_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_request_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_keyboard_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_keyboard_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_keyboard_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_keyboard_request_t::time"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, time) - 8usize];
    ["Offset of field: xcb_grab_keyboard_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, pointer_mode) - 12usize];
    ["Offset of field: xcb_grab_keyboard_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, keyboard_mode) - 13usize];
    ["Offset of field: xcb_grab_keyboard_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_keyboard_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_keyboard_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_keyboard_reply_t"]
        [::std::mem::size_of::<xcb_grab_keyboard_reply_t>() - 8usize];
    ["Alignment of xcb_grab_keyboard_reply_t"]
        [::std::mem::align_of::<xcb_grab_keyboard_reply_t>() - 4usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::status"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, status) - 1usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_grab_keyboard_reply_t::length"]
        [::std::mem::offset_of!(xcb_grab_keyboard_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_keyboard_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_keyboard_request_t"]
        [::std::mem::size_of::<xcb_ungrab_keyboard_request_t>() - 8usize];
    ["Alignment of xcb_ungrab_keyboard_request_t"]
        [::std::mem::align_of::<xcb_ungrab_keyboard_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_keyboard_request_t::time"]
        [::std::mem::offset_of!(xcb_ungrab_keyboard_request_t, time) - 4usize];
};
pub const xcb_grab_t_XCB_GRAB_ANY: xcb_grab_t = 0;
pub type xcb_grab_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_key_request_t {
    pub major_opcode: u8,
    pub owner_events: u8,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub key: xcb_keycode_t,
    pub pointer_mode: u8,
    pub keyboard_mode: u8,
    pub pad0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_key_request_t"][::std::mem::size_of::<xcb_grab_key_request_t>() - 16usize];
    ["Alignment of xcb_grab_key_request_t"]
        [::std::mem::align_of::<xcb_grab_key_request_t>() - 4usize];
    ["Offset of field: xcb_grab_key_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_key_request_t::owner_events"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, owner_events) - 1usize];
    ["Offset of field: xcb_grab_key_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, length) - 2usize];
    ["Offset of field: xcb_grab_key_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_grab_key_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_grab_key_request_t::key"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, key) - 10usize];
    ["Offset of field: xcb_grab_key_request_t::pointer_mode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, pointer_mode) - 11usize];
    ["Offset of field: xcb_grab_key_request_t::keyboard_mode"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, keyboard_mode) - 12usize];
    ["Offset of field: xcb_grab_key_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_key_request_t, pad0) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_key_request_t {
    pub major_opcode: u8,
    pub key: xcb_keycode_t,
    pub length: u16,
    pub grab_window: xcb_window_t,
    pub modifiers: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_key_request_t"]
        [::std::mem::size_of::<xcb_ungrab_key_request_t>() - 12usize];
    ["Alignment of xcb_ungrab_key_request_t"]
        [::std::mem::align_of::<xcb_ungrab_key_request_t>() - 4usize];
    ["Offset of field: xcb_ungrab_key_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_key_request_t::key"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, key) - 1usize];
    ["Offset of field: xcb_ungrab_key_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, length) - 2usize];
    ["Offset of field: xcb_ungrab_key_request_t::grab_window"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, grab_window) - 4usize];
    ["Offset of field: xcb_ungrab_key_request_t::modifiers"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, modifiers) - 8usize];
    ["Offset of field: xcb_ungrab_key_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_key_request_t, pad0) - 10usize];
};
pub const xcb_allow_t_XCB_ALLOW_ASYNC_POINTER: xcb_allow_t = 0;
pub const xcb_allow_t_XCB_ALLOW_SYNC_POINTER: xcb_allow_t = 1;
pub const xcb_allow_t_XCB_ALLOW_REPLAY_POINTER: xcb_allow_t = 2;
pub const xcb_allow_t_XCB_ALLOW_ASYNC_KEYBOARD: xcb_allow_t = 3;
pub const xcb_allow_t_XCB_ALLOW_SYNC_KEYBOARD: xcb_allow_t = 4;
pub const xcb_allow_t_XCB_ALLOW_REPLAY_KEYBOARD: xcb_allow_t = 5;
pub const xcb_allow_t_XCB_ALLOW_ASYNC_BOTH: xcb_allow_t = 6;
pub const xcb_allow_t_XCB_ALLOW_SYNC_BOTH: xcb_allow_t = 7;
pub type xcb_allow_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_allow_events_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_allow_events_request_t"]
        [::std::mem::size_of::<xcb_allow_events_request_t>() - 8usize];
    ["Alignment of xcb_allow_events_request_t"]
        [::std::mem::align_of::<xcb_allow_events_request_t>() - 4usize];
    ["Offset of field: xcb_allow_events_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_allow_events_request_t::mode"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, mode) - 1usize];
    ["Offset of field: xcb_allow_events_request_t::length"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, length) - 2usize];
    ["Offset of field: xcb_allow_events_request_t::time"]
        [::std::mem::offset_of!(xcb_allow_events_request_t, time) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_grab_server_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_grab_server_request_t"]
        [::std::mem::size_of::<xcb_grab_server_request_t>() - 4usize];
    ["Alignment of xcb_grab_server_request_t"]
        [::std::mem::align_of::<xcb_grab_server_request_t>() - 2usize];
    ["Offset of field: xcb_grab_server_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_grab_server_request_t::pad0"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, pad0) - 1usize];
    ["Offset of field: xcb_grab_server_request_t::length"]
        [::std::mem::offset_of!(xcb_grab_server_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ungrab_server_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ungrab_server_request_t"]
        [::std::mem::size_of::<xcb_ungrab_server_request_t>() - 4usize];
    ["Alignment of xcb_ungrab_server_request_t"]
        [::std::mem::align_of::<xcb_ungrab_server_request_t>() - 2usize];
    ["Offset of field: xcb_ungrab_server_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_ungrab_server_request_t::pad0"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, pad0) - 1usize];
    ["Offset of field: xcb_ungrab_server_request_t::length"]
        [::std::mem::offset_of!(xcb_ungrab_server_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_cookie_t"]
        [::std::mem::size_of::<xcb_query_pointer_cookie_t>() - 4usize];
    ["Alignment of xcb_query_pointer_cookie_t"]
        [::std::mem::align_of::<xcb_query_pointer_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_pointer_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_request_t"]
        [::std::mem::size_of::<xcb_query_pointer_request_t>() - 8usize];
    ["Alignment of xcb_query_pointer_request_t"]
        [::std::mem::align_of::<xcb_query_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_query_pointer_request_t::window"]
        [::std::mem::offset_of!(xcb_query_pointer_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_pointer_reply_t {
    pub response_type: u8,
    pub same_screen: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub win_x: i16,
    pub win_y: i16,
    pub mask: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_pointer_reply_t"]
        [::std::mem::size_of::<xcb_query_pointer_reply_t>() - 28usize];
    ["Alignment of xcb_query_pointer_reply_t"]
        [::std::mem::align_of::<xcb_query_pointer_reply_t>() - 4usize];
    ["Offset of field: xcb_query_pointer_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_pointer_reply_t::same_screen"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, same_screen) - 1usize];
    ["Offset of field: xcb_query_pointer_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_pointer_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_pointer_reply_t::root"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root) - 8usize];
    ["Offset of field: xcb_query_pointer_reply_t::child"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, child) - 12usize];
    ["Offset of field: xcb_query_pointer_reply_t::root_x"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root_x) - 16usize];
    ["Offset of field: xcb_query_pointer_reply_t::root_y"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, root_y) - 18usize];
    ["Offset of field: xcb_query_pointer_reply_t::win_x"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, win_x) - 20usize];
    ["Offset of field: xcb_query_pointer_reply_t::win_y"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, win_y) - 22usize];
    ["Offset of field: xcb_query_pointer_reply_t::mask"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, mask) - 24usize];
    ["Offset of field: xcb_query_pointer_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_pointer_reply_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timecoord_t {
    pub time: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timecoord_t"][::std::mem::size_of::<xcb_timecoord_t>() - 8usize];
    ["Alignment of xcb_timecoord_t"][::std::mem::align_of::<xcb_timecoord_t>() - 4usize];
    ["Offset of field: xcb_timecoord_t::time"]
        [::std::mem::offset_of!(xcb_timecoord_t, time) - 0usize];
    ["Offset of field: xcb_timecoord_t::x"][::std::mem::offset_of!(xcb_timecoord_t, x) - 4usize];
    ["Offset of field: xcb_timecoord_t::y"][::std::mem::offset_of!(xcb_timecoord_t, y) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_timecoord_iterator_t {
    pub data: *mut xcb_timecoord_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_timecoord_iterator_t"]
        [::std::mem::size_of::<xcb_timecoord_iterator_t>() - 16usize];
    ["Alignment of xcb_timecoord_iterator_t"]
        [::std::mem::align_of::<xcb_timecoord_iterator_t>() - 8usize];
    ["Offset of field: xcb_timecoord_iterator_t::data"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, data) - 0usize];
    ["Offset of field: xcb_timecoord_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_timecoord_iterator_t::index"]
        [::std::mem::offset_of!(xcb_timecoord_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_cookie_t"]
        [::std::mem::size_of::<xcb_get_motion_events_cookie_t>() - 4usize];
    ["Alignment of xcb_get_motion_events_cookie_t"]
        [::std::mem::align_of::<xcb_get_motion_events_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_motion_events_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub start: xcb_timestamp_t,
    pub stop: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_request_t"]
        [::std::mem::size_of::<xcb_get_motion_events_request_t>() - 16usize];
    ["Alignment of xcb_get_motion_events_request_t"]
        [::std::mem::align_of::<xcb_get_motion_events_request_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_motion_events_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_motion_events_request_t::length"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, length) - 2usize];
    ["Offset of field: xcb_get_motion_events_request_t::window"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, window) - 4usize];
    ["Offset of field: xcb_get_motion_events_request_t::start"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, start) - 8usize];
    ["Offset of field: xcb_get_motion_events_request_t::stop"]
        [::std::mem::offset_of!(xcb_get_motion_events_request_t, stop) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_motion_events_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub events_len: u32,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_motion_events_reply_t"]
        [::std::mem::size_of::<xcb_get_motion_events_reply_t>() - 32usize];
    ["Alignment of xcb_get_motion_events_reply_t"]
        [::std::mem::align_of::<xcb_get_motion_events_reply_t>() - 4usize];
    ["Offset of field: xcb_get_motion_events_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_motion_events_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_motion_events_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_motion_events_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_motion_events_reply_t::events_len"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, events_len) - 8usize];
    ["Offset of field: xcb_get_motion_events_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_motion_events_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_cookie_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_cookie_t>() - 4usize];
    ["Alignment of xcb_translate_coordinates_cookie_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_cookie_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_translate_coordinates_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_request_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_request_t>() - 16usize];
    ["Alignment of xcb_translate_coordinates_request_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_request_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_translate_coordinates_request_t::pad0"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, pad0) - 1usize];
    ["Offset of field: xcb_translate_coordinates_request_t::length"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, length) - 2usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_window"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_window) - 4usize];
    ["Offset of field: xcb_translate_coordinates_request_t::dst_window"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, dst_window) - 8usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_x"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_x) - 12usize];
    ["Offset of field: xcb_translate_coordinates_request_t::src_y"]
        [::std::mem::offset_of!(xcb_translate_coordinates_request_t, src_y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_translate_coordinates_reply_t {
    pub response_type: u8,
    pub same_screen: u8,
    pub sequence: u16,
    pub length: u32,
    pub child: xcb_window_t,
    pub dst_x: i16,
    pub dst_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_translate_coordinates_reply_t"]
        [::std::mem::size_of::<xcb_translate_coordinates_reply_t>() - 16usize];
    ["Alignment of xcb_translate_coordinates_reply_t"]
        [::std::mem::align_of::<xcb_translate_coordinates_reply_t>() - 4usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::same_screen"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, same_screen) - 1usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::length"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, length) - 4usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::child"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, child) - 8usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::dst_x"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, dst_x) - 12usize];
    ["Offset of field: xcb_translate_coordinates_reply_t::dst_y"]
        [::std::mem::offset_of!(xcb_translate_coordinates_reply_t, dst_y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_warp_pointer_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_window: xcb_window_t,
    pub dst_window: xcb_window_t,
    pub src_x: i16,
    pub src_y: i16,
    pub src_width: u16,
    pub src_height: u16,
    pub dst_x: i16,
    pub dst_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_warp_pointer_request_t"]
        [::std::mem::size_of::<xcb_warp_pointer_request_t>() - 24usize];
    ["Alignment of xcb_warp_pointer_request_t"]
        [::std::mem::align_of::<xcb_warp_pointer_request_t>() - 4usize];
    ["Offset of field: xcb_warp_pointer_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_warp_pointer_request_t::pad0"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, pad0) - 1usize];
    ["Offset of field: xcb_warp_pointer_request_t::length"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, length) - 2usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_window"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_window) - 4usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_window"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_window) - 8usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_x"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_x) - 12usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_y"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_y) - 14usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_width"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_width) - 16usize];
    ["Offset of field: xcb_warp_pointer_request_t::src_height"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, src_height) - 18usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_warp_pointer_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_warp_pointer_request_t, dst_y) - 22usize];
};
pub const xcb_input_focus_t_XCB_INPUT_FOCUS_NONE: xcb_input_focus_t = 0;
pub const xcb_input_focus_t_XCB_INPUT_FOCUS_POINTER_ROOT: xcb_input_focus_t = 1;
pub const xcb_input_focus_t_XCB_INPUT_FOCUS_PARENT: xcb_input_focus_t = 2;
pub const xcb_input_focus_t_XCB_INPUT_FOCUS_FOLLOW_KEYBOARD: xcb_input_focus_t = 3;
pub type xcb_input_focus_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_input_focus_request_t {
    pub major_opcode: u8,
    pub revert_to: u8,
    pub length: u16,
    pub focus: xcb_window_t,
    pub time: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_input_focus_request_t"]
        [::std::mem::size_of::<xcb_set_input_focus_request_t>() - 12usize];
    ["Alignment of xcb_set_input_focus_request_t"]
        [::std::mem::align_of::<xcb_set_input_focus_request_t>() - 4usize];
    ["Offset of field: xcb_set_input_focus_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_input_focus_request_t::revert_to"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, revert_to) - 1usize];
    ["Offset of field: xcb_set_input_focus_request_t::length"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, length) - 2usize];
    ["Offset of field: xcb_set_input_focus_request_t::focus"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, focus) - 4usize];
    ["Offset of field: xcb_set_input_focus_request_t::time"]
        [::std::mem::offset_of!(xcb_set_input_focus_request_t, time) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_cookie_t"]
        [::std::mem::size_of::<xcb_get_input_focus_cookie_t>() - 4usize];
    ["Alignment of xcb_get_input_focus_cookie_t"]
        [::std::mem::align_of::<xcb_get_input_focus_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_input_focus_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_input_focus_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_request_t"]
        [::std::mem::size_of::<xcb_get_input_focus_request_t>() - 4usize];
    ["Alignment of xcb_get_input_focus_request_t"]
        [::std::mem::align_of::<xcb_get_input_focus_request_t>() - 2usize];
    ["Offset of field: xcb_get_input_focus_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_input_focus_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_input_focus_request_t::length"]
        [::std::mem::offset_of!(xcb_get_input_focus_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_input_focus_reply_t {
    pub response_type: u8,
    pub revert_to: u8,
    pub sequence: u16,
    pub length: u32,
    pub focus: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_input_focus_reply_t"]
        [::std::mem::size_of::<xcb_get_input_focus_reply_t>() - 12usize];
    ["Alignment of xcb_get_input_focus_reply_t"]
        [::std::mem::align_of::<xcb_get_input_focus_reply_t>() - 4usize];
    ["Offset of field: xcb_get_input_focus_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_input_focus_reply_t::revert_to"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, revert_to) - 1usize];
    ["Offset of field: xcb_get_input_focus_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_input_focus_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_input_focus_reply_t::focus"]
        [::std::mem::offset_of!(xcb_get_input_focus_reply_t, focus) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_cookie_t"]
        [::std::mem::size_of::<xcb_query_keymap_cookie_t>() - 4usize];
    ["Alignment of xcb_query_keymap_cookie_t"]
        [::std::mem::align_of::<xcb_query_keymap_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_keymap_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_keymap_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_request_t"]
        [::std::mem::size_of::<xcb_query_keymap_request_t>() - 4usize];
    ["Alignment of xcb_query_keymap_request_t"]
        [::std::mem::align_of::<xcb_query_keymap_request_t>() - 2usize];
    ["Offset of field: xcb_query_keymap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_keymap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_keymap_request_t::length"]
        [::std::mem::offset_of!(xcb_query_keymap_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_keymap_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub keys: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_keymap_reply_t"]
        [::std::mem::size_of::<xcb_query_keymap_reply_t>() - 40usize];
    ["Alignment of xcb_query_keymap_reply_t"]
        [::std::mem::align_of::<xcb_query_keymap_reply_t>() - 4usize];
    ["Offset of field: xcb_query_keymap_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_keymap_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_keymap_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_keymap_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_keymap_reply_t::keys"]
        [::std::mem::offset_of!(xcb_query_keymap_reply_t, keys) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_open_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub fid: xcb_font_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_open_font_request_t"][::std::mem::size_of::<xcb_open_font_request_t>() - 12usize];
    ["Alignment of xcb_open_font_request_t"]
        [::std::mem::align_of::<xcb_open_font_request_t>() - 4usize];
    ["Offset of field: xcb_open_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_open_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_open_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_open_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_open_font_request_t::length"]
        [::std::mem::offset_of!(xcb_open_font_request_t, length) - 2usize];
    ["Offset of field: xcb_open_font_request_t::fid"]
        [::std::mem::offset_of!(xcb_open_font_request_t, fid) - 4usize];
    ["Offset of field: xcb_open_font_request_t::name_len"]
        [::std::mem::offset_of!(xcb_open_font_request_t, name_len) - 8usize];
    ["Offset of field: xcb_open_font_request_t::pad1"]
        [::std::mem::offset_of!(xcb_open_font_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_close_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font: xcb_font_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_close_font_request_t"]
        [::std::mem::size_of::<xcb_close_font_request_t>() - 8usize];
    ["Alignment of xcb_close_font_request_t"]
        [::std::mem::align_of::<xcb_close_font_request_t>() - 4usize];
    ["Offset of field: xcb_close_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_close_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_close_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_close_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_close_font_request_t::length"]
        [::std::mem::offset_of!(xcb_close_font_request_t, length) - 2usize];
    ["Offset of field: xcb_close_font_request_t::font"]
        [::std::mem::offset_of!(xcb_close_font_request_t, font) - 4usize];
};
pub const xcb_font_draw_t_XCB_FONT_DRAW_LEFT_TO_RIGHT: xcb_font_draw_t = 0;
pub const xcb_font_draw_t_XCB_FONT_DRAW_RIGHT_TO_LEFT: xcb_font_draw_t = 1;
pub type xcb_font_draw_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontprop_t {
    pub name: xcb_atom_t,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontprop_t"][::std::mem::size_of::<xcb_fontprop_t>() - 8usize];
    ["Alignment of xcb_fontprop_t"][::std::mem::align_of::<xcb_fontprop_t>() - 4usize];
    ["Offset of field: xcb_fontprop_t::name"]
        [::std::mem::offset_of!(xcb_fontprop_t, name) - 0usize];
    ["Offset of field: xcb_fontprop_t::value"]
        [::std::mem::offset_of!(xcb_fontprop_t, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fontprop_iterator_t {
    pub data: *mut xcb_fontprop_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fontprop_iterator_t"][::std::mem::size_of::<xcb_fontprop_iterator_t>() - 16usize];
    ["Alignment of xcb_fontprop_iterator_t"]
        [::std::mem::align_of::<xcb_fontprop_iterator_t>() - 8usize];
    ["Offset of field: xcb_fontprop_iterator_t::data"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, data) - 0usize];
    ["Offset of field: xcb_fontprop_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_fontprop_iterator_t::index"]
        [::std::mem::offset_of!(xcb_fontprop_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_charinfo_t {
    pub left_side_bearing: i16,
    pub right_side_bearing: i16,
    pub character_width: i16,
    pub ascent: i16,
    pub descent: i16,
    pub attributes: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_charinfo_t"][::std::mem::size_of::<xcb_charinfo_t>() - 12usize];
    ["Alignment of xcb_charinfo_t"][::std::mem::align_of::<xcb_charinfo_t>() - 2usize];
    ["Offset of field: xcb_charinfo_t::left_side_bearing"]
        [::std::mem::offset_of!(xcb_charinfo_t, left_side_bearing) - 0usize];
    ["Offset of field: xcb_charinfo_t::right_side_bearing"]
        [::std::mem::offset_of!(xcb_charinfo_t, right_side_bearing) - 2usize];
    ["Offset of field: xcb_charinfo_t::character_width"]
        [::std::mem::offset_of!(xcb_charinfo_t, character_width) - 4usize];
    ["Offset of field: xcb_charinfo_t::ascent"]
        [::std::mem::offset_of!(xcb_charinfo_t, ascent) - 6usize];
    ["Offset of field: xcb_charinfo_t::descent"]
        [::std::mem::offset_of!(xcb_charinfo_t, descent) - 8usize];
    ["Offset of field: xcb_charinfo_t::attributes"]
        [::std::mem::offset_of!(xcb_charinfo_t, attributes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_charinfo_iterator_t {
    pub data: *mut xcb_charinfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_charinfo_iterator_t"][::std::mem::size_of::<xcb_charinfo_iterator_t>() - 16usize];
    ["Alignment of xcb_charinfo_iterator_t"]
        [::std::mem::align_of::<xcb_charinfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_charinfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_charinfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_charinfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_charinfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_cookie_t"][::std::mem::size_of::<xcb_query_font_cookie_t>() - 4usize];
    ["Alignment of xcb_query_font_cookie_t"]
        [::std::mem::align_of::<xcb_query_font_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_font_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_font_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font: xcb_fontable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_request_t"]
        [::std::mem::size_of::<xcb_query_font_request_t>() - 8usize];
    ["Alignment of xcb_query_font_request_t"]
        [::std::mem::align_of::<xcb_query_font_request_t>() - 4usize];
    ["Offset of field: xcb_query_font_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_font_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_font_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_font_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_font_request_t::length"]
        [::std::mem::offset_of!(xcb_query_font_request_t, length) - 2usize];
    ["Offset of field: xcb_query_font_request_t::font"]
        [::std::mem::offset_of!(xcb_query_font_request_t, font) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_font_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_bounds: xcb_charinfo_t,
    pub pad1: [u8; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad2: [u8; 4usize],
    pub min_char_or_byte2: u16,
    pub max_char_or_byte2: u16,
    pub default_char: u16,
    pub properties_len: u16,
    pub draw_direction: u8,
    pub min_byte1: u8,
    pub max_byte1: u8,
    pub all_chars_exist: u8,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub char_infos_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_font_reply_t"][::std::mem::size_of::<xcb_query_font_reply_t>() - 60usize];
    ["Alignment of xcb_query_font_reply_t"]
        [::std::mem::align_of::<xcb_query_font_reply_t>() - 4usize];
    ["Offset of field: xcb_query_font_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_font_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_font_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_font_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_font_reply_t::min_bounds"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_bounds) - 8usize];
    ["Offset of field: xcb_query_font_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad1) - 20usize];
    ["Offset of field: xcb_query_font_reply_t::max_bounds"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_bounds) - 24usize];
    ["Offset of field: xcb_query_font_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, pad2) - 36usize];
    ["Offset of field: xcb_query_font_reply_t::min_char_or_byte2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_char_or_byte2) - 40usize];
    ["Offset of field: xcb_query_font_reply_t::max_char_or_byte2"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_char_or_byte2) - 42usize];
    ["Offset of field: xcb_query_font_reply_t::default_char"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, default_char) - 44usize];
    ["Offset of field: xcb_query_font_reply_t::properties_len"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, properties_len) - 46usize];
    ["Offset of field: xcb_query_font_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, draw_direction) - 48usize];
    ["Offset of field: xcb_query_font_reply_t::min_byte1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, min_byte1) - 49usize];
    ["Offset of field: xcb_query_font_reply_t::max_byte1"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, max_byte1) - 50usize];
    ["Offset of field: xcb_query_font_reply_t::all_chars_exist"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, all_chars_exist) - 51usize];
    ["Offset of field: xcb_query_font_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, font_ascent) - 52usize];
    ["Offset of field: xcb_query_font_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, font_descent) - 54usize];
    ["Offset of field: xcb_query_font_reply_t::char_infos_len"]
        [::std::mem::offset_of!(xcb_query_font_reply_t, char_infos_len) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_cookie_t"]
        [::std::mem::size_of::<xcb_query_text_extents_cookie_t>() - 4usize];
    ["Alignment of xcb_query_text_extents_cookie_t"]
        [::std::mem::align_of::<xcb_query_text_extents_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_text_extents_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_request_t {
    pub major_opcode: u8,
    pub odd_length: u8,
    pub length: u16,
    pub font: xcb_fontable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_request_t"]
        [::std::mem::size_of::<xcb_query_text_extents_request_t>() - 8usize];
    ["Alignment of xcb_query_text_extents_request_t"]
        [::std::mem::align_of::<xcb_query_text_extents_request_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_text_extents_request_t::odd_length"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, odd_length) - 1usize];
    ["Offset of field: xcb_query_text_extents_request_t::length"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, length) - 2usize];
    ["Offset of field: xcb_query_text_extents_request_t::font"]
        [::std::mem::offset_of!(xcb_query_text_extents_request_t, font) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_text_extents_reply_t {
    pub response_type: u8,
    pub draw_direction: u8,
    pub sequence: u16,
    pub length: u32,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub overall_ascent: i16,
    pub overall_descent: i16,
    pub overall_width: i32,
    pub overall_left: i32,
    pub overall_right: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_text_extents_reply_t"]
        [::std::mem::size_of::<xcb_query_text_extents_reply_t>() - 28usize];
    ["Alignment of xcb_query_text_extents_reply_t"]
        [::std::mem::align_of::<xcb_query_text_extents_reply_t>() - 4usize];
    ["Offset of field: xcb_query_text_extents_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_text_extents_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, draw_direction) - 1usize];
    ["Offset of field: xcb_query_text_extents_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_text_extents_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_text_extents_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, font_ascent) - 8usize];
    ["Offset of field: xcb_query_text_extents_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, font_descent) - 10usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_ascent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_ascent) - 12usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_descent"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_descent) - 14usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_width"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_width) - 16usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_left"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_left) - 20usize];
    ["Offset of field: xcb_query_text_extents_reply_t::overall_right"]
        [::std::mem::offset_of!(xcb_query_text_extents_reply_t, overall_right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_str_t {
    pub name_len: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_str_t"][::std::mem::size_of::<xcb_str_t>() - 1usize];
    ["Alignment of xcb_str_t"][::std::mem::align_of::<xcb_str_t>() - 1usize];
    ["Offset of field: xcb_str_t::name_len"][::std::mem::offset_of!(xcb_str_t, name_len) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_str_iterator_t {
    pub data: *mut xcb_str_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_str_iterator_t"][::std::mem::size_of::<xcb_str_iterator_t>() - 16usize];
    ["Alignment of xcb_str_iterator_t"][::std::mem::align_of::<xcb_str_iterator_t>() - 8usize];
    ["Offset of field: xcb_str_iterator_t::data"]
        [::std::mem::offset_of!(xcb_str_iterator_t, data) - 0usize];
    ["Offset of field: xcb_str_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_str_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_str_iterator_t::index"]
        [::std::mem::offset_of!(xcb_str_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_cookie_t"][::std::mem::size_of::<xcb_list_fonts_cookie_t>() - 4usize];
    ["Alignment of xcb_list_fonts_cookie_t"]
        [::std::mem::align_of::<xcb_list_fonts_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub max_names: u16,
    pub pattern_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_request_t"]
        [::std::mem::size_of::<xcb_list_fonts_request_t>() - 8usize];
    ["Alignment of xcb_list_fonts_request_t"]
        [::std::mem::align_of::<xcb_list_fonts_request_t>() - 2usize];
    ["Offset of field: xcb_list_fonts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_fonts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_request_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, length) - 2usize];
    ["Offset of field: xcb_list_fonts_request_t::max_names"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, max_names) - 4usize];
    ["Offset of field: xcb_list_fonts_request_t::pattern_len"]
        [::std::mem::offset_of!(xcb_list_fonts_request_t, pattern_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub names_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_reply_t"][::std::mem::size_of::<xcb_list_fonts_reply_t>() - 32usize];
    ["Alignment of xcb_list_fonts_reply_t"]
        [::std::mem::align_of::<xcb_list_fonts_reply_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_fonts_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_fonts_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_fonts_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, names_len) - 8usize];
    ["Offset of field: xcb_list_fonts_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_fonts_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_cookie_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_cookie_t>() - 4usize];
    ["Alignment of xcb_list_fonts_with_info_cookie_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub max_names: u16,
    pub pattern_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_request_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_request_t>() - 8usize];
    ["Alignment of xcb_list_fonts_with_info_request_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_request_t>() - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, length) - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::max_names"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, max_names) - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_request_t::pattern_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_request_t, pattern_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_fonts_with_info_reply_t {
    pub response_type: u8,
    pub name_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_bounds: xcb_charinfo_t,
    pub pad0: [u8; 4usize],
    pub max_bounds: xcb_charinfo_t,
    pub pad1: [u8; 4usize],
    pub min_char_or_byte2: u16,
    pub max_char_or_byte2: u16,
    pub default_char: u16,
    pub properties_len: u16,
    pub draw_direction: u8,
    pub min_byte1: u8,
    pub max_byte1: u8,
    pub all_chars_exist: u8,
    pub font_ascent: i16,
    pub font_descent: i16,
    pub replies_hint: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_fonts_with_info_reply_t"]
        [::std::mem::size_of::<xcb_list_fonts_with_info_reply_t>() - 60usize];
    ["Alignment of xcb_list_fonts_with_info_reply_t"]
        [::std::mem::align_of::<xcb_list_fonts_with_info_reply_t>() - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, name_len) - 1usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_bounds"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_bounds) - 8usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, pad0) - 20usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_bounds"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_bounds) - 24usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, pad1) - 36usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_char_or_byte2"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_char_or_byte2) - 40usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_char_or_byte2"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_char_or_byte2) - 42usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::default_char"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, default_char) - 44usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::properties_len"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, properties_len) - 46usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::draw_direction"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, draw_direction) - 48usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::min_byte1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, min_byte1) - 49usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::max_byte1"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, max_byte1) - 50usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::all_chars_exist"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, all_chars_exist) - 51usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::font_ascent"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, font_ascent) - 52usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::font_descent"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, font_descent) - 54usize];
    ["Offset of field: xcb_list_fonts_with_info_reply_t::replies_hint"]
        [::std::mem::offset_of!(xcb_list_fonts_with_info_reply_t, replies_hint) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_font_path_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub font_qty: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_font_path_request_t"]
        [::std::mem::size_of::<xcb_set_font_path_request_t>() - 8usize];
    ["Alignment of xcb_set_font_path_request_t"]
        [::std::mem::align_of::<xcb_set_font_path_request_t>() - 2usize];
    ["Offset of field: xcb_set_font_path_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_font_path_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_font_path_request_t::length"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, length) - 2usize];
    ["Offset of field: xcb_set_font_path_request_t::font_qty"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, font_qty) - 4usize];
    ["Offset of field: xcb_set_font_path_request_t::pad1"]
        [::std::mem::offset_of!(xcb_set_font_path_request_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_cookie_t"]
        [::std::mem::size_of::<xcb_get_font_path_cookie_t>() - 4usize];
    ["Alignment of xcb_get_font_path_cookie_t"]
        [::std::mem::align_of::<xcb_get_font_path_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_font_path_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_font_path_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_request_t"]
        [::std::mem::size_of::<xcb_get_font_path_request_t>() - 4usize];
    ["Alignment of xcb_get_font_path_request_t"]
        [::std::mem::align_of::<xcb_get_font_path_request_t>() - 2usize];
    ["Offset of field: xcb_get_font_path_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_font_path_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_font_path_request_t::length"]
        [::std::mem::offset_of!(xcb_get_font_path_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_font_path_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub path_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_font_path_reply_t"]
        [::std::mem::size_of::<xcb_get_font_path_reply_t>() - 32usize];
    ["Alignment of xcb_get_font_path_reply_t"]
        [::std::mem::align_of::<xcb_get_font_path_reply_t>() - 4usize];
    ["Offset of field: xcb_get_font_path_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_font_path_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_font_path_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_font_path_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_font_path_reply_t::path_len"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, path_len) - 8usize];
    ["Offset of field: xcb_get_font_path_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_font_path_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_pixmap_request_t {
    pub major_opcode: u8,
    pub depth: u8,
    pub length: u16,
    pub pid: xcb_pixmap_t,
    pub drawable: xcb_drawable_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_pixmap_request_t"]
        [::std::mem::size_of::<xcb_create_pixmap_request_t>() - 16usize];
    ["Alignment of xcb_create_pixmap_request_t"]
        [::std::mem::align_of::<xcb_create_pixmap_request_t>() - 4usize];
    ["Offset of field: xcb_create_pixmap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_pixmap_request_t::depth"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, depth) - 1usize];
    ["Offset of field: xcb_create_pixmap_request_t::length"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, length) - 2usize];
    ["Offset of field: xcb_create_pixmap_request_t::pid"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, pid) - 4usize];
    ["Offset of field: xcb_create_pixmap_request_t::drawable"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, drawable) - 8usize];
    ["Offset of field: xcb_create_pixmap_request_t::width"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, width) - 12usize];
    ["Offset of field: xcb_create_pixmap_request_t::height"]
        [::std::mem::offset_of!(xcb_create_pixmap_request_t, height) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_pixmap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub pixmap: xcb_pixmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_pixmap_request_t"]
        [::std::mem::size_of::<xcb_free_pixmap_request_t>() - 8usize];
    ["Alignment of xcb_free_pixmap_request_t"]
        [::std::mem::align_of::<xcb_free_pixmap_request_t>() - 4usize];
    ["Offset of field: xcb_free_pixmap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_pixmap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_pixmap_request_t::length"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, length) - 2usize];
    ["Offset of field: xcb_free_pixmap_request_t::pixmap"]
        [::std::mem::offset_of!(xcb_free_pixmap_request_t, pixmap) - 4usize];
};
pub const xcb_gc_t_XCB_GC_FUNCTION: xcb_gc_t = 1;
pub const xcb_gc_t_XCB_GC_PLANE_MASK: xcb_gc_t = 2;
pub const xcb_gc_t_XCB_GC_FOREGROUND: xcb_gc_t = 4;
pub const xcb_gc_t_XCB_GC_BACKGROUND: xcb_gc_t = 8;
pub const xcb_gc_t_XCB_GC_LINE_WIDTH: xcb_gc_t = 16;
pub const xcb_gc_t_XCB_GC_LINE_STYLE: xcb_gc_t = 32;
pub const xcb_gc_t_XCB_GC_CAP_STYLE: xcb_gc_t = 64;
pub const xcb_gc_t_XCB_GC_JOIN_STYLE: xcb_gc_t = 128;
pub const xcb_gc_t_XCB_GC_FILL_STYLE: xcb_gc_t = 256;
pub const xcb_gc_t_XCB_GC_FILL_RULE: xcb_gc_t = 512;
pub const xcb_gc_t_XCB_GC_TILE: xcb_gc_t = 1024;
pub const xcb_gc_t_XCB_GC_STIPPLE: xcb_gc_t = 2048;
pub const xcb_gc_t_XCB_GC_TILE_STIPPLE_ORIGIN_X: xcb_gc_t = 4096;
pub const xcb_gc_t_XCB_GC_TILE_STIPPLE_ORIGIN_Y: xcb_gc_t = 8192;
pub const xcb_gc_t_XCB_GC_FONT: xcb_gc_t = 16384;
pub const xcb_gc_t_XCB_GC_SUBWINDOW_MODE: xcb_gc_t = 32768;
pub const xcb_gc_t_XCB_GC_GRAPHICS_EXPOSURES: xcb_gc_t = 65536;
pub const xcb_gc_t_XCB_GC_CLIP_ORIGIN_X: xcb_gc_t = 131072;
pub const xcb_gc_t_XCB_GC_CLIP_ORIGIN_Y: xcb_gc_t = 262144;
pub const xcb_gc_t_XCB_GC_CLIP_MASK: xcb_gc_t = 524288;
pub const xcb_gc_t_XCB_GC_DASH_OFFSET: xcb_gc_t = 1048576;
pub const xcb_gc_t_XCB_GC_DASH_LIST: xcb_gc_t = 2097152;
pub const xcb_gc_t_XCB_GC_ARC_MODE: xcb_gc_t = 4194304;
pub type xcb_gc_t = ::std::os::raw::c_uint;
pub const xcb_gx_t_XCB_GX_CLEAR: xcb_gx_t = 0;
pub const xcb_gx_t_XCB_GX_AND: xcb_gx_t = 1;
pub const xcb_gx_t_XCB_GX_AND_REVERSE: xcb_gx_t = 2;
pub const xcb_gx_t_XCB_GX_COPY: xcb_gx_t = 3;
pub const xcb_gx_t_XCB_GX_AND_INVERTED: xcb_gx_t = 4;
pub const xcb_gx_t_XCB_GX_NOOP: xcb_gx_t = 5;
pub const xcb_gx_t_XCB_GX_XOR: xcb_gx_t = 6;
pub const xcb_gx_t_XCB_GX_OR: xcb_gx_t = 7;
pub const xcb_gx_t_XCB_GX_NOR: xcb_gx_t = 8;
pub const xcb_gx_t_XCB_GX_EQUIV: xcb_gx_t = 9;
pub const xcb_gx_t_XCB_GX_INVERT: xcb_gx_t = 10;
pub const xcb_gx_t_XCB_GX_OR_REVERSE: xcb_gx_t = 11;
pub const xcb_gx_t_XCB_GX_COPY_INVERTED: xcb_gx_t = 12;
pub const xcb_gx_t_XCB_GX_OR_INVERTED: xcb_gx_t = 13;
pub const xcb_gx_t_XCB_GX_NAND: xcb_gx_t = 14;
pub const xcb_gx_t_XCB_GX_SET: xcb_gx_t = 15;
pub type xcb_gx_t = ::std::os::raw::c_uint;
pub const xcb_line_style_t_XCB_LINE_STYLE_SOLID: xcb_line_style_t = 0;
pub const xcb_line_style_t_XCB_LINE_STYLE_ON_OFF_DASH: xcb_line_style_t = 1;
pub const xcb_line_style_t_XCB_LINE_STYLE_DOUBLE_DASH: xcb_line_style_t = 2;
pub type xcb_line_style_t = ::std::os::raw::c_uint;
pub const xcb_cap_style_t_XCB_CAP_STYLE_NOT_LAST: xcb_cap_style_t = 0;
pub const xcb_cap_style_t_XCB_CAP_STYLE_BUTT: xcb_cap_style_t = 1;
pub const xcb_cap_style_t_XCB_CAP_STYLE_ROUND: xcb_cap_style_t = 2;
pub const xcb_cap_style_t_XCB_CAP_STYLE_PROJECTING: xcb_cap_style_t = 3;
pub type xcb_cap_style_t = ::std::os::raw::c_uint;
pub const xcb_join_style_t_XCB_JOIN_STYLE_MITER: xcb_join_style_t = 0;
pub const xcb_join_style_t_XCB_JOIN_STYLE_ROUND: xcb_join_style_t = 1;
pub const xcb_join_style_t_XCB_JOIN_STYLE_BEVEL: xcb_join_style_t = 2;
pub type xcb_join_style_t = ::std::os::raw::c_uint;
pub const xcb_fill_style_t_XCB_FILL_STYLE_SOLID: xcb_fill_style_t = 0;
pub const xcb_fill_style_t_XCB_FILL_STYLE_TILED: xcb_fill_style_t = 1;
pub const xcb_fill_style_t_XCB_FILL_STYLE_STIPPLED: xcb_fill_style_t = 2;
pub const xcb_fill_style_t_XCB_FILL_STYLE_OPAQUE_STIPPLED: xcb_fill_style_t = 3;
pub type xcb_fill_style_t = ::std::os::raw::c_uint;
pub const xcb_fill_rule_t_XCB_FILL_RULE_EVEN_ODD: xcb_fill_rule_t = 0;
pub const xcb_fill_rule_t_XCB_FILL_RULE_WINDING: xcb_fill_rule_t = 1;
pub type xcb_fill_rule_t = ::std::os::raw::c_uint;
pub const xcb_subwindow_mode_t_XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN: xcb_subwindow_mode_t = 0;
pub const xcb_subwindow_mode_t_XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS: xcb_subwindow_mode_t = 1;
pub type xcb_subwindow_mode_t = ::std::os::raw::c_uint;
pub const xcb_arc_mode_t_XCB_ARC_MODE_CHORD: xcb_arc_mode_t = 0;
pub const xcb_arc_mode_t_XCB_ARC_MODE_PIE_SLICE: xcb_arc_mode_t = 1;
pub type xcb_arc_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_gc_value_list_t {
    pub function: u32,
    pub plane_mask: u32,
    pub foreground: u32,
    pub background: u32,
    pub line_width: u32,
    pub line_style: u32,
    pub cap_style: u32,
    pub join_style: u32,
    pub fill_style: u32,
    pub fill_rule: u32,
    pub tile: xcb_pixmap_t,
    pub stipple: xcb_pixmap_t,
    pub tile_stipple_x_origin: i32,
    pub tile_stipple_y_origin: i32,
    pub font: xcb_font_t,
    pub subwindow_mode: u32,
    pub graphics_exposures: xcb_bool32_t,
    pub clip_x_origin: i32,
    pub clip_y_origin: i32,
    pub clip_mask: xcb_pixmap_t,
    pub dash_offset: u32,
    pub dashes: u32,
    pub arc_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_gc_value_list_t"]
        [::std::mem::size_of::<xcb_create_gc_value_list_t>() - 92usize];
    ["Alignment of xcb_create_gc_value_list_t"]
        [::std::mem::align_of::<xcb_create_gc_value_list_t>() - 4usize];
    ["Offset of field: xcb_create_gc_value_list_t::function"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, function) - 0usize];
    ["Offset of field: xcb_create_gc_value_list_t::plane_mask"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, plane_mask) - 4usize];
    ["Offset of field: xcb_create_gc_value_list_t::foreground"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, foreground) - 8usize];
    ["Offset of field: xcb_create_gc_value_list_t::background"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, background) - 12usize];
    ["Offset of field: xcb_create_gc_value_list_t::line_width"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, line_width) - 16usize];
    ["Offset of field: xcb_create_gc_value_list_t::line_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, line_style) - 20usize];
    ["Offset of field: xcb_create_gc_value_list_t::cap_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, cap_style) - 24usize];
    ["Offset of field: xcb_create_gc_value_list_t::join_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, join_style) - 28usize];
    ["Offset of field: xcb_create_gc_value_list_t::fill_style"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, fill_style) - 32usize];
    ["Offset of field: xcb_create_gc_value_list_t::fill_rule"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, fill_rule) - 36usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile) - 40usize];
    ["Offset of field: xcb_create_gc_value_list_t::stipple"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, stipple) - 44usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile_stipple_x_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile_stipple_x_origin) - 48usize];
    ["Offset of field: xcb_create_gc_value_list_t::tile_stipple_y_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, tile_stipple_y_origin) - 52usize];
    ["Offset of field: xcb_create_gc_value_list_t::font"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, font) - 56usize];
    ["Offset of field: xcb_create_gc_value_list_t::subwindow_mode"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, subwindow_mode) - 60usize];
    ["Offset of field: xcb_create_gc_value_list_t::graphics_exposures"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, graphics_exposures) - 64usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_x_origin) - 68usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_y_origin) - 72usize];
    ["Offset of field: xcb_create_gc_value_list_t::clip_mask"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, clip_mask) - 76usize];
    ["Offset of field: xcb_create_gc_value_list_t::dash_offset"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, dash_offset) - 80usize];
    ["Offset of field: xcb_create_gc_value_list_t::dashes"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, dashes) - 84usize];
    ["Offset of field: xcb_create_gc_value_list_t::arc_mode"]
        [::std::mem::offset_of!(xcb_create_gc_value_list_t, arc_mode) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_gcontext_t,
    pub drawable: xcb_drawable_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_gc_request_t"][::std::mem::size_of::<xcb_create_gc_request_t>() - 16usize];
    ["Alignment of xcb_create_gc_request_t"]
        [::std::mem::align_of::<xcb_create_gc_request_t>() - 4usize];
    ["Offset of field: xcb_create_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_create_gc_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_gc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, drawable) - 8usize];
    ["Offset of field: xcb_create_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_create_gc_request_t, value_mask) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_gc_value_list_t {
    pub function: u32,
    pub plane_mask: u32,
    pub foreground: u32,
    pub background: u32,
    pub line_width: u32,
    pub line_style: u32,
    pub cap_style: u32,
    pub join_style: u32,
    pub fill_style: u32,
    pub fill_rule: u32,
    pub tile: xcb_pixmap_t,
    pub stipple: xcb_pixmap_t,
    pub tile_stipple_x_origin: i32,
    pub tile_stipple_y_origin: i32,
    pub font: xcb_font_t,
    pub subwindow_mode: u32,
    pub graphics_exposures: xcb_bool32_t,
    pub clip_x_origin: i32,
    pub clip_y_origin: i32,
    pub clip_mask: xcb_pixmap_t,
    pub dash_offset: u32,
    pub dashes: u32,
    pub arc_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_gc_value_list_t"]
        [::std::mem::size_of::<xcb_change_gc_value_list_t>() - 92usize];
    ["Alignment of xcb_change_gc_value_list_t"]
        [::std::mem::align_of::<xcb_change_gc_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_gc_value_list_t::function"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, function) - 0usize];
    ["Offset of field: xcb_change_gc_value_list_t::plane_mask"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, plane_mask) - 4usize];
    ["Offset of field: xcb_change_gc_value_list_t::foreground"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, foreground) - 8usize];
    ["Offset of field: xcb_change_gc_value_list_t::background"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, background) - 12usize];
    ["Offset of field: xcb_change_gc_value_list_t::line_width"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, line_width) - 16usize];
    ["Offset of field: xcb_change_gc_value_list_t::line_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, line_style) - 20usize];
    ["Offset of field: xcb_change_gc_value_list_t::cap_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, cap_style) - 24usize];
    ["Offset of field: xcb_change_gc_value_list_t::join_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, join_style) - 28usize];
    ["Offset of field: xcb_change_gc_value_list_t::fill_style"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, fill_style) - 32usize];
    ["Offset of field: xcb_change_gc_value_list_t::fill_rule"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, fill_rule) - 36usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile) - 40usize];
    ["Offset of field: xcb_change_gc_value_list_t::stipple"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, stipple) - 44usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile_stipple_x_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile_stipple_x_origin) - 48usize];
    ["Offset of field: xcb_change_gc_value_list_t::tile_stipple_y_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, tile_stipple_y_origin) - 52usize];
    ["Offset of field: xcb_change_gc_value_list_t::font"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, font) - 56usize];
    ["Offset of field: xcb_change_gc_value_list_t::subwindow_mode"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, subwindow_mode) - 60usize];
    ["Offset of field: xcb_change_gc_value_list_t::graphics_exposures"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, graphics_exposures) - 64usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_x_origin) - 68usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_y_origin) - 72usize];
    ["Offset of field: xcb_change_gc_value_list_t::clip_mask"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, clip_mask) - 76usize];
    ["Offset of field: xcb_change_gc_value_list_t::dash_offset"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, dash_offset) - 80usize];
    ["Offset of field: xcb_change_gc_value_list_t::dashes"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, dashes) - 84usize];
    ["Offset of field: xcb_change_gc_value_list_t::arc_mode"]
        [::std::mem::offset_of!(xcb_change_gc_value_list_t, arc_mode) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_gc_request_t"][::std::mem::size_of::<xcb_change_gc_request_t>() - 12usize];
    ["Alignment of xcb_change_gc_request_t"]
        [::std::mem::align_of::<xcb_change_gc_request_t>() - 4usize];
    ["Offset of field: xcb_change_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_change_gc_request_t::gc"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, gc) - 4usize];
    ["Offset of field: xcb_change_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_gc_request_t, value_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_gc: xcb_gcontext_t,
    pub dst_gc: xcb_gcontext_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_gc_request_t"][::std::mem::size_of::<xcb_copy_gc_request_t>() - 16usize];
    ["Alignment of xcb_copy_gc_request_t"]
        [::std::mem::align_of::<xcb_copy_gc_request_t>() - 4usize];
    ["Offset of field: xcb_copy_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_gc_request_t::src_gc"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, src_gc) - 4usize];
    ["Offset of field: xcb_copy_gc_request_t::dst_gc"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, dst_gc) - 8usize];
    ["Offset of field: xcb_copy_gc_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_copy_gc_request_t, value_mask) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_dashes_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub dash_offset: u16,
    pub dashes_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_dashes_request_t"]
        [::std::mem::size_of::<xcb_set_dashes_request_t>() - 12usize];
    ["Alignment of xcb_set_dashes_request_t"]
        [::std::mem::align_of::<xcb_set_dashes_request_t>() - 4usize];
    ["Offset of field: xcb_set_dashes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_dashes_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_dashes_request_t::length"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, length) - 2usize];
    ["Offset of field: xcb_set_dashes_request_t::gc"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, gc) - 4usize];
    ["Offset of field: xcb_set_dashes_request_t::dash_offset"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, dash_offset) - 8usize];
    ["Offset of field: xcb_set_dashes_request_t::dashes_len"]
        [::std::mem::offset_of!(xcb_set_dashes_request_t, dashes_len) - 10usize];
};
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_UNSORTED: xcb_clip_ordering_t = 0;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_Y_SORTED: xcb_clip_ordering_t = 1;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_YX_SORTED: xcb_clip_ordering_t = 2;
pub const xcb_clip_ordering_t_XCB_CLIP_ORDERING_YX_BANDED: xcb_clip_ordering_t = 3;
pub type xcb_clip_ordering_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_clip_rectangles_request_t {
    pub major_opcode: u8,
    pub ordering: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
    pub clip_x_origin: i16,
    pub clip_y_origin: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_clip_rectangles_request_t"]
        [::std::mem::size_of::<xcb_set_clip_rectangles_request_t>() - 12usize];
    ["Alignment of xcb_set_clip_rectangles_request_t"]
        [::std::mem::align_of::<xcb_set_clip_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::ordering"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, ordering) - 1usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::gc"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, gc) - 4usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::clip_x_origin"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, clip_x_origin) - 8usize];
    ["Offset of field: xcb_set_clip_rectangles_request_t::clip_y_origin"]
        [::std::mem::offset_of!(xcb_set_clip_rectangles_request_t, clip_y_origin) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_gc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_gc_request_t"][::std::mem::size_of::<xcb_free_gc_request_t>() - 8usize];
    ["Alignment of xcb_free_gc_request_t"]
        [::std::mem::align_of::<xcb_free_gc_request_t>() - 4usize];
    ["Offset of field: xcb_free_gc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_gc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_gc_request_t::length"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, length) - 2usize];
    ["Offset of field: xcb_free_gc_request_t::gc"]
        [::std::mem::offset_of!(xcb_free_gc_request_t, gc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_clear_area_request_t {
    pub major_opcode: u8,
    pub exposures: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_clear_area_request_t"]
        [::std::mem::size_of::<xcb_clear_area_request_t>() - 16usize];
    ["Alignment of xcb_clear_area_request_t"]
        [::std::mem::align_of::<xcb_clear_area_request_t>() - 4usize];
    ["Offset of field: xcb_clear_area_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_clear_area_request_t::exposures"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, exposures) - 1usize];
    ["Offset of field: xcb_clear_area_request_t::length"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, length) - 2usize];
    ["Offset of field: xcb_clear_area_request_t::window"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, window) - 4usize];
    ["Offset of field: xcb_clear_area_request_t::x"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, x) - 8usize];
    ["Offset of field: xcb_clear_area_request_t::y"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, y) - 10usize];
    ["Offset of field: xcb_clear_area_request_t::width"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, width) - 12usize];
    ["Offset of field: xcb_clear_area_request_t::height"]
        [::std::mem::offset_of!(xcb_clear_area_request_t, height) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_area_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: i16,
    pub src_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_area_request_t"][::std::mem::size_of::<xcb_copy_area_request_t>() - 28usize];
    ["Alignment of xcb_copy_area_request_t"]
        [::std::mem::align_of::<xcb_copy_area_request_t>() - 4usize];
    ["Offset of field: xcb_copy_area_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_area_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_area_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_area_request_t::src_drawable"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_drawable) - 4usize];
    ["Offset of field: xcb_copy_area_request_t::dst_drawable"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_drawable) - 8usize];
    ["Offset of field: xcb_copy_area_request_t::gc"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, gc) - 12usize];
    ["Offset of field: xcb_copy_area_request_t::src_x"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_x) - 16usize];
    ["Offset of field: xcb_copy_area_request_t::src_y"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, src_y) - 18usize];
    ["Offset of field: xcb_copy_area_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_copy_area_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, dst_y) - 22usize];
    ["Offset of field: xcb_copy_area_request_t::width"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, width) - 24usize];
    ["Offset of field: xcb_copy_area_request_t::height"]
        [::std::mem::offset_of!(xcb_copy_area_request_t, height) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_plane_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub src_drawable: xcb_drawable_t,
    pub dst_drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub src_x: i16,
    pub src_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
    pub bit_plane: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_plane_request_t"]
        [::std::mem::size_of::<xcb_copy_plane_request_t>() - 32usize];
    ["Alignment of xcb_copy_plane_request_t"]
        [::std::mem::align_of::<xcb_copy_plane_request_t>() - 4usize];
    ["Offset of field: xcb_copy_plane_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_plane_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_plane_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_plane_request_t::src_drawable"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_drawable) - 4usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_drawable"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_drawable) - 8usize];
    ["Offset of field: xcb_copy_plane_request_t::gc"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, gc) - 12usize];
    ["Offset of field: xcb_copy_plane_request_t::src_x"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_x) - 16usize];
    ["Offset of field: xcb_copy_plane_request_t::src_y"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, src_y) - 18usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_x) - 20usize];
    ["Offset of field: xcb_copy_plane_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, dst_y) - 22usize];
    ["Offset of field: xcb_copy_plane_request_t::width"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, width) - 24usize];
    ["Offset of field: xcb_copy_plane_request_t::height"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, height) - 26usize];
    ["Offset of field: xcb_copy_plane_request_t::bit_plane"]
        [::std::mem::offset_of!(xcb_copy_plane_request_t, bit_plane) - 28usize];
};
pub const xcb_coord_mode_t_XCB_COORD_MODE_ORIGIN: xcb_coord_mode_t = 0;
pub const xcb_coord_mode_t_XCB_COORD_MODE_PREVIOUS: xcb_coord_mode_t = 1;
pub type xcb_coord_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_point_request_t {
    pub major_opcode: u8,
    pub coordinate_mode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_point_request_t"]
        [::std::mem::size_of::<xcb_poly_point_request_t>() - 12usize];
    ["Alignment of xcb_poly_point_request_t"]
        [::std::mem::align_of::<xcb_poly_point_request_t>() - 4usize];
    ["Offset of field: xcb_poly_point_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_point_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, coordinate_mode) - 1usize];
    ["Offset of field: xcb_poly_point_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_point_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_point_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_point_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_line_request_t {
    pub major_opcode: u8,
    pub coordinate_mode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_line_request_t"][::std::mem::size_of::<xcb_poly_line_request_t>() - 12usize];
    ["Alignment of xcb_poly_line_request_t"]
        [::std::mem::align_of::<xcb_poly_line_request_t>() - 4usize];
    ["Offset of field: xcb_poly_line_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_line_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, coordinate_mode) - 1usize];
    ["Offset of field: xcb_poly_line_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_line_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_line_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_line_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_segment_t {
    pub x1: i16,
    pub y1: i16,
    pub x2: i16,
    pub y2: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_segment_t"][::std::mem::size_of::<xcb_segment_t>() - 8usize];
    ["Alignment of xcb_segment_t"][::std::mem::align_of::<xcb_segment_t>() - 2usize];
    ["Offset of field: xcb_segment_t::x1"][::std::mem::offset_of!(xcb_segment_t, x1) - 0usize];
    ["Offset of field: xcb_segment_t::y1"][::std::mem::offset_of!(xcb_segment_t, y1) - 2usize];
    ["Offset of field: xcb_segment_t::x2"][::std::mem::offset_of!(xcb_segment_t, x2) - 4usize];
    ["Offset of field: xcb_segment_t::y2"][::std::mem::offset_of!(xcb_segment_t, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_segment_iterator_t {
    pub data: *mut xcb_segment_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_segment_iterator_t"][::std::mem::size_of::<xcb_segment_iterator_t>() - 16usize];
    ["Alignment of xcb_segment_iterator_t"]
        [::std::mem::align_of::<xcb_segment_iterator_t>() - 8usize];
    ["Offset of field: xcb_segment_iterator_t::data"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, data) - 0usize];
    ["Offset of field: xcb_segment_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_segment_iterator_t::index"]
        [::std::mem::offset_of!(xcb_segment_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_segment_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_segment_request_t"]
        [::std::mem::size_of::<xcb_poly_segment_request_t>() - 12usize];
    ["Alignment of xcb_poly_segment_request_t"]
        [::std::mem::align_of::<xcb_poly_segment_request_t>() - 4usize];
    ["Offset of field: xcb_poly_segment_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_segment_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_segment_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_segment_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_segment_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_segment_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_rectangle_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_rectangle_request_t"]
        [::std::mem::size_of::<xcb_poly_rectangle_request_t>() - 12usize];
    ["Alignment of xcb_poly_rectangle_request_t"]
        [::std::mem::align_of::<xcb_poly_rectangle_request_t>() - 4usize];
    ["Offset of field: xcb_poly_rectangle_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_rectangle_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_rectangle_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_rectangle_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_rectangle_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_rectangle_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_arc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_arc_request_t"][::std::mem::size_of::<xcb_poly_arc_request_t>() - 12usize];
    ["Alignment of xcb_poly_arc_request_t"]
        [::std::mem::align_of::<xcb_poly_arc_request_t>() - 4usize];
    ["Offset of field: xcb_poly_arc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_arc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_arc_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_arc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_arc_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_arc_request_t, gc) - 8usize];
};
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_COMPLEX: xcb_poly_shape_t = 0;
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_NONCONVEX: xcb_poly_shape_t = 1;
pub const xcb_poly_shape_t_XCB_POLY_SHAPE_CONVEX: xcb_poly_shape_t = 2;
pub type xcb_poly_shape_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_fill_poly_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub shape: u8,
    pub coordinate_mode: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_fill_poly_request_t"][::std::mem::size_of::<xcb_fill_poly_request_t>() - 16usize];
    ["Alignment of xcb_fill_poly_request_t"]
        [::std::mem::align_of::<xcb_fill_poly_request_t>() - 4usize];
    ["Offset of field: xcb_fill_poly_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_fill_poly_request_t::pad0"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, pad0) - 1usize];
    ["Offset of field: xcb_fill_poly_request_t::length"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, length) - 2usize];
    ["Offset of field: xcb_fill_poly_request_t::drawable"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, drawable) - 4usize];
    ["Offset of field: xcb_fill_poly_request_t::gc"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, gc) - 8usize];
    ["Offset of field: xcb_fill_poly_request_t::shape"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, shape) - 12usize];
    ["Offset of field: xcb_fill_poly_request_t::coordinate_mode"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, coordinate_mode) - 13usize];
    ["Offset of field: xcb_fill_poly_request_t::pad1"]
        [::std::mem::offset_of!(xcb_fill_poly_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_fill_rectangle_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_fill_rectangle_request_t"]
        [::std::mem::size_of::<xcb_poly_fill_rectangle_request_t>() - 12usize];
    ["Alignment of xcb_poly_fill_rectangle_request_t"]
        [::std::mem::align_of::<xcb_poly_fill_rectangle_request_t>() - 4usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_fill_rectangle_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_fill_rectangle_request_t, gc) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_fill_arc_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_fill_arc_request_t"]
        [::std::mem::size_of::<xcb_poly_fill_arc_request_t>() - 12usize];
    ["Alignment of xcb_poly_fill_arc_request_t"]
        [::std::mem::align_of::<xcb_poly_fill_arc_request_t>() - 4usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_fill_arc_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_fill_arc_request_t, gc) - 8usize];
};
pub const xcb_image_format_t_XCB_IMAGE_FORMAT_XY_BITMAP: xcb_image_format_t = 0;
pub const xcb_image_format_t_XCB_IMAGE_FORMAT_XY_PIXMAP: xcb_image_format_t = 1;
pub const xcb_image_format_t_XCB_IMAGE_FORMAT_Z_PIXMAP: xcb_image_format_t = 2;
pub type xcb_image_format_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_put_image_request_t {
    pub major_opcode: u8,
    pub format: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub width: u16,
    pub height: u16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub left_pad: u8,
    pub depth: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_put_image_request_t"][::std::mem::size_of::<xcb_put_image_request_t>() - 24usize];
    ["Alignment of xcb_put_image_request_t"]
        [::std::mem::align_of::<xcb_put_image_request_t>() - 4usize];
    ["Offset of field: xcb_put_image_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_put_image_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_put_image_request_t::format"]
        [::std::mem::offset_of!(xcb_put_image_request_t, format) - 1usize];
    ["Offset of field: xcb_put_image_request_t::length"]
        [::std::mem::offset_of!(xcb_put_image_request_t, length) - 2usize];
    ["Offset of field: xcb_put_image_request_t::drawable"]
        [::std::mem::offset_of!(xcb_put_image_request_t, drawable) - 4usize];
    ["Offset of field: xcb_put_image_request_t::gc"]
        [::std::mem::offset_of!(xcb_put_image_request_t, gc) - 8usize];
    ["Offset of field: xcb_put_image_request_t::width"]
        [::std::mem::offset_of!(xcb_put_image_request_t, width) - 12usize];
    ["Offset of field: xcb_put_image_request_t::height"]
        [::std::mem::offset_of!(xcb_put_image_request_t, height) - 14usize];
    ["Offset of field: xcb_put_image_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_put_image_request_t, dst_x) - 16usize];
    ["Offset of field: xcb_put_image_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_put_image_request_t, dst_y) - 18usize];
    ["Offset of field: xcb_put_image_request_t::left_pad"]
        [::std::mem::offset_of!(xcb_put_image_request_t, left_pad) - 20usize];
    ["Offset of field: xcb_put_image_request_t::depth"]
        [::std::mem::offset_of!(xcb_put_image_request_t, depth) - 21usize];
    ["Offset of field: xcb_put_image_request_t::pad0"]
        [::std::mem::offset_of!(xcb_put_image_request_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_cookie_t"][::std::mem::size_of::<xcb_get_image_cookie_t>() - 4usize];
    ["Alignment of xcb_get_image_cookie_t"]
        [::std::mem::align_of::<xcb_get_image_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_image_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_image_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_request_t {
    pub major_opcode: u8,
    pub format: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub plane_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_request_t"][::std::mem::size_of::<xcb_get_image_request_t>() - 20usize];
    ["Alignment of xcb_get_image_request_t"]
        [::std::mem::align_of::<xcb_get_image_request_t>() - 4usize];
    ["Offset of field: xcb_get_image_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_image_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_image_request_t::format"]
        [::std::mem::offset_of!(xcb_get_image_request_t, format) - 1usize];
    ["Offset of field: xcb_get_image_request_t::length"]
        [::std::mem::offset_of!(xcb_get_image_request_t, length) - 2usize];
    ["Offset of field: xcb_get_image_request_t::drawable"]
        [::std::mem::offset_of!(xcb_get_image_request_t, drawable) - 4usize];
    ["Offset of field: xcb_get_image_request_t::x"]
        [::std::mem::offset_of!(xcb_get_image_request_t, x) - 8usize];
    ["Offset of field: xcb_get_image_request_t::y"]
        [::std::mem::offset_of!(xcb_get_image_request_t, y) - 10usize];
    ["Offset of field: xcb_get_image_request_t::width"]
        [::std::mem::offset_of!(xcb_get_image_request_t, width) - 12usize];
    ["Offset of field: xcb_get_image_request_t::height"]
        [::std::mem::offset_of!(xcb_get_image_request_t, height) - 14usize];
    ["Offset of field: xcb_get_image_request_t::plane_mask"]
        [::std::mem::offset_of!(xcb_get_image_request_t, plane_mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_image_reply_t {
    pub response_type: u8,
    pub depth: u8,
    pub sequence: u16,
    pub length: u32,
    pub visual: xcb_visualid_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_image_reply_t"][::std::mem::size_of::<xcb_get_image_reply_t>() - 32usize];
    ["Alignment of xcb_get_image_reply_t"]
        [::std::mem::align_of::<xcb_get_image_reply_t>() - 4usize];
    ["Offset of field: xcb_get_image_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_image_reply_t::depth"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, depth) - 1usize];
    ["Offset of field: xcb_get_image_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_image_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_image_reply_t::visual"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, visual) - 8usize];
    ["Offset of field: xcb_get_image_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_image_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_text_8_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_text_8_request_t"]
        [::std::mem::size_of::<xcb_poly_text_8_request_t>() - 16usize];
    ["Alignment of xcb_poly_text_8_request_t"]
        [::std::mem::align_of::<xcb_poly_text_8_request_t>() - 4usize];
    ["Offset of field: xcb_poly_text_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_text_8_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_text_8_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_text_8_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_text_8_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, gc) - 8usize];
    ["Offset of field: xcb_poly_text_8_request_t::x"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, x) - 12usize];
    ["Offset of field: xcb_poly_text_8_request_t::y"]
        [::std::mem::offset_of!(xcb_poly_text_8_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_poly_text_16_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_poly_text_16_request_t"]
        [::std::mem::size_of::<xcb_poly_text_16_request_t>() - 16usize];
    ["Alignment of xcb_poly_text_16_request_t"]
        [::std::mem::align_of::<xcb_poly_text_16_request_t>() - 4usize];
    ["Offset of field: xcb_poly_text_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_poly_text_16_request_t::pad0"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, pad0) - 1usize];
    ["Offset of field: xcb_poly_text_16_request_t::length"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, length) - 2usize];
    ["Offset of field: xcb_poly_text_16_request_t::drawable"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, drawable) - 4usize];
    ["Offset of field: xcb_poly_text_16_request_t::gc"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, gc) - 8usize];
    ["Offset of field: xcb_poly_text_16_request_t::x"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, x) - 12usize];
    ["Offset of field: xcb_poly_text_16_request_t::y"]
        [::std::mem::offset_of!(xcb_poly_text_16_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_image_text_8_request_t {
    pub major_opcode: u8,
    pub string_len: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_image_text_8_request_t"]
        [::std::mem::size_of::<xcb_image_text_8_request_t>() - 16usize];
    ["Alignment of xcb_image_text_8_request_t"]
        [::std::mem::align_of::<xcb_image_text_8_request_t>() - 4usize];
    ["Offset of field: xcb_image_text_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_image_text_8_request_t::string_len"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, string_len) - 1usize];
    ["Offset of field: xcb_image_text_8_request_t::length"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, length) - 2usize];
    ["Offset of field: xcb_image_text_8_request_t::drawable"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, drawable) - 4usize];
    ["Offset of field: xcb_image_text_8_request_t::gc"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, gc) - 8usize];
    ["Offset of field: xcb_image_text_8_request_t::x"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, x) - 12usize];
    ["Offset of field: xcb_image_text_8_request_t::y"]
        [::std::mem::offset_of!(xcb_image_text_8_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_image_text_16_request_t {
    pub major_opcode: u8,
    pub string_len: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub gc: xcb_gcontext_t,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_image_text_16_request_t"]
        [::std::mem::size_of::<xcb_image_text_16_request_t>() - 16usize];
    ["Alignment of xcb_image_text_16_request_t"]
        [::std::mem::align_of::<xcb_image_text_16_request_t>() - 4usize];
    ["Offset of field: xcb_image_text_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_image_text_16_request_t::string_len"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, string_len) - 1usize];
    ["Offset of field: xcb_image_text_16_request_t::length"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, length) - 2usize];
    ["Offset of field: xcb_image_text_16_request_t::drawable"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, drawable) - 4usize];
    ["Offset of field: xcb_image_text_16_request_t::gc"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, gc) - 8usize];
    ["Offset of field: xcb_image_text_16_request_t::x"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, x) - 12usize];
    ["Offset of field: xcb_image_text_16_request_t::y"]
        [::std::mem::offset_of!(xcb_image_text_16_request_t, y) - 14usize];
};
pub const xcb_colormap_alloc_t_XCB_COLORMAP_ALLOC_NONE: xcb_colormap_alloc_t = 0;
pub const xcb_colormap_alloc_t_XCB_COLORMAP_ALLOC_ALL: xcb_colormap_alloc_t = 1;
pub type xcb_colormap_alloc_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_colormap_request_t {
    pub major_opcode: u8,
    pub alloc: u8,
    pub length: u16,
    pub mid: xcb_colormap_t,
    pub window: xcb_window_t,
    pub visual: xcb_visualid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_colormap_request_t"]
        [::std::mem::size_of::<xcb_create_colormap_request_t>() - 16usize];
    ["Alignment of xcb_create_colormap_request_t"]
        [::std::mem::align_of::<xcb_create_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_create_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_colormap_request_t::alloc"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, alloc) - 1usize];
    ["Offset of field: xcb_create_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_create_colormap_request_t::mid"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, mid) - 4usize];
    ["Offset of field: xcb_create_colormap_request_t::window"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, window) - 8usize];
    ["Offset of field: xcb_create_colormap_request_t::visual"]
        [::std::mem::offset_of!(xcb_create_colormap_request_t, visual) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_colormap_request_t"]
        [::std::mem::size_of::<xcb_free_colormap_request_t>() - 8usize];
    ["Alignment of xcb_free_colormap_request_t"]
        [::std::mem::align_of::<xcb_free_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_free_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_free_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_free_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_copy_colormap_and_free_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub mid: xcb_colormap_t,
    pub src_cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_copy_colormap_and_free_request_t"]
        [::std::mem::size_of::<xcb_copy_colormap_and_free_request_t>() - 12usize];
    ["Alignment of xcb_copy_colormap_and_free_request_t"]
        [::std::mem::align_of::<xcb_copy_colormap_and_free_request_t>() - 4usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::pad0"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, pad0) - 1usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::length"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, length) - 2usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::mid"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, mid) - 4usize];
    ["Offset of field: xcb_copy_colormap_and_free_request_t::src_cmap"]
        [::std::mem::offset_of!(xcb_copy_colormap_and_free_request_t, src_cmap) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_install_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_install_colormap_request_t"]
        [::std::mem::size_of::<xcb_install_colormap_request_t>() - 8usize];
    ["Alignment of xcb_install_colormap_request_t"]
        [::std::mem::align_of::<xcb_install_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_install_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_install_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_install_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_install_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_install_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_uninstall_colormap_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_uninstall_colormap_request_t"]
        [::std::mem::size_of::<xcb_uninstall_colormap_request_t>() - 8usize];
    ["Alignment of xcb_uninstall_colormap_request_t"]
        [::std::mem::align_of::<xcb_uninstall_colormap_request_t>() - 4usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::pad0"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, pad0) - 1usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::length"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, length) - 2usize];
    ["Offset of field: xcb_uninstall_colormap_request_t::cmap"]
        [::std::mem::offset_of!(xcb_uninstall_colormap_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_cookie_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_cookie_t>() - 4usize];
    ["Alignment of xcb_list_installed_colormaps_cookie_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_request_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_request_t>() - 8usize];
    ["Alignment of xcb_list_installed_colormaps_request_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_request_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::length"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, length) - 2usize];
    ["Offset of field: xcb_list_installed_colormaps_request_t::window"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_installed_colormaps_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub cmaps_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_installed_colormaps_reply_t"]
        [::std::mem::size_of::<xcb_list_installed_colormaps_reply_t>() - 32usize];
    ["Alignment of xcb_list_installed_colormaps_reply_t"]
        [::std::mem::align_of::<xcb_list_installed_colormaps_reply_t>() - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::cmaps_len"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, cmaps_len) - 8usize];
    ["Offset of field: xcb_list_installed_colormaps_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_list_installed_colormaps_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_request_t>() - 16usize];
    ["Alignment of xcb_alloc_color_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_request_t::red"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, red) - 8usize];
    ["Offset of field: xcb_alloc_color_request_t::green"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, green) - 10usize];
    ["Offset of field: xcb_alloc_color_request_t::blue"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, blue) - 12usize];
    ["Offset of field: xcb_alloc_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_request_t, pad1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad1: [u8; 2usize],
    pub pixel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_reply_t"][::std::mem::size_of::<xcb_alloc_color_reply_t>() - 20usize];
    ["Alignment of xcb_alloc_color_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_reply_t::red"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, red) - 8usize];
    ["Offset of field: xcb_alloc_color_reply_t::green"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, green) - 10usize];
    ["Offset of field: xcb_alloc_color_reply_t::blue"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, blue) - 12usize];
    ["Offset of field: xcb_alloc_color_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pad1) - 14usize];
    ["Offset of field: xcb_alloc_color_reply_t::pixel"]
        [::std::mem::offset_of!(xcb_alloc_color_reply_t, pixel) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_named_color_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_named_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_request_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_request_t>() - 12usize];
    ["Alignment of xcb_alloc_named_color_request_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_named_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_named_color_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_named_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_named_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, name_len) - 8usize];
    ["Offset of field: xcb_alloc_named_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_named_color_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_named_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixel: u32,
    pub exact_red: u16,
    pub exact_green: u16,
    pub exact_blue: u16,
    pub visual_red: u16,
    pub visual_green: u16,
    pub visual_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_named_color_reply_t"]
        [::std::mem::size_of::<xcb_alloc_named_color_reply_t>() - 24usize];
    ["Alignment of xcb_alloc_named_color_reply_t"]
        [::std::mem::align_of::<xcb_alloc_named_color_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::pixel"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, pixel) - 8usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_red"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_red) - 12usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_green"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_green) - 14usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::exact_blue"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, exact_blue) - 16usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_red"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_red) - 18usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_green"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_green) - 20usize];
    ["Offset of field: xcb_alloc_named_color_reply_t::visual_blue"]
        [::std::mem::offset_of!(xcb_alloc_named_color_reply_t, visual_blue) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_cells_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_request_t {
    pub major_opcode: u8,
    pub contiguous: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub colors: u16,
    pub planes: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_request_t>() - 12usize];
    ["Alignment of xcb_alloc_color_cells_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::contiguous"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, contiguous) - 1usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::colors"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, colors) - 8usize];
    ["Offset of field: xcb_alloc_color_cells_request_t::planes"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_request_t, planes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_cells_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixels_len: u16,
    pub masks_len: u16,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_cells_reply_t"]
        [::std::mem::size_of::<xcb_alloc_color_cells_reply_t>() - 32usize];
    ["Alignment of xcb_alloc_color_cells_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_cells_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pixels_len"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pixels_len) - 8usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::masks_len"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, masks_len) - 10usize];
    ["Offset of field: xcb_alloc_color_cells_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_cells_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_cookie_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_cookie_t>() - 4usize];
    ["Alignment of xcb_alloc_color_planes_cookie_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_cookie_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_request_t {
    pub major_opcode: u8,
    pub contiguous: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub colors: u16,
    pub reds: u16,
    pub greens: u16,
    pub blues: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_request_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_request_t>() - 16usize];
    ["Alignment of xcb_alloc_color_planes_request_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_request_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::contiguous"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, contiguous) - 1usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, length) - 2usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::cmap"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, cmap) - 4usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::colors"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, colors) - 8usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::reds"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, reds) - 10usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::greens"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, greens) - 12usize];
    ["Offset of field: xcb_alloc_color_planes_request_t::blues"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_request_t, blues) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_alloc_color_planes_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pixels_len: u16,
    pub pad1: [u8; 2usize],
    pub red_mask: u32,
    pub green_mask: u32,
    pub blue_mask: u32,
    pub pad2: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_alloc_color_planes_reply_t"]
        [::std::mem::size_of::<xcb_alloc_color_planes_reply_t>() - 32usize];
    ["Alignment of xcb_alloc_color_planes_reply_t"]
        [::std::mem::align_of::<xcb_alloc_color_planes_reply_t>() - 4usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::length"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, length) - 4usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pixels_len"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pixels_len) - 8usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad1) - 10usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::red_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, red_mask) - 12usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::green_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, green_mask) - 16usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::blue_mask"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, blue_mask) - 20usize];
    ["Offset of field: xcb_alloc_color_planes_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_alloc_color_planes_reply_t, pad2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub plane_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_colors_request_t"]
        [::std::mem::size_of::<xcb_free_colors_request_t>() - 12usize];
    ["Alignment of xcb_free_colors_request_t"]
        [::std::mem::align_of::<xcb_free_colors_request_t>() - 4usize];
    ["Offset of field: xcb_free_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_free_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, cmap) - 4usize];
    ["Offset of field: xcb_free_colors_request_t::plane_mask"]
        [::std::mem::offset_of!(xcb_free_colors_request_t, plane_mask) - 8usize];
};
pub const xcb_color_flag_t_XCB_COLOR_FLAG_RED: xcb_color_flag_t = 1;
pub const xcb_color_flag_t_XCB_COLOR_FLAG_GREEN: xcb_color_flag_t = 2;
pub const xcb_color_flag_t_XCB_COLOR_FLAG_BLUE: xcb_color_flag_t = 4;
pub type xcb_color_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_coloritem_t {
    pub pixel: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub flags: u8,
    pub pad0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_coloritem_t"][::std::mem::size_of::<xcb_coloritem_t>() - 12usize];
    ["Alignment of xcb_coloritem_t"][::std::mem::align_of::<xcb_coloritem_t>() - 4usize];
    ["Offset of field: xcb_coloritem_t::pixel"]
        [::std::mem::offset_of!(xcb_coloritem_t, pixel) - 0usize];
    ["Offset of field: xcb_coloritem_t::red"]
        [::std::mem::offset_of!(xcb_coloritem_t, red) - 4usize];
    ["Offset of field: xcb_coloritem_t::green"]
        [::std::mem::offset_of!(xcb_coloritem_t, green) - 6usize];
    ["Offset of field: xcb_coloritem_t::blue"]
        [::std::mem::offset_of!(xcb_coloritem_t, blue) - 8usize];
    ["Offset of field: xcb_coloritem_t::flags"]
        [::std::mem::offset_of!(xcb_coloritem_t, flags) - 10usize];
    ["Offset of field: xcb_coloritem_t::pad0"]
        [::std::mem::offset_of!(xcb_coloritem_t, pad0) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_coloritem_iterator_t {
    pub data: *mut xcb_coloritem_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_coloritem_iterator_t"]
        [::std::mem::size_of::<xcb_coloritem_iterator_t>() - 16usize];
    ["Alignment of xcb_coloritem_iterator_t"]
        [::std::mem::align_of::<xcb_coloritem_iterator_t>() - 8usize];
    ["Offset of field: xcb_coloritem_iterator_t::data"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, data) - 0usize];
    ["Offset of field: xcb_coloritem_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_coloritem_iterator_t::index"]
        [::std::mem::offset_of!(xcb_coloritem_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_store_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_store_colors_request_t"]
        [::std::mem::size_of::<xcb_store_colors_request_t>() - 8usize];
    ["Alignment of xcb_store_colors_request_t"]
        [::std::mem::align_of::<xcb_store_colors_request_t>() - 4usize];
    ["Offset of field: xcb_store_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_store_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_store_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_store_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_store_colors_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_store_named_color_request_t {
    pub major_opcode: u8,
    pub flags: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub pixel: u32,
    pub name_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_store_named_color_request_t"]
        [::std::mem::size_of::<xcb_store_named_color_request_t>() - 16usize];
    ["Alignment of xcb_store_named_color_request_t"]
        [::std::mem::align_of::<xcb_store_named_color_request_t>() - 4usize];
    ["Offset of field: xcb_store_named_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_store_named_color_request_t::flags"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, flags) - 1usize];
    ["Offset of field: xcb_store_named_color_request_t::length"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, length) - 2usize];
    ["Offset of field: xcb_store_named_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_store_named_color_request_t::pixel"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, pixel) - 8usize];
    ["Offset of field: xcb_store_named_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, name_len) - 12usize];
    ["Offset of field: xcb_store_named_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_store_named_color_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rgb_t {
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rgb_t"][::std::mem::size_of::<xcb_rgb_t>() - 8usize];
    ["Alignment of xcb_rgb_t"][::std::mem::align_of::<xcb_rgb_t>() - 2usize];
    ["Offset of field: xcb_rgb_t::red"][::std::mem::offset_of!(xcb_rgb_t, red) - 0usize];
    ["Offset of field: xcb_rgb_t::green"][::std::mem::offset_of!(xcb_rgb_t, green) - 2usize];
    ["Offset of field: xcb_rgb_t::blue"][::std::mem::offset_of!(xcb_rgb_t, blue) - 4usize];
    ["Offset of field: xcb_rgb_t::pad0"][::std::mem::offset_of!(xcb_rgb_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rgb_iterator_t {
    pub data: *mut xcb_rgb_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rgb_iterator_t"][::std::mem::size_of::<xcb_rgb_iterator_t>() - 16usize];
    ["Alignment of xcb_rgb_iterator_t"][::std::mem::align_of::<xcb_rgb_iterator_t>() - 8usize];
    ["Offset of field: xcb_rgb_iterator_t::data"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, data) - 0usize];
    ["Offset of field: xcb_rgb_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_rgb_iterator_t::index"]
        [::std::mem::offset_of!(xcb_rgb_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_cookie_t"]
        [::std::mem::size_of::<xcb_query_colors_cookie_t>() - 4usize];
    ["Alignment of xcb_query_colors_cookie_t"]
        [::std::mem::align_of::<xcb_query_colors_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_colors_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_colors_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_request_t"]
        [::std::mem::size_of::<xcb_query_colors_request_t>() - 8usize];
    ["Alignment of xcb_query_colors_request_t"]
        [::std::mem::align_of::<xcb_query_colors_request_t>() - 4usize];
    ["Offset of field: xcb_query_colors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_colors_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_colors_request_t::length"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, length) - 2usize];
    ["Offset of field: xcb_query_colors_request_t::cmap"]
        [::std::mem::offset_of!(xcb_query_colors_request_t, cmap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_colors_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub colors_len: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_colors_reply_t"]
        [::std::mem::size_of::<xcb_query_colors_reply_t>() - 32usize];
    ["Alignment of xcb_query_colors_reply_t"]
        [::std::mem::align_of::<xcb_query_colors_reply_t>() - 4usize];
    ["Offset of field: xcb_query_colors_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_colors_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_colors_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_colors_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_colors_reply_t::colors_len"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, colors_len) - 8usize];
    ["Offset of field: xcb_query_colors_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_query_colors_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_cookie_t"]
        [::std::mem::size_of::<xcb_lookup_color_cookie_t>() - 4usize];
    ["Alignment of xcb_lookup_color_cookie_t"]
        [::std::mem::align_of::<xcb_lookup_color_cookie_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_lookup_color_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cmap: xcb_colormap_t,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_request_t"]
        [::std::mem::size_of::<xcb_lookup_color_request_t>() - 12usize];
    ["Alignment of xcb_lookup_color_request_t"]
        [::std::mem::align_of::<xcb_lookup_color_request_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_lookup_color_request_t::pad0"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, pad0) - 1usize];
    ["Offset of field: xcb_lookup_color_request_t::length"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, length) - 2usize];
    ["Offset of field: xcb_lookup_color_request_t::cmap"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, cmap) - 4usize];
    ["Offset of field: xcb_lookup_color_request_t::name_len"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, name_len) - 8usize];
    ["Offset of field: xcb_lookup_color_request_t::pad1"]
        [::std::mem::offset_of!(xcb_lookup_color_request_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_lookup_color_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub exact_red: u16,
    pub exact_green: u16,
    pub exact_blue: u16,
    pub visual_red: u16,
    pub visual_green: u16,
    pub visual_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_lookup_color_reply_t"]
        [::std::mem::size_of::<xcb_lookup_color_reply_t>() - 20usize];
    ["Alignment of xcb_lookup_color_reply_t"]
        [::std::mem::align_of::<xcb_lookup_color_reply_t>() - 4usize];
    ["Offset of field: xcb_lookup_color_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_lookup_color_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_lookup_color_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_lookup_color_reply_t::length"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, length) - 4usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_red"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_red) - 8usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_green"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_green) - 10usize];
    ["Offset of field: xcb_lookup_color_reply_t::exact_blue"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, exact_blue) - 12usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_red"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_red) - 14usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_green"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_green) - 16usize];
    ["Offset of field: xcb_lookup_color_reply_t::visual_blue"]
        [::std::mem::offset_of!(xcb_lookup_color_reply_t, visual_blue) - 18usize];
};
pub const xcb_pixmap_enum_t_XCB_PIXMAP_NONE: xcb_pixmap_enum_t = 0;
pub type xcb_pixmap_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source: xcb_pixmap_t,
    pub mask: xcb_pixmap_t,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_cursor_request_t"]
        [::std::mem::size_of::<xcb_create_cursor_request_t>() - 32usize];
    ["Alignment of xcb_create_cursor_request_t"]
        [::std::mem::align_of::<xcb_create_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_create_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_create_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_cursor_request_t::source"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, source) - 8usize];
    ["Offset of field: xcb_create_cursor_request_t::mask"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, mask) - 12usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_red) - 16usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_green) - 18usize];
    ["Offset of field: xcb_create_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, fore_blue) - 20usize];
    ["Offset of field: xcb_create_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_red) - 22usize];
    ["Offset of field: xcb_create_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_green) - 24usize];
    ["Offset of field: xcb_create_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, back_blue) - 26usize];
    ["Offset of field: xcb_create_cursor_request_t::x"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, x) - 28usize];
    ["Offset of field: xcb_create_cursor_request_t::y"]
        [::std::mem::offset_of!(xcb_create_cursor_request_t, y) - 30usize];
};
pub const xcb_font_enum_t_XCB_FONT_NONE: xcb_font_enum_t = 0;
pub type xcb_font_enum_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_create_glyph_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source_font: xcb_font_t,
    pub mask_font: xcb_font_t,
    pub source_char: u16,
    pub mask_char: u16,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_create_glyph_cursor_request_t"]
        [::std::mem::size_of::<xcb_create_glyph_cursor_request_t>() - 32usize];
    ["Alignment of xcb_create_glyph_cursor_request_t"]
        [::std::mem::align_of::<xcb_create_glyph_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::source_font"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, source_font) - 8usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::mask_font"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, mask_font) - 12usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::source_char"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, source_char) - 16usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::mask_char"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, mask_char) - 18usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_red) - 20usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_green) - 22usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, fore_blue) - 24usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_red) - 26usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_green) - 28usize];
    ["Offset of field: xcb_create_glyph_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_create_glyph_cursor_request_t, back_blue) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_free_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_free_cursor_request_t"]
        [::std::mem::size_of::<xcb_free_cursor_request_t>() - 8usize];
    ["Alignment of xcb_free_cursor_request_t"]
        [::std::mem::align_of::<xcb_free_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_free_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_free_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_free_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_free_cursor_request_t::cursor"]
        [::std::mem::offset_of!(xcb_free_cursor_request_t, cursor) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_recolor_cursor_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub cursor: xcb_cursor_t,
    pub fore_red: u16,
    pub fore_green: u16,
    pub fore_blue: u16,
    pub back_red: u16,
    pub back_green: u16,
    pub back_blue: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_recolor_cursor_request_t"]
        [::std::mem::size_of::<xcb_recolor_cursor_request_t>() - 20usize];
    ["Alignment of xcb_recolor_cursor_request_t"]
        [::std::mem::align_of::<xcb_recolor_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_recolor_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_recolor_cursor_request_t::pad0"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, pad0) - 1usize];
    ["Offset of field: xcb_recolor_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_recolor_cursor_request_t::cursor"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, cursor) - 4usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_red"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_red) - 8usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_green"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_green) - 10usize];
    ["Offset of field: xcb_recolor_cursor_request_t::fore_blue"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, fore_blue) - 12usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_red"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_red) - 14usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_green"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_green) - 16usize];
    ["Offset of field: xcb_recolor_cursor_request_t::back_blue"]
        [::std::mem::offset_of!(xcb_recolor_cursor_request_t, back_blue) - 18usize];
};
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_LARGEST_CURSOR: xcb_query_shape_of_t = 0;
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_FASTEST_TILE: xcb_query_shape_of_t = 1;
pub const xcb_query_shape_of_t_XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE: xcb_query_shape_of_t = 2;
pub type xcb_query_shape_of_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_cookie_t"]
        [::std::mem::size_of::<xcb_query_best_size_cookie_t>() - 4usize];
    ["Alignment of xcb_query_best_size_cookie_t"]
        [::std::mem::align_of::<xcb_query_best_size_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_best_size_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_request_t {
    pub major_opcode: u8,
    pub _class: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_request_t"]
        [::std::mem::size_of::<xcb_query_best_size_request_t>() - 12usize];
    ["Alignment of xcb_query_best_size_request_t"]
        [::std::mem::align_of::<xcb_query_best_size_request_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_best_size_request_t::_class"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, _class) - 1usize];
    ["Offset of field: xcb_query_best_size_request_t::length"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, length) - 2usize];
    ["Offset of field: xcb_query_best_size_request_t::drawable"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, drawable) - 4usize];
    ["Offset of field: xcb_query_best_size_request_t::width"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, width) - 8usize];
    ["Offset of field: xcb_query_best_size_request_t::height"]
        [::std::mem::offset_of!(xcb_query_best_size_request_t, height) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_best_size_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_best_size_reply_t"]
        [::std::mem::size_of::<xcb_query_best_size_reply_t>() - 12usize];
    ["Alignment of xcb_query_best_size_reply_t"]
        [::std::mem::align_of::<xcb_query_best_size_reply_t>() - 4usize];
    ["Offset of field: xcb_query_best_size_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_best_size_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_best_size_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_best_size_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_best_size_reply_t::width"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, width) - 8usize];
    ["Offset of field: xcb_query_best_size_reply_t::height"]
        [::std::mem::offset_of!(xcb_query_best_size_reply_t, height) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_cookie_t"]
        [::std::mem::size_of::<xcb_query_extension_cookie_t>() - 4usize];
    ["Alignment of xcb_query_extension_cookie_t"]
        [::std::mem::align_of::<xcb_query_extension_cookie_t>() - 4usize];
    ["Offset of field: xcb_query_extension_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_query_extension_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub name_len: u16,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_request_t"]
        [::std::mem::size_of::<xcb_query_extension_request_t>() - 8usize];
    ["Alignment of xcb_query_extension_request_t"]
        [::std::mem::align_of::<xcb_query_extension_request_t>() - 2usize];
    ["Offset of field: xcb_query_extension_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_query_extension_request_t::pad0"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, pad0) - 1usize];
    ["Offset of field: xcb_query_extension_request_t::length"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, length) - 2usize];
    ["Offset of field: xcb_query_extension_request_t::name_len"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, name_len) - 4usize];
    ["Offset of field: xcb_query_extension_request_t::pad1"]
        [::std::mem::offset_of!(xcb_query_extension_request_t, pad1) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_query_extension_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub present: u8,
    pub major_opcode: u8,
    pub first_event: u8,
    pub first_error: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_query_extension_reply_t"]
        [::std::mem::size_of::<xcb_query_extension_reply_t>() - 12usize];
    ["Alignment of xcb_query_extension_reply_t"]
        [::std::mem::align_of::<xcb_query_extension_reply_t>() - 4usize];
    ["Offset of field: xcb_query_extension_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_query_extension_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_query_extension_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_query_extension_reply_t::length"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, length) - 4usize];
    ["Offset of field: xcb_query_extension_reply_t::present"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, present) - 8usize];
    ["Offset of field: xcb_query_extension_reply_t::major_opcode"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, major_opcode) - 9usize];
    ["Offset of field: xcb_query_extension_reply_t::first_event"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, first_event) - 10usize];
    ["Offset of field: xcb_query_extension_reply_t::first_error"]
        [::std::mem::offset_of!(xcb_query_extension_reply_t, first_error) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_cookie_t"]
        [::std::mem::size_of::<xcb_list_extensions_cookie_t>() - 4usize];
    ["Alignment of xcb_list_extensions_cookie_t"]
        [::std::mem::align_of::<xcb_list_extensions_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_extensions_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_extensions_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_request_t"]
        [::std::mem::size_of::<xcb_list_extensions_request_t>() - 4usize];
    ["Alignment of xcb_list_extensions_request_t"]
        [::std::mem::align_of::<xcb_list_extensions_request_t>() - 2usize];
    ["Offset of field: xcb_list_extensions_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_extensions_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_extensions_request_t::length"]
        [::std::mem::offset_of!(xcb_list_extensions_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_extensions_reply_t {
    pub response_type: u8,
    pub names_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_extensions_reply_t"]
        [::std::mem::size_of::<xcb_list_extensions_reply_t>() - 32usize];
    ["Alignment of xcb_list_extensions_reply_t"]
        [::std::mem::align_of::<xcb_list_extensions_reply_t>() - 4usize];
    ["Offset of field: xcb_list_extensions_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_extensions_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, names_len) - 1usize];
    ["Offset of field: xcb_list_extensions_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_extensions_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_extensions_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_extensions_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_mapping_request_t {
    pub major_opcode: u8,
    pub keycode_count: u8,
    pub length: u16,
    pub first_keycode: xcb_keycode_t,
    pub keysyms_per_keycode: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_mapping_request_t"]
        [::std::mem::size_of::<xcb_change_keyboard_mapping_request_t>() - 8usize];
    ["Alignment of xcb_change_keyboard_mapping_request_t"]
        [::std::mem::align_of::<xcb_change_keyboard_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::keycode_count"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, keycode_count) - 1usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, length) - 2usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::first_keycode"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, first_keycode) - 4usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::keysyms_per_keycode"][::std::mem::offset_of!(
        xcb_change_keyboard_mapping_request_t,
        keysyms_per_keycode
    ) - 5usize];
    ["Offset of field: xcb_change_keyboard_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_keyboard_mapping_request_t, pad0) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub first_keycode: xcb_keycode_t,
    pub count: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_request_t>() - 6usize];
    ["Alignment of xcb_get_keyboard_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, length) - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::first_keycode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, first_keycode) - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_request_t::count"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_request_t, count) - 5usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_mapping_reply_t {
    pub response_type: u8,
    pub keysyms_per_keycode: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_keyboard_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_keyboard_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_keyboard_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::keysyms_per_keycode"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, keysyms_per_keycode) - 1usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_keyboard_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_mapping_reply_t, pad0) - 8usize];
};
pub const xcb_kb_t_XCB_KB_KEY_CLICK_PERCENT: xcb_kb_t = 1;
pub const xcb_kb_t_XCB_KB_BELL_PERCENT: xcb_kb_t = 2;
pub const xcb_kb_t_XCB_KB_BELL_PITCH: xcb_kb_t = 4;
pub const xcb_kb_t_XCB_KB_BELL_DURATION: xcb_kb_t = 8;
pub const xcb_kb_t_XCB_KB_LED: xcb_kb_t = 16;
pub const xcb_kb_t_XCB_KB_LED_MODE: xcb_kb_t = 32;
pub const xcb_kb_t_XCB_KB_KEY: xcb_kb_t = 64;
pub const xcb_kb_t_XCB_KB_AUTO_REPEAT_MODE: xcb_kb_t = 128;
pub type xcb_kb_t = ::std::os::raw::c_uint;
pub const xcb_led_mode_t_XCB_LED_MODE_OFF: xcb_led_mode_t = 0;
pub const xcb_led_mode_t_XCB_LED_MODE_ON: xcb_led_mode_t = 1;
pub type xcb_led_mode_t = ::std::os::raw::c_uint;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_OFF: xcb_auto_repeat_mode_t = 0;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_ON: xcb_auto_repeat_mode_t = 1;
pub const xcb_auto_repeat_mode_t_XCB_AUTO_REPEAT_MODE_DEFAULT: xcb_auto_repeat_mode_t = 2;
pub type xcb_auto_repeat_mode_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_control_value_list_t {
    pub key_click_percent: i32,
    pub bell_percent: i32,
    pub bell_pitch: i32,
    pub bell_duration: i32,
    pub led: u32,
    pub led_mode: u32,
    pub key: xcb_keycode32_t,
    pub auto_repeat_mode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_control_value_list_t"]
        [::std::mem::size_of::<xcb_change_keyboard_control_value_list_t>() - 32usize];
    ["Alignment of xcb_change_keyboard_control_value_list_t"]
        [::std::mem::align_of::<xcb_change_keyboard_control_value_list_t>() - 4usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::key_click_percent"][::std::mem::offset_of!(
        xcb_change_keyboard_control_value_list_t,
        key_click_percent
    ) - 0usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_percent"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_percent) - 4usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_pitch"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_pitch) - 8usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::bell_duration"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, bell_duration) - 12usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::led"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, led) - 16usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::led_mode"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, led_mode) - 20usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::key"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_value_list_t, key) - 24usize];
    ["Offset of field: xcb_change_keyboard_control_value_list_t::auto_repeat_mode"][::std::mem::offset_of!(
        xcb_change_keyboard_control_value_list_t,
        auto_repeat_mode
    ) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_keyboard_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_keyboard_control_request_t"]
        [::std::mem::size_of::<xcb_change_keyboard_control_request_t>() - 8usize];
    ["Alignment of xcb_change_keyboard_control_request_t"]
        [::std::mem::align_of::<xcb_change_keyboard_control_request_t>() - 4usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::length"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, length) - 2usize];
    ["Offset of field: xcb_change_keyboard_control_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_change_keyboard_control_request_t, value_mask) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_cookie_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_cookie_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_control_cookie_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_control_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_request_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_request_t>() - 4usize];
    ["Alignment of xcb_get_keyboard_control_request_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_request_t>() - 2usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_keyboard_control_request_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_keyboard_control_reply_t {
    pub response_type: u8,
    pub global_auto_repeat: u8,
    pub sequence: u16,
    pub length: u32,
    pub led_mask: u32,
    pub key_click_percent: u8,
    pub bell_percent: u8,
    pub bell_pitch: u16,
    pub bell_duration: u16,
    pub pad0: [u8; 2usize],
    pub auto_repeats: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_keyboard_control_reply_t"]
        [::std::mem::size_of::<xcb_get_keyboard_control_reply_t>() - 52usize];
    ["Alignment of xcb_get_keyboard_control_reply_t"]
        [::std::mem::align_of::<xcb_get_keyboard_control_reply_t>() - 4usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::global_auto_repeat"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, global_auto_repeat) - 1usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::led_mask"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, led_mask) - 8usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::key_click_percent"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, key_click_percent) - 12usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_percent"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_percent) - 13usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_pitch"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_pitch) - 14usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::bell_duration"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, bell_duration) - 16usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, pad0) - 18usize];
    ["Offset of field: xcb_get_keyboard_control_reply_t::auto_repeats"]
        [::std::mem::offset_of!(xcb_get_keyboard_control_reply_t, auto_repeats) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_bell_request_t {
    pub major_opcode: u8,
    pub percent: i8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_bell_request_t"][::std::mem::size_of::<xcb_bell_request_t>() - 4usize];
    ["Alignment of xcb_bell_request_t"][::std::mem::align_of::<xcb_bell_request_t>() - 2usize];
    ["Offset of field: xcb_bell_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_bell_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_bell_request_t::percent"]
        [::std::mem::offset_of!(xcb_bell_request_t, percent) - 1usize];
    ["Offset of field: xcb_bell_request_t::length"]
        [::std::mem::offset_of!(xcb_bell_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_pointer_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub acceleration_numerator: i16,
    pub acceleration_denominator: i16,
    pub threshold: i16,
    pub do_acceleration: u8,
    pub do_threshold: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_pointer_control_request_t"]
        [::std::mem::size_of::<xcb_change_pointer_control_request_t>() - 12usize];
    ["Alignment of xcb_change_pointer_control_request_t"]
        [::std::mem::align_of::<xcb_change_pointer_control_request_t>() - 2usize];
    ["Offset of field: xcb_change_pointer_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_pointer_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_change_pointer_control_request_t::length"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, length) - 2usize];
    ["Offset of field: xcb_change_pointer_control_request_t::acceleration_numerator"][::std::mem::offset_of!(
        xcb_change_pointer_control_request_t,
        acceleration_numerator
    ) - 4usize];
    ["Offset of field: xcb_change_pointer_control_request_t::acceleration_denominator"][::std::mem::offset_of!(
        xcb_change_pointer_control_request_t,
        acceleration_denominator
    ) - 6usize];
    ["Offset of field: xcb_change_pointer_control_request_t::threshold"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, threshold) - 8usize];
    ["Offset of field: xcb_change_pointer_control_request_t::do_acceleration"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, do_acceleration) - 10usize];
    ["Offset of field: xcb_change_pointer_control_request_t::do_threshold"]
        [::std::mem::offset_of!(xcb_change_pointer_control_request_t, do_threshold) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_cookie_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_cookie_t>() - 4usize];
    ["Alignment of xcb_get_pointer_control_cookie_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_control_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_control_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_request_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_request_t>() - 4usize];
    ["Alignment of xcb_get_pointer_control_request_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_request_t>() - 2usize];
    ["Offset of field: xcb_get_pointer_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_pointer_control_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_control_request_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_control_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_control_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub acceleration_numerator: u16,
    pub acceleration_denominator: u16,
    pub threshold: u16,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_control_reply_t"]
        [::std::mem::size_of::<xcb_get_pointer_control_reply_t>() - 32usize];
    ["Alignment of xcb_get_pointer_control_reply_t"]
        [::std::mem::align_of::<xcb_get_pointer_control_reply_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::acceleration_numerator"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, acceleration_numerator) - 8usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::acceleration_denominator"][::std::mem::offset_of!(
        xcb_get_pointer_control_reply_t,
        acceleration_denominator
    ) - 10usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::threshold"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, threshold) - 12usize];
    ["Offset of field: xcb_get_pointer_control_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_pointer_control_reply_t, pad1) - 14usize];
};
pub const xcb_blanking_t_XCB_BLANKING_NOT_PREFERRED: xcb_blanking_t = 0;
pub const xcb_blanking_t_XCB_BLANKING_PREFERRED: xcb_blanking_t = 1;
pub const xcb_blanking_t_XCB_BLANKING_DEFAULT: xcb_blanking_t = 2;
pub type xcb_blanking_t = ::std::os::raw::c_uint;
pub const xcb_exposures_t_XCB_EXPOSURES_NOT_ALLOWED: xcb_exposures_t = 0;
pub const xcb_exposures_t_XCB_EXPOSURES_ALLOWED: xcb_exposures_t = 1;
pub const xcb_exposures_t_XCB_EXPOSURES_DEFAULT: xcb_exposures_t = 2;
pub type xcb_exposures_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_screen_saver_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub timeout: i16,
    pub interval: i16,
    pub prefer_blanking: u8,
    pub allow_exposures: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_set_screen_saver_request_t>() - 10usize];
    ["Alignment of xcb_set_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_set_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_set_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_screen_saver_request_t::pad0"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, pad0) - 1usize];
    ["Offset of field: xcb_set_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, length) - 2usize];
    ["Offset of field: xcb_set_screen_saver_request_t::timeout"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, timeout) - 4usize];
    ["Offset of field: xcb_set_screen_saver_request_t::interval"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, interval) - 6usize];
    ["Offset of field: xcb_set_screen_saver_request_t::prefer_blanking"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, prefer_blanking) - 8usize];
    ["Offset of field: xcb_set_screen_saver_request_t::allow_exposures"]
        [::std::mem::offset_of!(xcb_set_screen_saver_request_t, allow_exposures) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_cookie_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_cookie_t>() - 4usize];
    ["Alignment of xcb_get_screen_saver_cookie_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_screen_saver_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_screen_saver_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_request_t>() - 4usize];
    ["Alignment of xcb_get_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_get_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_screen_saver_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_get_screen_saver_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_screen_saver_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timeout: u16,
    pub interval: u16,
    pub prefer_blanking: u8,
    pub allow_exposures: u8,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_screen_saver_reply_t"]
        [::std::mem::size_of::<xcb_get_screen_saver_reply_t>() - 32usize];
    ["Alignment of xcb_get_screen_saver_reply_t"]
        [::std::mem::align_of::<xcb_get_screen_saver_reply_t>() - 4usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::timeout"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, timeout) - 8usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::interval"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, interval) - 10usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::prefer_blanking"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, prefer_blanking) - 12usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::allow_exposures"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, allow_exposures) - 13usize];
    ["Offset of field: xcb_get_screen_saver_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_get_screen_saver_reply_t, pad1) - 14usize];
};
pub const xcb_host_mode_t_XCB_HOST_MODE_INSERT: xcb_host_mode_t = 0;
pub const xcb_host_mode_t_XCB_HOST_MODE_DELETE: xcb_host_mode_t = 1;
pub type xcb_host_mode_t = ::std::os::raw::c_uint;
pub const xcb_family_t_XCB_FAMILY_INTERNET: xcb_family_t = 0;
pub const xcb_family_t_XCB_FAMILY_DECNET: xcb_family_t = 1;
pub const xcb_family_t_XCB_FAMILY_CHAOS: xcb_family_t = 2;
pub const xcb_family_t_XCB_FAMILY_SERVER_INTERPRETED: xcb_family_t = 5;
pub const xcb_family_t_XCB_FAMILY_INTERNET_6: xcb_family_t = 6;
pub type xcb_family_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_change_hosts_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
    pub family: u8,
    pub pad0: u8,
    pub address_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_change_hosts_request_t"]
        [::std::mem::size_of::<xcb_change_hosts_request_t>() - 8usize];
    ["Alignment of xcb_change_hosts_request_t"]
        [::std::mem::align_of::<xcb_change_hosts_request_t>() - 2usize];
    ["Offset of field: xcb_change_hosts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_change_hosts_request_t::mode"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, mode) - 1usize];
    ["Offset of field: xcb_change_hosts_request_t::length"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, length) - 2usize];
    ["Offset of field: xcb_change_hosts_request_t::family"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, family) - 4usize];
    ["Offset of field: xcb_change_hosts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, pad0) - 5usize];
    ["Offset of field: xcb_change_hosts_request_t::address_len"]
        [::std::mem::offset_of!(xcb_change_hosts_request_t, address_len) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_host_t {
    pub family: u8,
    pub pad0: u8,
    pub address_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_host_t"][::std::mem::size_of::<xcb_host_t>() - 4usize];
    ["Alignment of xcb_host_t"][::std::mem::align_of::<xcb_host_t>() - 2usize];
    ["Offset of field: xcb_host_t::family"][::std::mem::offset_of!(xcb_host_t, family) - 0usize];
    ["Offset of field: xcb_host_t::pad0"][::std::mem::offset_of!(xcb_host_t, pad0) - 1usize];
    ["Offset of field: xcb_host_t::address_len"]
        [::std::mem::offset_of!(xcb_host_t, address_len) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_host_iterator_t {
    pub data: *mut xcb_host_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_host_iterator_t"][::std::mem::size_of::<xcb_host_iterator_t>() - 16usize];
    ["Alignment of xcb_host_iterator_t"][::std::mem::align_of::<xcb_host_iterator_t>() - 8usize];
    ["Offset of field: xcb_host_iterator_t::data"]
        [::std::mem::offset_of!(xcb_host_iterator_t, data) - 0usize];
    ["Offset of field: xcb_host_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_host_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_host_iterator_t::index"]
        [::std::mem::offset_of!(xcb_host_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_cookie_t"][::std::mem::size_of::<xcb_list_hosts_cookie_t>() - 4usize];
    ["Alignment of xcb_list_hosts_cookie_t"]
        [::std::mem::align_of::<xcb_list_hosts_cookie_t>() - 4usize];
    ["Offset of field: xcb_list_hosts_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_list_hosts_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_request_t"]
        [::std::mem::size_of::<xcb_list_hosts_request_t>() - 4usize];
    ["Alignment of xcb_list_hosts_request_t"]
        [::std::mem::align_of::<xcb_list_hosts_request_t>() - 2usize];
    ["Offset of field: xcb_list_hosts_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_list_hosts_request_t::pad0"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, pad0) - 1usize];
    ["Offset of field: xcb_list_hosts_request_t::length"]
        [::std::mem::offset_of!(xcb_list_hosts_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_list_hosts_reply_t {
    pub response_type: u8,
    pub mode: u8,
    pub sequence: u16,
    pub length: u32,
    pub hosts_len: u16,
    pub pad0: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_list_hosts_reply_t"][::std::mem::size_of::<xcb_list_hosts_reply_t>() - 32usize];
    ["Alignment of xcb_list_hosts_reply_t"]
        [::std::mem::align_of::<xcb_list_hosts_reply_t>() - 4usize];
    ["Offset of field: xcb_list_hosts_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_list_hosts_reply_t::mode"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, mode) - 1usize];
    ["Offset of field: xcb_list_hosts_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_list_hosts_reply_t::length"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, length) - 4usize];
    ["Offset of field: xcb_list_hosts_reply_t::hosts_len"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, hosts_len) - 8usize];
    ["Offset of field: xcb_list_hosts_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_list_hosts_reply_t, pad0) - 10usize];
};
pub const xcb_access_control_t_XCB_ACCESS_CONTROL_DISABLE: xcb_access_control_t = 0;
pub const xcb_access_control_t_XCB_ACCESS_CONTROL_ENABLE: xcb_access_control_t = 1;
pub type xcb_access_control_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_access_control_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_access_control_request_t"]
        [::std::mem::size_of::<xcb_set_access_control_request_t>() - 4usize];
    ["Alignment of xcb_set_access_control_request_t"]
        [::std::mem::align_of::<xcb_set_access_control_request_t>() - 2usize];
    ["Offset of field: xcb_set_access_control_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_access_control_request_t::mode"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, mode) - 1usize];
    ["Offset of field: xcb_set_access_control_request_t::length"]
        [::std::mem::offset_of!(xcb_set_access_control_request_t, length) - 2usize];
};
pub const xcb_close_down_t_XCB_CLOSE_DOWN_DESTROY_ALL: xcb_close_down_t = 0;
pub const xcb_close_down_t_XCB_CLOSE_DOWN_RETAIN_PERMANENT: xcb_close_down_t = 1;
pub const xcb_close_down_t_XCB_CLOSE_DOWN_RETAIN_TEMPORARY: xcb_close_down_t = 2;
pub type xcb_close_down_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_close_down_mode_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_close_down_mode_request_t"]
        [::std::mem::size_of::<xcb_set_close_down_mode_request_t>() - 4usize];
    ["Alignment of xcb_set_close_down_mode_request_t"]
        [::std::mem::align_of::<xcb_set_close_down_mode_request_t>() - 2usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, mode) - 1usize];
    ["Offset of field: xcb_set_close_down_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_set_close_down_mode_request_t, length) - 2usize];
};
pub const xcb_kill_t_XCB_KILL_ALL_TEMPORARY: xcb_kill_t = 0;
pub type xcb_kill_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_kill_client_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub resource: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_kill_client_request_t"]
        [::std::mem::size_of::<xcb_kill_client_request_t>() - 8usize];
    ["Alignment of xcb_kill_client_request_t"]
        [::std::mem::align_of::<xcb_kill_client_request_t>() - 4usize];
    ["Offset of field: xcb_kill_client_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_kill_client_request_t::pad0"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, pad0) - 1usize];
    ["Offset of field: xcb_kill_client_request_t::length"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, length) - 2usize];
    ["Offset of field: xcb_kill_client_request_t::resource"]
        [::std::mem::offset_of!(xcb_kill_client_request_t, resource) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rotate_properties_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub atoms_len: u16,
    pub delta: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_rotate_properties_request_t"]
        [::std::mem::size_of::<xcb_rotate_properties_request_t>() - 12usize];
    ["Alignment of xcb_rotate_properties_request_t"]
        [::std::mem::align_of::<xcb_rotate_properties_request_t>() - 4usize];
    ["Offset of field: xcb_rotate_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_rotate_properties_request_t::pad0"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, pad0) - 1usize];
    ["Offset of field: xcb_rotate_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_rotate_properties_request_t::window"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, window) - 4usize];
    ["Offset of field: xcb_rotate_properties_request_t::atoms_len"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, atoms_len) - 8usize];
    ["Offset of field: xcb_rotate_properties_request_t::delta"]
        [::std::mem::offset_of!(xcb_rotate_properties_request_t, delta) - 10usize];
};
pub const xcb_screen_saver_t_XCB_SCREEN_SAVER_RESET: xcb_screen_saver_t = 0;
pub const xcb_screen_saver_t_XCB_SCREEN_SAVER_ACTIVE: xcb_screen_saver_t = 1;
pub type xcb_screen_saver_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_force_screen_saver_request_t {
    pub major_opcode: u8,
    pub mode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_force_screen_saver_request_t"]
        [::std::mem::size_of::<xcb_force_screen_saver_request_t>() - 4usize];
    ["Alignment of xcb_force_screen_saver_request_t"]
        [::std::mem::align_of::<xcb_force_screen_saver_request_t>() - 2usize];
    ["Offset of field: xcb_force_screen_saver_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_force_screen_saver_request_t::mode"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, mode) - 1usize];
    ["Offset of field: xcb_force_screen_saver_request_t::length"]
        [::std::mem::offset_of!(xcb_force_screen_saver_request_t, length) - 2usize];
};
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_SUCCESS: xcb_mapping_status_t = 0;
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_BUSY: xcb_mapping_status_t = 1;
pub const xcb_mapping_status_t_XCB_MAPPING_STATUS_FAILURE: xcb_mapping_status_t = 2;
pub type xcb_mapping_status_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_set_pointer_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_set_pointer_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_request_t {
    pub major_opcode: u8,
    pub map_len: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_request_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_request_t>() - 4usize];
    ["Alignment of xcb_set_pointer_mapping_request_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::map_len"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, map_len) - 1usize];
    ["Offset of field: xcb_set_pointer_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_pointer_mapping_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_pointer_mapping_reply_t"]
        [::std::mem::size_of::<xcb_set_pointer_mapping_reply_t>() - 8usize];
    ["Alignment of xcb_set_pointer_mapping_reply_t"]
        [::std::mem::align_of::<xcb_set_pointer_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::status"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, status) - 1usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_set_pointer_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_set_pointer_mapping_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_pointer_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_request_t>() - 4usize];
    ["Alignment of xcb_get_pointer_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_pointer_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_pointer_mapping_reply_t {
    pub response_type: u8,
    pub map_len: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_pointer_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_pointer_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_pointer_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_pointer_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::map_len"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, map_len) - 1usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_pointer_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_pointer_mapping_reply_t, pad0) - 8usize];
};
pub const xcb_map_index_t_XCB_MAP_INDEX_SHIFT: xcb_map_index_t = 0;
pub const xcb_map_index_t_XCB_MAP_INDEX_LOCK: xcb_map_index_t = 1;
pub const xcb_map_index_t_XCB_MAP_INDEX_CONTROL: xcb_map_index_t = 2;
pub const xcb_map_index_t_XCB_MAP_INDEX_1: xcb_map_index_t = 3;
pub const xcb_map_index_t_XCB_MAP_INDEX_2: xcb_map_index_t = 4;
pub const xcb_map_index_t_XCB_MAP_INDEX_3: xcb_map_index_t = 5;
pub const xcb_map_index_t_XCB_MAP_INDEX_4: xcb_map_index_t = 6;
pub const xcb_map_index_t_XCB_MAP_INDEX_5: xcb_map_index_t = 7;
pub type xcb_map_index_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_set_modifier_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_set_modifier_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_request_t {
    pub major_opcode: u8,
    pub keycodes_per_modifier: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_request_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_request_t>() - 4usize];
    ["Alignment of xcb_set_modifier_mapping_request_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::keycodes_per_modifier"][::std::mem::offset_of!(
        xcb_set_modifier_mapping_request_t,
        keycodes_per_modifier
    ) - 1usize];
    ["Offset of field: xcb_set_modifier_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_set_modifier_mapping_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_set_modifier_mapping_reply_t"]
        [::std::mem::size_of::<xcb_set_modifier_mapping_reply_t>() - 8usize];
    ["Alignment of xcb_set_modifier_mapping_reply_t"]
        [::std::mem::align_of::<xcb_set_modifier_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::status"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, status) - 1usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_set_modifier_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_set_modifier_mapping_reply_t, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_cookie_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_cookie_t>() - 4usize];
    ["Alignment of xcb_get_modifier_mapping_cookie_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_cookie_t>() - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_request_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_request_t>() - 4usize];
    ["Alignment of xcb_get_modifier_mapping_request_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_request_t>() - 2usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::pad0"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, pad0) - 1usize];
    ["Offset of field: xcb_get_modifier_mapping_request_t::length"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_get_modifier_mapping_reply_t {
    pub response_type: u8,
    pub keycodes_per_modifier: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_get_modifier_mapping_reply_t"]
        [::std::mem::size_of::<xcb_get_modifier_mapping_reply_t>() - 32usize];
    ["Alignment of xcb_get_modifier_mapping_reply_t"]
        [::std::mem::align_of::<xcb_get_modifier_mapping_reply_t>() - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::keycodes_per_modifier"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, keycodes_per_modifier) - 1usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::length"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, length) - 4usize];
    ["Offset of field: xcb_get_modifier_mapping_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_get_modifier_mapping_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_no_operation_request_t {
    pub major_opcode: u8,
    pub pad0: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_no_operation_request_t"]
        [::std::mem::size_of::<xcb_no_operation_request_t>() - 4usize];
    ["Alignment of xcb_no_operation_request_t"]
        [::std::mem::align_of::<xcb_no_operation_request_t>() - 2usize];
    ["Offset of field: xcb_no_operation_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_no_operation_request_t::pad0"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, pad0) - 1usize];
    ["Offset of field: xcb_no_operation_request_t::length"]
        [::std::mem::offset_of!(xcb_no_operation_request_t, length) - 2usize];
};
unsafe extern "C" {
    pub fn xcb_char2b_next(i: *mut xcb_char2b_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_char2b_end(i: xcb_char2b_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_window_next(i: *mut xcb_window_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_window_end(i: xcb_window_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_pixmap_next(i: *mut xcb_pixmap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_pixmap_end(i: xcb_pixmap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_cursor_next(i: *mut xcb_cursor_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_cursor_end(i: xcb_cursor_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_font_next(i: *mut xcb_font_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_font_end(i: xcb_font_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_gcontext_next(i: *mut xcb_gcontext_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_gcontext_end(i: xcb_gcontext_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_colormap_next(i: *mut xcb_colormap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_colormap_end(i: xcb_colormap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_atom_next(i: *mut xcb_atom_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_atom_end(i: xcb_atom_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_drawable_next(i: *mut xcb_drawable_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_drawable_end(i: xcb_drawable_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_fontable_next(i: *mut xcb_fontable_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_fontable_end(i: xcb_fontable_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_bool32_next(i: *mut xcb_bool32_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_bool32_end(i: xcb_bool32_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_visualid_next(i: *mut xcb_visualid_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_visualid_end(i: xcb_visualid_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_timestamp_next(i: *mut xcb_timestamp_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_timestamp_end(i: xcb_timestamp_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keysym_next(i: *mut xcb_keysym_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keysym_end(i: xcb_keysym_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keycode_next(i: *mut xcb_keycode_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keycode_end(i: xcb_keycode_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_keycode32_next(i: *mut xcb_keycode32_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_keycode32_end(i: xcb_keycode32_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_button_next(i: *mut xcb_button_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_button_end(i: xcb_button_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_point_next(i: *mut xcb_point_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_point_end(i: xcb_point_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_rectangle_next(i: *mut xcb_rectangle_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_rectangle_end(i: xcb_rectangle_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_arc_next(i: *mut xcb_arc_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_arc_end(i: xcb_arc_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_format_next(i: *mut xcb_format_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_format_end(i: xcb_format_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_visualtype_next(i: *mut xcb_visualtype_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_visualtype_end(i: xcb_visualtype_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_depth_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals(R: *const xcb_depth_t) -> *mut xcb_visualtype_t;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals_length(R: *const xcb_depth_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_depth_visuals_iterator(R: *const xcb_depth_t) -> xcb_visualtype_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_depth_next(i: *mut xcb_depth_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_depth_end(i: xcb_depth_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_screen_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_screen_allowed_depths_length(R: *const xcb_screen_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_screen_allowed_depths_iterator(R: *const xcb_screen_t) -> xcb_depth_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_screen_next(i: *mut xcb_screen_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_screen_end(i: xcb_screen_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name(
        R: *const xcb_setup_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name_length(
        R: *const xcb_setup_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_name_end(
        R: *const xcb_setup_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data(
        R: *const xcb_setup_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data_length(
        R: *const xcb_setup_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_request_authorization_protocol_data_end(
        R: *const xcb_setup_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_request_next(i: *mut xcb_setup_request_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_request_end(i: xcb_setup_request_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason(R: *const xcb_setup_failed_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason_length(R: *const xcb_setup_failed_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_reason_end(R: *const xcb_setup_failed_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_failed_next(i: *mut xcb_setup_failed_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_failed_end(i: xcb_setup_failed_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason(
        R: *const xcb_setup_authenticate_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason_length(
        R: *const xcb_setup_authenticate_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_reason_end(
        R: *const xcb_setup_authenticate_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_next(i: *mut xcb_setup_authenticate_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_authenticate_end(
        i: xcb_setup_authenticate_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor(R: *const xcb_setup_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_vendor_end(R: *const xcb_setup_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats(R: *const xcb_setup_t) -> *mut xcb_format_t;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_pixmap_formats_iterator(R: *const xcb_setup_t) -> xcb_format_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_roots_length(R: *const xcb_setup_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_setup_roots_iterator(R: *const xcb_setup_t) -> xcb_screen_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_setup_next(i: *mut xcb_setup_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_setup_end(i: xcb_setup_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_client_message_data_next(i: *mut xcb_client_message_data_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_client_message_data_end(
        i: xcb_client_message_data_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_create_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_create_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_window_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_aux_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const xcb_create_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_aux(
        c: *mut xcb_connection_t,
        depth: u8,
        wid: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        border_width: u16,
        _class: u16,
        visual: xcb_visualid_t,
        value_mask: u32,
        value_list: *const xcb_create_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_window_value_list(
        R: *const xcb_create_window_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_window_attributes_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_window_attributes_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_aux_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const xcb_change_window_attributes_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_aux(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u32,
        value_list: *const xcb_change_window_attributes_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_window_attributes_value_list(
        R: *const xcb_change_window_attributes_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_window_attributes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_window_attributes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_window_attributes_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_window_attributes_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_window_attributes_reply_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_destroy_subwindows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_save_set_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_save_set(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_reparent_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_reparent_window(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        parent: xcb_window_t,
        x: i16,
        y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_map_subwindows(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_window(c: *mut xcb_connection_t, window: xcb_window_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_subwindows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_unmap_subwindows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u16,
        _aux: *const xcb_configure_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u16,
        _aux: *mut xcb_configure_window_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_configure_window_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_aux_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const xcb_configure_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_aux(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        value_mask: u16,
        value_list: *const xcb_configure_window_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_configure_window_value_list(
        R: *const xcb_configure_window_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_circulate_window_checked(
        c: *mut xcb_connection_t,
        direction: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_circulate_window(
        c: *mut xcb_connection_t,
        direction: u8,
        window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_get_geometry_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry_unchecked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_get_geometry_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_geometry_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_geometry_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_geometry_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_tree(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_tree_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_tree_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children(R: *const xcb_query_tree_reply_t) -> *mut xcb_window_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children_length(
        R: *const xcb_query_tree_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_tree_children_end(R: *const xcb_query_tree_reply_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_tree_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_tree_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_tree_reply_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_intern_atom(
        c: *mut xcb_connection_t,
        only_if_exists: u8,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_unchecked(
        c: *mut xcb_connection_t,
        only_if_exists: u8,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_intern_atom_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_intern_atom_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_intern_atom_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name(
        c: *mut xcb_connection_t,
        atom: xcb_atom_t,
    ) -> xcb_get_atom_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_unchecked(
        c: *mut xcb_connection_t,
        atom: xcb_atom_t,
    ) -> xcb_get_atom_name_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name(
        R: *const xcb_get_atom_name_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name_length(
        R: *const xcb_get_atom_name_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_name_end(
        R: *const xcb_get_atom_name_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_atom_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_atom_name_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_atom_name_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_property_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        data_len: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_property(
        c: *mut xcb_connection_t,
        mode: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        data_len: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_property_data(
        R: *const xcb_change_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_property_data_length(
        R: *const xcb_change_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_property_data_end(
        R: *const xcb_change_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_delete_property_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_delete_property(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_property(
        c: *mut xcb_connection_t,
        _delete: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_unchecked(
        c: *mut xcb_connection_t,
        _delete: u8,
        window: xcb_window_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_value(
        R: *const xcb_get_property_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_property_value_length(
        R: *const xcb_get_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_property_value_end(R: *const xcb_get_property_reply_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_properties(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms(R: *const xcb_list_properties_reply_t) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms_length(
        R: *const xcb_list_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_properties_atoms_end(
        R: *const xcb_list_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_selection_owner_checked(
        c: *mut xcb_connection_t,
        owner: xcb_window_t,
        selection: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_selection_owner(
        c: *mut xcb_connection_t,
        owner: xcb_window_t,
        selection: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner(
        c: *mut xcb_connection_t,
        selection: xcb_atom_t,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner_unchecked(
        c: *mut xcb_connection_t,
        selection: xcb_atom_t,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_selection_owner_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_selection_owner_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_selection_owner_reply_t;
}
unsafe extern "C" {
    pub fn xcb_convert_selection_checked(
        c: *mut xcb_connection_t,
        requestor: xcb_window_t,
        selection: xcb_atom_t,
        target: xcb_atom_t,
        property: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_convert_selection(
        c: *mut xcb_connection_t,
        requestor: xcb_window_t,
        selection: xcb_atom_t,
        target: xcb_atom_t,
        property: xcb_atom_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_send_event_checked(
        c: *mut xcb_connection_t,
        propagate: u8,
        destination: xcb_window_t,
        event_mask: u32,
        event: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_send_event(
        c: *mut xcb_connection_t,
        propagate: u8,
        destination: xcb_window_t,
        event_mask: u32,
        event: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
    ) -> xcb_grab_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer_unchecked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
    ) -> xcb_grab_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_pointer_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_grab_pointer_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_grab_pointer_reply_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_pointer_checked(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_pointer(c: *mut xcb_connection_t, time: xcb_timestamp_t)
        -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_button_checked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        button: u8,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_button(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        event_mask: u16,
        pointer_mode: u8,
        keyboard_mode: u8,
        confine_to: xcb_window_t,
        cursor: xcb_cursor_t,
        button: u8,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_button_checked(
        c: *mut xcb_connection_t,
        button: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_button(
        c: *mut xcb_connection_t,
        button: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_active_pointer_grab_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
        event_mask: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_active_pointer_grab(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        time: xcb_timestamp_t,
        event_mask: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        time: xcb_timestamp_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_grab_keyboard_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard_unchecked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        time: xcb_timestamp_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_grab_keyboard_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_keyboard_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_grab_keyboard_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_grab_keyboard_reply_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_keyboard_checked(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_keyboard(
        c: *mut xcb_connection_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_key_checked(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
        key: xcb_keycode_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_key(
        c: *mut xcb_connection_t,
        owner_events: u8,
        grab_window: xcb_window_t,
        modifiers: u16,
        key: xcb_keycode_t,
        pointer_mode: u8,
        keyboard_mode: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_key_checked(
        c: *mut xcb_connection_t,
        key: xcb_keycode_t,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_key(
        c: *mut xcb_connection_t,
        key: xcb_keycode_t,
        grab_window: xcb_window_t,
        modifiers: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_allow_events_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_allow_events(
        c: *mut xcb_connection_t,
        mode: u8,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_server_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_grab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_server_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ungrab_server(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_query_pointer_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_pointer_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_pointer_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_pointer_reply_t;
}
unsafe extern "C" {
    pub fn xcb_timecoord_next(i: *mut xcb_timecoord_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_timecoord_end(i: xcb_timecoord_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        start: xcb_timestamp_t,
        stop: xcb_timestamp_t,
    ) -> xcb_get_motion_events_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        start: xcb_timestamp_t,
        stop: xcb_timestamp_t,
    ) -> xcb_get_motion_events_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events(
        R: *const xcb_get_motion_events_reply_t,
    ) -> *mut xcb_timecoord_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events_length(
        R: *const xcb_get_motion_events_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_events_iterator(
        R: *const xcb_get_motion_events_reply_t,
    ) -> xcb_timecoord_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_motion_events_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_motion_events_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_motion_events_reply_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
    ) -> xcb_translate_coordinates_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates_unchecked(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
    ) -> xcb_translate_coordinates_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_translate_coordinates_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_translate_coordinates_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_translate_coordinates_reply_t;
}
unsafe extern "C" {
    pub fn xcb_warp_pointer_checked(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
        src_width: u16,
        src_height: u16,
        dst_x: i16,
        dst_y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_warp_pointer(
        c: *mut xcb_connection_t,
        src_window: xcb_window_t,
        dst_window: xcb_window_t,
        src_x: i16,
        src_y: i16,
        src_width: u16,
        src_height: u16,
        dst_x: i16,
        dst_y: i16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_input_focus_checked(
        c: *mut xcb_connection_t,
        revert_to: u8,
        focus: xcb_window_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_input_focus(
        c: *mut xcb_connection_t,
        revert_to: u8,
        focus: xcb_window_t,
        time: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus(c: *mut xcb_connection_t) -> xcb_get_input_focus_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus_unchecked(c: *mut xcb_connection_t) -> xcb_get_input_focus_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_input_focus_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_input_focus_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_input_focus_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap(c: *mut xcb_connection_t) -> xcb_query_keymap_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap_unchecked(c: *mut xcb_connection_t) -> xcb_query_keymap_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_keymap_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_keymap_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_keymap_reply_t;
}
unsafe extern "C" {
    pub fn xcb_open_font_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_open_font_checked(
        c: *mut xcb_connection_t,
        fid: xcb_font_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_open_font(
        c: *mut xcb_connection_t,
        fid: xcb_font_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_open_font_name(R: *const xcb_open_font_request_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_open_font_name_length(R: *const xcb_open_font_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_open_font_name_end(R: *const xcb_open_font_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_close_font_checked(c: *mut xcb_connection_t, font: xcb_font_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_close_font(c: *mut xcb_connection_t, font: xcb_font_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fontprop_next(i: *mut xcb_fontprop_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_fontprop_end(i: xcb_fontprop_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_charinfo_next(i: *mut xcb_charinfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_charinfo_end(i: xcb_charinfo_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
    ) -> xcb_query_font_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_unchecked(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
    ) -> xcb_query_font_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties(R: *const xcb_query_font_reply_t) -> *mut xcb_fontprop_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties_length(
        R: *const xcb_query_font_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font_properties_iterator(
        R: *const xcb_query_font_reply_t,
    ) -> xcb_fontprop_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos(R: *const xcb_query_font_reply_t) -> *mut xcb_charinfo_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos_length(
        R: *const xcb_query_font_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_font_char_infos_iterator(
        R: *const xcb_query_font_reply_t,
    ) -> xcb_charinfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_font_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_font_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_font_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        string_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
        string_len: u32,
        string: *const xcb_char2b_t,
    ) -> xcb_query_text_extents_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_unchecked(
        c: *mut xcb_connection_t,
        font: xcb_fontable_t,
        string_len: u32,
        string: *const xcb_char2b_t,
    ) -> xcb_query_text_extents_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_text_extents_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_text_extents_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_text_extents_reply_t;
}
unsafe extern "C" {
    pub fn xcb_str_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_str_name(R: *const xcb_str_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_str_name_length(R: *const xcb_str_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_str_name_end(R: *const xcb_str_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_str_next(i: *mut xcb_str_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_str_end(i: xcb_str_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_unchecked(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_names_length(R: *const xcb_list_fonts_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_names_iterator(R: *const xcb_list_fonts_reply_t) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_fonts_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_fonts_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_with_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_unchecked(
        c: *mut xcb_connection_t,
        max_names: u16,
        pattern_len: u16,
        pattern: *const ::std::os::raw::c_char,
    ) -> xcb_list_fonts_with_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> *mut xcb_fontprop_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties_length(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_properties_iterator(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> xcb_fontprop_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name_length(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_name_end(
        R: *const xcb_list_fonts_with_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_fonts_with_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_fonts_with_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_fonts_with_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_checked(
        c: *mut xcb_connection_t,
        font_qty: u16,
        font: *const xcb_str_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path(
        c: *mut xcb_connection_t,
        font_qty: u16,
        font: *const xcb_str_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_font_length(
        R: *const xcb_set_font_path_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_font_path_font_iterator(
        R: *const xcb_set_font_path_request_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_font_path(c: *mut xcb_connection_t) -> xcb_get_font_path_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_unchecked(c: *mut xcb_connection_t) -> xcb_get_font_path_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_path_length(
        R: *const xcb_get_font_path_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_path_iterator(
        R: *const xcb_get_font_path_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_font_path_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_font_path_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_font_path_reply_t;
}
unsafe extern "C" {
    pub fn xcb_create_pixmap_checked(
        c: *mut xcb_connection_t,
        depth: u8,
        pid: xcb_pixmap_t,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_pixmap(
        c: *mut xcb_connection_t,
        depth: u8,
        pid: xcb_pixmap_t,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_pixmap_checked(
        c: *mut xcb_connection_t,
        pixmap: xcb_pixmap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_pixmap(c: *mut xcb_connection_t, pixmap: xcb_pixmap_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_create_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_create_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_create_gc_checked(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_aux_checked(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const xcb_create_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_aux(
        c: *mut xcb_connection_t,
        cid: xcb_gcontext_t,
        drawable: xcb_drawable_t,
        value_mask: u32,
        value_list: *const xcb_create_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_gc_value_list(
        R: *const xcb_create_gc_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_gc_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_gc_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_aux_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const xcb_change_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_aux(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        value_mask: u32,
        value_list: *const xcb_change_gc_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_gc_value_list(
        R: *const xcb_change_gc_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_copy_gc_checked(
        c: *mut xcb_connection_t,
        src_gc: xcb_gcontext_t,
        dst_gc: xcb_gcontext_t,
        value_mask: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_gc(
        c: *mut xcb_connection_t,
        src_gc: xcb_gcontext_t,
        dst_gc: xcb_gcontext_t,
        value_mask: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_checked(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        dash_offset: u16,
        dashes_len: u16,
        dashes: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes(
        c: *mut xcb_connection_t,
        gc: xcb_gcontext_t,
        dash_offset: u16,
        dashes_len: u16,
        dashes: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes(R: *const xcb_set_dashes_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes_length(
        R: *const xcb_set_dashes_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_dashes_dashes_end(R: *const xcb_set_dashes_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_checked(
        c: *mut xcb_connection_t,
        ordering: u8,
        gc: xcb_gcontext_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles(
        c: *mut xcb_connection_t,
        ordering: u8,
        gc: xcb_gcontext_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles_length(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_clip_rectangles_rectangles_iterator(
        R: *const xcb_set_clip_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_free_gc_checked(c: *mut xcb_connection_t, gc: xcb_gcontext_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_gc(c: *mut xcb_connection_t, gc: xcb_gcontext_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_clear_area_checked(
        c: *mut xcb_connection_t,
        exposures: u8,
        window: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_clear_area(
        c: *mut xcb_connection_t,
        exposures: u8,
        window: xcb_window_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_area_checked(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_area(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_plane_checked(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
        bit_plane: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_plane(
        c: *mut xcb_connection_t,
        src_drawable: xcb_drawable_t,
        dst_drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        src_x: i16,
        src_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
        bit_plane: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_point_checked(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points(R: *const xcb_poly_point_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points_length(
        R: *const xcb_poly_point_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_point_points_iterator(
        R: *const xcb_poly_point_request_t,
    ) -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_line_checked(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line(
        c: *mut xcb_connection_t,
        coordinate_mode: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points(R: *const xcb_poly_line_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points_length(R: *const xcb_poly_line_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_line_points_iterator(R: *const xcb_poly_line_request_t)
        -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_segment_next(i: *mut xcb_segment_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_segment_end(i: xcb_segment_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        segments_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        segments_len: u32,
        segments: *const xcb_segment_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        segments_len: u32,
        segments: *const xcb_segment_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments(R: *const xcb_poly_segment_request_t) -> *mut xcb_segment_t;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments_length(
        R: *const xcb_poly_segment_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_segment_segments_iterator(
        R: *const xcb_poly_segment_request_t,
    ) -> xcb_segment_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles(
        R: *const xcb_poly_rectangle_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles_length(
        R: *const xcb_poly_rectangle_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_rectangle_rectangles_iterator(
        R: *const xcb_poly_rectangle_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        arcs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs(R: *const xcb_poly_arc_request_t) -> *mut xcb_arc_t;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs_length(R: *const xcb_poly_arc_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_arc_arcs_iterator(R: *const xcb_poly_arc_request_t) -> xcb_arc_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        shape: u8,
        coordinate_mode: u8,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        shape: u8,
        coordinate_mode: u8,
        points_len: u32,
        points: *const xcb_point_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points(R: *const xcb_fill_poly_request_t) -> *mut xcb_point_t;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points_length(R: *const xcb_fill_poly_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_fill_poly_points_iterator(R: *const xcb_fill_poly_request_t)
        -> xcb_point_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles_length(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_rectangle_rectangles_iterator(
        R: *const xcb_poly_fill_rectangle_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        arcs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        arcs_len: u32,
        arcs: *const xcb_arc_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs(R: *const xcb_poly_fill_arc_request_t) -> *mut xcb_arc_t;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs_length(
        R: *const xcb_poly_fill_arc_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_fill_arc_arcs_iterator(
        R: *const xcb_poly_fill_arc_request_t,
    ) -> xcb_arc_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_put_image_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_put_image_checked(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        width: u16,
        height: u16,
        dst_x: i16,
        dst_y: i16,
        left_pad: u8,
        depth: u8,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_put_image(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        width: u16,
        height: u16,
        dst_x: i16,
        dst_y: i16,
        left_pad: u8,
        depth: u8,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_put_image_data(R: *const xcb_put_image_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_put_image_data_length(R: *const xcb_put_image_request_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_put_image_data_end(R: *const xcb_put_image_request_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_image(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        plane_mask: u32,
    ) -> xcb_get_image_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_unchecked(
        c: *mut xcb_connection_t,
        format: u8,
        drawable: xcb_drawable_t,
        x: i16,
        y: i16,
        width: u16,
        height: u16,
        plane_mask: u32,
    ) -> xcb_get_image_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_data(R: *const xcb_get_image_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_get_image_data_length(R: *const xcb_get_image_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_image_data_end(R: *const xcb_get_image_reply_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_image_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_image_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_image_reply_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items(R: *const xcb_poly_text_8_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items_length(
        R: *const xcb_poly_text_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_8_items_end(R: *const xcb_poly_text_8_request_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_checked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        items_len: u32,
        items: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items(R: *const xcb_poly_text_16_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items_length(
        R: *const xcb_poly_text_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_poly_text_16_items_end(
        R: *const xcb_poly_text_16_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_checked(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string(
        R: *const xcb_image_text_8_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string_length(
        R: *const xcb_image_text_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_8_string_end(
        R: *const xcb_image_text_8_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_checked(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const xcb_char2b_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16(
        c: *mut xcb_connection_t,
        string_len: u8,
        drawable: xcb_drawable_t,
        gc: xcb_gcontext_t,
        x: i16,
        y: i16,
        string: *const xcb_char2b_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string(R: *const xcb_image_text_16_request_t) -> *mut xcb_char2b_t;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string_length(
        R: *const xcb_image_text_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_image_text_16_string_iterator(
        R: *const xcb_image_text_16_request_t,
    ) -> xcb_char2b_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_create_colormap_checked(
        c: *mut xcb_connection_t,
        alloc: u8,
        mid: xcb_colormap_t,
        window: xcb_window_t,
        visual: xcb_visualid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_colormap(
        c: *mut xcb_connection_t,
        alloc: u8,
        mid: xcb_colormap_t,
        window: xcb_window_t,
        visual: xcb_visualid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colormap(c: *mut xcb_connection_t, cmap: xcb_colormap_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_colormap_and_free_checked(
        c: *mut xcb_connection_t,
        mid: xcb_colormap_t,
        src_cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_copy_colormap_and_free(
        c: *mut xcb_connection_t,
        mid: xcb_colormap_t,
        src_cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_install_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_install_colormap(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_uninstall_colormap_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_uninstall_colormap(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_installed_colormaps_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_list_installed_colormaps_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> *mut xcb_colormap_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps_length(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_cmaps_end(
        R: *const xcb_list_installed_colormaps_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_installed_colormaps_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_installed_colormaps_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_installed_colormaps_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        red: u16,
        green: u16,
        blue: u16,
    ) -> xcb_alloc_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        red: u16,
        green: u16,
        blue: u16,
    ) -> xcb_alloc_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_alloc_named_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_alloc_named_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_named_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_named_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_named_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        planes: u16,
    ) -> xcb_alloc_color_cells_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_unchecked(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        planes: u16,
    ) -> xcb_alloc_color_cells_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels(R: *const xcb_alloc_color_cells_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels_length(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_pixels_end(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks(R: *const xcb_alloc_color_cells_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks_length(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_masks_end(
        R: *const xcb_alloc_color_cells_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_cells_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_cells_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_cells_reply_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        reds: u16,
        greens: u16,
        blues: u16,
    ) -> xcb_alloc_color_planes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_unchecked(
        c: *mut xcb_connection_t,
        contiguous: u8,
        cmap: xcb_colormap_t,
        colors: u16,
        reds: u16,
        greens: u16,
        blues: u16,
    ) -> xcb_alloc_color_planes_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels(R: *const xcb_alloc_color_planes_reply_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels_length(
        R: *const xcb_alloc_color_planes_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_pixels_end(
        R: *const xcb_alloc_color_planes_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_alloc_color_planes_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_alloc_color_planes_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_alloc_color_planes_reply_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        pixels_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_free_colors_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        plane_mask: u32,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        plane_mask: u32,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels(R: *const xcb_free_colors_request_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels_length(
        R: *const xcb_free_colors_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_free_colors_pixels_end(
        R: *const xcb_free_colors_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_coloritem_next(i: *mut xcb_coloritem_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_coloritem_end(i: xcb_coloritem_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        items_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_colors_checked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        items_len: u32,
        items: *const xcb_coloritem_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        items_len: u32,
        items: *const xcb_coloritem_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items(R: *const xcb_store_colors_request_t) -> *mut xcb_coloritem_t;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items_length(
        R: *const xcb_store_colors_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_colors_items_iterator(
        R: *const xcb_store_colors_request_t,
    ) -> xcb_coloritem_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_checked(
        c: *mut xcb_connection_t,
        flags: u8,
        cmap: xcb_colormap_t,
        pixel: u32,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color(
        c: *mut xcb_connection_t,
        flags: u8,
        cmap: xcb_colormap_t,
        pixel: u32,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name(
        R: *const xcb_store_named_color_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name_length(
        R: *const xcb_store_named_color_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_store_named_color_name_end(
        R: *const xcb_store_named_color_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_rgb_next(i: *mut xcb_rgb_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_rgb_end(i: xcb_rgb_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        pixels_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_colors(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_query_colors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        pixels_len: u32,
        pixels: *const u32,
    ) -> xcb_query_colors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors(R: *const xcb_query_colors_reply_t) -> *mut xcb_rgb_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors_length(
        R: *const xcb_query_colors_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_colors_colors_iterator(
        R: *const xcb_query_colors_reply_t,
    ) -> xcb_rgb_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_query_colors_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_colors_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_colors_reply_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_lookup_color(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_lookup_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_unchecked(
        c: *mut xcb_connection_t,
        cmap: xcb_colormap_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_lookup_color_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_lookup_color_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_lookup_color_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_lookup_color_reply_t;
}
unsafe extern "C" {
    pub fn xcb_create_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_pixmap_t,
        mask: xcb_pixmap_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_pixmap_t,
        mask: xcb_pixmap_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_glyph_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source_font: xcb_font_t,
        mask_font: xcb_font_t,
        source_char: u16,
        mask_char: u16,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_create_glyph_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source_font: xcb_font_t,
        mask_font: xcb_font_t,
        source_char: u16,
        mask_char: u16,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_cursor_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_free_cursor(c: *mut xcb_connection_t, cursor: xcb_cursor_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_recolor_cursor_checked(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_recolor_cursor(
        c: *mut xcb_connection_t,
        cursor: xcb_cursor_t,
        fore_red: u16,
        fore_green: u16,
        fore_blue: u16,
        back_red: u16,
        back_green: u16,
        back_blue: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size(
        c: *mut xcb_connection_t,
        _class: u8,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_query_best_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size_unchecked(
        c: *mut xcb_connection_t,
        _class: u8,
        drawable: xcb_drawable_t,
        width: u16,
        height: u16,
    ) -> xcb_query_best_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_best_size_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_best_size_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_best_size_reply_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_query_extension(
        c: *mut xcb_connection_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_query_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_unchecked(
        c: *mut xcb_connection_t,
        name_len: u16,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_query_extension_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_query_extension_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_query_extension_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_query_extension_reply_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_extensions(c: *mut xcb_connection_t) -> xcb_list_extensions_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_unchecked(c: *mut xcb_connection_t) -> xcb_list_extensions_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_names_length(
        R: *const xcb_list_extensions_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_names_iterator(
        R: *const xcb_list_extensions_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_extensions_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_extensions_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_extensions_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_checked(
        c: *mut xcb_connection_t,
        keycode_count: u8,
        first_keycode: xcb_keycode_t,
        keysyms_per_keycode: u8,
        keysyms: *const xcb_keysym_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping(
        c: *mut xcb_connection_t,
        keycode_count: u8,
        first_keycode: xcb_keycode_t,
        keysyms_per_keycode: u8,
        keysyms: *const xcb_keysym_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> *mut xcb_keysym_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms_length(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_mapping_keysyms_end(
        R: *const xcb_change_keyboard_mapping_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping(
        c: *mut xcb_connection_t,
        first_keycode: xcb_keycode_t,
        count: u8,
    ) -> xcb_get_keyboard_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_unchecked(
        c: *mut xcb_connection_t,
        first_keycode: xcb_keycode_t,
        count: u8,
    ) -> xcb_get_keyboard_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> *mut xcb_keysym_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms_length(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_keysyms_end(
        R: *const xcb_get_keyboard_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_keyboard_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_keyboard_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_change_keyboard_control_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_change_keyboard_control_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_checked(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_aux_checked(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const xcb_change_keyboard_control_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_aux(
        c: *mut xcb_connection_t,
        value_mask: u32,
        value_list: *const xcb_change_keyboard_control_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_keyboard_control_value_list(
        R: *const xcb_change_keyboard_control_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control(c: *mut xcb_connection_t) -> xcb_get_keyboard_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_keyboard_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_keyboard_control_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_keyboard_control_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_keyboard_control_reply_t;
}
unsafe extern "C" {
    pub fn xcb_bell_checked(c: *mut xcb_connection_t, percent: i8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_bell(c: *mut xcb_connection_t, percent: i8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_pointer_control_checked(
        c: *mut xcb_connection_t,
        acceleration_numerator: i16,
        acceleration_denominator: i16,
        threshold: i16,
        do_acceleration: u8,
        do_threshold: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_pointer_control(
        c: *mut xcb_connection_t,
        acceleration_numerator: i16,
        acceleration_denominator: i16,
        threshold: i16,
        do_acceleration: u8,
        do_threshold: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control(c: *mut xcb_connection_t) -> xcb_get_pointer_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_pointer_control_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_control_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_pointer_control_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_pointer_control_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_screen_saver_checked(
        c: *mut xcb_connection_t,
        timeout: i16,
        interval: i16,
        prefer_blanking: u8,
        allow_exposures: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_screen_saver(
        c: *mut xcb_connection_t,
        timeout: i16,
        interval: i16,
        prefer_blanking: u8,
        allow_exposures: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver(c: *mut xcb_connection_t) -> xcb_get_screen_saver_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_screen_saver_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_screen_saver_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_screen_saver_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_screen_saver_reply_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_sizeof(_buffer: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_checked(
        c: *mut xcb_connection_t,
        mode: u8,
        family: u8,
        address_len: u16,
        address: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts(
        c: *mut xcb_connection_t,
        mode: u8,
        family: u8,
        address_len: u16,
        address: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address(R: *const xcb_change_hosts_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address_length(
        R: *const xcb_change_hosts_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_change_hosts_address_end(
        R: *const xcb_change_hosts_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_host_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_host_address(R: *const xcb_host_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_host_address_length(R: *const xcb_host_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_host_address_end(R: *const xcb_host_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_host_next(i: *mut xcb_host_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_host_end(i: xcb_host_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_sizeof(_buffer: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_hosts(c: *mut xcb_connection_t) -> xcb_list_hosts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_unchecked(c: *mut xcb_connection_t) -> xcb_list_hosts_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_hosts_length(R: *const xcb_list_hosts_reply_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_hosts_iterator(R: *const xcb_list_hosts_reply_t) -> xcb_host_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_list_hosts_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_list_hosts_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_list_hosts_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_access_control_checked(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_access_control(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_close_down_mode_checked(c: *mut xcb_connection_t, mode: u8)
        -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_close_down_mode(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_kill_client_checked(c: *mut xcb_connection_t, resource: u32) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_kill_client(c: *mut xcb_connection_t, resource: u32) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        atoms_len: u16,
        delta: i16,
        atoms: *const xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        atoms_len: u16,
        delta: i16,
        atoms: *const xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms(
        R: *const xcb_rotate_properties_request_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms_length(
        R: *const xcb_rotate_properties_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_rotate_properties_atoms_end(
        R: *const xcb_rotate_properties_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_force_screen_saver_checked(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_force_screen_saver(c: *mut xcb_connection_t, mode: u8) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping(
        c: *mut xcb_connection_t,
        map_len: u8,
        map: *const u8,
    ) -> xcb_set_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_unchecked(
        c: *mut xcb_connection_t,
        map_len: u8,
        map: *const u8,
    ) -> xcb_set_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_pointer_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_set_pointer_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_set_pointer_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping(c: *mut xcb_connection_t) -> xcb_get_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_pointer_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map(R: *const xcb_get_pointer_mapping_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map_length(
        R: *const xcb_get_pointer_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_map_end(
        R: *const xcb_get_pointer_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_pointer_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_pointer_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_pointer_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping(
        c: *mut xcb_connection_t,
        keycodes_per_modifier: u8,
        keycodes: *const xcb_keycode_t,
    ) -> xcb_set_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_unchecked(
        c: *mut xcb_connection_t,
        keycodes_per_modifier: u8,
        keycodes: *const xcb_keycode_t,
    ) -> xcb_set_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_set_modifier_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_set_modifier_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_set_modifier_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping(c: *mut xcb_connection_t) -> xcb_get_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_get_modifier_mapping_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> *mut xcb_keycode_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes_length(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_keycodes_end(
        R: *const xcb_get_modifier_mapping_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_get_modifier_mapping_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_modifier_mapping_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_get_modifier_mapping_reply_t;
}
unsafe extern "C" {
    pub fn xcb_no_operation_checked(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_no_operation(c: *mut xcb_connection_t) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_auth_info_t {
    pub namelen: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub datalen: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_auth_info_t"][::std::mem::size_of::<xcb_auth_info_t>() - 32usize];
    ["Alignment of xcb_auth_info_t"][::std::mem::align_of::<xcb_auth_info_t>() - 8usize];
    ["Offset of field: xcb_auth_info_t::namelen"]
        [::std::mem::offset_of!(xcb_auth_info_t, namelen) - 0usize];
    ["Offset of field: xcb_auth_info_t::name"]
        [::std::mem::offset_of!(xcb_auth_info_t, name) - 8usize];
    ["Offset of field: xcb_auth_info_t::datalen"]
        [::std::mem::offset_of!(xcb_auth_info_t, datalen) - 16usize];
    ["Offset of field: xcb_auth_info_t::data"]
        [::std::mem::offset_of!(xcb_auth_info_t, data) - 24usize];
};
unsafe extern "C" {
    pub fn xcb_flush(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_get_maximum_request_length(c: *mut xcb_connection_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_prefetch_maximum_request_length(c: *mut xcb_connection_t);
}
unsafe extern "C" {
    pub fn xcb_wait_for_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_poll_for_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_poll_for_queued_event(c: *mut xcb_connection_t) -> *mut xcb_generic_event_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_special_event {
    _unused: [u8; 0],
}
pub type xcb_special_event_t = xcb_special_event;
unsafe extern "C" {
    pub fn xcb_poll_for_special_event(
        c: *mut xcb_connection_t,
        se: *mut xcb_special_event_t,
    ) -> *mut xcb_generic_event_t;
}
unsafe extern "C" {
    pub fn xcb_wait_for_special_event(
        c: *mut xcb_connection_t,
        se: *mut xcb_special_event_t,
    ) -> *mut xcb_generic_event_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_extension_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn xcb_register_for_special_xge(
        c: *mut xcb_connection_t,
        ext: *mut xcb_extension_t,
        eid: u32,
        stamp: *mut u32,
    ) -> *mut xcb_special_event_t;
}
unsafe extern "C" {
    pub fn xcb_unregister_for_special_event(c: *mut xcb_connection_t, se: *mut xcb_special_event_t);
}
unsafe extern "C" {
    pub fn xcb_request_check(
        c: *mut xcb_connection_t,
        cookie: xcb_void_cookie_t,
    ) -> *mut xcb_generic_error_t;
}
unsafe extern "C" {
    pub fn xcb_discard_reply(c: *mut xcb_connection_t, sequence: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn xcb_discard_reply64(c: *mut xcb_connection_t, sequence: u64);
}
unsafe extern "C" {
    pub fn xcb_get_extension_data(
        c: *mut xcb_connection_t,
        ext: *mut xcb_extension_t,
    ) -> *const xcb_query_extension_reply_t;
}
unsafe extern "C" {
    pub fn xcb_prefetch_extension_data(c: *mut xcb_connection_t, ext: *mut xcb_extension_t);
}
unsafe extern "C" {
    pub fn xcb_get_setup(c: *mut xcb_connection_t) -> *const xcb_setup_t;
}
unsafe extern "C" {
    pub fn xcb_get_file_descriptor(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connection_has_error(c: *mut xcb_connection_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connect_to_fd(
        fd: ::std::os::raw::c_int,
        auth_info: *mut xcb_auth_info_t,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_disconnect(c: *mut xcb_connection_t);
}
unsafe extern "C" {
    pub fn xcb_parse_display(
        name: *const ::std::os::raw::c_char,
        host: *mut *mut ::std::os::raw::c_char,
        display: *mut ::std::os::raw::c_int,
        screen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_connect(
        displayname: *const ::std::os::raw::c_char,
        screenp: *mut ::std::os::raw::c_int,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_connect_to_display_with_auth_info(
        display: *const ::std::os::raw::c_char,
        auth: *mut xcb_auth_info_t,
        screen: *mut ::std::os::raw::c_int,
    ) -> *mut xcb_connection_t;
}
unsafe extern "C" {
    pub fn xcb_generate_id(c: *mut xcb_connection_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_total_read(c: *mut xcb_connection_t) -> u64;
}
unsafe extern "C" {
    pub fn xcb_total_written(c: *mut xcb_connection_t) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_text_property_reply_t {
    pub _reply: *mut xcb_get_property_reply_t,
    pub encoding: xcb_atom_t,
    pub name_len: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub format: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_text_property_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_text_property_reply_t>() - 32usize];
    ["Alignment of xcb_icccm_get_text_property_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_text_property_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, _reply) - 0usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::encoding"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, encoding) - 8usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, name_len) - 12usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::name"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, name) - 16usize];
    ["Offset of field: xcb_icccm_get_text_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_icccm_get_text_property_reply_t, format) - 24usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_text_property_reply_wipe(prop: *mut xcb_icccm_get_text_property_reply_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_name_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_icon_name_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_icon_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_icon_name_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_colormap_windows_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
        list_len: u32,
        list: *const xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_colormap_windows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
        list_len: u32,
        list: *const xcb_window_t,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_colormap_windows_reply_t {
    pub windows_len: u32,
    pub windows: *mut xcb_window_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_colormap_windows_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_colormap_windows_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_colormap_windows_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_colormap_windows_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::windows_len"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, windows_len) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::windows"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, windows) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_colormap_windows_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_colormap_windows_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_colormap_windows_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_from_reply(
        reply: *mut xcb_get_property_reply_t,
        colormap_windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_colormap_windows_reply_wipe(
        windows: *mut xcb_icccm_get_wm_colormap_windows_reply_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_client_machine_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_client_machine(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        encoding: xcb_atom_t,
        format: u8,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_client_machine_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_text_property_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_class_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        class_len: u32,
        class_name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_class(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        class_len: u32,
        class_name: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_class_reply_t {
    pub instance_name: *mut ::std::os::raw::c_char,
    pub class_name: *mut ::std::os::raw::c_char,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_class_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_class_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_class_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_class_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::instance_name"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, instance_name) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::class_name"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, class_name) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_class_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_class_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_from_reply(
        prop: *mut xcb_icccm_get_wm_class_reply_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_icccm_get_wm_class_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_class_reply_wipe(prop: *mut xcb_icccm_get_wm_class_reply_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_transient_for_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        transient_for_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_transient_for(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        transient_for_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_from_reply(
        prop: *mut xcb_window_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_transient_for_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        prop: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_US_POSITION:
    xcb_icccm_size_hints_flags_t = 1;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_US_SIZE: xcb_icccm_size_hints_flags_t =
    2;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_POSITION:
    xcb_icccm_size_hints_flags_t = 4;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_SIZE: xcb_icccm_size_hints_flags_t = 8;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_MIN_SIZE:
    xcb_icccm_size_hints_flags_t = 16;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_MAX_SIZE:
    xcb_icccm_size_hints_flags_t = 32;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_RESIZE_INC:
    xcb_icccm_size_hints_flags_t = 64;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_ASPECT: xcb_icccm_size_hints_flags_t =
    128;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_BASE_SIZE: xcb_icccm_size_hints_flags_t =
    256;
pub const xcb_icccm_size_hints_flags_t_XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY:
    xcb_icccm_size_hints_flags_t = 512;
pub type xcb_icccm_size_hints_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_size_hints_t {
    pub flags: u32,
    pub x: i32,
    pub y: i32,
    pub width: i32,
    pub height: i32,
    pub min_width: i32,
    pub min_height: i32,
    pub max_width: i32,
    pub max_height: i32,
    pub width_inc: i32,
    pub height_inc: i32,
    pub min_aspect_num: i32,
    pub min_aspect_den: i32,
    pub max_aspect_num: i32,
    pub max_aspect_den: i32,
    pub base_width: i32,
    pub base_height: i32,
    pub win_gravity: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_size_hints_t"][::std::mem::size_of::<xcb_size_hints_t>() - 72usize];
    ["Alignment of xcb_size_hints_t"][::std::mem::align_of::<xcb_size_hints_t>() - 4usize];
    ["Offset of field: xcb_size_hints_t::flags"]
        [::std::mem::offset_of!(xcb_size_hints_t, flags) - 0usize];
    ["Offset of field: xcb_size_hints_t::x"][::std::mem::offset_of!(xcb_size_hints_t, x) - 4usize];
    ["Offset of field: xcb_size_hints_t::y"][::std::mem::offset_of!(xcb_size_hints_t, y) - 8usize];
    ["Offset of field: xcb_size_hints_t::width"]
        [::std::mem::offset_of!(xcb_size_hints_t, width) - 12usize];
    ["Offset of field: xcb_size_hints_t::height"]
        [::std::mem::offset_of!(xcb_size_hints_t, height) - 16usize];
    ["Offset of field: xcb_size_hints_t::min_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_width) - 20usize];
    ["Offset of field: xcb_size_hints_t::min_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_height) - 24usize];
    ["Offset of field: xcb_size_hints_t::max_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_width) - 28usize];
    ["Offset of field: xcb_size_hints_t::max_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_height) - 32usize];
    ["Offset of field: xcb_size_hints_t::width_inc"]
        [::std::mem::offset_of!(xcb_size_hints_t, width_inc) - 36usize];
    ["Offset of field: xcb_size_hints_t::height_inc"]
        [::std::mem::offset_of!(xcb_size_hints_t, height_inc) - 40usize];
    ["Offset of field: xcb_size_hints_t::min_aspect_num"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_aspect_num) - 44usize];
    ["Offset of field: xcb_size_hints_t::min_aspect_den"]
        [::std::mem::offset_of!(xcb_size_hints_t, min_aspect_den) - 48usize];
    ["Offset of field: xcb_size_hints_t::max_aspect_num"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_aspect_num) - 52usize];
    ["Offset of field: xcb_size_hints_t::max_aspect_den"]
        [::std::mem::offset_of!(xcb_size_hints_t, max_aspect_den) - 56usize];
    ["Offset of field: xcb_size_hints_t::base_width"]
        [::std::mem::offset_of!(xcb_size_hints_t, base_width) - 60usize];
    ["Offset of field: xcb_size_hints_t::base_height"]
        [::std::mem::offset_of!(xcb_size_hints_t, base_height) - 64usize];
    ["Offset of field: xcb_size_hints_t::win_gravity"]
        [::std::mem::offset_of!(xcb_size_hints_t, win_gravity) - 68usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_position(
        hints: *mut xcb_size_hints_t,
        user_specified: ::std::os::raw::c_int,
        x: i32,
        y: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_size(
        hints: *mut xcb_size_hints_t,
        user_specified: ::std::os::raw::c_int,
        width: i32,
        height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_min_size(
        hints: *mut xcb_size_hints_t,
        min_width: i32,
        min_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_max_size(
        hints: *mut xcb_size_hints_t,
        max_width: i32,
        max_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_resize_inc(
        hints: *mut xcb_size_hints_t,
        width_inc: i32,
        height_inc: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_aspect(
        hints: *mut xcb_size_hints_t,
        min_aspect_num: i32,
        min_aspect_den: i32,
        max_aspect_num: i32,
        max_aspect_den: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_base_size(
        hints: *mut xcb_size_hints_t,
        base_width: i32,
        base_height: i32,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_size_hints_set_win_gravity(
        hints: *mut xcb_size_hints_t,
        win_gravity: xcb_gravity_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_size_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_size_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        property: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_size_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_normal_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_normal_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_size_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_size_hints_from_reply(
        hints: *mut xcb_size_hints_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_normal_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_size_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_wm_hints_t {
    pub flags: i32,
    pub input: u32,
    pub initial_state: i32,
    pub icon_pixmap: xcb_pixmap_t,
    pub icon_window: xcb_window_t,
    pub icon_x: i32,
    pub icon_y: i32,
    pub icon_mask: xcb_pixmap_t,
    pub window_group: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_wm_hints_t"][::std::mem::size_of::<xcb_icccm_wm_hints_t>() - 36usize];
    ["Alignment of xcb_icccm_wm_hints_t"][::std::mem::align_of::<xcb_icccm_wm_hints_t>() - 4usize];
    ["Offset of field: xcb_icccm_wm_hints_t::flags"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, flags) - 0usize];
    ["Offset of field: xcb_icccm_wm_hints_t::input"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, input) - 4usize];
    ["Offset of field: xcb_icccm_wm_hints_t::initial_state"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, initial_state) - 8usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_pixmap"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_pixmap) - 12usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_window"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_window) - 16usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_x"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_x) - 20usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_y"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_y) - 24usize];
    ["Offset of field: xcb_icccm_wm_hints_t::icon_mask"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, icon_mask) - 28usize];
    ["Offset of field: xcb_icccm_wm_hints_t::window_group"]
        [::std::mem::offset_of!(xcb_icccm_wm_hints_t, window_group) - 32usize];
};
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_WITHDRAWN: xcb_icccm_wm_state_t = 0;
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_NORMAL: xcb_icccm_wm_state_t = 1;
pub const xcb_icccm_wm_state_t_XCB_ICCCM_WM_STATE_ICONIC: xcb_icccm_wm_state_t = 3;
pub type xcb_icccm_wm_state_t = ::std::os::raw::c_uint;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_INPUT: xcb_icccm_wm_t = 1;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_STATE: xcb_icccm_wm_t = 2;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_PIXMAP: xcb_icccm_wm_t = 4;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_WINDOW: xcb_icccm_wm_t = 8;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_POSITION: xcb_icccm_wm_t = 16;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_ICON_MASK: xcb_icccm_wm_t = 32;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_WINDOW_GROUP: xcb_icccm_wm_t = 64;
pub const xcb_icccm_wm_t_XCB_ICCCM_WM_HINT_X_URGENCY: xcb_icccm_wm_t = 256;
pub type xcb_icccm_wm_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_get_urgency(hints: *mut xcb_icccm_wm_hints_t) -> u32;
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_input(hints: *mut xcb_icccm_wm_hints_t, input: u8);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_iconic(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_normal(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_withdrawn(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_none(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_pixmap(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_pixmap: xcb_pixmap_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_mask(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_mask: xcb_pixmap_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_icon_window(
        hints: *mut xcb_icccm_wm_hints_t,
        icon_window: xcb_window_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_window_group(
        hints: *mut xcb_icccm_wm_hints_t,
        window_group: xcb_window_t,
    );
}
unsafe extern "C" {
    pub fn xcb_icccm_wm_hints_set_urgency(hints: *mut xcb_icccm_wm_hints_t);
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_hints_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_icccm_wm_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        hints: *mut xcb_icccm_wm_hints_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_from_reply(
        hints: *mut xcb_icccm_wm_hints_t,
        reply: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_hints_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        hints: *mut xcb_icccm_wm_hints_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_protocols_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocols: xcb_atom_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_set_wm_protocols(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocols: xcb_atom_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_icccm_get_wm_protocols_reply_t {
    pub atoms_len: u32,
    pub atoms: *mut xcb_atom_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_icccm_get_wm_protocols_reply_t"]
        [::std::mem::size_of::<xcb_icccm_get_wm_protocols_reply_t>() - 24usize];
    ["Alignment of xcb_icccm_get_wm_protocols_reply_t"]
        [::std::mem::align_of::<xcb_icccm_get_wm_protocols_reply_t>() - 8usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, atoms_len) - 0usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::atoms"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, atoms) - 8usize];
    ["Offset of field: xcb_icccm_get_wm_protocols_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_icccm_get_wm_protocols_reply_t, _reply) - 16usize];
};
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocol_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        wm_protocol_atom: xcb_atom_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_from_reply(
        reply: *mut xcb_get_property_reply_t,
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_get_property_cookie_t,
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_icccm_get_wm_protocols_reply_wipe(
        protocols: *mut xcb_icccm_get_wm_protocols_reply_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_cursor_context_t {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn xcb_cursor_context_new(
        conn: *mut xcb_connection_t,
        screen: *mut xcb_screen_t,
        ctx: *mut *mut xcb_cursor_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_cursor_load_cursor(
        ctx: *mut xcb_cursor_context_t,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_cursor_t;
}
unsafe extern "C" {
    pub fn xcb_cursor_context_free(ctx: *mut xcb_cursor_context_t);
}
pub type wchar_t = ::std::os::raw::c_int;
pub type __cfloat128 = __BindgenComplex<u128>;
pub type _Float128 = u128;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> __uint32_t;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_connection_t {
    pub connection: *mut xcb_connection_t,
    pub screens: *mut *mut xcb_screen_t,
    pub nb_screens: ::std::os::raw::c_int,
    pub _NET_WM_CM_Sn: *mut xcb_atom_t,
    pub _NET_SUPPORTED: xcb_atom_t,
    pub _NET_CLIENT_LIST: xcb_atom_t,
    pub _NET_CLIENT_LIST_STACKING: xcb_atom_t,
    pub _NET_NUMBER_OF_DESKTOPS: xcb_atom_t,
    pub _NET_DESKTOP_GEOMETRY: xcb_atom_t,
    pub _NET_DESKTOP_VIEWPORT: xcb_atom_t,
    pub _NET_CURRENT_DESKTOP: xcb_atom_t,
    pub _NET_DESKTOP_NAMES: xcb_atom_t,
    pub _NET_ACTIVE_WINDOW: xcb_atom_t,
    pub _NET_WORKAREA: xcb_atom_t,
    pub _NET_SUPPORTING_WM_CHECK: xcb_atom_t,
    pub _NET_VIRTUAL_ROOTS: xcb_atom_t,
    pub _NET_DESKTOP_LAYOUT: xcb_atom_t,
    pub _NET_SHOWING_DESKTOP: xcb_atom_t,
    pub _NET_CLOSE_WINDOW: xcb_atom_t,
    pub _NET_MOVERESIZE_WINDOW: xcb_atom_t,
    pub _NET_WM_MOVERESIZE: xcb_atom_t,
    pub _NET_RESTACK_WINDOW: xcb_atom_t,
    pub _NET_REQUEST_FRAME_EXTENTS: xcb_atom_t,
    pub _NET_WM_NAME: xcb_atom_t,
    pub _NET_WM_VISIBLE_NAME: xcb_atom_t,
    pub _NET_WM_ICON_NAME: xcb_atom_t,
    pub _NET_WM_VISIBLE_ICON_NAME: xcb_atom_t,
    pub _NET_WM_DESKTOP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE: xcb_atom_t,
    pub _NET_WM_STATE: xcb_atom_t,
    pub _NET_WM_ALLOWED_ACTIONS: xcb_atom_t,
    pub _NET_WM_STRUT: xcb_atom_t,
    pub _NET_WM_STRUT_PARTIAL: xcb_atom_t,
    pub _NET_WM_ICON_GEOMETRY: xcb_atom_t,
    pub _NET_WM_ICON: xcb_atom_t,
    pub _NET_WM_PID: xcb_atom_t,
    pub _NET_WM_HANDLED_ICONS: xcb_atom_t,
    pub _NET_WM_USER_TIME: xcb_atom_t,
    pub _NET_WM_USER_TIME_WINDOW: xcb_atom_t,
    pub _NET_FRAME_EXTENTS: xcb_atom_t,
    pub _NET_WM_PING: xcb_atom_t,
    pub _NET_WM_SYNC_REQUEST: xcb_atom_t,
    pub _NET_WM_SYNC_REQUEST_COUNTER: xcb_atom_t,
    pub _NET_WM_FULLSCREEN_MONITORS: xcb_atom_t,
    pub _NET_WM_FULL_PLACEMENT: xcb_atom_t,
    pub UTF8_STRING: xcb_atom_t,
    pub WM_PROTOCOLS: xcb_atom_t,
    pub MANAGER: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DESKTOP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DOCK: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_TOOLBAR: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_UTILITY: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_SPLASH: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DIALOG: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DROPDOWN_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_POPUP_MENU: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_TOOLTIP: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_NOTIFICATION: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_COMBO: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_DND: xcb_atom_t,
    pub _NET_WM_WINDOW_TYPE_NORMAL: xcb_atom_t,
    pub _NET_WM_STATE_MODAL: xcb_atom_t,
    pub _NET_WM_STATE_STICKY: xcb_atom_t,
    pub _NET_WM_STATE_MAXIMIZED_VERT: xcb_atom_t,
    pub _NET_WM_STATE_MAXIMIZED_HORZ: xcb_atom_t,
    pub _NET_WM_STATE_SHADED: xcb_atom_t,
    pub _NET_WM_STATE_SKIP_TASKBAR: xcb_atom_t,
    pub _NET_WM_STATE_SKIP_PAGER: xcb_atom_t,
    pub _NET_WM_STATE_HIDDEN: xcb_atom_t,
    pub _NET_WM_STATE_FULLSCREEN: xcb_atom_t,
    pub _NET_WM_STATE_ABOVE: xcb_atom_t,
    pub _NET_WM_STATE_BELOW: xcb_atom_t,
    pub _NET_WM_STATE_DEMANDS_ATTENTION: xcb_atom_t,
    pub _NET_WM_ACTION_MOVE: xcb_atom_t,
    pub _NET_WM_ACTION_RESIZE: xcb_atom_t,
    pub _NET_WM_ACTION_MINIMIZE: xcb_atom_t,
    pub _NET_WM_ACTION_SHADE: xcb_atom_t,
    pub _NET_WM_ACTION_STICK: xcb_atom_t,
    pub _NET_WM_ACTION_MAXIMIZE_HORZ: xcb_atom_t,
    pub _NET_WM_ACTION_MAXIMIZE_VERT: xcb_atom_t,
    pub _NET_WM_ACTION_FULLSCREEN: xcb_atom_t,
    pub _NET_WM_ACTION_CHANGE_DESKTOP: xcb_atom_t,
    pub _NET_WM_ACTION_CLOSE: xcb_atom_t,
    pub _NET_WM_ACTION_ABOVE: xcb_atom_t,
    pub _NET_WM_ACTION_BELOW: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_connection_t"][::std::mem::size_of::<xcb_ewmh_connection_t>() - 360usize];
    ["Alignment of xcb_ewmh_connection_t"]
        [::std::mem::align_of::<xcb_ewmh_connection_t>() - 8usize];
    ["Offset of field: xcb_ewmh_connection_t::connection"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, connection) - 0usize];
    ["Offset of field: xcb_ewmh_connection_t::screens"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, screens) - 8usize];
    ["Offset of field: xcb_ewmh_connection_t::nb_screens"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, nb_screens) - 16usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_CM_Sn"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_CM_Sn) - 24usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SUPPORTED"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SUPPORTED) - 32usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLIENT_LIST"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLIENT_LIST) - 36usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLIENT_LIST_STACKING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLIENT_LIST_STACKING) - 40usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_NUMBER_OF_DESKTOPS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_NUMBER_OF_DESKTOPS) - 44usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_GEOMETRY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_GEOMETRY) - 48usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_VIEWPORT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_VIEWPORT) - 52usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CURRENT_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CURRENT_DESKTOP) - 56usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_NAMES"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_NAMES) - 60usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_ACTIVE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_ACTIVE_WINDOW) - 64usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WORKAREA"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WORKAREA) - 68usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SUPPORTING_WM_CHECK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SUPPORTING_WM_CHECK) - 72usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_VIRTUAL_ROOTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_VIRTUAL_ROOTS) - 76usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_DESKTOP_LAYOUT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_DESKTOP_LAYOUT) - 80usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_SHOWING_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_SHOWING_DESKTOP) - 84usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_CLOSE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_CLOSE_WINDOW) - 88usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_MOVERESIZE_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_MOVERESIZE_WINDOW) - 92usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_MOVERESIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_MOVERESIZE) - 96usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_RESTACK_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_RESTACK_WINDOW) - 100usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_REQUEST_FRAME_EXTENTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_REQUEST_FRAME_EXTENTS) - 104usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_NAME) - 108usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_VISIBLE_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_VISIBLE_NAME) - 112usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON_NAME) - 116usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_VISIBLE_ICON_NAME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_VISIBLE_ICON_NAME) - 120usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_DESKTOP) - 124usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE) - 128usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE) - 132usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ALLOWED_ACTIONS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ALLOWED_ACTIONS) - 136usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STRUT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STRUT) - 140usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STRUT_PARTIAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STRUT_PARTIAL) - 144usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON_GEOMETRY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON_GEOMETRY) - 148usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ICON"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ICON) - 152usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_PID"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_PID) - 156usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_HANDLED_ICONS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_HANDLED_ICONS) - 160usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_USER_TIME"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_USER_TIME) - 164usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_USER_TIME_WINDOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_USER_TIME_WINDOW) - 168usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_FRAME_EXTENTS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_FRAME_EXTENTS) - 172usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_PING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_PING) - 176usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_SYNC_REQUEST"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_SYNC_REQUEST) - 180usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_SYNC_REQUEST_COUNTER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_SYNC_REQUEST_COUNTER) - 184usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_FULLSCREEN_MONITORS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_FULLSCREEN_MONITORS) - 188usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_FULL_PLACEMENT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_FULL_PLACEMENT) - 192usize];
    ["Offset of field: xcb_ewmh_connection_t::UTF8_STRING"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, UTF8_STRING) - 196usize];
    ["Offset of field: xcb_ewmh_connection_t::WM_PROTOCOLS"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, WM_PROTOCOLS) - 200usize];
    ["Offset of field: xcb_ewmh_connection_t::MANAGER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, MANAGER) - 204usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DESKTOP) - 208usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DOCK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DOCK) - 212usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_TOOLBAR"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_TOOLBAR) - 216usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_MENU"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_MENU) - 220usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_UTILITY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_UTILITY) - 224usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_SPLASH"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_SPLASH) - 228usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DIALOG"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DIALOG) - 232usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DROPDOWN_MENU"][::std::mem::offset_of!(
        xcb_ewmh_connection_t,
        _NET_WM_WINDOW_TYPE_DROPDOWN_MENU
    ) - 236usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_POPUP_MENU"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_POPUP_MENU) - 240usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_TOOLTIP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_TOOLTIP) - 244usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_NOTIFICATION"][::std::mem::offset_of!(
        xcb_ewmh_connection_t,
        _NET_WM_WINDOW_TYPE_NOTIFICATION
    ) - 248usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_COMBO"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_COMBO) - 252usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_DND"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_DND) - 256usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_WINDOW_TYPE_NORMAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_WINDOW_TYPE_NORMAL) - 260usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MODAL"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MODAL) - 264usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_STICKY"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_STICKY) - 268usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MAXIMIZED_VERT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MAXIMIZED_VERT) - 272usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_MAXIMIZED_HORZ"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_MAXIMIZED_HORZ) - 276usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SHADED"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SHADED) - 280usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SKIP_TASKBAR"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SKIP_TASKBAR) - 284usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_SKIP_PAGER"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_SKIP_PAGER) - 288usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_HIDDEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_HIDDEN) - 292usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_FULLSCREEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_FULLSCREEN) - 296usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_ABOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_ABOVE) - 300usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_BELOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_BELOW) - 304usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_STATE_DEMANDS_ATTENTION"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_STATE_DEMANDS_ATTENTION) - 308usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MOVE) - 312usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_RESIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_RESIZE) - 316usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MINIMIZE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MINIMIZE) - 320usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_SHADE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_SHADE) - 324usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_STICK"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_STICK) - 328usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MAXIMIZE_HORZ"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MAXIMIZE_HORZ) - 332usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_MAXIMIZE_VERT"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_MAXIMIZE_VERT) - 336usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_FULLSCREEN"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_FULLSCREEN) - 340usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_CHANGE_DESKTOP"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_CHANGE_DESKTOP) - 344usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_CLOSE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_CLOSE) - 348usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_ABOVE"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_ABOVE) - 352usize];
    ["Offset of field: xcb_ewmh_connection_t::_NET_WM_ACTION_BELOW"]
        [::std::mem::offset_of!(xcb_ewmh_connection_t, _NET_WM_ACTION_BELOW) - 356usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_atoms_reply_t {
    pub atoms_len: u32,
    pub atoms: *mut xcb_atom_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_atoms_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_atoms_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_atoms_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_atoms_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::atoms_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, atoms_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::atoms"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, atoms) - 8usize];
    ["Offset of field: xcb_ewmh_get_atoms_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_atoms_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_windows_reply_t {
    pub windows_len: u32,
    pub windows: *mut xcb_window_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_windows_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_windows_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_windows_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_windows_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::windows_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, windows_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::windows"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, windows) - 8usize];
    ["Offset of field: xcb_ewmh_get_windows_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_windows_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_utf8_strings_reply_t {
    pub strings_len: u32,
    pub strings: *mut ::std::os::raw::c_char,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_utf8_strings_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_utf8_strings_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_utf8_strings_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_utf8_strings_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::strings_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, strings_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::strings"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, strings) - 8usize];
    ["Offset of field: xcb_ewmh_get_utf8_strings_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_utf8_strings_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_coordinates_t {
    pub x: u32,
    pub y: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_coordinates_t"][::std::mem::size_of::<xcb_ewmh_coordinates_t>() - 8usize];
    ["Alignment of xcb_ewmh_coordinates_t"]
        [::std::mem::align_of::<xcb_ewmh_coordinates_t>() - 4usize];
    ["Offset of field: xcb_ewmh_coordinates_t::x"]
        [::std::mem::offset_of!(xcb_ewmh_coordinates_t, x) - 0usize];
    ["Offset of field: xcb_ewmh_coordinates_t::y"]
        [::std::mem::offset_of!(xcb_ewmh_coordinates_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_desktop_viewport_reply_t {
    pub desktop_viewport_len: u32,
    pub desktop_viewport: *mut xcb_ewmh_coordinates_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_desktop_viewport_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_desktop_viewport_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_desktop_viewport_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_desktop_viewport_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::desktop_viewport_len"][::std::mem::offset_of!(
        xcb_ewmh_get_desktop_viewport_reply_t,
        desktop_viewport_len
    ) - 0usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::desktop_viewport"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_viewport_reply_t, desktop_viewport) - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_viewport_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_viewport_reply_t, _reply) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_geometry_t {
    pub x: u32,
    pub y: u32,
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_geometry_t"][::std::mem::size_of::<xcb_ewmh_geometry_t>() - 16usize];
    ["Alignment of xcb_ewmh_geometry_t"][::std::mem::align_of::<xcb_ewmh_geometry_t>() - 4usize];
    ["Offset of field: xcb_ewmh_geometry_t::x"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, x) - 0usize];
    ["Offset of field: xcb_ewmh_geometry_t::y"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, y) - 4usize];
    ["Offset of field: xcb_ewmh_geometry_t::width"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, width) - 8usize];
    ["Offset of field: xcb_ewmh_geometry_t::height"]
        [::std::mem::offset_of!(xcb_ewmh_geometry_t, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_workarea_reply_t {
    pub workarea_len: u32,
    pub workarea: *mut xcb_ewmh_geometry_t,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_workarea_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_workarea_reply_t>() - 24usize];
    ["Alignment of xcb_ewmh_get_workarea_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_workarea_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::workarea_len"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, workarea_len) - 0usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::workarea"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, workarea) - 8usize];
    ["Offset of field: xcb_ewmh_get_workarea_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_workarea_reply_t, _reply) - 16usize];
};
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_NONE:
    xcb_ewmh_client_source_type_t = 0;
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_NORMAL:
    xcb_ewmh_client_source_type_t = 1;
pub const xcb_ewmh_client_source_type_t_XCB_EWMH_CLIENT_SOURCE_TYPE_OTHER:
    xcb_ewmh_client_source_type_t = 2;
pub type xcb_ewmh_client_source_type_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_desktop_layout_orientation_t_XCB_EWMH_WM_ORIENTATION_HORZ:
    xcb_ewmh_desktop_layout_orientation_t = 0;
pub const xcb_ewmh_desktop_layout_orientation_t_XCB_EWMH_WM_ORIENTATION_VERT:
    xcb_ewmh_desktop_layout_orientation_t = 1;
pub type xcb_ewmh_desktop_layout_orientation_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_TOPLEFT:
    xcb_ewmh_desktop_layout_starting_corner_t = 0;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_TOPRIGHT:
    xcb_ewmh_desktop_layout_starting_corner_t = 1;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_BOTTOMRIGHT:
    xcb_ewmh_desktop_layout_starting_corner_t = 2;
pub const xcb_ewmh_desktop_layout_starting_corner_t_XCB_EWMH_WM_BOTTOMLEFT:
    xcb_ewmh_desktop_layout_starting_corner_t = 3;
pub type xcb_ewmh_desktop_layout_starting_corner_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_desktop_layout_reply_t {
    pub orientation: u32,
    pub columns: u32,
    pub rows: u32,
    pub starting_corner: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_desktop_layout_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_desktop_layout_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_desktop_layout_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_desktop_layout_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::orientation"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, orientation) - 0usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::columns"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, columns) - 4usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::rows"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, rows) - 8usize];
    ["Offset of field: xcb_ewmh_get_desktop_layout_reply_t::starting_corner"]
        [::std::mem::offset_of!(xcb_ewmh_get_desktop_layout_reply_t, starting_corner) - 12usize];
};
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_X:
    xcb_ewmh_moveresize_window_opt_flags_t = 256;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_Y:
    xcb_ewmh_moveresize_window_opt_flags_t = 512;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_WIDTH:
    xcb_ewmh_moveresize_window_opt_flags_t = 1024;
pub const xcb_ewmh_moveresize_window_opt_flags_t_XCB_EWMH_MOVERESIZE_WINDOW_HEIGHT:
    xcb_ewmh_moveresize_window_opt_flags_t = 2048;
pub type xcb_ewmh_moveresize_window_opt_flags_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOPLEFT:
    xcb_ewmh_moveresize_direction_t = 0;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOP:
    xcb_ewmh_moveresize_direction_t = 1;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_TOPRIGHT:
    xcb_ewmh_moveresize_direction_t = 2;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_RIGHT:
    xcb_ewmh_moveresize_direction_t = 3;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOMRIGHT:
    xcb_ewmh_moveresize_direction_t = 4;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOM:
    xcb_ewmh_moveresize_direction_t = 5;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_BOTTOMLEFT:
    xcb_ewmh_moveresize_direction_t = 6;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_LEFT:
    xcb_ewmh_moveresize_direction_t = 7;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_MOVE:
    xcb_ewmh_moveresize_direction_t = 8;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_SIZE_KEYBOARD:
    xcb_ewmh_moveresize_direction_t = 9;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_MOVE_KEYBOARD:
    xcb_ewmh_moveresize_direction_t = 10;
pub const xcb_ewmh_moveresize_direction_t_XCB_EWMH_WM_MOVERESIZE_CANCEL:
    xcb_ewmh_moveresize_direction_t = 11;
pub type xcb_ewmh_moveresize_direction_t = ::std::os::raw::c_uint;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_REMOVE: xcb_ewmh_wm_state_action_t = 0;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_ADD: xcb_ewmh_wm_state_action_t = 1;
pub const xcb_ewmh_wm_state_action_t_XCB_EWMH_WM_STATE_TOGGLE: xcb_ewmh_wm_state_action_t = 2;
pub type xcb_ewmh_wm_state_action_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_wm_strut_partial_t {
    pub left: u32,
    pub right: u32,
    pub top: u32,
    pub bottom: u32,
    pub left_start_y: u32,
    pub left_end_y: u32,
    pub right_start_y: u32,
    pub right_end_y: u32,
    pub top_start_x: u32,
    pub top_end_x: u32,
    pub bottom_start_x: u32,
    pub bottom_end_x: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_wm_strut_partial_t"]
        [::std::mem::size_of::<xcb_ewmh_wm_strut_partial_t>() - 48usize];
    ["Alignment of xcb_ewmh_wm_strut_partial_t"]
        [::std::mem::align_of::<xcb_ewmh_wm_strut_partial_t>() - 4usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left) - 0usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right) - 4usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top) - 8usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom) - 12usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left_start_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left_start_y) - 16usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::left_end_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, left_end_y) - 20usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right_start_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right_start_y) - 24usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::right_end_y"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, right_end_y) - 28usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top_start_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top_start_x) - 32usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::top_end_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, top_end_x) - 36usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom_start_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom_start_x) - 40usize];
    ["Offset of field: xcb_ewmh_wm_strut_partial_t::bottom_end_x"]
        [::std::mem::offset_of!(xcb_ewmh_wm_strut_partial_t, bottom_end_x) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_wm_icon_iterator_t {
    pub width: u32,
    pub height: u32,
    pub data: *mut u32,
    pub rem: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_wm_icon_iterator_t"]
        [::std::mem::size_of::<xcb_ewmh_wm_icon_iterator_t>() - 24usize];
    ["Alignment of xcb_ewmh_wm_icon_iterator_t"]
        [::std::mem::align_of::<xcb_ewmh_wm_icon_iterator_t>() - 8usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::width"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, width) - 0usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::height"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, height) - 4usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::data"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, data) - 8usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, rem) - 16usize];
    ["Offset of field: xcb_ewmh_wm_icon_iterator_t::index"]
        [::std::mem::offset_of!(xcb_ewmh_wm_icon_iterator_t, index) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_wm_icon_reply_t {
    pub num_icons: ::std::os::raw::c_uint,
    pub _reply: *mut xcb_get_property_reply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_wm_icon_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_wm_icon_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_wm_icon_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_wm_icon_reply_t>() - 8usize];
    ["Offset of field: xcb_ewmh_get_wm_icon_reply_t::num_icons"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_icon_reply_t, num_icons) - 0usize];
    ["Offset of field: xcb_ewmh_get_wm_icon_reply_t::_reply"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_icon_reply_t, _reply) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_extents_reply_t {
    pub left: u32,
    pub right: u32,
    pub top: u32,
    pub bottom: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_extents_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_extents_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_extents_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_extents_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, left) - 0usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, right) - 4usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, top) - 8usize];
    ["Offset of field: xcb_ewmh_get_extents_reply_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_get_extents_reply_t, bottom) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_ewmh_get_wm_fullscreen_monitors_reply_t {
    pub top: u32,
    pub bottom: u32,
    pub left: u32,
    pub right: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_ewmh_get_wm_fullscreen_monitors_reply_t"]
        [::std::mem::size_of::<xcb_ewmh_get_wm_fullscreen_monitors_reply_t>() - 16usize];
    ["Alignment of xcb_ewmh_get_wm_fullscreen_monitors_reply_t"]
        [::std::mem::align_of::<xcb_ewmh_get_wm_fullscreen_monitors_reply_t>() - 4usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::top"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, top) - 0usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::bottom"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, bottom) - 4usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::left"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, left) - 8usize];
    ["Offset of field: xcb_ewmh_get_wm_fullscreen_monitors_reply_t::right"]
        [::std::mem::offset_of!(xcb_ewmh_get_wm_fullscreen_monitors_reply_t, right) - 12usize];
};
unsafe extern "C" {
    pub fn xcb_ewmh_init_atoms(
        c: *mut xcb_connection_t,
        ewmh: *mut xcb_ewmh_connection_t,
    ) -> *mut xcb_intern_atom_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_init_atoms_replies(
        ewmh: *mut xcb_ewmh_connection_t,
        ewmh_cookies: *mut xcb_intern_atom_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_client_message(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        dest: xcb_window_t,
        atom: xcb_atom_t,
        data_len: u32,
        data: *const u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_window_from_reply(
        window: *mut xcb_window_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_window_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        window: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_cardinal_from_reply(
        cardinal: *mut u32,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_cardinal_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        cardinal: *mut u32,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_from_reply(
        atoms: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        atoms: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_atoms_reply_wipe(data: *mut xcb_ewmh_get_atoms_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_from_reply(
        atoms: *mut xcb_ewmh_get_windows_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_from_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        data: *mut xcb_ewmh_get_utf8_strings_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        data: *mut xcb_ewmh_get_utf8_strings_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        atoms: *mut xcb_ewmh_get_windows_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_windows_reply_wipe(data: *mut xcb_ewmh_get_windows_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_utf8_strings_reply_wipe(data: *mut xcb_ewmh_get_utf8_strings_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supported(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supported_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supported_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supported(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_stacking(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_client_list_stacking_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_stacking_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_client_list_stacking(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_number_of_desktops(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        number_of_desktops: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_number_of_desktops_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        number_of_desktops: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_number_of_desktops_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_number_of_desktops(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_geometry_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_desktop_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_width: u32,
        new_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_from_reply(
        width: *mut u32,
        height: *mut u32,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_geometry_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        width: *mut u32,
        height: *mut u32,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_coordinates_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_viewport_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_coordinates_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_desktop_viewport(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        x: u32,
        y: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_from_reply(
        vp: *mut xcb_ewmh_get_desktop_viewport_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        vp: *mut xcb_ewmh_get_desktop_viewport_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_viewport_reply_wipe(r: *mut xcb_ewmh_get_desktop_viewport_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_current_desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_current_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_current_desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_current_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_current_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_desktop: u32,
        timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_names(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_names_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_names_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_names(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_active_window_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        new_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_activate: xcb_window_t,
        source_indication: xcb_ewmh_client_source_type_t,
        timestamp: xcb_timestamp_t,
        current_active_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_active_window_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_active_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_workarea(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_geometry_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_workarea_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_ewmh_geometry_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_from_reply(
        wa: *mut xcb_ewmh_get_workarea_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        wa: *mut xcb_ewmh_get_workarea_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_workarea_reply_wipe(r: *mut xcb_ewmh_get_workarea_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supporting_wm_check(
        ewmh: *mut xcb_ewmh_connection_t,
        parent_window: xcb_window_t,
        child_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_supporting_wm_check_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        parent_window: xcb_window_t,
        child_window: xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supporting_wm_check_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_supporting_wm_check(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_virtual_roots(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_virtual_roots_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        list_len: u32,
        list: *mut xcb_window_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_virtual_roots_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_virtual_roots(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_layout(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        orientation: xcb_ewmh_desktop_layout_orientation_t,
        columns: u32,
        rows: u32,
        starting_corner: xcb_ewmh_desktop_layout_starting_corner_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_desktop_layout_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        orientation: xcb_ewmh_desktop_layout_orientation_t,
        columns: u32,
        rows: u32,
        starting_corner: xcb_ewmh_desktop_layout_starting_corner_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_from_reply(
        desktop_layouts: *mut xcb_ewmh_get_desktop_layout_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_desktop_layout_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        desktop_layouts: *mut xcb_ewmh_get_desktop_layout_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_showing_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_showing_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_showing_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_showing_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_close_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_close: xcb_window_t,
        timestamp: xcb_timestamp_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_moveresize_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        moveresize_window: xcb_window_t,
        gravity: xcb_gravity_t,
        source_indication: xcb_ewmh_client_source_type_t,
        flags: xcb_ewmh_moveresize_window_opt_flags_t,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_wm_moveresize(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        moveresize_window: xcb_window_t,
        x_root: u32,
        y_root: u32,
        direction: xcb_ewmh_moveresize_direction_t,
        button: xcb_button_index_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_restack_window(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window_to_restack: xcb_window_t,
        sibling_window: xcb_window_t,
        detail: xcb_stack_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_visible_icon_name_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        strings_len: u32,
        strings: *const ::std::os::raw::c_char,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_icon_name_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_visible_icon_name(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_desktop_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        desktop: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_desktop_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_desktop(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        client_window: xcb_window_t,
        new_desktop: u32,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_window_type(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_window_type_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_window_type_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_state_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_state_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_state(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        client_window: xcb_window_t,
        action: xcb_ewmh_wm_state_action_t,
        first_property: xcb_atom_t,
        second_property: xcb_atom_t,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_allowed_actions(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_allowed_actions_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        list_len: u32,
        list: *mut xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_from_reply(
        wtypes: *mut xcb_ewmh_get_atoms_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_allowed_actions_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        name: *mut xcb_ewmh_get_atoms_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_from_reply(
        struts: *mut xcb_ewmh_get_extents_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        struts: *mut xcb_ewmh_get_extents_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_partial(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_strut: xcb_ewmh_wm_strut_partial_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_strut_partial_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_strut: xcb_ewmh_wm_strut_partial_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_from_reply(
        struts: *mut xcb_ewmh_wm_strut_partial_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_strut_partial_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        struts: *mut xcb_ewmh_wm_strut_partial_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_icon_geometry_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_from_reply(
        icons: *mut xcb_ewmh_geometry_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_geometry_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        icons: *mut xcb_ewmh_geometry_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_append_wm_icon_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        width: u32,
        height: u32,
        img_len: u32,
        img: *mut u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_append_wm_icon(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        width: u32,
        height: u32,
        img_len: u32,
        img: *mut u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_from_reply(
        wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_iterator(
        wm_icon: *const xcb_ewmh_get_wm_icon_reply_t,
    ) -> xcb_ewmh_wm_icon_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_length(
        wm_icon: *const xcb_ewmh_get_wm_icon_reply_t,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_next(iterator: *mut xcb_ewmh_wm_icon_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_icon_reply_wipe(wm_icon: *mut xcb_ewmh_get_wm_icon_reply_t);
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_pid(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_pid_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_pid_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_pid(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_handled_icons(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        handled_icons: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_handled_icons_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        handled_icons: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_handled_icons_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_handled_icons(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        xtime: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_window(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        xtime: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_user_time_window_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        pid: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_window_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_user_time_window(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_frame_extents(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_frame_extents_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        left: u32,
        right: u32,
        top: u32,
        bottom: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_from_reply(
        frame_extents: *mut xcb_ewmh_get_extents_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_frame_extents_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        frame_extents: *mut xcb_ewmh_get_extents_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_wm_ping(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_sync_request_counter(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_sync_request_counter_atom: xcb_atom_t,
        low: u32,
        high: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_sync_request_counter_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_sync_request_counter_atom: xcb_atom_t,
        low: u32,
        high: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_from_reply(
        counter: *mut u64,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_sync_request_counter_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        counter: *mut u64,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_send_wm_sync_request(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        wm_protocols_atom: xcb_atom_t,
        wm_sync_request_atom: xcb_atom_t,
        timestamp: xcb_timestamp_t,
        counter: u64,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_fullscreen_monitors_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        window: xcb_window_t,
    ) -> xcb_get_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_from_reply(
        monitors: *mut xcb_ewmh_get_wm_fullscreen_monitors_reply_t,
        r: *mut xcb_get_property_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_fullscreen_monitors_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_property_cookie_t,
        monitors: *mut xcb_ewmh_get_wm_fullscreen_monitors_reply_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_request_change_wm_fullscreen_monitors(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        window: xcb_window_t,
        top: u32,
        bottom: u32,
        left: u32,
        right: u32,
        source_indication: xcb_ewmh_client_source_type_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_cm_owner(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        owner: xcb_window_t,
        timestamp: xcb_timestamp_t,
        selection_data1: u32,
        selection_data2: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_set_wm_cm_owner_checked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
        owner: xcb_window_t,
        timestamp: xcb_timestamp_t,
        selection_data1: u32,
        selection_data2: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_unchecked(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner(
        ewmh: *mut xcb_ewmh_connection_t,
        screen_nbr: ::std::os::raw::c_int,
    ) -> xcb_get_selection_owner_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_from_reply(
        owner: *mut xcb_window_t,
        r: *mut xcb_get_selection_owner_reply_t,
    ) -> u8;
}
unsafe extern "C" {
    pub fn xcb_ewmh_get_wm_cm_owner_reply(
        ewmh: *mut xcb_ewmh_connection_t,
        cookie: xcb_get_selection_owner_cookie_t,
        owner: *mut xcb_window_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> u8;
}
unsafe extern "C" {
    pub static mut xcb_render_id: xcb_extension_t;
}
pub const xcb_render_pict_type_t_XCB_RENDER_PICT_TYPE_INDEXED: xcb_render_pict_type_t = 0;
pub const xcb_render_pict_type_t_XCB_RENDER_PICT_TYPE_DIRECT: xcb_render_pict_type_t = 1;
pub type xcb_render_pict_type_t = ::std::os::raw::c_uint;
pub const xcb_render_picture_enum_t_XCB_RENDER_PICTURE_NONE: xcb_render_picture_enum_t = 0;
pub type xcb_render_picture_enum_t = ::std::os::raw::c_uint;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CLEAR: xcb_render_pict_op_t = 0;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SRC: xcb_render_pict_op_t = 1;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DST: xcb_render_pict_op_t = 2;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVER: xcb_render_pict_op_t = 3;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVER_REVERSE: xcb_render_pict_op_t = 4;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_IN: xcb_render_pict_op_t = 5;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_IN_REVERSE: xcb_render_pict_op_t = 6;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OUT: xcb_render_pict_op_t = 7;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OUT_REVERSE: xcb_render_pict_op_t = 8;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ATOP: xcb_render_pict_op_t = 9;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ATOP_REVERSE: xcb_render_pict_op_t = 10;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_XOR: xcb_render_pict_op_t = 11;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_ADD: xcb_render_pict_op_t = 12;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SATURATE: xcb_render_pict_op_t = 13;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_CLEAR: xcb_render_pict_op_t = 16;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_SRC: xcb_render_pict_op_t = 17;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_DST: xcb_render_pict_op_t = 18;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OVER: xcb_render_pict_op_t = 19;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OVER_REVERSE: xcb_render_pict_op_t = 20;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_IN: xcb_render_pict_op_t = 21;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_IN_REVERSE: xcb_render_pict_op_t = 22;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OUT: xcb_render_pict_op_t = 23;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_OUT_REVERSE: xcb_render_pict_op_t = 24;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_ATOP: xcb_render_pict_op_t = 25;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_ATOP_REVERSE: xcb_render_pict_op_t = 26;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DISJOINT_XOR: xcb_render_pict_op_t = 27;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_CLEAR: xcb_render_pict_op_t = 32;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_SRC: xcb_render_pict_op_t = 33;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_DST: xcb_render_pict_op_t = 34;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OVER: xcb_render_pict_op_t = 35;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OVER_REVERSE: xcb_render_pict_op_t = 36;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_IN: xcb_render_pict_op_t = 37;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_IN_REVERSE: xcb_render_pict_op_t = 38;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OUT: xcb_render_pict_op_t = 39;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_OUT_REVERSE: xcb_render_pict_op_t = 40;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_ATOP: xcb_render_pict_op_t = 41;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_ATOP_REVERSE: xcb_render_pict_op_t = 42;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_CONJOINT_XOR: xcb_render_pict_op_t = 43;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_MULTIPLY: xcb_render_pict_op_t = 48;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SCREEN: xcb_render_pict_op_t = 49;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_OVERLAY: xcb_render_pict_op_t = 50;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DARKEN: xcb_render_pict_op_t = 51;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_LIGHTEN: xcb_render_pict_op_t = 52;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_COLOR_DODGE: xcb_render_pict_op_t = 53;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_COLOR_BURN: xcb_render_pict_op_t = 54;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HARD_LIGHT: xcb_render_pict_op_t = 55;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_SOFT_LIGHT: xcb_render_pict_op_t = 56;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_DIFFERENCE: xcb_render_pict_op_t = 57;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_EXCLUSION: xcb_render_pict_op_t = 58;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_HUE: xcb_render_pict_op_t = 59;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_SATURATION: xcb_render_pict_op_t = 60;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_COLOR: xcb_render_pict_op_t = 61;
pub const xcb_render_pict_op_t_XCB_RENDER_PICT_OP_HSL_LUMINOSITY: xcb_render_pict_op_t = 62;
pub type xcb_render_pict_op_t = ::std::os::raw::c_uint;
pub const xcb_render_poly_edge_t_XCB_RENDER_POLY_EDGE_SHARP: xcb_render_poly_edge_t = 0;
pub const xcb_render_poly_edge_t_XCB_RENDER_POLY_EDGE_SMOOTH: xcb_render_poly_edge_t = 1;
pub type xcb_render_poly_edge_t = ::std::os::raw::c_uint;
pub const xcb_render_poly_mode_t_XCB_RENDER_POLY_MODE_PRECISE: xcb_render_poly_mode_t = 0;
pub const xcb_render_poly_mode_t_XCB_RENDER_POLY_MODE_IMPRECISE: xcb_render_poly_mode_t = 1;
pub type xcb_render_poly_mode_t = ::std::os::raw::c_uint;
pub const xcb_render_cp_t_XCB_RENDER_CP_REPEAT: xcb_render_cp_t = 1;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_MAP: xcb_render_cp_t = 2;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_X_ORIGIN: xcb_render_cp_t = 4;
pub const xcb_render_cp_t_XCB_RENDER_CP_ALPHA_Y_ORIGIN: xcb_render_cp_t = 8;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_X_ORIGIN: xcb_render_cp_t = 16;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_Y_ORIGIN: xcb_render_cp_t = 32;
pub const xcb_render_cp_t_XCB_RENDER_CP_CLIP_MASK: xcb_render_cp_t = 64;
pub const xcb_render_cp_t_XCB_RENDER_CP_GRAPHICS_EXPOSURE: xcb_render_cp_t = 128;
pub const xcb_render_cp_t_XCB_RENDER_CP_SUBWINDOW_MODE: xcb_render_cp_t = 256;
pub const xcb_render_cp_t_XCB_RENDER_CP_POLY_EDGE: xcb_render_cp_t = 512;
pub const xcb_render_cp_t_XCB_RENDER_CP_POLY_MODE: xcb_render_cp_t = 1024;
pub const xcb_render_cp_t_XCB_RENDER_CP_DITHER: xcb_render_cp_t = 2048;
pub const xcb_render_cp_t_XCB_RENDER_CP_COMPONENT_ALPHA: xcb_render_cp_t = 4096;
pub type xcb_render_cp_t = ::std::os::raw::c_uint;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_UNKNOWN: xcb_render_sub_pixel_t = 0;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_HORIZONTAL_RGB: xcb_render_sub_pixel_t = 1;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_HORIZONTAL_BGR: xcb_render_sub_pixel_t = 2;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_VERTICAL_RGB: xcb_render_sub_pixel_t = 3;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_VERTICAL_BGR: xcb_render_sub_pixel_t = 4;
pub const xcb_render_sub_pixel_t_XCB_RENDER_SUB_PIXEL_NONE: xcb_render_sub_pixel_t = 5;
pub type xcb_render_sub_pixel_t = ::std::os::raw::c_uint;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_NONE: xcb_render_repeat_t = 0;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_NORMAL: xcb_render_repeat_t = 1;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_PAD: xcb_render_repeat_t = 2;
pub const xcb_render_repeat_t_XCB_RENDER_REPEAT_REFLECT: xcb_render_repeat_t = 3;
pub type xcb_render_repeat_t = ::std::os::raw::c_uint;
pub type xcb_render_glyph_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_iterator_t {
    pub data: *mut xcb_render_glyph_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyph_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyph_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyph_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyph_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyph_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyph_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyph_iterator_t, index) - 12usize];
};
pub type xcb_render_glyphset_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphset_iterator_t {
    pub data: *mut xcb_render_glyphset_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphset_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyphset_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyphset_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyphset_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyphset_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyphset_iterator_t, index) - 12usize];
};
pub type xcb_render_picture_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_picture_iterator_t {
    pub data: *mut xcb_render_picture_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_picture_iterator_t"]
        [::std::mem::size_of::<xcb_render_picture_iterator_t>() - 16usize];
    ["Alignment of xcb_render_picture_iterator_t"]
        [::std::mem::align_of::<xcb_render_picture_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_picture_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_picture_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_picture_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_picture_iterator_t, index) - 12usize];
};
pub type xcb_render_pictformat_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictformat_iterator_t {
    pub data: *mut xcb_render_pictformat_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictformat_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictformat_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictformat_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictformat_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictformat_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictformat_iterator_t, index) - 12usize];
};
pub type xcb_render_fixed_t = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_fixed_iterator_t {
    pub data: *mut xcb_render_fixed_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_fixed_iterator_t"]
        [::std::mem::size_of::<xcb_render_fixed_iterator_t>() - 16usize];
    ["Alignment of xcb_render_fixed_iterator_t"]
        [::std::mem::align_of::<xcb_render_fixed_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_fixed_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_fixed_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_fixed_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_fixed_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pict_format_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pict_format_error_t"]
        [::std::mem::size_of::<xcb_render_pict_format_error_t>() - 12usize];
    ["Alignment of xcb_render_pict_format_error_t"]
        [::std::mem::align_of::<xcb_render_pict_format_error_t>() - 4usize];
    ["Offset of field: xcb_render_pict_format_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_pict_format_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_pict_format_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_pict_format_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_pict_format_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_pict_format_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_format_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_picture_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_picture_error_t"]
        [::std::mem::size_of::<xcb_render_picture_error_t>() - 12usize];
    ["Alignment of xcb_render_picture_error_t"]
        [::std::mem::align_of::<xcb_render_picture_error_t>() - 4usize];
    ["Offset of field: xcb_render_picture_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_picture_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_picture_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_picture_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_picture_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_picture_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_picture_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pict_op_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pict_op_error_t"]
        [::std::mem::size_of::<xcb_render_pict_op_error_t>() - 12usize];
    ["Alignment of xcb_render_pict_op_error_t"]
        [::std::mem::align_of::<xcb_render_pict_op_error_t>() - 4usize];
    ["Offset of field: xcb_render_pict_op_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_pict_op_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_pict_op_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_pict_op_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_pict_op_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_pict_op_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_pict_op_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_set_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_set_error_t"]
        [::std::mem::size_of::<xcb_render_glyph_set_error_t>() - 12usize];
    ["Alignment of xcb_render_glyph_set_error_t"]
        [::std::mem::align_of::<xcb_render_glyph_set_error_t>() - 4usize];
    ["Offset of field: xcb_render_glyph_set_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_glyph_set_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_glyph_set_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_glyph_set_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_glyph_set_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_glyph_set_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_set_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyph_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyph_error_t"]
        [::std::mem::size_of::<xcb_render_glyph_error_t>() - 12usize];
    ["Alignment of xcb_render_glyph_error_t"]
        [::std::mem::align_of::<xcb_render_glyph_error_t>() - 4usize];
    ["Offset of field: xcb_render_glyph_error_t::response_type"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, response_type) - 0usize];
    ["Offset of field: xcb_render_glyph_error_t::error_code"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, error_code) - 1usize];
    ["Offset of field: xcb_render_glyph_error_t::sequence"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, sequence) - 2usize];
    ["Offset of field: xcb_render_glyph_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_render_glyph_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_render_glyph_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_glyph_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_directformat_t {
    pub red_shift: u16,
    pub red_mask: u16,
    pub green_shift: u16,
    pub green_mask: u16,
    pub blue_shift: u16,
    pub blue_mask: u16,
    pub alpha_shift: u16,
    pub alpha_mask: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_directformat_t"]
        [::std::mem::size_of::<xcb_render_directformat_t>() - 16usize];
    ["Alignment of xcb_render_directformat_t"]
        [::std::mem::align_of::<xcb_render_directformat_t>() - 2usize];
    ["Offset of field: xcb_render_directformat_t::red_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, red_shift) - 0usize];
    ["Offset of field: xcb_render_directformat_t::red_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, red_mask) - 2usize];
    ["Offset of field: xcb_render_directformat_t::green_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, green_shift) - 4usize];
    ["Offset of field: xcb_render_directformat_t::green_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, green_mask) - 6usize];
    ["Offset of field: xcb_render_directformat_t::blue_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, blue_shift) - 8usize];
    ["Offset of field: xcb_render_directformat_t::blue_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, blue_mask) - 10usize];
    ["Offset of field: xcb_render_directformat_t::alpha_shift"]
        [::std::mem::offset_of!(xcb_render_directformat_t, alpha_shift) - 12usize];
    ["Offset of field: xcb_render_directformat_t::alpha_mask"]
        [::std::mem::offset_of!(xcb_render_directformat_t, alpha_mask) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_directformat_iterator_t {
    pub data: *mut xcb_render_directformat_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_directformat_iterator_t"]
        [::std::mem::size_of::<xcb_render_directformat_iterator_t>() - 16usize];
    ["Alignment of xcb_render_directformat_iterator_t"]
        [::std::mem::align_of::<xcb_render_directformat_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_directformat_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_directformat_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_directformat_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_directformat_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictforminfo_t {
    pub id: xcb_render_pictformat_t,
    pub type_: u8,
    pub depth: u8,
    pub pad0: [u8; 2usize],
    pub direct: xcb_render_directformat_t,
    pub colormap: xcb_colormap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictforminfo_t"]
        [::std::mem::size_of::<xcb_render_pictforminfo_t>() - 28usize];
    ["Alignment of xcb_render_pictforminfo_t"]
        [::std::mem::align_of::<xcb_render_pictforminfo_t>() - 4usize];
    ["Offset of field: xcb_render_pictforminfo_t::id"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, id) - 0usize];
    ["Offset of field: xcb_render_pictforminfo_t::type_"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, type_) - 4usize];
    ["Offset of field: xcb_render_pictforminfo_t::depth"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, depth) - 5usize];
    ["Offset of field: xcb_render_pictforminfo_t::pad0"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, pad0) - 6usize];
    ["Offset of field: xcb_render_pictforminfo_t::direct"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, direct) - 8usize];
    ["Offset of field: xcb_render_pictforminfo_t::colormap"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_t, colormap) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictforminfo_iterator_t {
    pub data: *mut xcb_render_pictforminfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictforminfo_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictforminfo_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictforminfo_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictforminfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictforminfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictforminfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictvisual_t {
    pub visual: xcb_visualid_t,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictvisual_t"][::std::mem::size_of::<xcb_render_pictvisual_t>() - 8usize];
    ["Alignment of xcb_render_pictvisual_t"]
        [::std::mem::align_of::<xcb_render_pictvisual_t>() - 4usize];
    ["Offset of field: xcb_render_pictvisual_t::visual"]
        [::std::mem::offset_of!(xcb_render_pictvisual_t, visual) - 0usize];
    ["Offset of field: xcb_render_pictvisual_t::format"]
        [::std::mem::offset_of!(xcb_render_pictvisual_t, format) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictvisual_iterator_t {
    pub data: *mut xcb_render_pictvisual_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictvisual_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictvisual_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictvisual_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictvisual_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictvisual_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictvisual_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictdepth_t {
    pub depth: u8,
    pub pad0: u8,
    pub num_visuals: u16,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictdepth_t"][::std::mem::size_of::<xcb_render_pictdepth_t>() - 8usize];
    ["Alignment of xcb_render_pictdepth_t"]
        [::std::mem::align_of::<xcb_render_pictdepth_t>() - 2usize];
    ["Offset of field: xcb_render_pictdepth_t::depth"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, depth) - 0usize];
    ["Offset of field: xcb_render_pictdepth_t::pad0"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, pad0) - 1usize];
    ["Offset of field: xcb_render_pictdepth_t::num_visuals"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, num_visuals) - 2usize];
    ["Offset of field: xcb_render_pictdepth_t::pad1"]
        [::std::mem::offset_of!(xcb_render_pictdepth_t, pad1) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictdepth_iterator_t {
    pub data: *mut xcb_render_pictdepth_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictdepth_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictdepth_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictdepth_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictdepth_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictdepth_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictdepth_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictscreen_t {
    pub num_depths: u32,
    pub fallback: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictscreen_t"][::std::mem::size_of::<xcb_render_pictscreen_t>() - 8usize];
    ["Alignment of xcb_render_pictscreen_t"]
        [::std::mem::align_of::<xcb_render_pictscreen_t>() - 4usize];
    ["Offset of field: xcb_render_pictscreen_t::num_depths"]
        [::std::mem::offset_of!(xcb_render_pictscreen_t, num_depths) - 0usize];
    ["Offset of field: xcb_render_pictscreen_t::fallback"]
        [::std::mem::offset_of!(xcb_render_pictscreen_t, fallback) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pictscreen_iterator_t {
    pub data: *mut xcb_render_pictscreen_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pictscreen_iterator_t"]
        [::std::mem::size_of::<xcb_render_pictscreen_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pictscreen_iterator_t"]
        [::std::mem::align_of::<xcb_render_pictscreen_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pictscreen_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pictscreen_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_indexvalue_t {
    pub pixel: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub alpha: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_indexvalue_t"][::std::mem::size_of::<xcb_render_indexvalue_t>() - 12usize];
    ["Alignment of xcb_render_indexvalue_t"]
        [::std::mem::align_of::<xcb_render_indexvalue_t>() - 4usize];
    ["Offset of field: xcb_render_indexvalue_t::pixel"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, pixel) - 0usize];
    ["Offset of field: xcb_render_indexvalue_t::red"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, red) - 4usize];
    ["Offset of field: xcb_render_indexvalue_t::green"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, green) - 6usize];
    ["Offset of field: xcb_render_indexvalue_t::blue"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, blue) - 8usize];
    ["Offset of field: xcb_render_indexvalue_t::alpha"]
        [::std::mem::offset_of!(xcb_render_indexvalue_t, alpha) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_indexvalue_iterator_t {
    pub data: *mut xcb_render_indexvalue_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_indexvalue_iterator_t"]
        [::std::mem::size_of::<xcb_render_indexvalue_iterator_t>() - 16usize];
    ["Alignment of xcb_render_indexvalue_iterator_t"]
        [::std::mem::align_of::<xcb_render_indexvalue_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_indexvalue_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_indexvalue_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_color_t {
    pub red: u16,
    pub green: u16,
    pub blue: u16,
    pub alpha: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_color_t"][::std::mem::size_of::<xcb_render_color_t>() - 8usize];
    ["Alignment of xcb_render_color_t"][::std::mem::align_of::<xcb_render_color_t>() - 2usize];
    ["Offset of field: xcb_render_color_t::red"]
        [::std::mem::offset_of!(xcb_render_color_t, red) - 0usize];
    ["Offset of field: xcb_render_color_t::green"]
        [::std::mem::offset_of!(xcb_render_color_t, green) - 2usize];
    ["Offset of field: xcb_render_color_t::blue"]
        [::std::mem::offset_of!(xcb_render_color_t, blue) - 4usize];
    ["Offset of field: xcb_render_color_t::alpha"]
        [::std::mem::offset_of!(xcb_render_color_t, alpha) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_color_iterator_t {
    pub data: *mut xcb_render_color_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_color_iterator_t"]
        [::std::mem::size_of::<xcb_render_color_iterator_t>() - 16usize];
    ["Alignment of xcb_render_color_iterator_t"]
        [::std::mem::align_of::<xcb_render_color_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_color_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_color_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_color_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_color_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pointfix_t {
    pub x: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pointfix_t"][::std::mem::size_of::<xcb_render_pointfix_t>() - 8usize];
    ["Alignment of xcb_render_pointfix_t"]
        [::std::mem::align_of::<xcb_render_pointfix_t>() - 4usize];
    ["Offset of field: xcb_render_pointfix_t::x"]
        [::std::mem::offset_of!(xcb_render_pointfix_t, x) - 0usize];
    ["Offset of field: xcb_render_pointfix_t::y"]
        [::std::mem::offset_of!(xcb_render_pointfix_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_pointfix_iterator_t {
    pub data: *mut xcb_render_pointfix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_pointfix_iterator_t"]
        [::std::mem::size_of::<xcb_render_pointfix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_pointfix_iterator_t"]
        [::std::mem::align_of::<xcb_render_pointfix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_pointfix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_pointfix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_linefix_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_linefix_t"][::std::mem::size_of::<xcb_render_linefix_t>() - 16usize];
    ["Alignment of xcb_render_linefix_t"][::std::mem::align_of::<xcb_render_linefix_t>() - 4usize];
    ["Offset of field: xcb_render_linefix_t::p1"]
        [::std::mem::offset_of!(xcb_render_linefix_t, p1) - 0usize];
    ["Offset of field: xcb_render_linefix_t::p2"]
        [::std::mem::offset_of!(xcb_render_linefix_t, p2) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_linefix_iterator_t {
    pub data: *mut xcb_render_linefix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_linefix_iterator_t"]
        [::std::mem::size_of::<xcb_render_linefix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_linefix_iterator_t"]
        [::std::mem::align_of::<xcb_render_linefix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_linefix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_linefix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_linefix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_linefix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangle_t {
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub p3: xcb_render_pointfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangle_t"][::std::mem::size_of::<xcb_render_triangle_t>() - 24usize];
    ["Alignment of xcb_render_triangle_t"]
        [::std::mem::align_of::<xcb_render_triangle_t>() - 4usize];
    ["Offset of field: xcb_render_triangle_t::p1"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p1) - 0usize];
    ["Offset of field: xcb_render_triangle_t::p2"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p2) - 8usize];
    ["Offset of field: xcb_render_triangle_t::p3"]
        [::std::mem::offset_of!(xcb_render_triangle_t, p3) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangle_iterator_t {
    pub data: *mut xcb_render_triangle_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangle_iterator_t"]
        [::std::mem::size_of::<xcb_render_triangle_iterator_t>() - 16usize];
    ["Alignment of xcb_render_triangle_iterator_t"]
        [::std::mem::align_of::<xcb_render_triangle_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_triangle_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_triangle_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_triangle_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_triangle_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoid_t {
    pub top: xcb_render_fixed_t,
    pub bottom: xcb_render_fixed_t,
    pub left: xcb_render_linefix_t,
    pub right: xcb_render_linefix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoid_t"][::std::mem::size_of::<xcb_render_trapezoid_t>() - 40usize];
    ["Alignment of xcb_render_trapezoid_t"]
        [::std::mem::align_of::<xcb_render_trapezoid_t>() - 4usize];
    ["Offset of field: xcb_render_trapezoid_t::top"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, top) - 0usize];
    ["Offset of field: xcb_render_trapezoid_t::bottom"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, bottom) - 4usize];
    ["Offset of field: xcb_render_trapezoid_t::left"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, left) - 8usize];
    ["Offset of field: xcb_render_trapezoid_t::right"]
        [::std::mem::offset_of!(xcb_render_trapezoid_t, right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoid_iterator_t {
    pub data: *mut xcb_render_trapezoid_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoid_iterator_t"]
        [::std::mem::size_of::<xcb_render_trapezoid_iterator_t>() - 16usize];
    ["Alignment of xcb_render_trapezoid_iterator_t"]
        [::std::mem::align_of::<xcb_render_trapezoid_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_trapezoid_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_trapezoid_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphinfo_t {
    pub width: u16,
    pub height: u16,
    pub x: i16,
    pub y: i16,
    pub x_off: i16,
    pub y_off: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphinfo_t"][::std::mem::size_of::<xcb_render_glyphinfo_t>() - 12usize];
    ["Alignment of xcb_render_glyphinfo_t"]
        [::std::mem::align_of::<xcb_render_glyphinfo_t>() - 2usize];
    ["Offset of field: xcb_render_glyphinfo_t::width"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, width) - 0usize];
    ["Offset of field: xcb_render_glyphinfo_t::height"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, height) - 2usize];
    ["Offset of field: xcb_render_glyphinfo_t::x"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, x) - 4usize];
    ["Offset of field: xcb_render_glyphinfo_t::y"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, y) - 6usize];
    ["Offset of field: xcb_render_glyphinfo_t::x_off"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, x_off) - 8usize];
    ["Offset of field: xcb_render_glyphinfo_t::y_off"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_t, y_off) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_glyphinfo_iterator_t {
    pub data: *mut xcb_render_glyphinfo_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_glyphinfo_iterator_t"]
        [::std::mem::size_of::<xcb_render_glyphinfo_iterator_t>() - 16usize];
    ["Alignment of xcb_render_glyphinfo_iterator_t"]
        [::std::mem::align_of::<xcb_render_glyphinfo_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_glyphinfo_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_glyphinfo_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_version_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_version_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_version_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_version_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub client_major_version: u32,
    pub client_minor_version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_request_t"]
        [::std::mem::size_of::<xcb_render_query_version_request_t>() - 12usize];
    ["Alignment of xcb_render_query_version_request_t"]
        [::std::mem::align_of::<xcb_render_query_version_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_version_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_version_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_version_request_t::client_major_version"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, client_major_version) - 4usize];
    ["Offset of field: xcb_render_query_version_request_t::client_minor_version"]
        [::std::mem::offset_of!(xcb_render_query_version_request_t, client_minor_version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_version_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub major_version: u32,
    pub minor_version: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_version_reply_t"]
        [::std::mem::size_of::<xcb_render_query_version_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_version_reply_t"]
        [::std::mem::align_of::<xcb_render_query_version_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_version_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_version_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_version_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_version_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_version_reply_t::major_version"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, major_version) - 8usize];
    ["Offset of field: xcb_render_query_version_reply_t::minor_version"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, minor_version) - 12usize];
    ["Offset of field: xcb_render_query_version_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_version_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_formats_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_request_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_request_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_formats_request_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_request_t>() - 2usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_pict_formats_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_request_t, length) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_formats_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_formats: u32,
    pub num_screens: u32,
    pub num_depths: u32,
    pub num_visuals: u32,
    pub num_subpixel: u32,
    pub pad1: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_formats_reply_t"]
        [::std::mem::size_of::<xcb_render_query_pict_formats_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_pict_formats_reply_t"]
        [::std::mem::align_of::<xcb_render_query_pict_formats_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_formats"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_formats) - 8usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_screens"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_screens) - 12usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_depths"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_depths) - 16usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_visuals"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_visuals) - 20usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::num_subpixel"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, num_subpixel) - 24usize];
    ["Offset of field: xcb_render_query_pict_formats_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_pict_formats_reply_t, pad1) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_pict_index_values_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_request_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_request_t>() - 8usize];
    ["Alignment of xcb_render_query_pict_index_values_request_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_pict_index_values_request_t::format"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_request_t, format) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_pict_index_values_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_values: u32,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_pict_index_values_reply_t"]
        [::std::mem::size_of::<xcb_render_query_pict_index_values_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_pict_index_values_reply_t"]
        [::std::mem::align_of::<xcb_render_query_pict_index_values_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::response_type"][::std::mem::offset_of!(
        xcb_render_query_pict_index_values_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::num_values"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, num_values) - 8usize];
    ["Offset of field: xcb_render_query_pict_index_values_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_pict_index_values_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_picture_value_list_t {
    pub repeat: u32,
    pub alphamap: xcb_render_picture_t,
    pub alphaxorigin: i32,
    pub alphayorigin: i32,
    pub clipxorigin: i32,
    pub clipyorigin: i32,
    pub clipmask: xcb_pixmap_t,
    pub graphicsexposure: u32,
    pub subwindowmode: u32,
    pub polyedge: u32,
    pub polymode: u32,
    pub dither: xcb_atom_t,
    pub componentalpha: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_picture_value_list_t"]
        [::std::mem::size_of::<xcb_render_create_picture_value_list_t>() - 52usize];
    ["Alignment of xcb_render_create_picture_value_list_t"]
        [::std::mem::align_of::<xcb_render_create_picture_value_list_t>() - 4usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::repeat"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, repeat) - 0usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphamap"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphamap) - 4usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphaxorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphaxorigin) - 8usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::alphayorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, alphayorigin) - 12usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipxorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipxorigin) - 16usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipyorigin"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipyorigin) - 20usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::clipmask"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, clipmask) - 24usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::graphicsexposure"][::std::mem::offset_of!(
        xcb_render_create_picture_value_list_t,
        graphicsexposure
    ) - 28usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::subwindowmode"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, subwindowmode) - 32usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::polyedge"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, polyedge) - 36usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::polymode"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, polymode) - 40usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::dither"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, dither) - 44usize];
    ["Offset of field: xcb_render_create_picture_value_list_t::componentalpha"]
        [::std::mem::offset_of!(xcb_render_create_picture_value_list_t, componentalpha) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub pid: xcb_render_picture_t,
    pub drawable: xcb_drawable_t,
    pub format: xcb_render_pictformat_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_picture_request_t"]
        [::std::mem::size_of::<xcb_render_create_picture_request_t>() - 20usize];
    ["Alignment of xcb_render_create_picture_request_t"]
        [::std::mem::align_of::<xcb_render_create_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_picture_request_t::pid"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, pid) - 4usize];
    ["Offset of field: xcb_render_create_picture_request_t::drawable"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, drawable) - 8usize];
    ["Offset of field: xcb_render_create_picture_request_t::format"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, format) - 12usize];
    ["Offset of field: xcb_render_create_picture_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_render_create_picture_request_t, value_mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_change_picture_value_list_t {
    pub repeat: u32,
    pub alphamap: xcb_render_picture_t,
    pub alphaxorigin: i32,
    pub alphayorigin: i32,
    pub clipxorigin: i32,
    pub clipyorigin: i32,
    pub clipmask: xcb_pixmap_t,
    pub graphicsexposure: u32,
    pub subwindowmode: u32,
    pub polyedge: u32,
    pub polymode: u32,
    pub dither: xcb_atom_t,
    pub componentalpha: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_change_picture_value_list_t"]
        [::std::mem::size_of::<xcb_render_change_picture_value_list_t>() - 52usize];
    ["Alignment of xcb_render_change_picture_value_list_t"]
        [::std::mem::align_of::<xcb_render_change_picture_value_list_t>() - 4usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::repeat"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, repeat) - 0usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphamap"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphamap) - 4usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphaxorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphaxorigin) - 8usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::alphayorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, alphayorigin) - 12usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipxorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipxorigin) - 16usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipyorigin"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipyorigin) - 20usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::clipmask"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, clipmask) - 24usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::graphicsexposure"][::std::mem::offset_of!(
        xcb_render_change_picture_value_list_t,
        graphicsexposure
    ) - 28usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::subwindowmode"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, subwindowmode) - 32usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::polyedge"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, polyedge) - 36usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::polymode"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, polymode) - 40usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::dither"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, dither) - 44usize];
    ["Offset of field: xcb_render_change_picture_value_list_t::componentalpha"]
        [::std::mem::offset_of!(xcb_render_change_picture_value_list_t, componentalpha) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_change_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub value_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_change_picture_request_t"]
        [::std::mem::size_of::<xcb_render_change_picture_request_t>() - 12usize];
    ["Alignment of xcb_render_change_picture_request_t"]
        [::std::mem::align_of::<xcb_render_change_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_change_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_change_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_change_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_change_picture_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_change_picture_request_t::value_mask"]
        [::std::mem::offset_of!(xcb_render_change_picture_request_t, value_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_clip_rectangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub clip_x_origin: i16,
    pub clip_y_origin: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_clip_rectangles_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_clip_rectangles_request_t>() - 12usize];
    ["Alignment of xcb_render_set_picture_clip_rectangles_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_clip_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_clip_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::picture"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        picture
    ) - 4usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::clip_x_origin"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        clip_x_origin
    )
        - 8usize];
    ["Offset of field: xcb_render_set_picture_clip_rectangles_request_t::clip_y_origin"][::std::mem::offset_of!(
        xcb_render_set_picture_clip_rectangles_request_t,
        clip_y_origin
    )
        - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_picture_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_picture_request_t"]
        [::std::mem::size_of::<xcb_render_free_picture_request_t>() - 8usize];
    ["Alignment of xcb_render_free_picture_request_t"]
        [::std::mem::align_of::<xcb_render_free_picture_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_picture_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_picture_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_picture_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_picture_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_free_picture_request_t, picture) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub mask: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub src_x: i16,
    pub src_y: i16,
    pub mask_x: i16,
    pub mask_y: i16,
    pub dst_x: i16,
    pub dst_y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_request_t"]
        [::std::mem::size_of::<xcb_render_composite_request_t>() - 36usize];
    ["Alignment of xcb_render_composite_request_t"]
        [::std::mem::align_of::<xcb_render_composite_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_request_t::mask"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask) - 12usize];
    ["Offset of field: xcb_render_composite_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst) - 16usize];
    ["Offset of field: xcb_render_composite_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_composite_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, src_y) - 22usize];
    ["Offset of field: xcb_render_composite_request_t::mask_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask_x) - 24usize];
    ["Offset of field: xcb_render_composite_request_t::mask_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, mask_y) - 26usize];
    ["Offset of field: xcb_render_composite_request_t::dst_x"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst_x) - 28usize];
    ["Offset of field: xcb_render_composite_request_t::dst_y"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, dst_y) - 30usize];
    ["Offset of field: xcb_render_composite_request_t::width"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, width) - 32usize];
    ["Offset of field: xcb_render_composite_request_t::height"]
        [::std::mem::offset_of!(xcb_render_composite_request_t, height) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trapezoids_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trapezoids_request_t"]
        [::std::mem::size_of::<xcb_render_trapezoids_request_t>() - 24usize];
    ["Alignment of xcb_render_trapezoids_request_t"]
        [::std::mem::align_of::<xcb_render_trapezoids_request_t>() - 4usize];
    ["Offset of field: xcb_render_trapezoids_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_trapezoids_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_trapezoids_request_t::length"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, length) - 2usize];
    ["Offset of field: xcb_render_trapezoids_request_t::op"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, op) - 4usize];
    ["Offset of field: xcb_render_trapezoids_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src) - 8usize];
    ["Offset of field: xcb_render_trapezoids_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_trapezoids_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_trapezoids_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_trapezoids_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_triangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_triangles_request_t"]
        [::std::mem::size_of::<xcb_render_triangles_request_t>() - 24usize];
    ["Alignment of xcb_render_triangles_request_t"]
        [::std::mem::align_of::<xcb_render_triangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_triangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_triangles_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_triangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_triangles_request_t::op"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, op) - 4usize];
    ["Offset of field: xcb_render_triangles_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_triangles_request_t::src"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src) - 8usize];
    ["Offset of field: xcb_render_triangles_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_triangles_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_triangles_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_triangles_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_triangles_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_tri_strip_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_tri_strip_request_t"]
        [::std::mem::size_of::<xcb_render_tri_strip_request_t>() - 24usize];
    ["Alignment of xcb_render_tri_strip_request_t"]
        [::std::mem::align_of::<xcb_render_tri_strip_request_t>() - 4usize];
    ["Offset of field: xcb_render_tri_strip_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_tri_strip_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_tri_strip_request_t::length"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, length) - 2usize];
    ["Offset of field: xcb_render_tri_strip_request_t::op"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, op) - 4usize];
    ["Offset of field: xcb_render_tri_strip_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src) - 8usize];
    ["Offset of field: xcb_render_tri_strip_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_tri_strip_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_tri_strip_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_tri_strip_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_tri_fan_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_tri_fan_request_t"]
        [::std::mem::size_of::<xcb_render_tri_fan_request_t>() - 24usize];
    ["Alignment of xcb_render_tri_fan_request_t"]
        [::std::mem::align_of::<xcb_render_tri_fan_request_t>() - 4usize];
    ["Offset of field: xcb_render_tri_fan_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_tri_fan_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_tri_fan_request_t::length"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, length) - 2usize];
    ["Offset of field: xcb_render_tri_fan_request_t::op"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, op) - 4usize];
    ["Offset of field: xcb_render_tri_fan_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src) - 8usize];
    ["Offset of field: xcb_render_tri_fan_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_tri_fan_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src_x) - 20usize];
    ["Offset of field: xcb_render_tri_fan_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_tri_fan_request_t, src_y) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub gsid: xcb_render_glyphset_t,
    pub format: xcb_render_pictformat_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_create_glyph_set_request_t>() - 12usize];
    ["Alignment of xcb_render_create_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_create_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::gsid"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, gsid) - 4usize];
    ["Offset of field: xcb_render_create_glyph_set_request_t::format"]
        [::std::mem::offset_of!(xcb_render_create_glyph_set_request_t, format) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_reference_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub gsid: xcb_render_glyphset_t,
    pub existing: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_reference_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_reference_glyph_set_request_t>() - 12usize];
    ["Alignment of xcb_render_reference_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_reference_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::gsid"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, gsid) - 4usize];
    ["Offset of field: xcb_render_reference_glyph_set_request_t::existing"]
        [::std::mem::offset_of!(xcb_render_reference_glyph_set_request_t, existing) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_glyph_set_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_glyph_set_request_t"]
        [::std::mem::size_of::<xcb_render_free_glyph_set_request_t>() - 8usize];
    ["Alignment of xcb_render_free_glyph_set_request_t"]
        [::std::mem::align_of::<xcb_render_free_glyph_set_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_glyph_set_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_free_glyph_set_request_t, glyphset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_add_glyphs_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
    pub glyphs_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_add_glyphs_request_t"]
        [::std::mem::size_of::<xcb_render_add_glyphs_request_t>() - 12usize];
    ["Alignment of xcb_render_add_glyphs_request_t"]
        [::std::mem::align_of::<xcb_render_add_glyphs_request_t>() - 4usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::length"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, length) - 2usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, glyphset) - 4usize];
    ["Offset of field: xcb_render_add_glyphs_request_t::glyphs_len"]
        [::std::mem::offset_of!(xcb_render_add_glyphs_request_t, glyphs_len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_free_glyphs_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub glyphset: xcb_render_glyphset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_free_glyphs_request_t"]
        [::std::mem::size_of::<xcb_render_free_glyphs_request_t>() - 8usize];
    ["Alignment of xcb_render_free_glyphs_request_t"]
        [::std::mem::align_of::<xcb_render_free_glyphs_request_t>() - 4usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::length"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, length) - 2usize];
    ["Offset of field: xcb_render_free_glyphs_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_free_glyphs_request_t, glyphset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_8_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_8_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_8_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_8_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_8_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_8_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_8_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_16_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_16_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_16_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_16_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_16_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_16_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_16_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_composite_glyphs_32_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub src: xcb_render_picture_t,
    pub dst: xcb_render_picture_t,
    pub mask_format: xcb_render_pictformat_t,
    pub glyphset: xcb_render_glyphset_t,
    pub src_x: i16,
    pub src_y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_composite_glyphs_32_request_t"]
        [::std::mem::size_of::<xcb_render_composite_glyphs_32_request_t>() - 28usize];
    ["Alignment of xcb_render_composite_glyphs_32_request_t"]
        [::std::mem::align_of::<xcb_render_composite_glyphs_32_request_t>() - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::length"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, length) - 2usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::op"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, op) - 4usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src) - 8usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, dst) - 12usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::mask_format"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, mask_format) - 16usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::glyphset"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, glyphset) - 20usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src_x"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src_x) - 24usize];
    ["Offset of field: xcb_render_composite_glyphs_32_request_t::src_y"]
        [::std::mem::offset_of!(xcb_render_composite_glyphs_32_request_t, src_y) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_fill_rectangles_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub op: u8,
    pub pad0: [u8; 3usize],
    pub dst: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_fill_rectangles_request_t"]
        [::std::mem::size_of::<xcb_render_fill_rectangles_request_t>() - 20usize];
    ["Alignment of xcb_render_fill_rectangles_request_t"]
        [::std::mem::align_of::<xcb_render_fill_rectangles_request_t>() - 4usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::length"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, length) - 2usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::op"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, op) - 4usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, pad0) - 5usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::dst"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, dst) - 8usize];
    ["Offset of field: xcb_render_fill_rectangles_request_t::color"]
        [::std::mem::offset_of!(xcb_render_fill_rectangles_request_t, color) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_cursor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
    pub source: xcb_render_picture_t,
    pub x: u16,
    pub y: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_cursor_request_t"]
        [::std::mem::size_of::<xcb_render_create_cursor_request_t>() - 16usize];
    ["Alignment of xcb_render_create_cursor_request_t"]
        [::std::mem::align_of::<xcb_render_create_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_cursor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, cid) - 4usize];
    ["Offset of field: xcb_render_create_cursor_request_t::source"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, source) - 8usize];
    ["Offset of field: xcb_render_create_cursor_request_t::x"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, x) - 12usize];
    ["Offset of field: xcb_render_create_cursor_request_t::y"]
        [::std::mem::offset_of!(xcb_render_create_cursor_request_t, y) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_transform_t {
    pub matrix11: xcb_render_fixed_t,
    pub matrix12: xcb_render_fixed_t,
    pub matrix13: xcb_render_fixed_t,
    pub matrix21: xcb_render_fixed_t,
    pub matrix22: xcb_render_fixed_t,
    pub matrix23: xcb_render_fixed_t,
    pub matrix31: xcb_render_fixed_t,
    pub matrix32: xcb_render_fixed_t,
    pub matrix33: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_transform_t"][::std::mem::size_of::<xcb_render_transform_t>() - 36usize];
    ["Alignment of xcb_render_transform_t"]
        [::std::mem::align_of::<xcb_render_transform_t>() - 4usize];
    ["Offset of field: xcb_render_transform_t::matrix11"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix11) - 0usize];
    ["Offset of field: xcb_render_transform_t::matrix12"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix12) - 4usize];
    ["Offset of field: xcb_render_transform_t::matrix13"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix13) - 8usize];
    ["Offset of field: xcb_render_transform_t::matrix21"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix21) - 12usize];
    ["Offset of field: xcb_render_transform_t::matrix22"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix22) - 16usize];
    ["Offset of field: xcb_render_transform_t::matrix23"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix23) - 20usize];
    ["Offset of field: xcb_render_transform_t::matrix31"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix31) - 24usize];
    ["Offset of field: xcb_render_transform_t::matrix32"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix32) - 28usize];
    ["Offset of field: xcb_render_transform_t::matrix33"]
        [::std::mem::offset_of!(xcb_render_transform_t, matrix33) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_transform_iterator_t {
    pub data: *mut xcb_render_transform_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_transform_iterator_t"]
        [::std::mem::size_of::<xcb_render_transform_iterator_t>() - 16usize];
    ["Alignment of xcb_render_transform_iterator_t"]
        [::std::mem::align_of::<xcb_render_transform_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_transform_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_transform_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_transform_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_transform_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub transform: xcb_render_transform_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_transform_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_transform_request_t>() - 44usize];
    ["Alignment of xcb_render_set_picture_transform_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_transform_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_set_picture_transform_request_t::transform"]
        [::std::mem::offset_of!(xcb_render_set_picture_transform_request_t, transform) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_cookie_t"]
        [::std::mem::size_of::<xcb_render_query_filters_cookie_t>() - 4usize];
    ["Alignment of xcb_render_query_filters_cookie_t"]
        [::std::mem::align_of::<xcb_render_query_filters_cookie_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_filters_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub drawable: xcb_drawable_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_request_t"]
        [::std::mem::size_of::<xcb_render_query_filters_request_t>() - 8usize];
    ["Alignment of xcb_render_query_filters_request_t"]
        [::std::mem::align_of::<xcb_render_query_filters_request_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_query_filters_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_query_filters_request_t::length"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, length) - 2usize];
    ["Offset of field: xcb_render_query_filters_request_t::drawable"]
        [::std::mem::offset_of!(xcb_render_query_filters_request_t, drawable) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_query_filters_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_aliases: u32,
    pub num_filters: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_query_filters_reply_t"]
        [::std::mem::size_of::<xcb_render_query_filters_reply_t>() - 32usize];
    ["Alignment of xcb_render_query_filters_reply_t"]
        [::std::mem::align_of::<xcb_render_query_filters_reply_t>() - 4usize];
    ["Offset of field: xcb_render_query_filters_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_render_query_filters_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_render_query_filters_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_render_query_filters_reply_t::length"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, length) - 4usize];
    ["Offset of field: xcb_render_query_filters_reply_t::num_aliases"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, num_aliases) - 8usize];
    ["Offset of field: xcb_render_query_filters_reply_t::num_filters"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, num_filters) - 12usize];
    ["Offset of field: xcb_render_query_filters_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_render_query_filters_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_set_picture_filter_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub filter_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_set_picture_filter_request_t"]
        [::std::mem::size_of::<xcb_render_set_picture_filter_request_t>() - 12usize];
    ["Alignment of xcb_render_set_picture_filter_request_t"]
        [::std::mem::align_of::<xcb_render_set_picture_filter_request_t>() - 4usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::length"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, length) - 2usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::filter_len"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, filter_len) - 8usize];
    ["Offset of field: xcb_render_set_picture_filter_request_t::pad0"]
        [::std::mem::offset_of!(xcb_render_set_picture_filter_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_animcursorelt_t {
    pub cursor: xcb_cursor_t,
    pub delay: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_animcursorelt_t"]
        [::std::mem::size_of::<xcb_render_animcursorelt_t>() - 8usize];
    ["Alignment of xcb_render_animcursorelt_t"]
        [::std::mem::align_of::<xcb_render_animcursorelt_t>() - 4usize];
    ["Offset of field: xcb_render_animcursorelt_t::cursor"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_t, cursor) - 0usize];
    ["Offset of field: xcb_render_animcursorelt_t::delay"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_t, delay) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_animcursorelt_iterator_t {
    pub data: *mut xcb_render_animcursorelt_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_animcursorelt_iterator_t"]
        [::std::mem::size_of::<xcb_render_animcursorelt_iterator_t>() - 16usize];
    ["Alignment of xcb_render_animcursorelt_iterator_t"]
        [::std::mem::align_of::<xcb_render_animcursorelt_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_animcursorelt_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_animcursorelt_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_anim_cursor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub cid: xcb_cursor_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_anim_cursor_request_t"]
        [::std::mem::size_of::<xcb_render_create_anim_cursor_request_t>() - 8usize];
    ["Alignment of xcb_render_create_anim_cursor_request_t"]
        [::std::mem::align_of::<xcb_render_create_anim_cursor_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_anim_cursor_request_t::cid"]
        [::std::mem::offset_of!(xcb_render_create_anim_cursor_request_t, cid) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_spanfix_t {
    pub l: xcb_render_fixed_t,
    pub r: xcb_render_fixed_t,
    pub y: xcb_render_fixed_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_spanfix_t"][::std::mem::size_of::<xcb_render_spanfix_t>() - 12usize];
    ["Alignment of xcb_render_spanfix_t"][::std::mem::align_of::<xcb_render_spanfix_t>() - 4usize];
    ["Offset of field: xcb_render_spanfix_t::l"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, l) - 0usize];
    ["Offset of field: xcb_render_spanfix_t::r"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, r) - 4usize];
    ["Offset of field: xcb_render_spanfix_t::y"]
        [::std::mem::offset_of!(xcb_render_spanfix_t, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_spanfix_iterator_t {
    pub data: *mut xcb_render_spanfix_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_spanfix_iterator_t"]
        [::std::mem::size_of::<xcb_render_spanfix_iterator_t>() - 16usize];
    ["Alignment of xcb_render_spanfix_iterator_t"]
        [::std::mem::align_of::<xcb_render_spanfix_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_spanfix_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_spanfix_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trap_t {
    pub top: xcb_render_spanfix_t,
    pub bot: xcb_render_spanfix_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trap_t"][::std::mem::size_of::<xcb_render_trap_t>() - 24usize];
    ["Alignment of xcb_render_trap_t"][::std::mem::align_of::<xcb_render_trap_t>() - 4usize];
    ["Offset of field: xcb_render_trap_t::top"]
        [::std::mem::offset_of!(xcb_render_trap_t, top) - 0usize];
    ["Offset of field: xcb_render_trap_t::bot"]
        [::std::mem::offset_of!(xcb_render_trap_t, bot) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_trap_iterator_t {
    pub data: *mut xcb_render_trap_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_trap_iterator_t"]
        [::std::mem::size_of::<xcb_render_trap_iterator_t>() - 16usize];
    ["Alignment of xcb_render_trap_iterator_t"]
        [::std::mem::align_of::<xcb_render_trap_iterator_t>() - 8usize];
    ["Offset of field: xcb_render_trap_iterator_t::data"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, data) - 0usize];
    ["Offset of field: xcb_render_trap_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_render_trap_iterator_t::index"]
        [::std::mem::offset_of!(xcb_render_trap_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_add_traps_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub x_off: i16,
    pub y_off: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_add_traps_request_t"]
        [::std::mem::size_of::<xcb_render_add_traps_request_t>() - 12usize];
    ["Alignment of xcb_render_add_traps_request_t"]
        [::std::mem::align_of::<xcb_render_add_traps_request_t>() - 4usize];
    ["Offset of field: xcb_render_add_traps_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_add_traps_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_add_traps_request_t::length"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, length) - 2usize];
    ["Offset of field: xcb_render_add_traps_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_add_traps_request_t::x_off"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, x_off) - 8usize];
    ["Offset of field: xcb_render_add_traps_request_t::y_off"]
        [::std::mem::offset_of!(xcb_render_add_traps_request_t, y_off) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_solid_fill_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub color: xcb_render_color_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_solid_fill_request_t"]
        [::std::mem::size_of::<xcb_render_create_solid_fill_request_t>() - 16usize];
    ["Alignment of xcb_render_create_solid_fill_request_t"]
        [::std::mem::align_of::<xcb_render_create_solid_fill_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_solid_fill_request_t::color"]
        [::std::mem::offset_of!(xcb_render_create_solid_fill_request_t, color) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_linear_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub p1: xcb_render_pointfix_t,
    pub p2: xcb_render_pointfix_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_linear_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_linear_gradient_request_t>() - 28usize];
    ["Alignment of xcb_render_create_linear_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_linear_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_linear_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_linear_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::p1"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, p1) - 8usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::p2"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, p2) - 16usize];
    ["Offset of field: xcb_render_create_linear_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_linear_gradient_request_t, num_stops) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_radial_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub inner: xcb_render_pointfix_t,
    pub outer: xcb_render_pointfix_t,
    pub inner_radius: xcb_render_fixed_t,
    pub outer_radius: xcb_render_fixed_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_radial_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_radial_gradient_request_t>() - 36usize];
    ["Alignment of xcb_render_create_radial_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_radial_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::inner"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, inner) - 8usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::outer"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, outer) - 16usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::inner_radius"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        inner_radius
    ) - 24usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::outer_radius"][::std::mem::offset_of!(
        xcb_render_create_radial_gradient_request_t,
        outer_radius
    ) - 28usize];
    ["Offset of field: xcb_render_create_radial_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_radial_gradient_request_t, num_stops) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_render_create_conical_gradient_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub picture: xcb_render_picture_t,
    pub center: xcb_render_pointfix_t,
    pub angle: xcb_render_fixed_t,
    pub num_stops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_render_create_conical_gradient_request_t"]
        [::std::mem::size_of::<xcb_render_create_conical_gradient_request_t>() - 24usize];
    ["Alignment of xcb_render_create_conical_gradient_request_t"]
        [::std::mem::align_of::<xcb_render_create_conical_gradient_request_t>() - 4usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_render_create_conical_gradient_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_render_create_conical_gradient_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::length"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, length) - 2usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::picture"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, picture) - 4usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::center"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, center) - 8usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::angle"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, angle) - 16usize];
    ["Offset of field: xcb_render_create_conical_gradient_request_t::num_stops"]
        [::std::mem::offset_of!(xcb_render_create_conical_gradient_request_t, num_stops) - 20usize];
};
unsafe extern "C" {
    pub fn xcb_render_glyph_next(i: *mut xcb_render_glyph_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyph_end(i: xcb_render_glyph_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_glyphset_next(i: *mut xcb_render_glyphset_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyphset_end(i: xcb_render_glyphset_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_picture_next(i: *mut xcb_render_picture_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_picture_end(i: xcb_render_picture_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictformat_next(i: *mut xcb_render_pictformat_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictformat_end(i: xcb_render_pictformat_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_fixed_next(i: *mut xcb_render_fixed_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_fixed_end(i: xcb_render_fixed_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_directformat_next(i: *mut xcb_render_directformat_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_directformat_end(
        i: xcb_render_directformat_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictforminfo_next(i: *mut xcb_render_pictforminfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictforminfo_end(
        i: xcb_render_pictforminfo_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictvisual_next(i: *mut xcb_render_pictvisual_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictvisual_end(i: xcb_render_pictvisual_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals(
        R: *const xcb_render_pictdepth_t,
    ) -> *mut xcb_render_pictvisual_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals_length(
        R: *const xcb_render_pictdepth_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_visuals_iterator(
        R: *const xcb_render_pictdepth_t,
    ) -> xcb_render_pictvisual_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_next(i: *mut xcb_render_pictdepth_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictdepth_end(i: xcb_render_pictdepth_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_depths_length(
        R: *const xcb_render_pictscreen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_depths_iterator(
        R: *const xcb_render_pictscreen_t,
    ) -> xcb_render_pictdepth_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_next(i: *mut xcb_render_pictscreen_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pictscreen_end(i: xcb_render_pictscreen_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_indexvalue_next(i: *mut xcb_render_indexvalue_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_indexvalue_end(i: xcb_render_indexvalue_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_color_next(i: *mut xcb_render_color_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_color_end(i: xcb_render_color_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_pointfix_next(i: *mut xcb_render_pointfix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_pointfix_end(i: xcb_render_pointfix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_linefix_next(i: *mut xcb_render_linefix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_linefix_end(i: xcb_render_linefix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangle_next(i: *mut xcb_render_triangle_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_triangle_end(i: xcb_render_triangle_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoid_next(i: *mut xcb_render_trapezoid_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_trapezoid_end(i: xcb_render_trapezoid_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_glyphinfo_next(i: *mut xcb_render_glyphinfo_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_glyphinfo_end(i: xcb_render_glyphinfo_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version(
        c: *mut xcb_connection_t,
        client_major_version: u32,
        client_minor_version: u32,
    ) -> xcb_render_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version_unchecked(
        c: *mut xcb_connection_t,
        client_major_version: u32,
        client_minor_version: u32,
    ) -> xcb_render_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_version_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_version_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_version_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats(
        c: *mut xcb_connection_t,
    ) -> xcb_render_query_pict_formats_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_unchecked(
        c: *mut xcb_connection_t,
    ) -> xcb_render_query_pict_formats_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> *mut xcb_render_pictforminfo_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_formats_iterator(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_render_pictforminfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_screens_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_screens_iterator(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_render_pictscreen_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels_length(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_subpixels_end(
        R: *const xcb_render_query_pict_formats_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_formats_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_pict_formats_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_pict_formats_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values(
        c: *mut xcb_connection_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_render_query_pict_index_values_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_unchecked(
        c: *mut xcb_connection_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_render_query_pict_index_values_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> *mut xcb_render_indexvalue_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values_length(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_values_iterator(
        R: *const xcb_render_query_pict_index_values_reply_t,
    ) -> xcb_render_indexvalue_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_pict_index_values_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_pict_index_values_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_pict_index_values_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_render_create_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_render_create_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_checked(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_aux_checked(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const xcb_render_create_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_aux(
        c: *mut xcb_connection_t,
        pid: xcb_render_picture_t,
        drawable: xcb_drawable_t,
        format: xcb_render_pictformat_t,
        value_mask: u32,
        value_list: *const xcb_render_create_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_picture_value_list(
        R: *const xcb_render_create_picture_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_serialize(
        _buffer: *mut *mut ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *const xcb_render_change_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_unpack(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
        _aux: *mut xcb_render_change_picture_value_list_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        value_mask: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_aux_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const xcb_render_change_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_aux(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        value_mask: u32,
        value_list: *const xcb_render_change_picture_value_list_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_change_picture_value_list(
        R: *const xcb_render_change_picture_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rectangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        clip_x_origin: i16,
        clip_y_origin: i16,
        rectangles_len: u32,
        rectangles: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles_length(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_clip_rectangles_rectangles_iterator(
        R: *const xcb_render_set_picture_clip_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_picture_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_picture(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        mask: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        src_x: i16,
        src_y: i16,
        mask_x: i16,
        mask_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        mask: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        src_x: i16,
        src_y: i16,
        mask_x: i16,
        mask_y: i16,
        dst_x: i16,
        dst_y: i16,
        width: u16,
        height: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        traps_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        traps_len: u32,
        traps: *const xcb_render_trapezoid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        traps_len: u32,
        traps: *const xcb_render_trapezoid_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps(
        R: *const xcb_render_trapezoids_request_t,
    ) -> *mut xcb_render_trapezoid_t;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps_length(
        R: *const xcb_render_trapezoids_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_trapezoids_traps_iterator(
        R: *const xcb_render_trapezoids_request_t,
    ) -> xcb_render_trapezoid_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        triangles_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        triangles_len: u32,
        triangles: *const xcb_render_triangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        triangles_len: u32,
        triangles: *const xcb_render_triangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles(
        R: *const xcb_render_triangles_request_t,
    ) -> *mut xcb_render_triangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles_length(
        R: *const xcb_render_triangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_triangles_triangles_iterator(
        R: *const xcb_render_triangles_request_t,
    ) -> xcb_render_triangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points(
        R: *const xcb_render_tri_strip_request_t,
    ) -> *mut xcb_render_pointfix_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points_length(
        R: *const xcb_render_tri_strip_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_strip_points_iterator(
        R: *const xcb_render_tri_strip_request_t,
    ) -> xcb_render_pointfix_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        points_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        src_x: i16,
        src_y: i16,
        points_len: u32,
        points: *const xcb_render_pointfix_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points(
        R: *const xcb_render_tri_fan_request_t,
    ) -> *mut xcb_render_pointfix_t;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points_length(
        R: *const xcb_render_tri_fan_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_tri_fan_points_iterator(
        R: *const xcb_render_tri_fan_request_t,
    ) -> xcb_render_pointfix_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_glyph_set_checked(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_glyph_set(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        format: xcb_render_pictformat_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_reference_glyph_set_checked(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        existing: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_reference_glyph_set(
        c: *mut xcb_connection_t,
        gsid: xcb_render_glyphset_t,
        existing: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyph_set_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyph_set(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        data_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphids: *const u32,
        glyphs: *const xcb_render_glyphinfo_t,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphids: *const u32,
        glyphs: *const xcb_render_glyphinfo_t,
        data_len: u32,
        data: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids(R: *const xcb_render_add_glyphs_request_t) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphids_end(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> *mut xcb_render_glyphinfo_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_glyphs_iterator(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_render_glyphinfo_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data(R: *const xcb_render_add_glyphs_request_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data_length(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_glyphs_data_end(
        R: *const xcb_render_add_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_checked(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphs: *const xcb_render_glyph_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs(
        c: *mut xcb_connection_t,
        glyphset: xcb_render_glyphset_t,
        glyphs_len: u32,
        glyphs: *const xcb_render_glyph_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> *mut xcb_render_glyph_t;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs_length(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_free_glyphs_glyphs_end(
        R: *const xcb_render_free_glyphs_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_8_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_8_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_16_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_16_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        glyphcmds_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_checked(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32(
        c: *mut xcb_connection_t,
        op: u8,
        src: xcb_render_picture_t,
        dst: xcb_render_picture_t,
        mask_format: xcb_render_pictformat_t,
        glyphset: xcb_render_glyphset_t,
        src_x: i16,
        src_y: i16,
        glyphcmds_len: u32,
        glyphcmds: *const u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds_length(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_composite_glyphs_32_glyphcmds_end(
        R: *const xcb_render_composite_glyphs_32_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        rects_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_checked(
        c: *mut xcb_connection_t,
        op: u8,
        dst: xcb_render_picture_t,
        color: xcb_render_color_t,
        rects_len: u32,
        rects: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles(
        c: *mut xcb_connection_t,
        op: u8,
        dst: xcb_render_picture_t,
        color: xcb_render_color_t,
        rects_len: u32,
        rects: *const xcb_rectangle_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> *mut xcb_rectangle_t;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects_length(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_fill_rectangles_rects_iterator(
        R: *const xcb_render_fill_rectangles_request_t,
    ) -> xcb_rectangle_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_render_picture_t,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        source: xcb_render_picture_t,
        x: u16,
        y: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_transform_next(i: *mut xcb_render_transform_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_transform_end(i: xcb_render_transform_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_transform_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        transform: xcb_render_transform_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_transform(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        transform: xcb_render_transform_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_render_query_filters_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_unchecked(
        c: *mut xcb_connection_t,
        drawable: xcb_drawable_t,
    ) -> xcb_render_query_filters_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases(R: *const xcb_render_query_filters_reply_t)
        -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases_length(
        R: *const xcb_render_query_filters_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_aliases_end(
        R: *const xcb_render_query_filters_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_filters_length(
        R: *const xcb_render_query_filters_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_filters_iterator(
        R: *const xcb_render_query_filters_reply_t,
    ) -> xcb_str_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_query_filters_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_render_query_filters_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_render_query_filters_reply_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        filter_len: u16,
        filter: *const ::std::os::raw::c_char,
        values_len: u32,
        values: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        filter_len: u16,
        filter: *const ::std::os::raw::c_char,
        values_len: u32,
        values: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter_length(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_filter_end(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values_length(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_set_picture_filter_values_end(
        R: *const xcb_render_set_picture_filter_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_animcursorelt_next(i: *mut xcb_render_animcursorelt_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_animcursorelt_end(
        i: xcb_render_animcursorelt_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        cursors_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_checked(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        cursors_len: u32,
        cursors: *const xcb_render_animcursorelt_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor(
        c: *mut xcb_connection_t,
        cid: xcb_cursor_t,
        cursors_len: u32,
        cursors: *const xcb_render_animcursorelt_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> *mut xcb_render_animcursorelt_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors_length(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_anim_cursor_cursors_iterator(
        R: *const xcb_render_create_anim_cursor_request_t,
    ) -> xcb_render_animcursorelt_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_spanfix_next(i: *mut xcb_render_spanfix_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_spanfix_end(i: xcb_render_spanfix_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_trap_next(i: *mut xcb_render_trap_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_render_trap_end(i: xcb_render_trap_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        traps_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        x_off: i16,
        y_off: i16,
        traps_len: u32,
        traps: *const xcb_render_trap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        x_off: i16,
        y_off: i16,
        traps_len: u32,
        traps: *const xcb_render_trap_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps(
        R: *const xcb_render_add_traps_request_t,
    ) -> *mut xcb_render_trap_t;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps_length(
        R: *const xcb_render_add_traps_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_add_traps_traps_iterator(
        R: *const xcb_render_add_traps_request_t,
    ) -> xcb_render_trap_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_solid_fill_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        color: xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_solid_fill(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        color: xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        p1: xcb_render_pointfix_t,
        p2: xcb_render_pointfix_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        p1: xcb_render_pointfix_t,
        p2: xcb_render_pointfix_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops_length(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_stops_end(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors_length(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_linear_gradient_colors_iterator(
        R: *const xcb_render_create_linear_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        inner: xcb_render_pointfix_t,
        outer: xcb_render_pointfix_t,
        inner_radius: xcb_render_fixed_t,
        outer_radius: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        inner: xcb_render_pointfix_t,
        outer: xcb_render_pointfix_t,
        inner_radius: xcb_render_fixed_t,
        outer_radius: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops_length(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_stops_end(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors_length(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_radial_gradient_colors_iterator(
        R: *const xcb_render_create_radial_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_checked(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        center: xcb_render_pointfix_t,
        angle: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient(
        c: *mut xcb_connection_t,
        picture: xcb_render_picture_t,
        center: xcb_render_pointfix_t,
        angle: xcb_render_fixed_t,
        num_stops: u32,
        stops: *const xcb_render_fixed_t,
        colors: *const xcb_render_color_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops_length(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_stops_end(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> *mut xcb_render_color_t;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors_length(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_render_create_conical_gradient_colors_iterator(
        R: *const xcb_render_create_conical_gradient_request_t,
    ) -> xcb_render_color_iterator_t;
}
unsafe extern "C" {
    pub static mut xcb_randr_id: xcb_extension_t;
}
pub type xcb_randr_mode_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_iterator_t {
    pub data: *mut xcb_randr_mode_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_iterator_t"]
        [::std::mem::size_of::<xcb_randr_mode_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_mode_iterator_t"]
        [::std::mem::align_of::<xcb_randr_mode_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_mode_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_mode_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_mode_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_mode_iterator_t, index) - 12usize];
};
pub type xcb_randr_crtc_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_iterator_t {
    pub data: *mut xcb_randr_crtc_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_iterator_t"]
        [::std::mem::size_of::<xcb_randr_crtc_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_crtc_iterator_t"]
        [::std::mem::align_of::<xcb_randr_crtc_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_crtc_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_crtc_iterator_t, index) - 12usize];
};
pub type xcb_randr_output_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_iterator_t {
    pub data: *mut xcb_randr_output_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_iterator_t, index) - 12usize];
};
pub type xcb_randr_provider_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_iterator_t {
    pub data: *mut xcb_randr_provider_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_iterator_t, index) - 12usize];
};
pub type xcb_randr_lease_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_iterator_t {
    pub data: *mut xcb_randr_lease_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_iterator_t"]
        [::std::mem::size_of::<xcb_randr_lease_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_lease_iterator_t"]
        [::std::mem::align_of::<xcb_randr_lease_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_lease_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_lease_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_lease_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_lease_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_output_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_output_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_output_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_output_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_output_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_output_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_output_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_output_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_output_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_output_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_output_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_output_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_crtc_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_crtc_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_crtc_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_crtc_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_crtc_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_crtc_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_crtc_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_mode_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_mode_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_mode_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_mode_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_mode_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_mode_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_mode_error_t, major_opcode) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_bad_provider_error_t {
    pub response_type: u8,
    pub error_code: u8,
    pub sequence: u16,
    pub bad_value: u32,
    pub minor_opcode: u16,
    pub major_opcode: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_bad_provider_error_t"]
        [::std::mem::size_of::<xcb_randr_bad_provider_error_t>() - 12usize];
    ["Alignment of xcb_randr_bad_provider_error_t"]
        [::std::mem::align_of::<xcb_randr_bad_provider_error_t>() - 4usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::error_code"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, error_code) - 1usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::bad_value"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, bad_value) - 4usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, minor_opcode) - 8usize];
    ["Offset of field: xcb_randr_bad_provider_error_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_bad_provider_error_t, major_opcode) - 10usize];
};
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_0: xcb_randr_rotation_t = 1;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_90: xcb_randr_rotation_t = 2;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_180: xcb_randr_rotation_t = 4;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_ROTATE_270: xcb_randr_rotation_t = 8;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_REFLECT_X: xcb_randr_rotation_t = 16;
pub const xcb_randr_rotation_t_XCB_RANDR_ROTATION_REFLECT_Y: xcb_randr_rotation_t = 32;
pub type xcb_randr_rotation_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_size_t {
    pub width: u16,
    pub height: u16,
    pub mwidth: u16,
    pub mheight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_size_t"][::std::mem::size_of::<xcb_randr_screen_size_t>() - 8usize];
    ["Alignment of xcb_randr_screen_size_t"]
        [::std::mem::align_of::<xcb_randr_screen_size_t>() - 2usize];
    ["Offset of field: xcb_randr_screen_size_t::width"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, width) - 0usize];
    ["Offset of field: xcb_randr_screen_size_t::height"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, height) - 2usize];
    ["Offset of field: xcb_randr_screen_size_t::mwidth"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, mwidth) - 4usize];
    ["Offset of field: xcb_randr_screen_size_t::mheight"]
        [::std::mem::offset_of!(xcb_randr_screen_size_t, mheight) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_size_iterator_t {
    pub data: *mut xcb_randr_screen_size_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_size_iterator_t"]
        [::std::mem::size_of::<xcb_randr_screen_size_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_screen_size_iterator_t"]
        [::std::mem::align_of::<xcb_randr_screen_size_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_screen_size_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_screen_size_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_refresh_rates_t {
    pub nRates: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_refresh_rates_t"]
        [::std::mem::size_of::<xcb_randr_refresh_rates_t>() - 2usize];
    ["Alignment of xcb_randr_refresh_rates_t"]
        [::std::mem::align_of::<xcb_randr_refresh_rates_t>() - 2usize];
    ["Offset of field: xcb_randr_refresh_rates_t::nRates"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_t, nRates) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_refresh_rates_iterator_t {
    pub data: *mut xcb_randr_refresh_rates_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_refresh_rates_iterator_t"]
        [::std::mem::size_of::<xcb_randr_refresh_rates_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_refresh_rates_iterator_t"]
        [::std::mem::align_of::<xcb_randr_refresh_rates_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_refresh_rates_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_refresh_rates_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_version_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_version_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_version_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_version_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub major_version: u32,
    pub minor_version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_request_t"]
        [::std::mem::size_of::<xcb_randr_query_version_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_version_request_t"]
        [::std::mem::align_of::<xcb_randr_query_version_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_query_version_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_query_version_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_version_request_t::major_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, major_version) - 4usize];
    ["Offset of field: xcb_randr_query_version_request_t::minor_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_request_t, minor_version) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_version_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub major_version: u32,
    pub minor_version: u32,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_version_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_version_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_version_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_version_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_version_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_version_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_version_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_version_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_version_reply_t::major_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, major_version) - 8usize];
    ["Offset of field: xcb_randr_query_version_reply_t::minor_version"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, minor_version) - 12usize];
    ["Offset of field: xcb_randr_query_version_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_version_reply_t, pad1) - 16usize];
};
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_SUCCESS: xcb_randr_set_config_t = 0;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_INVALID_CONFIG_TIME: xcb_randr_set_config_t =
    1;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_INVALID_TIME: xcb_randr_set_config_t = 2;
pub const xcb_randr_set_config_t_XCB_RANDR_SET_CONFIG_FAILED: xcb_randr_set_config_t = 3;
pub type xcb_randr_set_config_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_screen_config_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub sizeID: u16,
    pub rotation: u16,
    pub rate: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_request_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_request_t>() - 24usize];
    ["Alignment of xcb_randr_set_screen_config_request_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, sizeID) - 16usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, rotation) - 18usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::rate"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, rate) - 20usize];
    ["Offset of field: xcb_randr_set_screen_config_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_request_t, pad0) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_config_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub new_timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub subpixel_order: u16,
    pub pad0: [u8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_config_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_config_reply_t>() - 32usize];
    ["Alignment of xcb_randr_set_screen_config_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_config_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::new_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, new_timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::root"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, root) - 16usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, subpixel_order) - 20usize];
    ["Offset of field: xcb_randr_set_screen_config_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_screen_config_reply_t, pad0) - 22usize];
};
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_SCREEN_CHANGE: xcb_randr_notify_mask_t = 1;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_CRTC_CHANGE: xcb_randr_notify_mask_t = 2;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_OUTPUT_CHANGE: xcb_randr_notify_mask_t = 4;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_OUTPUT_PROPERTY: xcb_randr_notify_mask_t =
    8;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_PROVIDER_CHANGE: xcb_randr_notify_mask_t =
    16;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_PROVIDER_PROPERTY: xcb_randr_notify_mask_t =
    32;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_RESOURCE_CHANGE: xcb_randr_notify_mask_t =
    64;
pub const xcb_randr_notify_mask_t_XCB_RANDR_NOTIFY_MASK_LEASE: xcb_randr_notify_mask_t = 128;
pub type xcb_randr_notify_mask_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_select_input_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub enable: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_select_input_request_t"]
        [::std::mem::size_of::<xcb_randr_select_input_request_t>() - 12usize];
    ["Alignment of xcb_randr_select_input_request_t"]
        [::std::mem::align_of::<xcb_randr_select_input_request_t>() - 4usize];
    ["Offset of field: xcb_randr_select_input_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_select_input_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_select_input_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_select_input_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_select_input_request_t::enable"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, enable) - 8usize];
    ["Offset of field: xcb_randr_select_input_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_select_input_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_info_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_info_reply_t {
    pub response_type: u8,
    pub rotations: u8,
    pub sequence: u16,
    pub length: u32,
    pub root: xcb_window_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub nSizes: u16,
    pub sizeID: u16,
    pub rotation: u16,
    pub rate: u16,
    pub nInfo: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rotations"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rotations) - 1usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::root"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, root) - 8usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, config_timestamp) - 16usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::nSizes"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, nSizes) - 20usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, sizeID) - 22usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::rate"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, rate) - 26usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::nInfo"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, nInfo) - 28usize];
    ["Offset of field: xcb_randr_get_screen_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_info_reply_t, pad0) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_size_range_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_size_range_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_size_range_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_size_range_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub min_width: u16,
    pub min_height: u16,
    pub max_width: u16,
    pub max_height: u16,
    pub pad1: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_size_range_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_size_range_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_size_range_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_size_range_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::min_width"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, min_width) - 8usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::min_height"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, min_height) - 10usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::max_width"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, max_width) - 12usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::max_height"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, max_height) - 14usize];
    ["Offset of field: xcb_randr_get_screen_size_range_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_size_range_reply_t, pad1) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_screen_size_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub width: u16,
    pub height: u16,
    pub mm_width: u32,
    pub mm_height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_screen_size_request_t"]
        [::std::mem::size_of::<xcb_randr_set_screen_size_request_t>() - 20usize];
    ["Alignment of xcb_randr_set_screen_size_request_t"]
        [::std::mem::align_of::<xcb_randr_set_screen_size_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::width"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, width) - 8usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::height"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, height) - 10usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::mm_width"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, mm_width) - 12usize];
    ["Offset of field: xcb_randr_set_screen_size_request_t::mm_height"]
        [::std::mem::offset_of!(xcb_randr_set_screen_size_request_t, mm_height) - 16usize];
};
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSYNC_POSITIVE: xcb_randr_mode_flag_t = 1;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSYNC_NEGATIVE: xcb_randr_mode_flag_t = 2;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_VSYNC_POSITIVE: xcb_randr_mode_flag_t = 4;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_VSYNC_NEGATIVE: xcb_randr_mode_flag_t = 8;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_INTERLACE: xcb_randr_mode_flag_t = 16;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_DOUBLE_SCAN: xcb_randr_mode_flag_t = 32;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC: xcb_randr_mode_flag_t = 64;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC_POSITIVE: xcb_randr_mode_flag_t = 128;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_CSYNC_NEGATIVE: xcb_randr_mode_flag_t = 256;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HSKEW_PRESENT: xcb_randr_mode_flag_t = 512;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_BCAST: xcb_randr_mode_flag_t = 1024;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_PIXEL_MULTIPLEX: xcb_randr_mode_flag_t = 2048;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_DOUBLE_CLOCK: xcb_randr_mode_flag_t = 4096;
pub const xcb_randr_mode_flag_t_XCB_RANDR_MODE_FLAG_HALVE_CLOCK: xcb_randr_mode_flag_t = 8192;
pub type xcb_randr_mode_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_info_t {
    pub id: u32,
    pub width: u16,
    pub height: u16,
    pub dot_clock: u32,
    pub hsync_start: u16,
    pub hsync_end: u16,
    pub htotal: u16,
    pub hskew: u16,
    pub vsync_start: u16,
    pub vsync_end: u16,
    pub vtotal: u16,
    pub name_len: u16,
    pub mode_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_info_t"][::std::mem::size_of::<xcb_randr_mode_info_t>() - 32usize];
    ["Alignment of xcb_randr_mode_info_t"]
        [::std::mem::align_of::<xcb_randr_mode_info_t>() - 4usize];
    ["Offset of field: xcb_randr_mode_info_t::id"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, id) - 0usize];
    ["Offset of field: xcb_randr_mode_info_t::width"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, width) - 4usize];
    ["Offset of field: xcb_randr_mode_info_t::height"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, height) - 6usize];
    ["Offset of field: xcb_randr_mode_info_t::dot_clock"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, dot_clock) - 8usize];
    ["Offset of field: xcb_randr_mode_info_t::hsync_start"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hsync_start) - 12usize];
    ["Offset of field: xcb_randr_mode_info_t::hsync_end"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hsync_end) - 14usize];
    ["Offset of field: xcb_randr_mode_info_t::htotal"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, htotal) - 16usize];
    ["Offset of field: xcb_randr_mode_info_t::hskew"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, hskew) - 18usize];
    ["Offset of field: xcb_randr_mode_info_t::vsync_start"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vsync_start) - 20usize];
    ["Offset of field: xcb_randr_mode_info_t::vsync_end"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vsync_end) - 22usize];
    ["Offset of field: xcb_randr_mode_info_t::vtotal"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, vtotal) - 24usize];
    ["Offset of field: xcb_randr_mode_info_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, name_len) - 26usize];
    ["Offset of field: xcb_randr_mode_info_t::mode_flags"]
        [::std::mem::offset_of!(xcb_randr_mode_info_t, mode_flags) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_mode_info_iterator_t {
    pub data: *mut xcb_randr_mode_info_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_mode_info_iterator_t"]
        [::std::mem::size_of::<xcb_randr_mode_info_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_mode_info_iterator_t"]
        [::std::mem::align_of::<xcb_randr_mode_info_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_mode_info_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_mode_info_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_resources_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_resources_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_modes: u16,
    pub names_len: u16,
    pub pad1: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_resources_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_reply_t,
        config_timestamp
    ) - 12usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_crtcs) - 16usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_outputs) - 18usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::num_modes"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, num_modes) - 20usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::names_len"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, names_len) - 22usize];
    ["Offset of field: xcb_randr_get_screen_resources_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_reply_t, pad1) - 24usize];
};
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_CONNECTED: xcb_randr_connection_t = 0;
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_DISCONNECTED: xcb_randr_connection_t = 1;
pub const xcb_randr_connection_t_XCB_RANDR_CONNECTION_UNKNOWN: xcb_randr_connection_t = 2;
pub type xcb_randr_connection_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_output_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_get_output_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub crtc: xcb_randr_crtc_t,
    pub mm_width: u32,
    pub mm_height: u32,
    pub connection: u8,
    pub subpixel_order: u8,
    pub num_crtcs: u16,
    pub num_modes: u16,
    pub num_preferred: u16,
    pub num_clones: u16,
    pub name_len: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_info_reply_t>() - 36usize];
    ["Alignment of xcb_randr_get_output_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, crtc) - 12usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::mm_width"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, mm_width) - 16usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::mm_height"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, mm_height) - 20usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::connection"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, connection) - 24usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, subpixel_order) - 25usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_crtcs) - 26usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_modes"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_modes) - 28usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_preferred"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_preferred) - 30usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::num_clones"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, num_clones) - 32usize];
    ["Offset of field: xcb_randr_get_output_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_get_output_info_reply_t, name_len) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_cookie_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_list_output_properties_cookie_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_request_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_request_t>() - 8usize];
    ["Alignment of xcb_randr_list_output_properties_request_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_request_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_list_output_properties_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_request_t, output) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_output_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_atoms: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_output_properties_reply_t"]
        [::std::mem::size_of::<xcb_randr_list_output_properties_reply_t>() - 32usize];
    ["Alignment of xcb_randr_list_output_properties_reply_t"]
        [::std::mem::align_of::<xcb_randr_list_output_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::num_atoms"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, num_atoms) - 8usize];
    ["Offset of field: xcb_randr_list_output_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_list_output_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_output_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_query_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_output_property_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending: u8,
    pub range: u8,
    pub immutable: u8,
    pub pad1: [u8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_output_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_output_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_output_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_output_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pending"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pending) - 8usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::range"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, range) - 9usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::immutable"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, immutable) - 10usize];
    ["Offset of field: xcb_randr_query_output_property_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_output_property_reply_t, pad1) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_configure_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub pending: u8,
    pub range: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_configure_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_configure_output_property_request_t>() - 16usize];
    ["Alignment of xcb_randr_configure_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_configure_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_output_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_output_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, pending) - 12usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::range"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, range) - 13usize];
    ["Offset of field: xcb_randr_configure_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_configure_output_property_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_change_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub mode: u8,
    pub pad0: [u8; 2usize],
    pub num_units: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_change_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_change_output_property_request_t>() - 24usize];
    ["Alignment of xcb_randr_change_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_change_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::format"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, format) - 16usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, mode) - 17usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_change_output_property_request_t::num_units"]
        [::std::mem::offset_of!(xcb_randr_change_output_property_request_t, num_units) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_output_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_delete_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_delete_output_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
    pub _delete: u8,
    pub pending: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_request_t>() - 28usize];
    ["Alignment of xcb_randr_get_output_property_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, long_length) - 20usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, _delete) - 24usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, pending) - 25usize];
    ["Offset of field: xcb_randr_get_output_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub num_items: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_output_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, num_items) - 16usize];
    ["Offset of field: xcb_randr_get_output_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_cookie_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_create_mode_cookie_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_mode_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub mode_info: xcb_randr_mode_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_request_t>() - 40usize];
    ["Alignment of xcb_randr_create_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_create_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_create_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_create_mode_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_create_mode_request_t::mode_info"]
        [::std::mem::offset_of!(xcb_randr_create_mode_request_t, mode_info) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_mode_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub mode: xcb_randr_mode_t,
    pub pad1: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_mode_reply_t"]
        [::std::mem::size_of::<xcb_randr_create_mode_reply_t>() - 32usize];
    ["Alignment of xcb_randr_create_mode_reply_t"]
        [::std::mem::align_of::<xcb_randr_create_mode_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::mode"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, mode) - 8usize];
    ["Offset of field: xcb_randr_create_mode_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_create_mode_reply_t, pad1) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_destroy_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_destroy_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_destroy_mode_request_t>() - 8usize];
    ["Alignment of xcb_randr_destroy_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_destroy_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_destroy_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_destroy_mode_request_t, mode) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_add_output_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_add_output_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_add_output_mode_request_t>() - 12usize];
    ["Alignment of xcb_randr_add_output_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_add_output_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_add_output_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_add_output_mode_request_t, mode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_output_mode_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub output: xcb_randr_output_t,
    pub mode: xcb_randr_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_output_mode_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_output_mode_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_output_mode_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_output_mode_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, output) - 4usize];
    ["Offset of field: xcb_randr_delete_output_mode_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_delete_output_mode_request_t, mode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_crtc_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub rotations: u16,
    pub num_outputs: u16,
    pub num_possible_outputs: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::x"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, x) - 12usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::y"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, y) - 14usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::width"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, width) - 16usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::height"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, height) - 18usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::mode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, mode) - 20usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::rotations"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, rotations) - 26usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, num_outputs) - 28usize];
    ["Offset of field: xcb_randr_get_crtc_info_reply_t::num_possible_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_info_reply_t, num_possible_outputs) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_crtc_config_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub x: i16,
    pub y: i16,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_request_t>() - 28usize];
    ["Alignment of xcb_randr_set_crtc_config_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, config_timestamp) - 12usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::x"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, x) - 16usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::y"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, y) - 18usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, mode) - 20usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_set_crtc_config_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_config_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_config_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_config_reply_t>() - 32usize];
    ["Alignment of xcb_randr_set_crtc_config_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_config_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_config_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_config_reply_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_size_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub size: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_size_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_size_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_gamma_size_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_size_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::size"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, size) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_size_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_size_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_gamma_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_gamma_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_gamma_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub size: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_gamma_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_gamma_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_crtc_gamma_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_gamma_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::size"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, size) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_gamma_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_gamma_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_gamma_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub size: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_gamma_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_gamma_request_t>() - 12usize];
    ["Alignment of xcb_randr_set_crtc_gamma_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_gamma_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::size"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, size) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_gamma_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_gamma_request_t, pad0) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_screen_resources_current_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_cookie_t::sequence"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_cookie_t,
        sequence
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_request_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_screen_resources_current_request_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_screen_resources_current_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_modes: u16,
    pub names_len: u16,
    pub pad1: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_screen_resources_current_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_screen_resources_current_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_screen_resources_current_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_screen_resources_current_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::response_type"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        timestamp
    ) - 8usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        config_timestamp
    )
        - 12usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_crtcs"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_crtcs
    ) - 16usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_outputs"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_outputs
    ) - 18usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::num_modes"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        num_modes
    ) - 20usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::names_len"][::std::mem::offset_of!(
        xcb_randr_get_screen_resources_current_reply_t,
        names_len
    ) - 22usize];
    ["Offset of field: xcb_randr_get_screen_resources_current_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_screen_resources_current_reply_t, pad1) - 24usize];
};
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_UNIT: xcb_randr_transform_t = 1;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_SCALE_UP: xcb_randr_transform_t = 2;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_SCALE_DOWN: xcb_randr_transform_t = 4;
pub const xcb_randr_transform_t_XCB_RANDR_TRANSFORM_PROJECTIVE: xcb_randr_transform_t = 8;
pub type xcb_randr_transform_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_crtc_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub transform: xcb_render_transform_t,
    pub filter_len: u16,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_crtc_transform_request_t"]
        [::std::mem::size_of::<xcb_randr_set_crtc_transform_request_t>() - 48usize];
    ["Alignment of xcb_randr_set_crtc_transform_request_t"]
        [::std::mem::align_of::<xcb_randr_set_crtc_transform_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::transform"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, transform) - 8usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::filter_len"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, filter_len) - 44usize];
    ["Offset of field: xcb_randr_set_crtc_transform_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_set_crtc_transform_request_t, pad0) - 46usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_crtc_transform_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_request_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_crtc_transform_request_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_transform_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_crtc_transform_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending_transform: xcb_render_transform_t,
    pub has_transforms: u8,
    pub pad1: [u8; 3usize],
    pub current_transform: xcb_render_transform_t,
    pub pad2: [u8; 4usize],
    pub pending_len: u16,
    pub pending_nparams: u16,
    pub current_len: u16,
    pub current_nparams: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_crtc_transform_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_crtc_transform_reply_t>() - 96usize];
    ["Alignment of xcb_randr_get_crtc_transform_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_crtc_transform_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_transform"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_transform) - 8usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::has_transforms"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, has_transforms) - 44usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad1) - 45usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_transform"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_transform) - 48usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pad2"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pad2) - 84usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_len"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_len) - 88usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::pending_nparams"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, pending_nparams) - 90usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_len"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_len) - 92usize];
    ["Offset of field: xcb_randr_get_crtc_transform_reply_t::current_nparams"]
        [::std::mem::offset_of!(xcb_randr_get_crtc_transform_reply_t, current_nparams) - 94usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_panning_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_panning_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_request_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_panning_request_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_panning_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_panning_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_panning_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_get_panning_request_t, crtc) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_panning_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub left: u16,
    pub top: u16,
    pub width: u16,
    pub height: u16,
    pub track_left: u16,
    pub track_top: u16,
    pub track_width: u16,
    pub track_height: u16,
    pub border_left: i16,
    pub border_top: i16,
    pub border_right: i16,
    pub border_bottom: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_panning_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_panning_reply_t>() - 36usize];
    ["Alignment of xcb_randr_get_panning_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_panning_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, left) - 12usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, top) - 14usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::width"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, width) - 16usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::height"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, height) - 18usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_left) - 20usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_top) - 22usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_width"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_width) - 24usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::track_height"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, track_height) - 26usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_left"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_left) - 28usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_top"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_top) - 30usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_right"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_right) - 32usize];
    ["Offset of field: xcb_randr_get_panning_reply_t::border_bottom"]
        [::std::mem::offset_of!(xcb_randr_get_panning_reply_t, border_bottom) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_cookie_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_set_panning_cookie_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_panning_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub crtc: xcb_randr_crtc_t,
    pub timestamp: xcb_timestamp_t,
    pub left: u16,
    pub top: u16,
    pub width: u16,
    pub height: u16,
    pub track_left: u16,
    pub track_top: u16,
    pub track_width: u16,
    pub track_height: u16,
    pub border_left: i16,
    pub border_top: i16,
    pub border_right: i16,
    pub border_bottom: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_request_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_request_t>() - 36usize];
    ["Alignment of xcb_randr_set_panning_request_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_panning_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_panning_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_panning_request_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, crtc) - 4usize];
    ["Offset of field: xcb_randr_set_panning_request_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_set_panning_request_t::left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, left) - 12usize];
    ["Offset of field: xcb_randr_set_panning_request_t::top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, top) - 14usize];
    ["Offset of field: xcb_randr_set_panning_request_t::width"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, width) - 16usize];
    ["Offset of field: xcb_randr_set_panning_request_t::height"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, height) - 18usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_left) - 20usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_top) - 22usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_width"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_width) - 24usize];
    ["Offset of field: xcb_randr_set_panning_request_t::track_height"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, track_height) - 26usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_left"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_left) - 28usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_top"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_top) - 30usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_right"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_right) - 32usize];
    ["Offset of field: xcb_randr_set_panning_request_t::border_bottom"]
        [::std::mem::offset_of!(xcb_randr_set_panning_request_t, border_bottom) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_panning_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_panning_reply_t"]
        [::std::mem::size_of::<xcb_randr_set_panning_reply_t>() - 12usize];
    ["Alignment of xcb_randr_set_panning_reply_t"]
        [::std::mem::align_of::<xcb_randr_set_panning_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_set_panning_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_set_panning_reply_t, timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_output_primary_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_output_primary_request_t"]
        [::std::mem::size_of::<xcb_randr_set_output_primary_request_t>() - 12usize];
    ["Alignment of xcb_randr_set_output_primary_request_t"]
        [::std::mem::align_of::<xcb_randr_set_output_primary_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_set_output_primary_request_t::output"]
        [::std::mem::offset_of!(xcb_randr_set_output_primary_request_t, output) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_output_primary_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_request_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_output_primary_request_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_output_primary_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_output_primary_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub output: xcb_randr_output_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_output_primary_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_output_primary_reply_t>() - 12usize];
    ["Alignment of xcb_randr_get_output_primary_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_output_primary_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_output_primary_reply_t::output"]
        [::std::mem::offset_of!(xcb_randr_get_output_primary_reply_t, output) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_providers_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_providers_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_request_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_request_t>() - 8usize];
    ["Alignment of xcb_randr_get_providers_request_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_providers_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_providers_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_providers_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_providers_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_providers_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub num_providers: u16,
    pub pad1: [u8; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_providers_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_providers_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_providers_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_providers_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::num_providers"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, num_providers) - 12usize];
    ["Offset of field: xcb_randr_get_providers_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_providers_reply_t, pad1) - 14usize];
};
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OUTPUT:
    xcb_randr_provider_capability_t = 1;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SINK_OUTPUT:
    xcb_randr_provider_capability_t = 2;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SOURCE_OFFLOAD:
    xcb_randr_provider_capability_t = 4;
pub const xcb_randr_provider_capability_t_XCB_RANDR_PROVIDER_CAPABILITY_SINK_OFFLOAD:
    xcb_randr_provider_capability_t = 8;
pub type xcb_randr_provider_capability_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_provider_info_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_request_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_provider_info_request_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_request_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_request_t, config_timestamp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_info_reply_t {
    pub response_type: u8,
    pub status: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub capabilities: u32,
    pub num_crtcs: u16,
    pub num_outputs: u16,
    pub num_associated_providers: u16,
    pub name_len: u16,
    pub pad0: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_info_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_info_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_provider_info_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_info_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::status"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, status) - 1usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::capabilities"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, capabilities) - 12usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, num_crtcs) - 16usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, num_outputs) - 18usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::num_associated_providers"][::std::mem::offset_of!(
        xcb_randr_get_provider_info_reply_t,
        num_associated_providers
    ) - 20usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::name_len"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, name_len) - 22usize];
    ["Offset of field: xcb_randr_get_provider_info_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_info_reply_t, pad0) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_provider_offload_sink_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub sink_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_provider_offload_sink_request_t"]
        [::std::mem::size_of::<xcb_randr_set_provider_offload_sink_request_t>() - 16usize];
    ["Alignment of xcb_randr_set_provider_offload_sink_request_t"]
        [::std::mem::align_of::<xcb_randr_set_provider_offload_sink_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_provider_offload_sink_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_set_provider_offload_sink_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::sink_provider"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        sink_provider
    ) - 8usize];
    ["Offset of field: xcb_randr_set_provider_offload_sink_request_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_set_provider_offload_sink_request_t,
        config_timestamp
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_provider_output_source_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub source_provider: xcb_randr_provider_t,
    pub config_timestamp: xcb_timestamp_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_provider_output_source_request_t"]
        [::std::mem::size_of::<xcb_randr_set_provider_output_source_request_t>() - 16usize];
    ["Alignment of xcb_randr_set_provider_output_source_request_t"]
        [::std::mem::align_of::<xcb_randr_set_provider_output_source_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_provider_output_source_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_set_provider_output_source_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::source_provider"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        source_provider
    )
        - 8usize];
    ["Offset of field: xcb_randr_set_provider_output_source_request_t::config_timestamp"][::std::mem::offset_of!(
        xcb_randr_set_provider_output_source_request_t,
        config_timestamp
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_cookie_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_list_provider_properties_cookie_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_request_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_request_t>() - 8usize];
    ["Alignment of xcb_randr_list_provider_properties_request_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_request_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_list_provider_properties_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_request_t, provider) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_list_provider_properties_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub num_atoms: u16,
    pub pad1: [u8; 22usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_list_provider_properties_reply_t"]
        [::std::mem::size_of::<xcb_randr_list_provider_properties_reply_t>() - 32usize];
    ["Alignment of xcb_randr_list_provider_properties_reply_t"]
        [::std::mem::align_of::<xcb_randr_list_provider_properties_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::response_type"][::std::mem::offset_of!(
        xcb_randr_list_provider_properties_reply_t,
        response_type
    ) - 0usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::num_atoms"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, num_atoms) - 8usize];
    ["Offset of field: xcb_randr_list_provider_properties_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_list_provider_properties_reply_t, pad1) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_query_provider_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_query_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_query_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_query_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_query_provider_property_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub pending: u8,
    pub range: u8,
    pub immutable: u8,
    pub pad1: [u8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_query_provider_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_query_provider_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_query_provider_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_query_provider_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pending"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pending) - 8usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::range"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, range) - 9usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::immutable"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, immutable) - 10usize];
    ["Offset of field: xcb_randr_query_provider_property_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_query_provider_property_reply_t, pad1) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_configure_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub pending: u8,
    pub range: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_configure_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_configure_provider_property_request_t>() - 16usize];
    ["Alignment of xcb_randr_configure_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_configure_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::provider"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        provider
    ) - 4usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::property"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        property
    ) - 8usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::pending"][::std::mem::offset_of!(
        xcb_randr_configure_provider_property_request_t,
        pending
    ) - 12usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::range"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, range) - 13usize];
    ["Offset of field: xcb_randr_configure_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_configure_provider_property_request_t, pad0) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_change_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub format: u8,
    pub mode: u8,
    pub pad0: [u8; 2usize],
    pub num_items: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_change_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_change_provider_property_request_t>() - 24usize];
    ["Alignment of xcb_randr_change_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_change_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_change_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_change_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::format"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, format) - 16usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::mode"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, mode) - 17usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_change_provider_property_request_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_change_provider_property_request_t, num_items) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_provider_property_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::major_opcode"][::std::mem::offset_of!(
        xcb_randr_delete_provider_property_request_t,
        major_opcode
    ) - 0usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::minor_opcode"][::std::mem::offset_of!(
        xcb_randr_delete_provider_property_request_t,
        minor_opcode
    ) - 1usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_delete_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_delete_provider_property_request_t, property) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_provider_property_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub provider: xcb_randr_provider_t,
    pub property: xcb_atom_t,
    pub type_: xcb_atom_t,
    pub long_offset: u32,
    pub long_length: u32,
    pub _delete: u8,
    pub pending: u8,
    pub pad0: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_request_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_request_t>() - 28usize];
    ["Alignment of xcb_randr_get_provider_property_request_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::provider"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, provider) - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::property"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, property) - 8usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, type_) - 12usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::long_offset"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, long_offset) - 16usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::long_length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, long_length) - 20usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::_delete"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, _delete) - 24usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::pending"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, pending) - 25usize];
    ["Offset of field: xcb_randr_get_provider_property_request_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_request_t, pad0) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_provider_property_reply_t {
    pub response_type: u8,
    pub format: u8,
    pub sequence: u16,
    pub length: u32,
    pub type_: xcb_atom_t,
    pub bytes_after: u32,
    pub num_items: u32,
    pub pad0: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_provider_property_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_provider_property_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_provider_property_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_provider_property_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::format"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, format) - 1usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::type_"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, type_) - 8usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::bytes_after"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, bytes_after) - 12usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::num_items"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, num_items) - 16usize];
    ["Offset of field: xcb_randr_get_provider_property_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_provider_property_reply_t, pad0) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_screen_change_notify_event_t {
    pub response_type: u8,
    pub rotation: u8,
    pub sequence: u16,
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub request_window: xcb_window_t,
    pub sizeID: u16,
    pub subpixel_order: u16,
    pub width: u16,
    pub height: u16,
    pub mwidth: u16,
    pub mheight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_screen_change_notify_event_t"]
        [::std::mem::size_of::<xcb_randr_screen_change_notify_event_t>() - 32usize];
    ["Alignment of xcb_randr_screen_change_notify_event_t"]
        [::std::mem::align_of::<xcb_randr_screen_change_notify_event_t>() - 4usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, rotation) - 1usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, timestamp) - 4usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, config_timestamp) - 8usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::root"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, root) - 12usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::request_window"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, request_window) - 16usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::sizeID"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, sizeID) - 20usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, subpixel_order) - 22usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::width"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, width) - 24usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::height"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, height) - 26usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::mwidth"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, mwidth) - 28usize];
    ["Offset of field: xcb_randr_screen_change_notify_event_t::mheight"]
        [::std::mem::offset_of!(xcb_randr_screen_change_notify_event_t, mheight) - 30usize];
};
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_CRTC_CHANGE: xcb_randr_notify_t = 0;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_OUTPUT_CHANGE: xcb_randr_notify_t = 1;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_OUTPUT_PROPERTY: xcb_randr_notify_t = 2;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_PROVIDER_CHANGE: xcb_randr_notify_t = 3;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_PROVIDER_PROPERTY: xcb_randr_notify_t = 4;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_RESOURCE_CHANGE: xcb_randr_notify_t = 5;
pub const xcb_randr_notify_t_XCB_RANDR_NOTIFY_LEASE: xcb_randr_notify_t = 6;
pub type xcb_randr_notify_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub pad0: [u8; 2usize],
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_change_t"][::std::mem::size_of::<xcb_randr_crtc_change_t>() - 28usize];
    ["Alignment of xcb_randr_crtc_change_t"]
        [::std::mem::align_of::<xcb_randr_crtc_change_t>() - 4usize];
    ["Offset of field: xcb_randr_crtc_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_crtc_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_crtc_change_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, crtc) - 8usize];
    ["Offset of field: xcb_randr_crtc_change_t::mode"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, mode) - 12usize];
    ["Offset of field: xcb_randr_crtc_change_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, rotation) - 16usize];
    ["Offset of field: xcb_randr_crtc_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, pad0) - 18usize];
    ["Offset of field: xcb_randr_crtc_change_t::x"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, x) - 20usize];
    ["Offset of field: xcb_randr_crtc_change_t::y"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, y) - 22usize];
    ["Offset of field: xcb_randr_crtc_change_t::width"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, width) - 24usize];
    ["Offset of field: xcb_randr_crtc_change_t::height"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_t, height) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_crtc_change_iterator_t {
    pub data: *mut xcb_randr_crtc_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_crtc_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_crtc_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_crtc_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_crtc_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_crtc_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_crtc_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_change_t {
    pub timestamp: xcb_timestamp_t,
    pub config_timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub crtc: xcb_randr_crtc_t,
    pub mode: xcb_randr_mode_t,
    pub rotation: u16,
    pub connection: u8,
    pub subpixel_order: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_change_t"]
        [::std::mem::size_of::<xcb_randr_output_change_t>() - 28usize];
    ["Alignment of xcb_randr_output_change_t"]
        [::std::mem::align_of::<xcb_randr_output_change_t>() - 4usize];
    ["Offset of field: xcb_randr_output_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_output_change_t::config_timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, config_timestamp) - 4usize];
    ["Offset of field: xcb_randr_output_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, window) - 8usize];
    ["Offset of field: xcb_randr_output_change_t::output"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, output) - 12usize];
    ["Offset of field: xcb_randr_output_change_t::crtc"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, crtc) - 16usize];
    ["Offset of field: xcb_randr_output_change_t::mode"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, mode) - 20usize];
    ["Offset of field: xcb_randr_output_change_t::rotation"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, rotation) - 24usize];
    ["Offset of field: xcb_randr_output_change_t::connection"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, connection) - 26usize];
    ["Offset of field: xcb_randr_output_change_t::subpixel_order"]
        [::std::mem::offset_of!(xcb_randr_output_change_t, subpixel_order) - 27usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_change_iterator_t {
    pub data: *mut xcb_randr_output_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_property_t {
    pub window: xcb_window_t,
    pub output: xcb_randr_output_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub status: u8,
    pub pad0: [u8; 11usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_property_t"]
        [::std::mem::size_of::<xcb_randr_output_property_t>() - 28usize];
    ["Alignment of xcb_randr_output_property_t"]
        [::std::mem::align_of::<xcb_randr_output_property_t>() - 4usize];
    ["Offset of field: xcb_randr_output_property_t::window"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, window) - 0usize];
    ["Offset of field: xcb_randr_output_property_t::output"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, output) - 4usize];
    ["Offset of field: xcb_randr_output_property_t::atom"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, atom) - 8usize];
    ["Offset of field: xcb_randr_output_property_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_output_property_t::status"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, status) - 16usize];
    ["Offset of field: xcb_randr_output_property_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_output_property_t, pad0) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_output_property_iterator_t {
    pub data: *mut xcb_randr_output_property_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_output_property_iterator_t"]
        [::std::mem::size_of::<xcb_randr_output_property_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_output_property_iterator_t"]
        [::std::mem::align_of::<xcb_randr_output_property_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_output_property_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_output_property_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub pad0: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_change_t"]
        [::std::mem::size_of::<xcb_randr_provider_change_t>() - 28usize];
    ["Alignment of xcb_randr_provider_change_t"]
        [::std::mem::align_of::<xcb_randr_provider_change_t>() - 4usize];
    ["Offset of field: xcb_randr_provider_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_provider_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_provider_change_t::provider"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, provider) - 8usize];
    ["Offset of field: xcb_randr_provider_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_provider_change_t, pad0) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_change_iterator_t {
    pub data: *mut xcb_randr_provider_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_property_t {
    pub window: xcb_window_t,
    pub provider: xcb_randr_provider_t,
    pub atom: xcb_atom_t,
    pub timestamp: xcb_timestamp_t,
    pub state: u8,
    pub pad0: [u8; 11usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_property_t"]
        [::std::mem::size_of::<xcb_randr_provider_property_t>() - 28usize];
    ["Alignment of xcb_randr_provider_property_t"]
        [::std::mem::align_of::<xcb_randr_provider_property_t>() - 4usize];
    ["Offset of field: xcb_randr_provider_property_t::window"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, window) - 0usize];
    ["Offset of field: xcb_randr_provider_property_t::provider"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, provider) - 4usize];
    ["Offset of field: xcb_randr_provider_property_t::atom"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, atom) - 8usize];
    ["Offset of field: xcb_randr_provider_property_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, timestamp) - 12usize];
    ["Offset of field: xcb_randr_provider_property_t::state"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, state) - 16usize];
    ["Offset of field: xcb_randr_provider_property_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_provider_property_t, pad0) - 17usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_provider_property_iterator_t {
    pub data: *mut xcb_randr_provider_property_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_provider_property_iterator_t"]
        [::std::mem::size_of::<xcb_randr_provider_property_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_provider_property_iterator_t"]
        [::std::mem::align_of::<xcb_randr_provider_property_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_provider_property_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_provider_property_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_resource_change_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub pad0: [u8; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_resource_change_t"]
        [::std::mem::size_of::<xcb_randr_resource_change_t>() - 28usize];
    ["Alignment of xcb_randr_resource_change_t"]
        [::std::mem::align_of::<xcb_randr_resource_change_t>() - 4usize];
    ["Offset of field: xcb_randr_resource_change_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_resource_change_t::window"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, window) - 4usize];
    ["Offset of field: xcb_randr_resource_change_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_resource_change_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_resource_change_iterator_t {
    pub data: *mut xcb_randr_resource_change_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_resource_change_iterator_t"]
        [::std::mem::size_of::<xcb_randr_resource_change_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_resource_change_iterator_t"]
        [::std::mem::align_of::<xcb_randr_resource_change_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_resource_change_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_resource_change_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_monitor_info_t {
    pub name: xcb_atom_t,
    pub primary: u8,
    pub automatic: u8,
    pub nOutput: u16,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
    pub width_in_millimeters: u32,
    pub height_in_millimeters: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_monitor_info_t"]
        [::std::mem::size_of::<xcb_randr_monitor_info_t>() - 24usize];
    ["Alignment of xcb_randr_monitor_info_t"]
        [::std::mem::align_of::<xcb_randr_monitor_info_t>() - 4usize];
    ["Offset of field: xcb_randr_monitor_info_t::name"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, name) - 0usize];
    ["Offset of field: xcb_randr_monitor_info_t::primary"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, primary) - 4usize];
    ["Offset of field: xcb_randr_monitor_info_t::automatic"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, automatic) - 5usize];
    ["Offset of field: xcb_randr_monitor_info_t::nOutput"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, nOutput) - 6usize];
    ["Offset of field: xcb_randr_monitor_info_t::x"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, x) - 8usize];
    ["Offset of field: xcb_randr_monitor_info_t::y"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, y) - 10usize];
    ["Offset of field: xcb_randr_monitor_info_t::width"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, width) - 12usize];
    ["Offset of field: xcb_randr_monitor_info_t::height"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, height) - 14usize];
    ["Offset of field: xcb_randr_monitor_info_t::width_in_millimeters"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, width_in_millimeters) - 16usize];
    ["Offset of field: xcb_randr_monitor_info_t::height_in_millimeters"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_t, height_in_millimeters) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_monitor_info_iterator_t {
    pub data: *mut xcb_randr_monitor_info_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_monitor_info_iterator_t"]
        [::std::mem::size_of::<xcb_randr_monitor_info_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_monitor_info_iterator_t"]
        [::std::mem::align_of::<xcb_randr_monitor_info_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_monitor_info_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_monitor_info_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_cookie_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_get_monitors_cookie_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub get_active: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_request_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_request_t>() - 12usize];
    ["Alignment of xcb_randr_get_monitors_request_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_request_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_get_monitors_request_t::get_active"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_request_t, get_active) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_get_monitors_reply_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub length: u32,
    pub timestamp: xcb_timestamp_t,
    pub nMonitors: u32,
    pub nOutputs: u32,
    pub pad1: [u8; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_get_monitors_reply_t"]
        [::std::mem::size_of::<xcb_randr_get_monitors_reply_t>() - 32usize];
    ["Alignment of xcb_randr_get_monitors_reply_t"]
        [::std::mem::align_of::<xcb_randr_get_monitors_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, pad0) - 1usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, timestamp) - 8usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::nMonitors"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, nMonitors) - 12usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::nOutputs"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, nOutputs) - 16usize];
    ["Offset of field: xcb_randr_get_monitors_reply_t::pad1"]
        [::std::mem::offset_of!(xcb_randr_get_monitors_reply_t, pad1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_set_monitor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_set_monitor_request_t"]
        [::std::mem::size_of::<xcb_randr_set_monitor_request_t>() - 8usize];
    ["Alignment of xcb_randr_set_monitor_request_t"]
        [::std::mem::align_of::<xcb_randr_set_monitor_request_t>() - 4usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_set_monitor_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_set_monitor_request_t, window) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_delete_monitor_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub name: xcb_atom_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_delete_monitor_request_t"]
        [::std::mem::size_of::<xcb_randr_delete_monitor_request_t>() - 12usize];
    ["Alignment of xcb_randr_delete_monitor_request_t"]
        [::std::mem::align_of::<xcb_randr_delete_monitor_request_t>() - 4usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_delete_monitor_request_t::name"]
        [::std::mem::offset_of!(xcb_randr_delete_monitor_request_t, name) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_cookie_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_cookie_t>() - 4usize];
    ["Alignment of xcb_randr_create_lease_cookie_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_cookie_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_cookie_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_lease_cookie_t, sequence) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub window: xcb_window_t,
    pub lid: xcb_randr_lease_t,
    pub num_crtcs: u16,
    pub num_outputs: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_request_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_request_t>() - 16usize];
    ["Alignment of xcb_randr_create_lease_request_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_request_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_create_lease_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_create_lease_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_create_lease_request_t::window"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, window) - 4usize];
    ["Offset of field: xcb_randr_create_lease_request_t::lid"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, lid) - 8usize];
    ["Offset of field: xcb_randr_create_lease_request_t::num_crtcs"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, num_crtcs) - 12usize];
    ["Offset of field: xcb_randr_create_lease_request_t::num_outputs"]
        [::std::mem::offset_of!(xcb_randr_create_lease_request_t, num_outputs) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_create_lease_reply_t {
    pub response_type: u8,
    pub nfd: u8,
    pub sequence: u16,
    pub length: u32,
    pub pad0: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_create_lease_reply_t"]
        [::std::mem::size_of::<xcb_randr_create_lease_reply_t>() - 32usize];
    ["Alignment of xcb_randr_create_lease_reply_t"]
        [::std::mem::align_of::<xcb_randr_create_lease_reply_t>() - 4usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::nfd"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, nfd) - 1usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::length"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, length) - 4usize];
    ["Offset of field: xcb_randr_create_lease_reply_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_create_lease_reply_t, pad0) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_free_lease_request_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
    pub lid: xcb_randr_lease_t,
    pub terminate: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_free_lease_request_t"]
        [::std::mem::size_of::<xcb_randr_free_lease_request_t>() - 12usize];
    ["Alignment of xcb_randr_free_lease_request_t"]
        [::std::mem::align_of::<xcb_randr_free_lease_request_t>() - 4usize];
    ["Offset of field: xcb_randr_free_lease_request_t::major_opcode"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, major_opcode) - 0usize];
    ["Offset of field: xcb_randr_free_lease_request_t::minor_opcode"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, minor_opcode) - 1usize];
    ["Offset of field: xcb_randr_free_lease_request_t::length"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, length) - 2usize];
    ["Offset of field: xcb_randr_free_lease_request_t::lid"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, lid) - 4usize];
    ["Offset of field: xcb_randr_free_lease_request_t::terminate"]
        [::std::mem::offset_of!(xcb_randr_free_lease_request_t, terminate) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_notify_t {
    pub timestamp: xcb_timestamp_t,
    pub window: xcb_window_t,
    pub lease: xcb_randr_lease_t,
    pub created: u8,
    pub pad0: [u8; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_notify_t"]
        [::std::mem::size_of::<xcb_randr_lease_notify_t>() - 28usize];
    ["Alignment of xcb_randr_lease_notify_t"]
        [::std::mem::align_of::<xcb_randr_lease_notify_t>() - 4usize];
    ["Offset of field: xcb_randr_lease_notify_t::timestamp"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, timestamp) - 0usize];
    ["Offset of field: xcb_randr_lease_notify_t::window"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, window) - 4usize];
    ["Offset of field: xcb_randr_lease_notify_t::lease"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, lease) - 8usize];
    ["Offset of field: xcb_randr_lease_notify_t::created"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, created) - 12usize];
    ["Offset of field: xcb_randr_lease_notify_t::pad0"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_t, pad0) - 13usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_lease_notify_iterator_t {
    pub data: *mut xcb_randr_lease_notify_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_lease_notify_iterator_t"]
        [::std::mem::size_of::<xcb_randr_lease_notify_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_lease_notify_iterator_t"]
        [::std::mem::align_of::<xcb_randr_lease_notify_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_lease_notify_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_lease_notify_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union xcb_randr_notify_data_t {
    pub cc: xcb_randr_crtc_change_t,
    pub oc: xcb_randr_output_change_t,
    pub op: xcb_randr_output_property_t,
    pub pc: xcb_randr_provider_change_t,
    pub pp: xcb_randr_provider_property_t,
    pub rc: xcb_randr_resource_change_t,
    pub lc: xcb_randr_lease_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_data_t"][::std::mem::size_of::<xcb_randr_notify_data_t>() - 28usize];
    ["Alignment of xcb_randr_notify_data_t"]
        [::std::mem::align_of::<xcb_randr_notify_data_t>() - 4usize];
    ["Offset of field: xcb_randr_notify_data_t::cc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, cc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::oc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, oc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::op"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, op) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::pc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, pc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::pp"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, pp) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::rc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, rc) - 0usize];
    ["Offset of field: xcb_randr_notify_data_t::lc"]
        [::std::mem::offset_of!(xcb_randr_notify_data_t, lc) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_randr_notify_data_iterator_t {
    pub data: *mut xcb_randr_notify_data_t,
    pub rem: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_data_iterator_t"]
        [::std::mem::size_of::<xcb_randr_notify_data_iterator_t>() - 16usize];
    ["Alignment of xcb_randr_notify_data_iterator_t"]
        [::std::mem::align_of::<xcb_randr_notify_data_iterator_t>() - 8usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::data"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, data) - 0usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::rem"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, rem) - 8usize];
    ["Offset of field: xcb_randr_notify_data_iterator_t::index"]
        [::std::mem::offset_of!(xcb_randr_notify_data_iterator_t, index) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcb_randr_notify_event_t {
    pub response_type: u8,
    pub subCode: u8,
    pub sequence: u16,
    pub u: xcb_randr_notify_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcb_randr_notify_event_t"]
        [::std::mem::size_of::<xcb_randr_notify_event_t>() - 32usize];
    ["Alignment of xcb_randr_notify_event_t"]
        [::std::mem::align_of::<xcb_randr_notify_event_t>() - 4usize];
    ["Offset of field: xcb_randr_notify_event_t::response_type"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, response_type) - 0usize];
    ["Offset of field: xcb_randr_notify_event_t::subCode"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, subCode) - 1usize];
    ["Offset of field: xcb_randr_notify_event_t::sequence"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, sequence) - 2usize];
    ["Offset of field: xcb_randr_notify_event_t::u"]
        [::std::mem::offset_of!(xcb_randr_notify_event_t, u) - 4usize];
};
unsafe extern "C" {
    pub fn xcb_randr_mode_next(i: *mut xcb_randr_mode_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_mode_end(i: xcb_randr_mode_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_next(i: *mut xcb_randr_crtc_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_end(i: xcb_randr_crtc_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_next(i: *mut xcb_randr_output_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_end(i: xcb_randr_output_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_next(i: *mut xcb_randr_provider_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_end(i: xcb_randr_provider_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_lease_next(i: *mut xcb_randr_lease_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_lease_end(i: xcb_randr_lease_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_screen_size_next(i: *mut xcb_randr_screen_size_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_screen_size_end(i: xcb_randr_screen_size_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates(R: *const xcb_randr_refresh_rates_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates_length(
        R: *const xcb_randr_refresh_rates_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_rates_end(
        R: *const xcb_randr_refresh_rates_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_next(i: *mut xcb_randr_refresh_rates_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_refresh_rates_end(
        i: xcb_randr_refresh_rates_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version(
        c: *mut xcb_connection_t,
        major_version: u32,
        minor_version: u32,
    ) -> xcb_randr_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version_unchecked(
        c: *mut xcb_connection_t,
        major_version: u32,
        minor_version: u32,
    ) -> xcb_randr_query_version_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_version_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_version_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_version_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        sizeID: u16,
        rotation: u16,
        rate: u16,
    ) -> xcb_randr_set_screen_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        sizeID: u16,
        rotation: u16,
        rate: u16,
    ) -> xcb_randr_set_screen_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_config_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_screen_config_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_screen_config_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_select_input_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        enable: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_select_input(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        enable: u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> *mut xcb_randr_screen_size_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes_length(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_sizes_iterator(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> xcb_randr_screen_size_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_rates_length(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_rates_iterator(
        R: *const xcb_randr_get_screen_info_reply_t,
    ) -> xcb_randr_refresh_rates_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_size_range_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_size_range_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_size_range_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_size_range_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_size_range_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_size_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        width: u16,
        height: u16,
        mm_width: u32,
        mm_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_screen_size(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        width: u16,
        height: u16,
        mm_width: u32,
        mm_height: u32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_mode_info_next(i: *mut xcb_randr_mode_info_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_mode_info_end(i: xcb_randr_mode_info_iterator_t) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_crtcs_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_outputs_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut xcb_randr_mode_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_modes_iterator(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_randr_mode_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names_length(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_names_end(
        R: *const xcb_randr_get_screen_resources_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_resources_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_resources_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_output_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_output_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_crtcs_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_mode_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_modes_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_clones_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name(R: *const xcb_randr_get_output_info_reply_t) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name_length(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_name_end(
        R: *const xcb_randr_get_output_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
    ) -> xcb_randr_list_output_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
    ) -> xcb_randr_list_output_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms_length(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_atoms_end(
        R: *const xcb_randr_list_output_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_output_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_list_output_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_list_output_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values_length(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_valid_values_end(
        R: *const xcb_randr_query_output_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_output_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_output_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_output_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values_length(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_output_property_values_end(
        R: *const xcb_randr_configure_output_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_units: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_units: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data_length(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_output_property_data_end(
        R: *const xcb_randr_change_output_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_property_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_unchecked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_output_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data_length(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_data_end(
        R: *const xcb_randr_get_output_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        name_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        mode_info: xcb_randr_mode_info_t,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_randr_create_mode_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        mode_info: xcb_randr_mode_info_t,
        name_len: u32,
        name: *const ::std::os::raw::c_char,
    ) -> xcb_randr_create_mode_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_mode_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_create_mode_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_create_mode_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_destroy_mode_checked(
        c: *mut xcb_connection_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_destroy_mode(
        c: *mut xcb_connection_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_add_output_mode_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_add_output_mode(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_mode_checked(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_output_mode(
        c: *mut xcb_connection_t,
        output: xcb_randr_output_t,
        mode: xcb_randr_mode_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_crtc_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_crtc_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs_length(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_outputs_end(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible_length(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_possible_end(
        R: *const xcb_randr_get_crtc_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        outputs_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        x: i16,
        y: i16,
        mode: xcb_randr_mode_t,
        rotation: u16,
        outputs_len: u32,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_set_crtc_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        config_timestamp: xcb_timestamp_t,
        x: i16,
        y: i16,
        mode: xcb_randr_mode_t,
        rotation: u16,
        outputs_len: u32,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_set_crtc_config_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_config_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_crtc_config_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_crtc_config_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_size_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_size_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_gamma_size_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_gamma_size_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_gamma_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_red_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_green_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue(R: *const xcb_randr_get_crtc_gamma_reply_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue_length(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_blue_end(
        R: *const xcb_randr_get_crtc_gamma_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_gamma_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_gamma_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_gamma_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_checked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        size: u16,
        red: *const u16,
        green: *const u16,
        blue: *const u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        size: u16,
        red: *const u16,
        green: *const u16,
        blue: *const u16,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red(R: *const xcb_randr_set_crtc_gamma_request_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_red_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green(R: *const xcb_randr_set_crtc_gamma_request_t)
        -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_green_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue(R: *const xcb_randr_set_crtc_gamma_request_t) -> *mut u16;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue_length(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_gamma_blue_end(
        R: *const xcb_randr_set_crtc_gamma_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_current_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_screen_resources_current_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_crtcs_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_outputs_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut xcb_randr_mode_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_modes_iterator(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_randr_mode_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names_length(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_names_end(
        R: *const xcb_randr_get_screen_resources_current_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_screen_resources_current_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_screen_resources_current_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_screen_resources_current_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        filter_params_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_checked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        transform: xcb_render_transform_t,
        filter_len: u16,
        filter_name: *const ::std::os::raw::c_char,
        filter_params_len: u32,
        filter_params: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        transform: xcb_render_transform_t,
        filter_len: u16,
        filter_name: *const ::std::os::raw::c_char,
        filter_params_len: u32,
        filter_params: *const xcb_render_fixed_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name_length(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_name_end(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params_length(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_crtc_transform_filter_params_end(
        R: *const xcb_randr_set_crtc_transform_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_transform_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_crtc_transform_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_filter_name_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_pending_params_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_filter_name_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> *mut xcb_render_fixed_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params_length(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_current_params_end(
        R: *const xcb_randr_get_crtc_transform_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_crtc_transform_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_crtc_transform_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_crtc_transform_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
    ) -> xcb_randr_get_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_panning_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_panning_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_panning_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        left: u16,
        top: u16,
        width: u16,
        height: u16,
        track_left: u16,
        track_top: u16,
        track_width: u16,
        track_height: u16,
        border_left: i16,
        border_top: i16,
        border_right: i16,
        border_bottom: i16,
    ) -> xcb_randr_set_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning_unchecked(
        c: *mut xcb_connection_t,
        crtc: xcb_randr_crtc_t,
        timestamp: xcb_timestamp_t,
        left: u16,
        top: u16,
        width: u16,
        height: u16,
        track_left: u16,
        track_top: u16,
        track_width: u16,
        track_height: u16,
        border_left: i16,
        border_top: i16,
        border_right: i16,
        border_bottom: i16,
    ) -> xcb_randr_set_panning_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_panning_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_set_panning_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_set_panning_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_output_primary_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        output: xcb_randr_output_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_output_primary(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        output: xcb_randr_output_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_output_primary_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_output_primary_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_output_primary_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_output_primary_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_output_primary_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_providers_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
    ) -> xcb_randr_get_providers_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> *mut xcb_randr_provider_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers_length(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_providers_end(
        R: *const xcb_randr_get_providers_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_providers_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_providers_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_providers_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_provider_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_randr_get_provider_info_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_crtc_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_crtcs_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_outputs_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut xcb_randr_provider_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_providers_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_associated_capability_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name_length(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_name_end(
        R: *const xcb_randr_get_provider_info_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_info_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_provider_info_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_provider_info_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_offload_sink_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        sink_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_offload_sink(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        sink_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_output_source_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        source_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_provider_output_source(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        source_provider: xcb_randr_provider_t,
        config_timestamp: xcb_timestamp_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
    ) -> xcb_randr_list_provider_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
    ) -> xcb_randr_list_provider_properties_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> *mut xcb_atom_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms_length(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_atoms_end(
        R: *const xcb_randr_list_provider_properties_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_list_provider_properties_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_list_provider_properties_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_list_provider_properties_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_randr_query_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values_length(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_valid_values_end(
        R: *const xcb_randr_query_provider_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_query_provider_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_query_provider_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_query_provider_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
        values_len: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        pending: u8,
        range: u8,
        values_len: u32,
        values: *const i32,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> *mut i32;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values_length(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_configure_provider_property_values_end(
        R: *const xcb_randr_configure_provider_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_items: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        format: u8,
        mode: u8,
        num_items: u32,
        data: *const ::std::os::raw::c_void,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data_length(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_change_provider_property_data_end(
        R: *const xcb_randr_change_provider_property_request_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_provider_property_checked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_unchecked(
        c: *mut xcb_connection_t,
        provider: xcb_randr_provider_t,
        property: xcb_atom_t,
        type_: xcb_atom_t,
        long_offset: u32,
        long_length: u32,
        _delete: u8,
        pending: u8,
    ) -> xcb_randr_get_provider_property_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data_length(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_data_end(
        R: *const xcb_randr_get_provider_property_reply_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_provider_property_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_provider_property_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_provider_property_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_change_next(i: *mut xcb_randr_crtc_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_crtc_change_end(i: xcb_randr_crtc_change_iterator_t)
        -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_change_next(i: *mut xcb_randr_output_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_change_end(
        i: xcb_randr_output_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_output_property_next(i: *mut xcb_randr_output_property_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_output_property_end(
        i: xcb_randr_output_property_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_change_next(i: *mut xcb_randr_provider_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_change_end(
        i: xcb_randr_provider_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_provider_property_next(i: *mut xcb_randr_provider_property_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_provider_property_end(
        i: xcb_randr_provider_property_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_resource_change_next(i: *mut xcb_randr_resource_change_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_resource_change_end(
        i: xcb_randr_resource_change_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs(
        R: *const xcb_randr_monitor_info_t,
    ) -> *mut xcb_randr_output_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs_length(
        R: *const xcb_randr_monitor_info_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_outputs_end(
        R: *const xcb_randr_monitor_info_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_next(i: *mut xcb_randr_monitor_info_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_monitor_info_end(
        i: xcb_randr_monitor_info_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        get_active: u8,
    ) -> xcb_randr_get_monitors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        get_active: u8,
    ) -> xcb_randr_get_monitors_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_monitors_length(
        R: *const xcb_randr_get_monitors_reply_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_monitors_iterator(
        R: *const xcb_randr_get_monitors_reply_t,
    ) -> xcb_randr_monitor_info_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_get_monitors_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_get_monitors_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_get_monitors_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        monitorinfo: *mut xcb_randr_monitor_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        monitorinfo: *mut xcb_randr_monitor_info_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_set_monitor_monitorinfo(
        R: *const xcb_randr_set_monitor_request_t,
    ) -> *mut xcb_randr_monitor_info_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_monitor_checked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        name: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_delete_monitor(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        name: xcb_atom_t,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_sizeof(
        _buffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        lid: xcb_randr_lease_t,
        num_crtcs: u16,
        num_outputs: u16,
        crtcs: *const xcb_randr_crtc_t,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_create_lease_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_unchecked(
        c: *mut xcb_connection_t,
        window: xcb_window_t,
        lid: xcb_randr_lease_t,
        num_crtcs: u16,
        num_outputs: u16,
        crtcs: *const xcb_randr_crtc_t,
        outputs: *const xcb_randr_output_t,
    ) -> xcb_randr_create_lease_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_reply(
        c: *mut xcb_connection_t,
        cookie: xcb_randr_create_lease_cookie_t,
        e: *mut *mut xcb_generic_error_t,
    ) -> *mut xcb_randr_create_lease_reply_t;
}
unsafe extern "C" {
    pub fn xcb_randr_create_lease_reply_fds(
        c: *mut xcb_connection_t,
        reply: *mut xcb_randr_create_lease_reply_t,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn xcb_randr_free_lease_checked(
        c: *mut xcb_connection_t,
        lid: xcb_randr_lease_t,
        terminate: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_free_lease(
        c: *mut xcb_connection_t,
        lid: xcb_randr_lease_t,
        terminate: u8,
    ) -> xcb_void_cookie_t;
}
unsafe extern "C" {
    pub fn xcb_randr_lease_notify_next(i: *mut xcb_randr_lease_notify_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_lease_notify_end(
        i: xcb_randr_lease_notify_iterator_t,
    ) -> xcb_generic_iterator_t;
}
unsafe extern "C" {
    pub fn xcb_randr_notify_data_next(i: *mut xcb_randr_notify_data_iterator_t);
}
unsafe extern "C" {
    pub fn xcb_randr_notify_data_end(i: xcb_randr_notify_data_iterator_t)
        -> xcb_generic_iterator_t;
}
pub type XID = ::std::os::raw::c_ulong;
pub type Mask = ::std::os::raw::c_ulong;
pub type Atom = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Time = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = ::std::os::raw::c_uchar;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    pub fn _Xmblen(
        str_: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XExtData {
    pub number: ::std::os::raw::c_int,
    pub next: *mut _XExtData,
    pub free_private: ::std::option::Option<
        unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
    >,
    pub private_data: XPointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XExtData"][::std::mem::size_of::<_XExtData>() - 32usize];
    ["Alignment of _XExtData"][::std::mem::align_of::<_XExtData>() - 8usize];
    ["Offset of field: _XExtData::number"][::std::mem::offset_of!(_XExtData, number) - 0usize];
    ["Offset of field: _XExtData::next"][::std::mem::offset_of!(_XExtData, next) - 8usize];
    ["Offset of field: _XExtData::free_private"]
        [::std::mem::offset_of!(_XExtData, free_private) - 16usize];
    ["Offset of field: _XExtData::private_data"]
        [::std::mem::offset_of!(_XExtData, private_data) - 24usize];
};
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExtCodes {
    pub extension: ::std::os::raw::c_int,
    pub major_opcode: ::std::os::raw::c_int,
    pub first_event: ::std::os::raw::c_int,
    pub first_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExtCodes"][::std::mem::size_of::<XExtCodes>() - 16usize];
    ["Alignment of XExtCodes"][::std::mem::align_of::<XExtCodes>() - 4usize];
    ["Offset of field: XExtCodes::extension"]
        [::std::mem::offset_of!(XExtCodes, extension) - 0usize];
    ["Offset of field: XExtCodes::major_opcode"]
        [::std::mem::offset_of!(XExtCodes, major_opcode) - 4usize];
    ["Offset of field: XExtCodes::first_event"]
        [::std::mem::offset_of!(XExtCodes, first_event) - 8usize];
    ["Offset of field: XExtCodes::first_error"]
        [::std::mem::offset_of!(XExtCodes, first_error) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPixmapFormatValues {
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPixmapFormatValues"][::std::mem::size_of::<XPixmapFormatValues>() - 12usize];
    ["Alignment of XPixmapFormatValues"][::std::mem::align_of::<XPixmapFormatValues>() - 4usize];
    ["Offset of field: XPixmapFormatValues::depth"]
        [::std::mem::offset_of!(XPixmapFormatValues, depth) - 0usize];
    ["Offset of field: XPixmapFormatValues::bits_per_pixel"]
        [::std::mem::offset_of!(XPixmapFormatValues, bits_per_pixel) - 4usize];
    ["Offset of field: XPixmapFormatValues::scanline_pad"]
        [::std::mem::offset_of!(XPixmapFormatValues, scanline_pad) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGCValues {
    pub function: ::std::os::raw::c_int,
    pub plane_mask: ::std::os::raw::c_ulong,
    pub foreground: ::std::os::raw::c_ulong,
    pub background: ::std::os::raw::c_ulong,
    pub line_width: ::std::os::raw::c_int,
    pub line_style: ::std::os::raw::c_int,
    pub cap_style: ::std::os::raw::c_int,
    pub join_style: ::std::os::raw::c_int,
    pub fill_style: ::std::os::raw::c_int,
    pub fill_rule: ::std::os::raw::c_int,
    pub arc_mode: ::std::os::raw::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::std::os::raw::c_int,
    pub ts_y_origin: ::std::os::raw::c_int,
    pub font: Font,
    pub subwindow_mode: ::std::os::raw::c_int,
    pub graphics_exposures: ::std::os::raw::c_int,
    pub clip_x_origin: ::std::os::raw::c_int,
    pub clip_y_origin: ::std::os::raw::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::std::os::raw::c_int,
    pub dashes: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGCValues"][::std::mem::size_of::<XGCValues>() - 128usize];
    ["Alignment of XGCValues"][::std::mem::align_of::<XGCValues>() - 8usize];
    ["Offset of field: XGCValues::function"][::std::mem::offset_of!(XGCValues, function) - 0usize];
    ["Offset of field: XGCValues::plane_mask"]
        [::std::mem::offset_of!(XGCValues, plane_mask) - 8usize];
    ["Offset of field: XGCValues::foreground"]
        [::std::mem::offset_of!(XGCValues, foreground) - 16usize];
    ["Offset of field: XGCValues::background"]
        [::std::mem::offset_of!(XGCValues, background) - 24usize];
    ["Offset of field: XGCValues::line_width"]
        [::std::mem::offset_of!(XGCValues, line_width) - 32usize];
    ["Offset of field: XGCValues::line_style"]
        [::std::mem::offset_of!(XGCValues, line_style) - 36usize];
    ["Offset of field: XGCValues::cap_style"]
        [::std::mem::offset_of!(XGCValues, cap_style) - 40usize];
    ["Offset of field: XGCValues::join_style"]
        [::std::mem::offset_of!(XGCValues, join_style) - 44usize];
    ["Offset of field: XGCValues::fill_style"]
        [::std::mem::offset_of!(XGCValues, fill_style) - 48usize];
    ["Offset of field: XGCValues::fill_rule"]
        [::std::mem::offset_of!(XGCValues, fill_rule) - 52usize];
    ["Offset of field: XGCValues::arc_mode"][::std::mem::offset_of!(XGCValues, arc_mode) - 56usize];
    ["Offset of field: XGCValues::tile"][::std::mem::offset_of!(XGCValues, tile) - 64usize];
    ["Offset of field: XGCValues::stipple"][::std::mem::offset_of!(XGCValues, stipple) - 72usize];
    ["Offset of field: XGCValues::ts_x_origin"]
        [::std::mem::offset_of!(XGCValues, ts_x_origin) - 80usize];
    ["Offset of field: XGCValues::ts_y_origin"]
        [::std::mem::offset_of!(XGCValues, ts_y_origin) - 84usize];
    ["Offset of field: XGCValues::font"][::std::mem::offset_of!(XGCValues, font) - 88usize];
    ["Offset of field: XGCValues::subwindow_mode"]
        [::std::mem::offset_of!(XGCValues, subwindow_mode) - 96usize];
    ["Offset of field: XGCValues::graphics_exposures"]
        [::std::mem::offset_of!(XGCValues, graphics_exposures) - 100usize];
    ["Offset of field: XGCValues::clip_x_origin"]
        [::std::mem::offset_of!(XGCValues, clip_x_origin) - 104usize];
    ["Offset of field: XGCValues::clip_y_origin"]
        [::std::mem::offset_of!(XGCValues, clip_y_origin) - 108usize];
    ["Offset of field: XGCValues::clip_mask"]
        [::std::mem::offset_of!(XGCValues, clip_mask) - 112usize];
    ["Offset of field: XGCValues::dash_offset"]
        [::std::mem::offset_of!(XGCValues, dash_offset) - 120usize];
    ["Offset of field: XGCValues::dashes"][::std::mem::offset_of!(XGCValues, dashes) - 124usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XGC {
    _unused: [u8; 0],
}
pub type GC = *mut _XGC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visual {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub bits_per_rgb: ::std::os::raw::c_int,
    pub map_entries: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Visual"][::std::mem::size_of::<Visual>() - 56usize];
    ["Alignment of Visual"][::std::mem::align_of::<Visual>() - 8usize];
    ["Offset of field: Visual::ext_data"][::std::mem::offset_of!(Visual, ext_data) - 0usize];
    ["Offset of field: Visual::visualid"][::std::mem::offset_of!(Visual, visualid) - 8usize];
    ["Offset of field: Visual::class"][::std::mem::offset_of!(Visual, class) - 16usize];
    ["Offset of field: Visual::red_mask"][::std::mem::offset_of!(Visual, red_mask) - 24usize];
    ["Offset of field: Visual::green_mask"][::std::mem::offset_of!(Visual, green_mask) - 32usize];
    ["Offset of field: Visual::blue_mask"][::std::mem::offset_of!(Visual, blue_mask) - 40usize];
    ["Offset of field: Visual::bits_per_rgb"]
        [::std::mem::offset_of!(Visual, bits_per_rgb) - 48usize];
    ["Offset of field: Visual::map_entries"][::std::mem::offset_of!(Visual, map_entries) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Depth {
    pub depth: ::std::os::raw::c_int,
    pub nvisuals: ::std::os::raw::c_int,
    pub visuals: *mut Visual,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Depth"][::std::mem::size_of::<Depth>() - 16usize];
    ["Alignment of Depth"][::std::mem::align_of::<Depth>() - 8usize];
    ["Offset of field: Depth::depth"][::std::mem::offset_of!(Depth, depth) - 0usize];
    ["Offset of field: Depth::nvisuals"][::std::mem::offset_of!(Depth, nvisuals) - 4usize];
    ["Offset of field: Depth::visuals"][::std::mem::offset_of!(Depth, visuals) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Screen {
    pub ext_data: *mut XExtData,
    pub display: *mut _XDisplay,
    pub root: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mwidth: ::std::os::raw::c_int,
    pub mheight: ::std::os::raw::c_int,
    pub ndepths: ::std::os::raw::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::std::os::raw::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::std::os::raw::c_ulong,
    pub black_pixel: ::std::os::raw::c_ulong,
    pub max_maps: ::std::os::raw::c_int,
    pub min_maps: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub save_unders: ::std::os::raw::c_int,
    pub root_input_mask: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Screen"][::std::mem::size_of::<Screen>() - 128usize];
    ["Alignment of Screen"][::std::mem::align_of::<Screen>() - 8usize];
    ["Offset of field: Screen::ext_data"][::std::mem::offset_of!(Screen, ext_data) - 0usize];
    ["Offset of field: Screen::display"][::std::mem::offset_of!(Screen, display) - 8usize];
    ["Offset of field: Screen::root"][::std::mem::offset_of!(Screen, root) - 16usize];
    ["Offset of field: Screen::width"][::std::mem::offset_of!(Screen, width) - 24usize];
    ["Offset of field: Screen::height"][::std::mem::offset_of!(Screen, height) - 28usize];
    ["Offset of field: Screen::mwidth"][::std::mem::offset_of!(Screen, mwidth) - 32usize];
    ["Offset of field: Screen::mheight"][::std::mem::offset_of!(Screen, mheight) - 36usize];
    ["Offset of field: Screen::ndepths"][::std::mem::offset_of!(Screen, ndepths) - 40usize];
    ["Offset of field: Screen::depths"][::std::mem::offset_of!(Screen, depths) - 48usize];
    ["Offset of field: Screen::root_depth"][::std::mem::offset_of!(Screen, root_depth) - 56usize];
    ["Offset of field: Screen::root_visual"][::std::mem::offset_of!(Screen, root_visual) - 64usize];
    ["Offset of field: Screen::default_gc"][::std::mem::offset_of!(Screen, default_gc) - 72usize];
    ["Offset of field: Screen::cmap"][::std::mem::offset_of!(Screen, cmap) - 80usize];
    ["Offset of field: Screen::white_pixel"][::std::mem::offset_of!(Screen, white_pixel) - 88usize];
    ["Offset of field: Screen::black_pixel"][::std::mem::offset_of!(Screen, black_pixel) - 96usize];
    ["Offset of field: Screen::max_maps"][::std::mem::offset_of!(Screen, max_maps) - 104usize];
    ["Offset of field: Screen::min_maps"][::std::mem::offset_of!(Screen, min_maps) - 108usize];
    ["Offset of field: Screen::backing_store"]
        [::std::mem::offset_of!(Screen, backing_store) - 112usize];
    ["Offset of field: Screen::save_unders"]
        [::std::mem::offset_of!(Screen, save_unders) - 116usize];
    ["Offset of field: Screen::root_input_mask"]
        [::std::mem::offset_of!(Screen, root_input_mask) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScreenFormat {
    pub ext_data: *mut XExtData,
    pub depth: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub scanline_pad: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenFormat"][::std::mem::size_of::<ScreenFormat>() - 24usize];
    ["Alignment of ScreenFormat"][::std::mem::align_of::<ScreenFormat>() - 8usize];
    ["Offset of field: ScreenFormat::ext_data"]
        [::std::mem::offset_of!(ScreenFormat, ext_data) - 0usize];
    ["Offset of field: ScreenFormat::depth"][::std::mem::offset_of!(ScreenFormat, depth) - 8usize];
    ["Offset of field: ScreenFormat::bits_per_pixel"]
        [::std::mem::offset_of!(ScreenFormat, bits_per_pixel) - 12usize];
    ["Offset of field: ScreenFormat::scanline_pad"]
        [::std::mem::offset_of!(ScreenFormat, scanline_pad) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSetWindowAttributes {
    pub background_pixmap: Pixmap,
    pub background_pixel: ::std::os::raw::c_ulong,
    pub border_pixmap: Pixmap,
    pub border_pixel: ::std::os::raw::c_ulong,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub cursor: Cursor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSetWindowAttributes"][::std::mem::size_of::<XSetWindowAttributes>() - 112usize];
    ["Alignment of XSetWindowAttributes"][::std::mem::align_of::<XSetWindowAttributes>() - 8usize];
    ["Offset of field: XSetWindowAttributes::background_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixmap) - 0usize];
    ["Offset of field: XSetWindowAttributes::background_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, background_pixel) - 8usize];
    ["Offset of field: XSetWindowAttributes::border_pixmap"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixmap) - 16usize];
    ["Offset of field: XSetWindowAttributes::border_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, border_pixel) - 24usize];
    ["Offset of field: XSetWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, bit_gravity) - 32usize];
    ["Offset of field: XSetWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XSetWindowAttributes, win_gravity) - 36usize];
    ["Offset of field: XSetWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_store) - 40usize];
    ["Offset of field: XSetWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_planes) - 48usize];
    ["Offset of field: XSetWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XSetWindowAttributes, backing_pixel) - 56usize];
    ["Offset of field: XSetWindowAttributes::save_under"]
        [::std::mem::offset_of!(XSetWindowAttributes, save_under) - 64usize];
    ["Offset of field: XSetWindowAttributes::event_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, event_mask) - 72usize];
    ["Offset of field: XSetWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XSetWindowAttributes, do_not_propagate_mask) - 80usize];
    ["Offset of field: XSetWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XSetWindowAttributes, override_redirect) - 88usize];
    ["Offset of field: XSetWindowAttributes::colormap"]
        [::std::mem::offset_of!(XSetWindowAttributes, colormap) - 96usize];
    ["Offset of field: XSetWindowAttributes::cursor"]
        [::std::mem::offset_of!(XSetWindowAttributes, cursor) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowAttributes {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub visual: *mut Visual,
    pub root: Window,
    pub class: ::std::os::raw::c_int,
    pub bit_gravity: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub backing_planes: ::std::os::raw::c_ulong,
    pub backing_pixel: ::std::os::raw::c_ulong,
    pub save_under: ::std::os::raw::c_int,
    pub colormap: Colormap,
    pub map_installed: ::std::os::raw::c_int,
    pub map_state: ::std::os::raw::c_int,
    pub all_event_masks: ::std::os::raw::c_long,
    pub your_event_mask: ::std::os::raw::c_long,
    pub do_not_propagate_mask: ::std::os::raw::c_long,
    pub override_redirect: ::std::os::raw::c_int,
    pub screen: *mut Screen,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowAttributes"][::std::mem::size_of::<XWindowAttributes>() - 136usize];
    ["Alignment of XWindowAttributes"][::std::mem::align_of::<XWindowAttributes>() - 8usize];
    ["Offset of field: XWindowAttributes::x"]
        [::std::mem::offset_of!(XWindowAttributes, x) - 0usize];
    ["Offset of field: XWindowAttributes::y"]
        [::std::mem::offset_of!(XWindowAttributes, y) - 4usize];
    ["Offset of field: XWindowAttributes::width"]
        [::std::mem::offset_of!(XWindowAttributes, width) - 8usize];
    ["Offset of field: XWindowAttributes::height"]
        [::std::mem::offset_of!(XWindowAttributes, height) - 12usize];
    ["Offset of field: XWindowAttributes::border_width"]
        [::std::mem::offset_of!(XWindowAttributes, border_width) - 16usize];
    ["Offset of field: XWindowAttributes::depth"]
        [::std::mem::offset_of!(XWindowAttributes, depth) - 20usize];
    ["Offset of field: XWindowAttributes::visual"]
        [::std::mem::offset_of!(XWindowAttributes, visual) - 24usize];
    ["Offset of field: XWindowAttributes::root"]
        [::std::mem::offset_of!(XWindowAttributes, root) - 32usize];
    ["Offset of field: XWindowAttributes::class"]
        [::std::mem::offset_of!(XWindowAttributes, class) - 40usize];
    ["Offset of field: XWindowAttributes::bit_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, bit_gravity) - 44usize];
    ["Offset of field: XWindowAttributes::win_gravity"]
        [::std::mem::offset_of!(XWindowAttributes, win_gravity) - 48usize];
    ["Offset of field: XWindowAttributes::backing_store"]
        [::std::mem::offset_of!(XWindowAttributes, backing_store) - 52usize];
    ["Offset of field: XWindowAttributes::backing_planes"]
        [::std::mem::offset_of!(XWindowAttributes, backing_planes) - 56usize];
    ["Offset of field: XWindowAttributes::backing_pixel"]
        [::std::mem::offset_of!(XWindowAttributes, backing_pixel) - 64usize];
    ["Offset of field: XWindowAttributes::save_under"]
        [::std::mem::offset_of!(XWindowAttributes, save_under) - 72usize];
    ["Offset of field: XWindowAttributes::colormap"]
        [::std::mem::offset_of!(XWindowAttributes, colormap) - 80usize];
    ["Offset of field: XWindowAttributes::map_installed"]
        [::std::mem::offset_of!(XWindowAttributes, map_installed) - 88usize];
    ["Offset of field: XWindowAttributes::map_state"]
        [::std::mem::offset_of!(XWindowAttributes, map_state) - 92usize];
    ["Offset of field: XWindowAttributes::all_event_masks"]
        [::std::mem::offset_of!(XWindowAttributes, all_event_masks) - 96usize];
    ["Offset of field: XWindowAttributes::your_event_mask"]
        [::std::mem::offset_of!(XWindowAttributes, your_event_mask) - 104usize];
    ["Offset of field: XWindowAttributes::do_not_propagate_mask"]
        [::std::mem::offset_of!(XWindowAttributes, do_not_propagate_mask) - 112usize];
    ["Offset of field: XWindowAttributes::override_redirect"]
        [::std::mem::offset_of!(XWindowAttributes, override_redirect) - 120usize];
    ["Offset of field: XWindowAttributes::screen"]
        [::std::mem::offset_of!(XWindowAttributes, screen) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XHostAddress {
    pub family: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub address: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XHostAddress"][::std::mem::size_of::<XHostAddress>() - 16usize];
    ["Alignment of XHostAddress"][::std::mem::align_of::<XHostAddress>() - 8usize];
    ["Offset of field: XHostAddress::family"]
        [::std::mem::offset_of!(XHostAddress, family) - 0usize];
    ["Offset of field: XHostAddress::length"]
        [::std::mem::offset_of!(XHostAddress, length) - 4usize];
    ["Offset of field: XHostAddress::address"]
        [::std::mem::offset_of!(XHostAddress, address) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XServerInterpretedAddress {
    pub typelength: ::std::os::raw::c_int,
    pub valuelength: ::std::os::raw::c_int,
    pub type_: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XServerInterpretedAddress"]
        [::std::mem::size_of::<XServerInterpretedAddress>() - 24usize];
    ["Alignment of XServerInterpretedAddress"]
        [::std::mem::align_of::<XServerInterpretedAddress>() - 8usize];
    ["Offset of field: XServerInterpretedAddress::typelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, typelength) - 0usize];
    ["Offset of field: XServerInterpretedAddress::valuelength"]
        [::std::mem::offset_of!(XServerInterpretedAddress, valuelength) - 4usize];
    ["Offset of field: XServerInterpretedAddress::type_"]
        [::std::mem::offset_of!(XServerInterpretedAddress, type_) - 8usize];
    ["Offset of field: XServerInterpretedAddress::value"]
        [::std::mem::offset_of!(XServerInterpretedAddress, value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub xoffset: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub bytes_per_line: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub obdata: XPointer,
    pub f: _XImage_funcs,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XImage_funcs {
    pub create_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XDisplay,
            arg2: *mut Visual,
            arg3: ::std::os::raw::c_uint,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_char,
            arg7: ::std::os::raw::c_uint,
            arg8: ::std::os::raw::c_uint,
            arg9: ::std::os::raw::c_int,
            arg10: ::std::os::raw::c_int,
        ) -> *mut _XImage,
    >,
    pub destroy_image:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int>,
    pub get_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub put_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub sub_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: ::std::os::raw::c_uint,
        ) -> *mut _XImage,
    >,
    pub add_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage_funcs"][::std::mem::size_of::<_XImage_funcs>() - 48usize];
    ["Alignment of _XImage_funcs"][::std::mem::align_of::<_XImage_funcs>() - 8usize];
    ["Offset of field: _XImage_funcs::create_image"]
        [::std::mem::offset_of!(_XImage_funcs, create_image) - 0usize];
    ["Offset of field: _XImage_funcs::destroy_image"]
        [::std::mem::offset_of!(_XImage_funcs, destroy_image) - 8usize];
    ["Offset of field: _XImage_funcs::get_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, get_pixel) - 16usize];
    ["Offset of field: _XImage_funcs::put_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, put_pixel) - 24usize];
    ["Offset of field: _XImage_funcs::sub_image"]
        [::std::mem::offset_of!(_XImage_funcs, sub_image) - 32usize];
    ["Offset of field: _XImage_funcs::add_pixel"]
        [::std::mem::offset_of!(_XImage_funcs, add_pixel) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XImage"][::std::mem::size_of::<_XImage>() - 136usize];
    ["Alignment of _XImage"][::std::mem::align_of::<_XImage>() - 8usize];
    ["Offset of field: _XImage::width"][::std::mem::offset_of!(_XImage, width) - 0usize];
    ["Offset of field: _XImage::height"][::std::mem::offset_of!(_XImage, height) - 4usize];
    ["Offset of field: _XImage::xoffset"][::std::mem::offset_of!(_XImage, xoffset) - 8usize];
    ["Offset of field: _XImage::format"][::std::mem::offset_of!(_XImage, format) - 12usize];
    ["Offset of field: _XImage::data"][::std::mem::offset_of!(_XImage, data) - 16usize];
    ["Offset of field: _XImage::byte_order"][::std::mem::offset_of!(_XImage, byte_order) - 24usize];
    ["Offset of field: _XImage::bitmap_unit"]
        [::std::mem::offset_of!(_XImage, bitmap_unit) - 28usize];
    ["Offset of field: _XImage::bitmap_bit_order"]
        [::std::mem::offset_of!(_XImage, bitmap_bit_order) - 32usize];
    ["Offset of field: _XImage::bitmap_pad"][::std::mem::offset_of!(_XImage, bitmap_pad) - 36usize];
    ["Offset of field: _XImage::depth"][::std::mem::offset_of!(_XImage, depth) - 40usize];
    ["Offset of field: _XImage::bytes_per_line"]
        [::std::mem::offset_of!(_XImage, bytes_per_line) - 44usize];
    ["Offset of field: _XImage::bits_per_pixel"]
        [::std::mem::offset_of!(_XImage, bits_per_pixel) - 48usize];
    ["Offset of field: _XImage::red_mask"][::std::mem::offset_of!(_XImage, red_mask) - 56usize];
    ["Offset of field: _XImage::green_mask"][::std::mem::offset_of!(_XImage, green_mask) - 64usize];
    ["Offset of field: _XImage::blue_mask"][::std::mem::offset_of!(_XImage, blue_mask) - 72usize];
    ["Offset of field: _XImage::obdata"][::std::mem::offset_of!(_XImage, obdata) - 80usize];
    ["Offset of field: _XImage::f"][::std::mem::offset_of!(_XImage, f) - 88usize];
};
pub type XImage = _XImage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XWindowChanges {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub sibling: Window,
    pub stack_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XWindowChanges"][::std::mem::size_of::<XWindowChanges>() - 40usize];
    ["Alignment of XWindowChanges"][::std::mem::align_of::<XWindowChanges>() - 8usize];
    ["Offset of field: XWindowChanges::x"][::std::mem::offset_of!(XWindowChanges, x) - 0usize];
    ["Offset of field: XWindowChanges::y"][::std::mem::offset_of!(XWindowChanges, y) - 4usize];
    ["Offset of field: XWindowChanges::width"]
        [::std::mem::offset_of!(XWindowChanges, width) - 8usize];
    ["Offset of field: XWindowChanges::height"]
        [::std::mem::offset_of!(XWindowChanges, height) - 12usize];
    ["Offset of field: XWindowChanges::border_width"]
        [::std::mem::offset_of!(XWindowChanges, border_width) - 16usize];
    ["Offset of field: XWindowChanges::sibling"]
        [::std::mem::offset_of!(XWindowChanges, sibling) - 24usize];
    ["Offset of field: XWindowChanges::stack_mode"]
        [::std::mem::offset_of!(XWindowChanges, stack_mode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColor {
    pub pixel: ::std::os::raw::c_ulong,
    pub red: ::std::os::raw::c_ushort,
    pub green: ::std::os::raw::c_ushort,
    pub blue: ::std::os::raw::c_ushort,
    pub flags: ::std::os::raw::c_char,
    pub pad: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColor"][::std::mem::size_of::<XColor>() - 16usize];
    ["Alignment of XColor"][::std::mem::align_of::<XColor>() - 8usize];
    ["Offset of field: XColor::pixel"][::std::mem::offset_of!(XColor, pixel) - 0usize];
    ["Offset of field: XColor::red"][::std::mem::offset_of!(XColor, red) - 8usize];
    ["Offset of field: XColor::green"][::std::mem::offset_of!(XColor, green) - 10usize];
    ["Offset of field: XColor::blue"][::std::mem::offset_of!(XColor, blue) - 12usize];
    ["Offset of field: XColor::flags"][::std::mem::offset_of!(XColor, flags) - 14usize];
    ["Offset of field: XColor::pad"][::std::mem::offset_of!(XColor, pad) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSegment {
    pub x1: ::std::os::raw::c_short,
    pub y1: ::std::os::raw::c_short,
    pub x2: ::std::os::raw::c_short,
    pub y2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSegment"][::std::mem::size_of::<XSegment>() - 8usize];
    ["Alignment of XSegment"][::std::mem::align_of::<XSegment>() - 2usize];
    ["Offset of field: XSegment::x1"][::std::mem::offset_of!(XSegment, x1) - 0usize];
    ["Offset of field: XSegment::y1"][::std::mem::offset_of!(XSegment, y1) - 2usize];
    ["Offset of field: XSegment::x2"][::std::mem::offset_of!(XSegment, x2) - 4usize];
    ["Offset of field: XSegment::y2"][::std::mem::offset_of!(XSegment, y2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPoint {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPoint"][::std::mem::size_of::<XPoint>() - 4usize];
    ["Alignment of XPoint"][::std::mem::align_of::<XPoint>() - 2usize];
    ["Offset of field: XPoint::x"][::std::mem::offset_of!(XPoint, x) - 0usize];
    ["Offset of field: XPoint::y"][::std::mem::offset_of!(XPoint, y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XRectangle {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRectangle"][::std::mem::size_of::<XRectangle>() - 8usize];
    ["Alignment of XRectangle"][::std::mem::align_of::<XRectangle>() - 2usize];
    ["Offset of field: XRectangle::x"][::std::mem::offset_of!(XRectangle, x) - 0usize];
    ["Offset of field: XRectangle::y"][::std::mem::offset_of!(XRectangle, y) - 2usize];
    ["Offset of field: XRectangle::width"][::std::mem::offset_of!(XRectangle, width) - 4usize];
    ["Offset of field: XRectangle::height"][::std::mem::offset_of!(XRectangle, height) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XArc {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub angle1: ::std::os::raw::c_short,
    pub angle2: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XArc"][::std::mem::size_of::<XArc>() - 12usize];
    ["Alignment of XArc"][::std::mem::align_of::<XArc>() - 2usize];
    ["Offset of field: XArc::x"][::std::mem::offset_of!(XArc, x) - 0usize];
    ["Offset of field: XArc::y"][::std::mem::offset_of!(XArc, y) - 2usize];
    ["Offset of field: XArc::width"][::std::mem::offset_of!(XArc, width) - 4usize];
    ["Offset of field: XArc::height"][::std::mem::offset_of!(XArc, height) - 6usize];
    ["Offset of field: XArc::angle1"][::std::mem::offset_of!(XArc, angle1) - 8usize];
    ["Offset of field: XArc::angle2"][::std::mem::offset_of!(XArc, angle2) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardControl {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_int,
    pub bell_duration: ::std::os::raw::c_int,
    pub led: ::std::os::raw::c_int,
    pub led_mode: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub auto_repeat_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardControl"][::std::mem::size_of::<XKeyboardControl>() - 32usize];
    ["Alignment of XKeyboardControl"][::std::mem::align_of::<XKeyboardControl>() - 4usize];
    ["Offset of field: XKeyboardControl::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardControl, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardControl::bell_percent"]
        [::std::mem::offset_of!(XKeyboardControl, bell_percent) - 4usize];
    ["Offset of field: XKeyboardControl::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardControl, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardControl::bell_duration"]
        [::std::mem::offset_of!(XKeyboardControl, bell_duration) - 12usize];
    ["Offset of field: XKeyboardControl::led"]
        [::std::mem::offset_of!(XKeyboardControl, led) - 16usize];
    ["Offset of field: XKeyboardControl::led_mode"]
        [::std::mem::offset_of!(XKeyboardControl, led_mode) - 20usize];
    ["Offset of field: XKeyboardControl::key"]
        [::std::mem::offset_of!(XKeyboardControl, key) - 24usize];
    ["Offset of field: XKeyboardControl::auto_repeat_mode"]
        [::std::mem::offset_of!(XKeyboardControl, auto_repeat_mode) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyboardState {
    pub key_click_percent: ::std::os::raw::c_int,
    pub bell_percent: ::std::os::raw::c_int,
    pub bell_pitch: ::std::os::raw::c_uint,
    pub bell_duration: ::std::os::raw::c_uint,
    pub led_mask: ::std::os::raw::c_ulong,
    pub global_auto_repeat: ::std::os::raw::c_int,
    pub auto_repeats: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyboardState"][::std::mem::size_of::<XKeyboardState>() - 64usize];
    ["Alignment of XKeyboardState"][::std::mem::align_of::<XKeyboardState>() - 8usize];
    ["Offset of field: XKeyboardState::key_click_percent"]
        [::std::mem::offset_of!(XKeyboardState, key_click_percent) - 0usize];
    ["Offset of field: XKeyboardState::bell_percent"]
        [::std::mem::offset_of!(XKeyboardState, bell_percent) - 4usize];
    ["Offset of field: XKeyboardState::bell_pitch"]
        [::std::mem::offset_of!(XKeyboardState, bell_pitch) - 8usize];
    ["Offset of field: XKeyboardState::bell_duration"]
        [::std::mem::offset_of!(XKeyboardState, bell_duration) - 12usize];
    ["Offset of field: XKeyboardState::led_mask"]
        [::std::mem::offset_of!(XKeyboardState, led_mask) - 16usize];
    ["Offset of field: XKeyboardState::global_auto_repeat"]
        [::std::mem::offset_of!(XKeyboardState, global_auto_repeat) - 24usize];
    ["Offset of field: XKeyboardState::auto_repeats"]
        [::std::mem::offset_of!(XKeyboardState, auto_repeats) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTimeCoord {
    pub time: Time,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTimeCoord"][::std::mem::size_of::<XTimeCoord>() - 16usize];
    ["Alignment of XTimeCoord"][::std::mem::align_of::<XTimeCoord>() - 8usize];
    ["Offset of field: XTimeCoord::time"][::std::mem::offset_of!(XTimeCoord, time) - 0usize];
    ["Offset of field: XTimeCoord::x"][::std::mem::offset_of!(XTimeCoord, x) - 8usize];
    ["Offset of field: XTimeCoord::y"][::std::mem::offset_of!(XTimeCoord, y) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XModifierKeymap {
    pub max_keypermod: ::std::os::raw::c_int,
    pub modifiermap: *mut KeyCode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XModifierKeymap"][::std::mem::size_of::<XModifierKeymap>() - 16usize];
    ["Alignment of XModifierKeymap"][::std::mem::align_of::<XModifierKeymap>() - 8usize];
    ["Offset of field: XModifierKeymap::max_keypermod"]
        [::std::mem::offset_of!(XModifierKeymap, max_keypermod) - 0usize];
    ["Offset of field: XModifierKeymap::modifiermap"]
        [::std::mem::offset_of!(XModifierKeymap, modifiermap) - 8usize];
};
pub type Display = _XDisplay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XPrivate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XrmHashBucketRec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub ext_data: *mut XExtData,
    pub private1: *mut _XPrivate,
    pub fd: ::std::os::raw::c_int,
    pub private2: ::std::os::raw::c_int,
    pub proto_major_version: ::std::os::raw::c_int,
    pub proto_minor_version: ::std::os::raw::c_int,
    pub vendor: *mut ::std::os::raw::c_char,
    pub private3: XID,
    pub private4: XID,
    pub private5: XID,
    pub private6: ::std::os::raw::c_int,
    pub resource_alloc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> XID>,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub nformats: ::std::os::raw::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub private8: ::std::os::raw::c_int,
    pub release: ::std::os::raw::c_int,
    pub private9: *mut _XPrivate,
    pub private10: *mut _XPrivate,
    pub qlen: ::std::os::raw::c_int,
    pub last_request_read: ::std::os::raw::c_ulong,
    pub request: ::std::os::raw::c_ulong,
    pub private11: XPointer,
    pub private12: XPointer,
    pub private13: XPointer,
    pub private14: XPointer,
    pub max_request_size: ::std::os::raw::c_uint,
    pub db: *mut _XrmHashBucketRec,
    pub private15:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XDisplay) -> ::std::os::raw::c_int>,
    pub display_name: *mut ::std::os::raw::c_char,
    pub default_screen: ::std::os::raw::c_int,
    pub nscreens: ::std::os::raw::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::std::os::raw::c_ulong,
    pub private16: ::std::os::raw::c_ulong,
    pub min_keycode: ::std::os::raw::c_int,
    pub max_keycode: ::std::os::raw::c_int,
    pub private17: XPointer,
    pub private18: XPointer,
    pub private19: ::std::os::raw::c_int,
    pub xdefaults: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_11"][::std::mem::size_of::<_bindgen_ty_11>() - 296usize];
    ["Alignment of _bindgen_ty_11"][::std::mem::align_of::<_bindgen_ty_11>() - 8usize];
    ["Offset of field: _bindgen_ty_11::ext_data"]
        [::std::mem::offset_of!(_bindgen_ty_11, ext_data) - 0usize];
    ["Offset of field: _bindgen_ty_11::private1"]
        [::std::mem::offset_of!(_bindgen_ty_11, private1) - 8usize];
    ["Offset of field: _bindgen_ty_11::fd"][::std::mem::offset_of!(_bindgen_ty_11, fd) - 16usize];
    ["Offset of field: _bindgen_ty_11::private2"]
        [::std::mem::offset_of!(_bindgen_ty_11, private2) - 20usize];
    ["Offset of field: _bindgen_ty_11::proto_major_version"]
        [::std::mem::offset_of!(_bindgen_ty_11, proto_major_version) - 24usize];
    ["Offset of field: _bindgen_ty_11::proto_minor_version"]
        [::std::mem::offset_of!(_bindgen_ty_11, proto_minor_version) - 28usize];
    ["Offset of field: _bindgen_ty_11::vendor"]
        [::std::mem::offset_of!(_bindgen_ty_11, vendor) - 32usize];
    ["Offset of field: _bindgen_ty_11::private3"]
        [::std::mem::offset_of!(_bindgen_ty_11, private3) - 40usize];
    ["Offset of field: _bindgen_ty_11::private4"]
        [::std::mem::offset_of!(_bindgen_ty_11, private4) - 48usize];
    ["Offset of field: _bindgen_ty_11::private5"]
        [::std::mem::offset_of!(_bindgen_ty_11, private5) - 56usize];
    ["Offset of field: _bindgen_ty_11::private6"]
        [::std::mem::offset_of!(_bindgen_ty_11, private6) - 64usize];
    ["Offset of field: _bindgen_ty_11::resource_alloc"]
        [::std::mem::offset_of!(_bindgen_ty_11, resource_alloc) - 72usize];
    ["Offset of field: _bindgen_ty_11::byte_order"]
        [::std::mem::offset_of!(_bindgen_ty_11, byte_order) - 80usize];
    ["Offset of field: _bindgen_ty_11::bitmap_unit"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_unit) - 84usize];
    ["Offset of field: _bindgen_ty_11::bitmap_pad"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_pad) - 88usize];
    ["Offset of field: _bindgen_ty_11::bitmap_bit_order"]
        [::std::mem::offset_of!(_bindgen_ty_11, bitmap_bit_order) - 92usize];
    ["Offset of field: _bindgen_ty_11::nformats"]
        [::std::mem::offset_of!(_bindgen_ty_11, nformats) - 96usize];
    ["Offset of field: _bindgen_ty_11::pixmap_format"]
        [::std::mem::offset_of!(_bindgen_ty_11, pixmap_format) - 104usize];
    ["Offset of field: _bindgen_ty_11::private8"]
        [::std::mem::offset_of!(_bindgen_ty_11, private8) - 112usize];
    ["Offset of field: _bindgen_ty_11::release"]
        [::std::mem::offset_of!(_bindgen_ty_11, release) - 116usize];
    ["Offset of field: _bindgen_ty_11::private9"]
        [::std::mem::offset_of!(_bindgen_ty_11, private9) - 120usize];
    ["Offset of field: _bindgen_ty_11::private10"]
        [::std::mem::offset_of!(_bindgen_ty_11, private10) - 128usize];
    ["Offset of field: _bindgen_ty_11::qlen"]
        [::std::mem::offset_of!(_bindgen_ty_11, qlen) - 136usize];
    ["Offset of field: _bindgen_ty_11::last_request_read"]
        [::std::mem::offset_of!(_bindgen_ty_11, last_request_read) - 144usize];
    ["Offset of field: _bindgen_ty_11::request"]
        [::std::mem::offset_of!(_bindgen_ty_11, request) - 152usize];
    ["Offset of field: _bindgen_ty_11::private11"]
        [::std::mem::offset_of!(_bindgen_ty_11, private11) - 160usize];
    ["Offset of field: _bindgen_ty_11::private12"]
        [::std::mem::offset_of!(_bindgen_ty_11, private12) - 168usize];
    ["Offset of field: _bindgen_ty_11::private13"]
        [::std::mem::offset_of!(_bindgen_ty_11, private13) - 176usize];
    ["Offset of field: _bindgen_ty_11::private14"]
        [::std::mem::offset_of!(_bindgen_ty_11, private14) - 184usize];
    ["Offset of field: _bindgen_ty_11::max_request_size"]
        [::std::mem::offset_of!(_bindgen_ty_11, max_request_size) - 192usize];
    ["Offset of field: _bindgen_ty_11::db"][::std::mem::offset_of!(_bindgen_ty_11, db) - 200usize];
    ["Offset of field: _bindgen_ty_11::private15"]
        [::std::mem::offset_of!(_bindgen_ty_11, private15) - 208usize];
    ["Offset of field: _bindgen_ty_11::display_name"]
        [::std::mem::offset_of!(_bindgen_ty_11, display_name) - 216usize];
    ["Offset of field: _bindgen_ty_11::default_screen"]
        [::std::mem::offset_of!(_bindgen_ty_11, default_screen) - 224usize];
    ["Offset of field: _bindgen_ty_11::nscreens"]
        [::std::mem::offset_of!(_bindgen_ty_11, nscreens) - 228usize];
    ["Offset of field: _bindgen_ty_11::screens"]
        [::std::mem::offset_of!(_bindgen_ty_11, screens) - 232usize];
    ["Offset of field: _bindgen_ty_11::motion_buffer"]
        [::std::mem::offset_of!(_bindgen_ty_11, motion_buffer) - 240usize];
    ["Offset of field: _bindgen_ty_11::private16"]
        [::std::mem::offset_of!(_bindgen_ty_11, private16) - 248usize];
    ["Offset of field: _bindgen_ty_11::min_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_11, min_keycode) - 256usize];
    ["Offset of field: _bindgen_ty_11::max_keycode"]
        [::std::mem::offset_of!(_bindgen_ty_11, max_keycode) - 260usize];
    ["Offset of field: _bindgen_ty_11::private17"]
        [::std::mem::offset_of!(_bindgen_ty_11, private17) - 264usize];
    ["Offset of field: _bindgen_ty_11::private18"]
        [::std::mem::offset_of!(_bindgen_ty_11, private18) - 272usize];
    ["Offset of field: _bindgen_ty_11::private19"]
        [::std::mem::offset_of!(_bindgen_ty_11, private19) - 280usize];
    ["Offset of field: _bindgen_ty_11::xdefaults"]
        [::std::mem::offset_of!(_bindgen_ty_11, xdefaults) - 288usize];
};
pub type _XPrivDisplay = *mut _bindgen_ty_11;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyEvent"][::std::mem::size_of::<XKeyEvent>() - 96usize];
    ["Alignment of XKeyEvent"][::std::mem::align_of::<XKeyEvent>() - 8usize];
    ["Offset of field: XKeyEvent::type_"][::std::mem::offset_of!(XKeyEvent, type_) - 0usize];
    ["Offset of field: XKeyEvent::serial"][::std::mem::offset_of!(XKeyEvent, serial) - 8usize];
    ["Offset of field: XKeyEvent::send_event"]
        [::std::mem::offset_of!(XKeyEvent, send_event) - 16usize];
    ["Offset of field: XKeyEvent::display"][::std::mem::offset_of!(XKeyEvent, display) - 24usize];
    ["Offset of field: XKeyEvent::window"][::std::mem::offset_of!(XKeyEvent, window) - 32usize];
    ["Offset of field: XKeyEvent::root"][::std::mem::offset_of!(XKeyEvent, root) - 40usize];
    ["Offset of field: XKeyEvent::subwindow"]
        [::std::mem::offset_of!(XKeyEvent, subwindow) - 48usize];
    ["Offset of field: XKeyEvent::time"][::std::mem::offset_of!(XKeyEvent, time) - 56usize];
    ["Offset of field: XKeyEvent::x"][::std::mem::offset_of!(XKeyEvent, x) - 64usize];
    ["Offset of field: XKeyEvent::y"][::std::mem::offset_of!(XKeyEvent, y) - 68usize];
    ["Offset of field: XKeyEvent::x_root"][::std::mem::offset_of!(XKeyEvent, x_root) - 72usize];
    ["Offset of field: XKeyEvent::y_root"][::std::mem::offset_of!(XKeyEvent, y_root) - 76usize];
    ["Offset of field: XKeyEvent::state"][::std::mem::offset_of!(XKeyEvent, state) - 80usize];
    ["Offset of field: XKeyEvent::keycode"][::std::mem::offset_of!(XKeyEvent, keycode) - 84usize];
    ["Offset of field: XKeyEvent::same_screen"]
        [::std::mem::offset_of!(XKeyEvent, same_screen) - 88usize];
};
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonEvent"][::std::mem::size_of::<XButtonEvent>() - 96usize];
    ["Alignment of XButtonEvent"][::std::mem::align_of::<XButtonEvent>() - 8usize];
    ["Offset of field: XButtonEvent::type_"][::std::mem::offset_of!(XButtonEvent, type_) - 0usize];
    ["Offset of field: XButtonEvent::serial"]
        [::std::mem::offset_of!(XButtonEvent, serial) - 8usize];
    ["Offset of field: XButtonEvent::send_event"]
        [::std::mem::offset_of!(XButtonEvent, send_event) - 16usize];
    ["Offset of field: XButtonEvent::display"]
        [::std::mem::offset_of!(XButtonEvent, display) - 24usize];
    ["Offset of field: XButtonEvent::window"]
        [::std::mem::offset_of!(XButtonEvent, window) - 32usize];
    ["Offset of field: XButtonEvent::root"][::std::mem::offset_of!(XButtonEvent, root) - 40usize];
    ["Offset of field: XButtonEvent::subwindow"]
        [::std::mem::offset_of!(XButtonEvent, subwindow) - 48usize];
    ["Offset of field: XButtonEvent::time"][::std::mem::offset_of!(XButtonEvent, time) - 56usize];
    ["Offset of field: XButtonEvent::x"][::std::mem::offset_of!(XButtonEvent, x) - 64usize];
    ["Offset of field: XButtonEvent::y"][::std::mem::offset_of!(XButtonEvent, y) - 68usize];
    ["Offset of field: XButtonEvent::x_root"]
        [::std::mem::offset_of!(XButtonEvent, x_root) - 72usize];
    ["Offset of field: XButtonEvent::y_root"]
        [::std::mem::offset_of!(XButtonEvent, y_root) - 76usize];
    ["Offset of field: XButtonEvent::state"][::std::mem::offset_of!(XButtonEvent, state) - 80usize];
    ["Offset of field: XButtonEvent::button"]
        [::std::mem::offset_of!(XButtonEvent, button) - 84usize];
    ["Offset of field: XButtonEvent::same_screen"]
        [::std::mem::offset_of!(XButtonEvent, same_screen) - 88usize];
};
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMotionEvent"][::std::mem::size_of::<XMotionEvent>() - 96usize];
    ["Alignment of XMotionEvent"][::std::mem::align_of::<XMotionEvent>() - 8usize];
    ["Offset of field: XMotionEvent::type_"][::std::mem::offset_of!(XMotionEvent, type_) - 0usize];
    ["Offset of field: XMotionEvent::serial"]
        [::std::mem::offset_of!(XMotionEvent, serial) - 8usize];
    ["Offset of field: XMotionEvent::send_event"]
        [::std::mem::offset_of!(XMotionEvent, send_event) - 16usize];
    ["Offset of field: XMotionEvent::display"]
        [::std::mem::offset_of!(XMotionEvent, display) - 24usize];
    ["Offset of field: XMotionEvent::window"]
        [::std::mem::offset_of!(XMotionEvent, window) - 32usize];
    ["Offset of field: XMotionEvent::root"][::std::mem::offset_of!(XMotionEvent, root) - 40usize];
    ["Offset of field: XMotionEvent::subwindow"]
        [::std::mem::offset_of!(XMotionEvent, subwindow) - 48usize];
    ["Offset of field: XMotionEvent::time"][::std::mem::offset_of!(XMotionEvent, time) - 56usize];
    ["Offset of field: XMotionEvent::x"][::std::mem::offset_of!(XMotionEvent, x) - 64usize];
    ["Offset of field: XMotionEvent::y"][::std::mem::offset_of!(XMotionEvent, y) - 68usize];
    ["Offset of field: XMotionEvent::x_root"]
        [::std::mem::offset_of!(XMotionEvent, x_root) - 72usize];
    ["Offset of field: XMotionEvent::y_root"]
        [::std::mem::offset_of!(XMotionEvent, y_root) - 76usize];
    ["Offset of field: XMotionEvent::state"][::std::mem::offset_of!(XMotionEvent, state) - 80usize];
    ["Offset of field: XMotionEvent::is_hint"]
        [::std::mem::offset_of!(XMotionEvent, is_hint) - 84usize];
    ["Offset of field: XMotionEvent::same_screen"]
        [::std::mem::offset_of!(XMotionEvent, same_screen) - 88usize];
};
pub type XPointerMovedEvent = XMotionEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCrossingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub same_screen: ::std::os::raw::c_int,
    pub focus: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCrossingEvent"][::std::mem::size_of::<XCrossingEvent>() - 104usize];
    ["Alignment of XCrossingEvent"][::std::mem::align_of::<XCrossingEvent>() - 8usize];
    ["Offset of field: XCrossingEvent::type_"]
        [::std::mem::offset_of!(XCrossingEvent, type_) - 0usize];
    ["Offset of field: XCrossingEvent::serial"]
        [::std::mem::offset_of!(XCrossingEvent, serial) - 8usize];
    ["Offset of field: XCrossingEvent::send_event"]
        [::std::mem::offset_of!(XCrossingEvent, send_event) - 16usize];
    ["Offset of field: XCrossingEvent::display"]
        [::std::mem::offset_of!(XCrossingEvent, display) - 24usize];
    ["Offset of field: XCrossingEvent::window"]
        [::std::mem::offset_of!(XCrossingEvent, window) - 32usize];
    ["Offset of field: XCrossingEvent::root"]
        [::std::mem::offset_of!(XCrossingEvent, root) - 40usize];
    ["Offset of field: XCrossingEvent::subwindow"]
        [::std::mem::offset_of!(XCrossingEvent, subwindow) - 48usize];
    ["Offset of field: XCrossingEvent::time"]
        [::std::mem::offset_of!(XCrossingEvent, time) - 56usize];
    ["Offset of field: XCrossingEvent::x"][::std::mem::offset_of!(XCrossingEvent, x) - 64usize];
    ["Offset of field: XCrossingEvent::y"][::std::mem::offset_of!(XCrossingEvent, y) - 68usize];
    ["Offset of field: XCrossingEvent::x_root"]
        [::std::mem::offset_of!(XCrossingEvent, x_root) - 72usize];
    ["Offset of field: XCrossingEvent::y_root"]
        [::std::mem::offset_of!(XCrossingEvent, y_root) - 76usize];
    ["Offset of field: XCrossingEvent::mode"]
        [::std::mem::offset_of!(XCrossingEvent, mode) - 80usize];
    ["Offset of field: XCrossingEvent::detail"]
        [::std::mem::offset_of!(XCrossingEvent, detail) - 84usize];
    ["Offset of field: XCrossingEvent::same_screen"]
        [::std::mem::offset_of!(XCrossingEvent, same_screen) - 88usize];
    ["Offset of field: XCrossingEvent::focus"]
        [::std::mem::offset_of!(XCrossingEvent, focus) - 92usize];
    ["Offset of field: XCrossingEvent::state"]
        [::std::mem::offset_of!(XCrossingEvent, state) - 96usize];
};
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFocusChangeEvent"][::std::mem::size_of::<XFocusChangeEvent>() - 48usize];
    ["Alignment of XFocusChangeEvent"][::std::mem::align_of::<XFocusChangeEvent>() - 8usize];
    ["Offset of field: XFocusChangeEvent::type_"]
        [::std::mem::offset_of!(XFocusChangeEvent, type_) - 0usize];
    ["Offset of field: XFocusChangeEvent::serial"]
        [::std::mem::offset_of!(XFocusChangeEvent, serial) - 8usize];
    ["Offset of field: XFocusChangeEvent::send_event"]
        [::std::mem::offset_of!(XFocusChangeEvent, send_event) - 16usize];
    ["Offset of field: XFocusChangeEvent::display"]
        [::std::mem::offset_of!(XFocusChangeEvent, display) - 24usize];
    ["Offset of field: XFocusChangeEvent::window"]
        [::std::mem::offset_of!(XFocusChangeEvent, window) - 32usize];
    ["Offset of field: XFocusChangeEvent::mode"]
        [::std::mem::offset_of!(XFocusChangeEvent, mode) - 40usize];
    ["Offset of field: XFocusChangeEvent::detail"]
        [::std::mem::offset_of!(XFocusChangeEvent, detail) - 44usize];
};
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeymapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub key_vector: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeymapEvent"][::std::mem::size_of::<XKeymapEvent>() - 72usize];
    ["Alignment of XKeymapEvent"][::std::mem::align_of::<XKeymapEvent>() - 8usize];
    ["Offset of field: XKeymapEvent::type_"][::std::mem::offset_of!(XKeymapEvent, type_) - 0usize];
    ["Offset of field: XKeymapEvent::serial"]
        [::std::mem::offset_of!(XKeymapEvent, serial) - 8usize];
    ["Offset of field: XKeymapEvent::send_event"]
        [::std::mem::offset_of!(XKeymapEvent, send_event) - 16usize];
    ["Offset of field: XKeymapEvent::display"]
        [::std::mem::offset_of!(XKeymapEvent, display) - 24usize];
    ["Offset of field: XKeymapEvent::window"]
        [::std::mem::offset_of!(XKeymapEvent, window) - 32usize];
    ["Offset of field: XKeymapEvent::key_vector"]
        [::std::mem::offset_of!(XKeymapEvent, key_vector) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExposeEvent"][::std::mem::size_of::<XExposeEvent>() - 64usize];
    ["Alignment of XExposeEvent"][::std::mem::align_of::<XExposeEvent>() - 8usize];
    ["Offset of field: XExposeEvent::type_"][::std::mem::offset_of!(XExposeEvent, type_) - 0usize];
    ["Offset of field: XExposeEvent::serial"]
        [::std::mem::offset_of!(XExposeEvent, serial) - 8usize];
    ["Offset of field: XExposeEvent::send_event"]
        [::std::mem::offset_of!(XExposeEvent, send_event) - 16usize];
    ["Offset of field: XExposeEvent::display"]
        [::std::mem::offset_of!(XExposeEvent, display) - 24usize];
    ["Offset of field: XExposeEvent::window"]
        [::std::mem::offset_of!(XExposeEvent, window) - 32usize];
    ["Offset of field: XExposeEvent::x"][::std::mem::offset_of!(XExposeEvent, x) - 40usize];
    ["Offset of field: XExposeEvent::y"][::std::mem::offset_of!(XExposeEvent, y) - 44usize];
    ["Offset of field: XExposeEvent::width"][::std::mem::offset_of!(XExposeEvent, width) - 48usize];
    ["Offset of field: XExposeEvent::height"]
        [::std::mem::offset_of!(XExposeEvent, height) - 52usize];
    ["Offset of field: XExposeEvent::count"][::std::mem::offset_of!(XExposeEvent, count) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGraphicsExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGraphicsExposeEvent"][::std::mem::size_of::<XGraphicsExposeEvent>() - 72usize];
    ["Alignment of XGraphicsExposeEvent"][::std::mem::align_of::<XGraphicsExposeEvent>() - 8usize];
    ["Offset of field: XGraphicsExposeEvent::type_"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, type_) - 0usize];
    ["Offset of field: XGraphicsExposeEvent::serial"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, serial) - 8usize];
    ["Offset of field: XGraphicsExposeEvent::send_event"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, send_event) - 16usize];
    ["Offset of field: XGraphicsExposeEvent::display"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, display) - 24usize];
    ["Offset of field: XGraphicsExposeEvent::drawable"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, drawable) - 32usize];
    ["Offset of field: XGraphicsExposeEvent::x"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, x) - 40usize];
    ["Offset of field: XGraphicsExposeEvent::y"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, y) - 44usize];
    ["Offset of field: XGraphicsExposeEvent::width"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, width) - 48usize];
    ["Offset of field: XGraphicsExposeEvent::height"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, height) - 52usize];
    ["Offset of field: XGraphicsExposeEvent::count"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, count) - 56usize];
    ["Offset of field: XGraphicsExposeEvent::major_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, major_code) - 60usize];
    ["Offset of field: XGraphicsExposeEvent::minor_code"]
        [::std::mem::offset_of!(XGraphicsExposeEvent, minor_code) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XNoExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XNoExposeEvent"][::std::mem::size_of::<XNoExposeEvent>() - 48usize];
    ["Alignment of XNoExposeEvent"][::std::mem::align_of::<XNoExposeEvent>() - 8usize];
    ["Offset of field: XNoExposeEvent::type_"]
        [::std::mem::offset_of!(XNoExposeEvent, type_) - 0usize];
    ["Offset of field: XNoExposeEvent::serial"]
        [::std::mem::offset_of!(XNoExposeEvent, serial) - 8usize];
    ["Offset of field: XNoExposeEvent::send_event"]
        [::std::mem::offset_of!(XNoExposeEvent, send_event) - 16usize];
    ["Offset of field: XNoExposeEvent::display"]
        [::std::mem::offset_of!(XNoExposeEvent, display) - 24usize];
    ["Offset of field: XNoExposeEvent::drawable"]
        [::std::mem::offset_of!(XNoExposeEvent, drawable) - 32usize];
    ["Offset of field: XNoExposeEvent::major_code"]
        [::std::mem::offset_of!(XNoExposeEvent, major_code) - 40usize];
    ["Offset of field: XNoExposeEvent::minor_code"]
        [::std::mem::offset_of!(XNoExposeEvent, minor_code) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XVisibilityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XVisibilityEvent"][::std::mem::size_of::<XVisibilityEvent>() - 48usize];
    ["Alignment of XVisibilityEvent"][::std::mem::align_of::<XVisibilityEvent>() - 8usize];
    ["Offset of field: XVisibilityEvent::type_"]
        [::std::mem::offset_of!(XVisibilityEvent, type_) - 0usize];
    ["Offset of field: XVisibilityEvent::serial"]
        [::std::mem::offset_of!(XVisibilityEvent, serial) - 8usize];
    ["Offset of field: XVisibilityEvent::send_event"]
        [::std::mem::offset_of!(XVisibilityEvent, send_event) - 16usize];
    ["Offset of field: XVisibilityEvent::display"]
        [::std::mem::offset_of!(XVisibilityEvent, display) - 24usize];
    ["Offset of field: XVisibilityEvent::window"]
        [::std::mem::offset_of!(XVisibilityEvent, window) - 32usize];
    ["Offset of field: XVisibilityEvent::state"]
        [::std::mem::offset_of!(XVisibilityEvent, state) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCreateWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCreateWindowEvent"][::std::mem::size_of::<XCreateWindowEvent>() - 72usize];
    ["Alignment of XCreateWindowEvent"][::std::mem::align_of::<XCreateWindowEvent>() - 8usize];
    ["Offset of field: XCreateWindowEvent::type_"]
        [::std::mem::offset_of!(XCreateWindowEvent, type_) - 0usize];
    ["Offset of field: XCreateWindowEvent::serial"]
        [::std::mem::offset_of!(XCreateWindowEvent, serial) - 8usize];
    ["Offset of field: XCreateWindowEvent::send_event"]
        [::std::mem::offset_of!(XCreateWindowEvent, send_event) - 16usize];
    ["Offset of field: XCreateWindowEvent::display"]
        [::std::mem::offset_of!(XCreateWindowEvent, display) - 24usize];
    ["Offset of field: XCreateWindowEvent::parent"]
        [::std::mem::offset_of!(XCreateWindowEvent, parent) - 32usize];
    ["Offset of field: XCreateWindowEvent::window"]
        [::std::mem::offset_of!(XCreateWindowEvent, window) - 40usize];
    ["Offset of field: XCreateWindowEvent::x"]
        [::std::mem::offset_of!(XCreateWindowEvent, x) - 48usize];
    ["Offset of field: XCreateWindowEvent::y"]
        [::std::mem::offset_of!(XCreateWindowEvent, y) - 52usize];
    ["Offset of field: XCreateWindowEvent::width"]
        [::std::mem::offset_of!(XCreateWindowEvent, width) - 56usize];
    ["Offset of field: XCreateWindowEvent::height"]
        [::std::mem::offset_of!(XCreateWindowEvent, height) - 60usize];
    ["Offset of field: XCreateWindowEvent::border_width"]
        [::std::mem::offset_of!(XCreateWindowEvent, border_width) - 64usize];
    ["Offset of field: XCreateWindowEvent::override_redirect"]
        [::std::mem::offset_of!(XCreateWindowEvent, override_redirect) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDestroyWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDestroyWindowEvent"][::std::mem::size_of::<XDestroyWindowEvent>() - 48usize];
    ["Alignment of XDestroyWindowEvent"][::std::mem::align_of::<XDestroyWindowEvent>() - 8usize];
    ["Offset of field: XDestroyWindowEvent::type_"]
        [::std::mem::offset_of!(XDestroyWindowEvent, type_) - 0usize];
    ["Offset of field: XDestroyWindowEvent::serial"]
        [::std::mem::offset_of!(XDestroyWindowEvent, serial) - 8usize];
    ["Offset of field: XDestroyWindowEvent::send_event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, send_event) - 16usize];
    ["Offset of field: XDestroyWindowEvent::display"]
        [::std::mem::offset_of!(XDestroyWindowEvent, display) - 24usize];
    ["Offset of field: XDestroyWindowEvent::event"]
        [::std::mem::offset_of!(XDestroyWindowEvent, event) - 32usize];
    ["Offset of field: XDestroyWindowEvent::window"]
        [::std::mem::offset_of!(XDestroyWindowEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XUnmapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XUnmapEvent"][::std::mem::size_of::<XUnmapEvent>() - 56usize];
    ["Alignment of XUnmapEvent"][::std::mem::align_of::<XUnmapEvent>() - 8usize];
    ["Offset of field: XUnmapEvent::type_"][::std::mem::offset_of!(XUnmapEvent, type_) - 0usize];
    ["Offset of field: XUnmapEvent::serial"][::std::mem::offset_of!(XUnmapEvent, serial) - 8usize];
    ["Offset of field: XUnmapEvent::send_event"]
        [::std::mem::offset_of!(XUnmapEvent, send_event) - 16usize];
    ["Offset of field: XUnmapEvent::display"]
        [::std::mem::offset_of!(XUnmapEvent, display) - 24usize];
    ["Offset of field: XUnmapEvent::event"][::std::mem::offset_of!(XUnmapEvent, event) - 32usize];
    ["Offset of field: XUnmapEvent::window"][::std::mem::offset_of!(XUnmapEvent, window) - 40usize];
    ["Offset of field: XUnmapEvent::from_configure"]
        [::std::mem::offset_of!(XUnmapEvent, from_configure) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapEvent"][::std::mem::size_of::<XMapEvent>() - 56usize];
    ["Alignment of XMapEvent"][::std::mem::align_of::<XMapEvent>() - 8usize];
    ["Offset of field: XMapEvent::type_"][::std::mem::offset_of!(XMapEvent, type_) - 0usize];
    ["Offset of field: XMapEvent::serial"][::std::mem::offset_of!(XMapEvent, serial) - 8usize];
    ["Offset of field: XMapEvent::send_event"]
        [::std::mem::offset_of!(XMapEvent, send_event) - 16usize];
    ["Offset of field: XMapEvent::display"][::std::mem::offset_of!(XMapEvent, display) - 24usize];
    ["Offset of field: XMapEvent::event"][::std::mem::offset_of!(XMapEvent, event) - 32usize];
    ["Offset of field: XMapEvent::window"][::std::mem::offset_of!(XMapEvent, window) - 40usize];
    ["Offset of field: XMapEvent::override_redirect"]
        [::std::mem::offset_of!(XMapEvent, override_redirect) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMapRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMapRequestEvent"][::std::mem::size_of::<XMapRequestEvent>() - 48usize];
    ["Alignment of XMapRequestEvent"][::std::mem::align_of::<XMapRequestEvent>() - 8usize];
    ["Offset of field: XMapRequestEvent::type_"]
        [::std::mem::offset_of!(XMapRequestEvent, type_) - 0usize];
    ["Offset of field: XMapRequestEvent::serial"]
        [::std::mem::offset_of!(XMapRequestEvent, serial) - 8usize];
    ["Offset of field: XMapRequestEvent::send_event"]
        [::std::mem::offset_of!(XMapRequestEvent, send_event) - 16usize];
    ["Offset of field: XMapRequestEvent::display"]
        [::std::mem::offset_of!(XMapRequestEvent, display) - 24usize];
    ["Offset of field: XMapRequestEvent::parent"]
        [::std::mem::offset_of!(XMapRequestEvent, parent) - 32usize];
    ["Offset of field: XMapRequestEvent::window"]
        [::std::mem::offset_of!(XMapRequestEvent, window) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XReparentEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XReparentEvent"][::std::mem::size_of::<XReparentEvent>() - 72usize];
    ["Alignment of XReparentEvent"][::std::mem::align_of::<XReparentEvent>() - 8usize];
    ["Offset of field: XReparentEvent::type_"]
        [::std::mem::offset_of!(XReparentEvent, type_) - 0usize];
    ["Offset of field: XReparentEvent::serial"]
        [::std::mem::offset_of!(XReparentEvent, serial) - 8usize];
    ["Offset of field: XReparentEvent::send_event"]
        [::std::mem::offset_of!(XReparentEvent, send_event) - 16usize];
    ["Offset of field: XReparentEvent::display"]
        [::std::mem::offset_of!(XReparentEvent, display) - 24usize];
    ["Offset of field: XReparentEvent::event"]
        [::std::mem::offset_of!(XReparentEvent, event) - 32usize];
    ["Offset of field: XReparentEvent::window"]
        [::std::mem::offset_of!(XReparentEvent, window) - 40usize];
    ["Offset of field: XReparentEvent::parent"]
        [::std::mem::offset_of!(XReparentEvent, parent) - 48usize];
    ["Offset of field: XReparentEvent::x"][::std::mem::offset_of!(XReparentEvent, x) - 56usize];
    ["Offset of field: XReparentEvent::y"][::std::mem::offset_of!(XReparentEvent, y) - 60usize];
    ["Offset of field: XReparentEvent::override_redirect"]
        [::std::mem::offset_of!(XReparentEvent, override_redirect) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureEvent"][::std::mem::size_of::<XConfigureEvent>() - 88usize];
    ["Alignment of XConfigureEvent"][::std::mem::align_of::<XConfigureEvent>() - 8usize];
    ["Offset of field: XConfigureEvent::type_"]
        [::std::mem::offset_of!(XConfigureEvent, type_) - 0usize];
    ["Offset of field: XConfigureEvent::serial"]
        [::std::mem::offset_of!(XConfigureEvent, serial) - 8usize];
    ["Offset of field: XConfigureEvent::send_event"]
        [::std::mem::offset_of!(XConfigureEvent, send_event) - 16usize];
    ["Offset of field: XConfigureEvent::display"]
        [::std::mem::offset_of!(XConfigureEvent, display) - 24usize];
    ["Offset of field: XConfigureEvent::event"]
        [::std::mem::offset_of!(XConfigureEvent, event) - 32usize];
    ["Offset of field: XConfigureEvent::window"]
        [::std::mem::offset_of!(XConfigureEvent, window) - 40usize];
    ["Offset of field: XConfigureEvent::x"][::std::mem::offset_of!(XConfigureEvent, x) - 48usize];
    ["Offset of field: XConfigureEvent::y"][::std::mem::offset_of!(XConfigureEvent, y) - 52usize];
    ["Offset of field: XConfigureEvent::width"]
        [::std::mem::offset_of!(XConfigureEvent, width) - 56usize];
    ["Offset of field: XConfigureEvent::height"]
        [::std::mem::offset_of!(XConfigureEvent, height) - 60usize];
    ["Offset of field: XConfigureEvent::border_width"]
        [::std::mem::offset_of!(XConfigureEvent, border_width) - 64usize];
    ["Offset of field: XConfigureEvent::above"]
        [::std::mem::offset_of!(XConfigureEvent, above) - 72usize];
    ["Offset of field: XConfigureEvent::override_redirect"]
        [::std::mem::offset_of!(XConfigureEvent, override_redirect) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGravityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGravityEvent"][::std::mem::size_of::<XGravityEvent>() - 56usize];
    ["Alignment of XGravityEvent"][::std::mem::align_of::<XGravityEvent>() - 8usize];
    ["Offset of field: XGravityEvent::type_"]
        [::std::mem::offset_of!(XGravityEvent, type_) - 0usize];
    ["Offset of field: XGravityEvent::serial"]
        [::std::mem::offset_of!(XGravityEvent, serial) - 8usize];
    ["Offset of field: XGravityEvent::send_event"]
        [::std::mem::offset_of!(XGravityEvent, send_event) - 16usize];
    ["Offset of field: XGravityEvent::display"]
        [::std::mem::offset_of!(XGravityEvent, display) - 24usize];
    ["Offset of field: XGravityEvent::event"]
        [::std::mem::offset_of!(XGravityEvent, event) - 32usize];
    ["Offset of field: XGravityEvent::window"]
        [::std::mem::offset_of!(XGravityEvent, window) - 40usize];
    ["Offset of field: XGravityEvent::x"][::std::mem::offset_of!(XGravityEvent, x) - 48usize];
    ["Offset of field: XGravityEvent::y"][::std::mem::offset_of!(XGravityEvent, y) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XResizeRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XResizeRequestEvent"][::std::mem::size_of::<XResizeRequestEvent>() - 48usize];
    ["Alignment of XResizeRequestEvent"][::std::mem::align_of::<XResizeRequestEvent>() - 8usize];
    ["Offset of field: XResizeRequestEvent::type_"]
        [::std::mem::offset_of!(XResizeRequestEvent, type_) - 0usize];
    ["Offset of field: XResizeRequestEvent::serial"]
        [::std::mem::offset_of!(XResizeRequestEvent, serial) - 8usize];
    ["Offset of field: XResizeRequestEvent::send_event"]
        [::std::mem::offset_of!(XResizeRequestEvent, send_event) - 16usize];
    ["Offset of field: XResizeRequestEvent::display"]
        [::std::mem::offset_of!(XResizeRequestEvent, display) - 24usize];
    ["Offset of field: XResizeRequestEvent::window"]
        [::std::mem::offset_of!(XResizeRequestEvent, window) - 32usize];
    ["Offset of field: XResizeRequestEvent::width"]
        [::std::mem::offset_of!(XResizeRequestEvent, width) - 40usize];
    ["Offset of field: XResizeRequestEvent::height"]
        [::std::mem::offset_of!(XResizeRequestEvent, height) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XConfigureRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub detail: ::std::os::raw::c_int,
    pub value_mask: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XConfigureRequestEvent"][::std::mem::size_of::<XConfigureRequestEvent>() - 96usize];
    ["Alignment of XConfigureRequestEvent"]
        [::std::mem::align_of::<XConfigureRequestEvent>() - 8usize];
    ["Offset of field: XConfigureRequestEvent::type_"]
        [::std::mem::offset_of!(XConfigureRequestEvent, type_) - 0usize];
    ["Offset of field: XConfigureRequestEvent::serial"]
        [::std::mem::offset_of!(XConfigureRequestEvent, serial) - 8usize];
    ["Offset of field: XConfigureRequestEvent::send_event"]
        [::std::mem::offset_of!(XConfigureRequestEvent, send_event) - 16usize];
    ["Offset of field: XConfigureRequestEvent::display"]
        [::std::mem::offset_of!(XConfigureRequestEvent, display) - 24usize];
    ["Offset of field: XConfigureRequestEvent::parent"]
        [::std::mem::offset_of!(XConfigureRequestEvent, parent) - 32usize];
    ["Offset of field: XConfigureRequestEvent::window"]
        [::std::mem::offset_of!(XConfigureRequestEvent, window) - 40usize];
    ["Offset of field: XConfigureRequestEvent::x"]
        [::std::mem::offset_of!(XConfigureRequestEvent, x) - 48usize];
    ["Offset of field: XConfigureRequestEvent::y"]
        [::std::mem::offset_of!(XConfigureRequestEvent, y) - 52usize];
    ["Offset of field: XConfigureRequestEvent::width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, width) - 56usize];
    ["Offset of field: XConfigureRequestEvent::height"]
        [::std::mem::offset_of!(XConfigureRequestEvent, height) - 60usize];
    ["Offset of field: XConfigureRequestEvent::border_width"]
        [::std::mem::offset_of!(XConfigureRequestEvent, border_width) - 64usize];
    ["Offset of field: XConfigureRequestEvent::above"]
        [::std::mem::offset_of!(XConfigureRequestEvent, above) - 72usize];
    ["Offset of field: XConfigureRequestEvent::detail"]
        [::std::mem::offset_of!(XConfigureRequestEvent, detail) - 80usize];
    ["Offset of field: XConfigureRequestEvent::value_mask"]
        [::std::mem::offset_of!(XConfigureRequestEvent, value_mask) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateEvent"][::std::mem::size_of::<XCirculateEvent>() - 56usize];
    ["Alignment of XCirculateEvent"][::std::mem::align_of::<XCirculateEvent>() - 8usize];
    ["Offset of field: XCirculateEvent::type_"]
        [::std::mem::offset_of!(XCirculateEvent, type_) - 0usize];
    ["Offset of field: XCirculateEvent::serial"]
        [::std::mem::offset_of!(XCirculateEvent, serial) - 8usize];
    ["Offset of field: XCirculateEvent::send_event"]
        [::std::mem::offset_of!(XCirculateEvent, send_event) - 16usize];
    ["Offset of field: XCirculateEvent::display"]
        [::std::mem::offset_of!(XCirculateEvent, display) - 24usize];
    ["Offset of field: XCirculateEvent::event"]
        [::std::mem::offset_of!(XCirculateEvent, event) - 32usize];
    ["Offset of field: XCirculateEvent::window"]
        [::std::mem::offset_of!(XCirculateEvent, window) - 40usize];
    ["Offset of field: XCirculateEvent::place"]
        [::std::mem::offset_of!(XCirculateEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCirculateRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCirculateRequestEvent"][::std::mem::size_of::<XCirculateRequestEvent>() - 56usize];
    ["Alignment of XCirculateRequestEvent"]
        [::std::mem::align_of::<XCirculateRequestEvent>() - 8usize];
    ["Offset of field: XCirculateRequestEvent::type_"]
        [::std::mem::offset_of!(XCirculateRequestEvent, type_) - 0usize];
    ["Offset of field: XCirculateRequestEvent::serial"]
        [::std::mem::offset_of!(XCirculateRequestEvent, serial) - 8usize];
    ["Offset of field: XCirculateRequestEvent::send_event"]
        [::std::mem::offset_of!(XCirculateRequestEvent, send_event) - 16usize];
    ["Offset of field: XCirculateRequestEvent::display"]
        [::std::mem::offset_of!(XCirculateRequestEvent, display) - 24usize];
    ["Offset of field: XCirculateRequestEvent::parent"]
        [::std::mem::offset_of!(XCirculateRequestEvent, parent) - 32usize];
    ["Offset of field: XCirculateRequestEvent::window"]
        [::std::mem::offset_of!(XCirculateRequestEvent, window) - 40usize];
    ["Offset of field: XCirculateRequestEvent::place"]
        [::std::mem::offset_of!(XCirculateRequestEvent, place) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPropertyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPropertyEvent"][::std::mem::size_of::<XPropertyEvent>() - 64usize];
    ["Alignment of XPropertyEvent"][::std::mem::align_of::<XPropertyEvent>() - 8usize];
    ["Offset of field: XPropertyEvent::type_"]
        [::std::mem::offset_of!(XPropertyEvent, type_) - 0usize];
    ["Offset of field: XPropertyEvent::serial"]
        [::std::mem::offset_of!(XPropertyEvent, serial) - 8usize];
    ["Offset of field: XPropertyEvent::send_event"]
        [::std::mem::offset_of!(XPropertyEvent, send_event) - 16usize];
    ["Offset of field: XPropertyEvent::display"]
        [::std::mem::offset_of!(XPropertyEvent, display) - 24usize];
    ["Offset of field: XPropertyEvent::window"]
        [::std::mem::offset_of!(XPropertyEvent, window) - 32usize];
    ["Offset of field: XPropertyEvent::atom"]
        [::std::mem::offset_of!(XPropertyEvent, atom) - 40usize];
    ["Offset of field: XPropertyEvent::time"]
        [::std::mem::offset_of!(XPropertyEvent, time) - 48usize];
    ["Offset of field: XPropertyEvent::state"]
        [::std::mem::offset_of!(XPropertyEvent, state) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionClearEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionClearEvent"][::std::mem::size_of::<XSelectionClearEvent>() - 56usize];
    ["Alignment of XSelectionClearEvent"][::std::mem::align_of::<XSelectionClearEvent>() - 8usize];
    ["Offset of field: XSelectionClearEvent::type_"]
        [::std::mem::offset_of!(XSelectionClearEvent, type_) - 0usize];
    ["Offset of field: XSelectionClearEvent::serial"]
        [::std::mem::offset_of!(XSelectionClearEvent, serial) - 8usize];
    ["Offset of field: XSelectionClearEvent::send_event"]
        [::std::mem::offset_of!(XSelectionClearEvent, send_event) - 16usize];
    ["Offset of field: XSelectionClearEvent::display"]
        [::std::mem::offset_of!(XSelectionClearEvent, display) - 24usize];
    ["Offset of field: XSelectionClearEvent::window"]
        [::std::mem::offset_of!(XSelectionClearEvent, window) - 32usize];
    ["Offset of field: XSelectionClearEvent::selection"]
        [::std::mem::offset_of!(XSelectionClearEvent, selection) - 40usize];
    ["Offset of field: XSelectionClearEvent::time"]
        [::std::mem::offset_of!(XSelectionClearEvent, time) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionRequestEvent"][::std::mem::size_of::<XSelectionRequestEvent>() - 80usize];
    ["Alignment of XSelectionRequestEvent"]
        [::std::mem::align_of::<XSelectionRequestEvent>() - 8usize];
    ["Offset of field: XSelectionRequestEvent::type_"]
        [::std::mem::offset_of!(XSelectionRequestEvent, type_) - 0usize];
    ["Offset of field: XSelectionRequestEvent::serial"]
        [::std::mem::offset_of!(XSelectionRequestEvent, serial) - 8usize];
    ["Offset of field: XSelectionRequestEvent::send_event"]
        [::std::mem::offset_of!(XSelectionRequestEvent, send_event) - 16usize];
    ["Offset of field: XSelectionRequestEvent::display"]
        [::std::mem::offset_of!(XSelectionRequestEvent, display) - 24usize];
    ["Offset of field: XSelectionRequestEvent::owner"]
        [::std::mem::offset_of!(XSelectionRequestEvent, owner) - 32usize];
    ["Offset of field: XSelectionRequestEvent::requestor"]
        [::std::mem::offset_of!(XSelectionRequestEvent, requestor) - 40usize];
    ["Offset of field: XSelectionRequestEvent::selection"]
        [::std::mem::offset_of!(XSelectionRequestEvent, selection) - 48usize];
    ["Offset of field: XSelectionRequestEvent::target"]
        [::std::mem::offset_of!(XSelectionRequestEvent, target) - 56usize];
    ["Offset of field: XSelectionRequestEvent::property"]
        [::std::mem::offset_of!(XSelectionRequestEvent, property) - 64usize];
    ["Offset of field: XSelectionRequestEvent::time"]
        [::std::mem::offset_of!(XSelectionRequestEvent, time) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XSelectionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XSelectionEvent"][::std::mem::size_of::<XSelectionEvent>() - 72usize];
    ["Alignment of XSelectionEvent"][::std::mem::align_of::<XSelectionEvent>() - 8usize];
    ["Offset of field: XSelectionEvent::type_"]
        [::std::mem::offset_of!(XSelectionEvent, type_) - 0usize];
    ["Offset of field: XSelectionEvent::serial"]
        [::std::mem::offset_of!(XSelectionEvent, serial) - 8usize];
    ["Offset of field: XSelectionEvent::send_event"]
        [::std::mem::offset_of!(XSelectionEvent, send_event) - 16usize];
    ["Offset of field: XSelectionEvent::display"]
        [::std::mem::offset_of!(XSelectionEvent, display) - 24usize];
    ["Offset of field: XSelectionEvent::requestor"]
        [::std::mem::offset_of!(XSelectionEvent, requestor) - 32usize];
    ["Offset of field: XSelectionEvent::selection"]
        [::std::mem::offset_of!(XSelectionEvent, selection) - 40usize];
    ["Offset of field: XSelectionEvent::target"]
        [::std::mem::offset_of!(XSelectionEvent, target) - 48usize];
    ["Offset of field: XSelectionEvent::property"]
        [::std::mem::offset_of!(XSelectionEvent, property) - 56usize];
    ["Offset of field: XSelectionEvent::time"]
        [::std::mem::offset_of!(XSelectionEvent, time) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XColormapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XColormapEvent"][::std::mem::size_of::<XColormapEvent>() - 56usize];
    ["Alignment of XColormapEvent"][::std::mem::align_of::<XColormapEvent>() - 8usize];
    ["Offset of field: XColormapEvent::type_"]
        [::std::mem::offset_of!(XColormapEvent, type_) - 0usize];
    ["Offset of field: XColormapEvent::serial"]
        [::std::mem::offset_of!(XColormapEvent, serial) - 8usize];
    ["Offset of field: XColormapEvent::send_event"]
        [::std::mem::offset_of!(XColormapEvent, send_event) - 16usize];
    ["Offset of field: XColormapEvent::display"]
        [::std::mem::offset_of!(XColormapEvent, display) - 24usize];
    ["Offset of field: XColormapEvent::window"]
        [::std::mem::offset_of!(XColormapEvent, window) - 32usize];
    ["Offset of field: XColormapEvent::colormap"]
        [::std::mem::offset_of!(XColormapEvent, colormap) - 40usize];
    ["Offset of field: XColormapEvent::new"][::std::mem::offset_of!(XColormapEvent, new) - 48usize];
    ["Offset of field: XColormapEvent::state"]
        [::std::mem::offset_of!(XColormapEvent, state) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XClientMessageEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::std::os::raw::c_int,
    pub data: XClientMessageEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XClientMessageEvent__bindgen_ty_1 {
    pub b: [::std::os::raw::c_char; 20usize],
    pub s: [::std::os::raw::c_short; 10usize],
    pub l: [::std::os::raw::c_long; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::size_of::<XClientMessageEvent__bindgen_ty_1>() - 40usize];
    ["Alignment of XClientMessageEvent__bindgen_ty_1"]
        [::std::mem::align_of::<XClientMessageEvent__bindgen_ty_1>() - 8usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::b"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, b) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::s"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, s) - 0usize];
    ["Offset of field: XClientMessageEvent__bindgen_ty_1::l"]
        [::std::mem::offset_of!(XClientMessageEvent__bindgen_ty_1, l) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XClientMessageEvent"][::std::mem::size_of::<XClientMessageEvent>() - 96usize];
    ["Alignment of XClientMessageEvent"][::std::mem::align_of::<XClientMessageEvent>() - 8usize];
    ["Offset of field: XClientMessageEvent::type_"]
        [::std::mem::offset_of!(XClientMessageEvent, type_) - 0usize];
    ["Offset of field: XClientMessageEvent::serial"]
        [::std::mem::offset_of!(XClientMessageEvent, serial) - 8usize];
    ["Offset of field: XClientMessageEvent::send_event"]
        [::std::mem::offset_of!(XClientMessageEvent, send_event) - 16usize];
    ["Offset of field: XClientMessageEvent::display"]
        [::std::mem::offset_of!(XClientMessageEvent, display) - 24usize];
    ["Offset of field: XClientMessageEvent::window"]
        [::std::mem::offset_of!(XClientMessageEvent, window) - 32usize];
    ["Offset of field: XClientMessageEvent::message_type"]
        [::std::mem::offset_of!(XClientMessageEvent, message_type) - 40usize];
    ["Offset of field: XClientMessageEvent::format"]
        [::std::mem::offset_of!(XClientMessageEvent, format) - 48usize];
    ["Offset of field: XClientMessageEvent::data"]
        [::std::mem::offset_of!(XClientMessageEvent, data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XMappingEvent"][::std::mem::size_of::<XMappingEvent>() - 56usize];
    ["Alignment of XMappingEvent"][::std::mem::align_of::<XMappingEvent>() - 8usize];
    ["Offset of field: XMappingEvent::type_"]
        [::std::mem::offset_of!(XMappingEvent, type_) - 0usize];
    ["Offset of field: XMappingEvent::serial"]
        [::std::mem::offset_of!(XMappingEvent, serial) - 8usize];
    ["Offset of field: XMappingEvent::send_event"]
        [::std::mem::offset_of!(XMappingEvent, send_event) - 16usize];
    ["Offset of field: XMappingEvent::display"]
        [::std::mem::offset_of!(XMappingEvent, display) - 24usize];
    ["Offset of field: XMappingEvent::window"]
        [::std::mem::offset_of!(XMappingEvent, window) - 32usize];
    ["Offset of field: XMappingEvent::request"]
        [::std::mem::offset_of!(XMappingEvent, request) - 40usize];
    ["Offset of field: XMappingEvent::first_keycode"]
        [::std::mem::offset_of!(XMappingEvent, first_keycode) - 44usize];
    ["Offset of field: XMappingEvent::count"]
        [::std::mem::offset_of!(XMappingEvent, count) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XErrorEvent {
    pub type_: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub resourceid: XID,
    pub serial: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_uchar,
    pub request_code: ::std::os::raw::c_uchar,
    pub minor_code: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XErrorEvent"][::std::mem::size_of::<XErrorEvent>() - 40usize];
    ["Alignment of XErrorEvent"][::std::mem::align_of::<XErrorEvent>() - 8usize];
    ["Offset of field: XErrorEvent::type_"][::std::mem::offset_of!(XErrorEvent, type_) - 0usize];
    ["Offset of field: XErrorEvent::display"]
        [::std::mem::offset_of!(XErrorEvent, display) - 8usize];
    ["Offset of field: XErrorEvent::resourceid"]
        [::std::mem::offset_of!(XErrorEvent, resourceid) - 16usize];
    ["Offset of field: XErrorEvent::serial"][::std::mem::offset_of!(XErrorEvent, serial) - 24usize];
    ["Offset of field: XErrorEvent::error_code"]
        [::std::mem::offset_of!(XErrorEvent, error_code) - 32usize];
    ["Offset of field: XErrorEvent::request_code"]
        [::std::mem::offset_of!(XErrorEvent, request_code) - 33usize];
    ["Offset of field: XErrorEvent::minor_code"]
        [::std::mem::offset_of!(XErrorEvent, minor_code) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XAnyEvent"][::std::mem::size_of::<XAnyEvent>() - 40usize];
    ["Alignment of XAnyEvent"][::std::mem::align_of::<XAnyEvent>() - 8usize];
    ["Offset of field: XAnyEvent::type_"][::std::mem::offset_of!(XAnyEvent, type_) - 0usize];
    ["Offset of field: XAnyEvent::serial"][::std::mem::offset_of!(XAnyEvent, serial) - 8usize];
    ["Offset of field: XAnyEvent::send_event"]
        [::std::mem::offset_of!(XAnyEvent, send_event) - 16usize];
    ["Offset of field: XAnyEvent::display"][::std::mem::offset_of!(XAnyEvent, display) - 24usize];
    ["Offset of field: XAnyEvent::window"][::std::mem::offset_of!(XAnyEvent, window) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEvent"][::std::mem::size_of::<XGenericEvent>() - 40usize];
    ["Alignment of XGenericEvent"][::std::mem::align_of::<XGenericEvent>() - 8usize];
    ["Offset of field: XGenericEvent::type_"]
        [::std::mem::offset_of!(XGenericEvent, type_) - 0usize];
    ["Offset of field: XGenericEvent::serial"]
        [::std::mem::offset_of!(XGenericEvent, serial) - 8usize];
    ["Offset of field: XGenericEvent::send_event"]
        [::std::mem::offset_of!(XGenericEvent, send_event) - 16usize];
    ["Offset of field: XGenericEvent::display"]
        [::std::mem::offset_of!(XGenericEvent, display) - 24usize];
    ["Offset of field: XGenericEvent::extension"]
        [::std::mem::offset_of!(XGenericEvent, extension) - 32usize];
    ["Offset of field: XGenericEvent::evtype"]
        [::std::mem::offset_of!(XGenericEvent, evtype) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XGenericEventCookie {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
    pub cookie: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XGenericEventCookie"][::std::mem::size_of::<XGenericEventCookie>() - 56usize];
    ["Alignment of XGenericEventCookie"][::std::mem::align_of::<XGenericEventCookie>() - 8usize];
    ["Offset of field: XGenericEventCookie::type_"]
        [::std::mem::offset_of!(XGenericEventCookie, type_) - 0usize];
    ["Offset of field: XGenericEventCookie::serial"]
        [::std::mem::offset_of!(XGenericEventCookie, serial) - 8usize];
    ["Offset of field: XGenericEventCookie::send_event"]
        [::std::mem::offset_of!(XGenericEventCookie, send_event) - 16usize];
    ["Offset of field: XGenericEventCookie::display"]
        [::std::mem::offset_of!(XGenericEventCookie, display) - 24usize];
    ["Offset of field: XGenericEventCookie::extension"]
        [::std::mem::offset_of!(XGenericEventCookie, extension) - 32usize];
    ["Offset of field: XGenericEventCookie::evtype"]
        [::std::mem::offset_of!(XGenericEventCookie, evtype) - 36usize];
    ["Offset of field: XGenericEventCookie::cookie"]
        [::std::mem::offset_of!(XGenericEventCookie, cookie) - 40usize];
    ["Offset of field: XGenericEventCookie::data"]
        [::std::mem::offset_of!(XGenericEventCookie, data) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XEvent {
    pub type_: ::std::os::raw::c_int,
    pub xany: XAnyEvent,
    pub xkey: XKeyEvent,
    pub xbutton: XButtonEvent,
    pub xmotion: XMotionEvent,
    pub xcrossing: XCrossingEvent,
    pub xfocus: XFocusChangeEvent,
    pub xexpose: XExposeEvent,
    pub xgraphicsexpose: XGraphicsExposeEvent,
    pub xnoexpose: XNoExposeEvent,
    pub xvisibility: XVisibilityEvent,
    pub xcreatewindow: XCreateWindowEvent,
    pub xdestroywindow: XDestroyWindowEvent,
    pub xunmap: XUnmapEvent,
    pub xmap: XMapEvent,
    pub xmaprequest: XMapRequestEvent,
    pub xreparent: XReparentEvent,
    pub xconfigure: XConfigureEvent,
    pub xgravity: XGravityEvent,
    pub xresizerequest: XResizeRequestEvent,
    pub xconfigurerequest: XConfigureRequestEvent,
    pub xcirculate: XCirculateEvent,
    pub xcirculaterequest: XCirculateRequestEvent,
    pub xproperty: XPropertyEvent,
    pub xselectionclear: XSelectionClearEvent,
    pub xselectionrequest: XSelectionRequestEvent,
    pub xselection: XSelectionEvent,
    pub xcolormap: XColormapEvent,
    pub xclient: XClientMessageEvent,
    pub xmapping: XMappingEvent,
    pub xerror: XErrorEvent,
    pub xkeymap: XKeymapEvent,
    pub xgeneric: XGenericEvent,
    pub xcookie: XGenericEventCookie,
    pub pad: [::std::os::raw::c_long; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XEvent"][::std::mem::size_of::<_XEvent>() - 192usize];
    ["Alignment of _XEvent"][::std::mem::align_of::<_XEvent>() - 8usize];
    ["Offset of field: _XEvent::type_"][::std::mem::offset_of!(_XEvent, type_) - 0usize];
    ["Offset of field: _XEvent::xany"][::std::mem::offset_of!(_XEvent, xany) - 0usize];
    ["Offset of field: _XEvent::xkey"][::std::mem::offset_of!(_XEvent, xkey) - 0usize];
    ["Offset of field: _XEvent::xbutton"][::std::mem::offset_of!(_XEvent, xbutton) - 0usize];
    ["Offset of field: _XEvent::xmotion"][::std::mem::offset_of!(_XEvent, xmotion) - 0usize];
    ["Offset of field: _XEvent::xcrossing"][::std::mem::offset_of!(_XEvent, xcrossing) - 0usize];
    ["Offset of field: _XEvent::xfocus"][::std::mem::offset_of!(_XEvent, xfocus) - 0usize];
    ["Offset of field: _XEvent::xexpose"][::std::mem::offset_of!(_XEvent, xexpose) - 0usize];
    ["Offset of field: _XEvent::xgraphicsexpose"]
        [::std::mem::offset_of!(_XEvent, xgraphicsexpose) - 0usize];
    ["Offset of field: _XEvent::xnoexpose"][::std::mem::offset_of!(_XEvent, xnoexpose) - 0usize];
    ["Offset of field: _XEvent::xvisibility"]
        [::std::mem::offset_of!(_XEvent, xvisibility) - 0usize];
    ["Offset of field: _XEvent::xcreatewindow"]
        [::std::mem::offset_of!(_XEvent, xcreatewindow) - 0usize];
    ["Offset of field: _XEvent::xdestroywindow"]
        [::std::mem::offset_of!(_XEvent, xdestroywindow) - 0usize];
    ["Offset of field: _XEvent::xunmap"][::std::mem::offset_of!(_XEvent, xunmap) - 0usize];
    ["Offset of field: _XEvent::xmap"][::std::mem::offset_of!(_XEvent, xmap) - 0usize];
    ["Offset of field: _XEvent::xmaprequest"]
        [::std::mem::offset_of!(_XEvent, xmaprequest) - 0usize];
    ["Offset of field: _XEvent::xreparent"][::std::mem::offset_of!(_XEvent, xreparent) - 0usize];
    ["Offset of field: _XEvent::xconfigure"][::std::mem::offset_of!(_XEvent, xconfigure) - 0usize];
    ["Offset of field: _XEvent::xgravity"][::std::mem::offset_of!(_XEvent, xgravity) - 0usize];
    ["Offset of field: _XEvent::xresizerequest"]
        [::std::mem::offset_of!(_XEvent, xresizerequest) - 0usize];
    ["Offset of field: _XEvent::xconfigurerequest"]
        [::std::mem::offset_of!(_XEvent, xconfigurerequest) - 0usize];
    ["Offset of field: _XEvent::xcirculate"][::std::mem::offset_of!(_XEvent, xcirculate) - 0usize];
    ["Offset of field: _XEvent::xcirculaterequest"]
        [::std::mem::offset_of!(_XEvent, xcirculaterequest) - 0usize];
    ["Offset of field: _XEvent::xproperty"][::std::mem::offset_of!(_XEvent, xproperty) - 0usize];
    ["Offset of field: _XEvent::xselectionclear"]
        [::std::mem::offset_of!(_XEvent, xselectionclear) - 0usize];
    ["Offset of field: _XEvent::xselectionrequest"]
        [::std::mem::offset_of!(_XEvent, xselectionrequest) - 0usize];
    ["Offset of field: _XEvent::xselection"][::std::mem::offset_of!(_XEvent, xselection) - 0usize];
    ["Offset of field: _XEvent::xcolormap"][::std::mem::offset_of!(_XEvent, xcolormap) - 0usize];
    ["Offset of field: _XEvent::xclient"][::std::mem::offset_of!(_XEvent, xclient) - 0usize];
    ["Offset of field: _XEvent::xmapping"][::std::mem::offset_of!(_XEvent, xmapping) - 0usize];
    ["Offset of field: _XEvent::xerror"][::std::mem::offset_of!(_XEvent, xerror) - 0usize];
    ["Offset of field: _XEvent::xkeymap"][::std::mem::offset_of!(_XEvent, xkeymap) - 0usize];
    ["Offset of field: _XEvent::xgeneric"][::std::mem::offset_of!(_XEvent, xgeneric) - 0usize];
    ["Offset of field: _XEvent::xcookie"][::std::mem::offset_of!(_XEvent, xcookie) - 0usize];
    ["Offset of field: _XEvent::pad"][::std::mem::offset_of!(_XEvent, pad) - 0usize];
};
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XCharStruct {
    pub lbearing: ::std::os::raw::c_short,
    pub rbearing: ::std::os::raw::c_short,
    pub width: ::std::os::raw::c_short,
    pub ascent: ::std::os::raw::c_short,
    pub descent: ::std::os::raw::c_short,
    pub attributes: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XCharStruct"][::std::mem::size_of::<XCharStruct>() - 12usize];
    ["Alignment of XCharStruct"][::std::mem::align_of::<XCharStruct>() - 2usize];
    ["Offset of field: XCharStruct::lbearing"]
        [::std::mem::offset_of!(XCharStruct, lbearing) - 0usize];
    ["Offset of field: XCharStruct::rbearing"]
        [::std::mem::offset_of!(XCharStruct, rbearing) - 2usize];
    ["Offset of field: XCharStruct::width"][::std::mem::offset_of!(XCharStruct, width) - 4usize];
    ["Offset of field: XCharStruct::ascent"][::std::mem::offset_of!(XCharStruct, ascent) - 6usize];
    ["Offset of field: XCharStruct::descent"]
        [::std::mem::offset_of!(XCharStruct, descent) - 8usize];
    ["Offset of field: XCharStruct::attributes"]
        [::std::mem::offset_of!(XCharStruct, attributes) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontProp {
    pub name: Atom,
    pub card32: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontProp"][::std::mem::size_of::<XFontProp>() - 16usize];
    ["Alignment of XFontProp"][::std::mem::align_of::<XFontProp>() - 8usize];
    ["Offset of field: XFontProp::name"][::std::mem::offset_of!(XFontProp, name) - 0usize];
    ["Offset of field: XFontProp::card32"][::std::mem::offset_of!(XFontProp, card32) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontStruct {
    pub ext_data: *mut XExtData,
    pub fid: Font,
    pub direction: ::std::os::raw::c_uint,
    pub min_char_or_byte2: ::std::os::raw::c_uint,
    pub max_char_or_byte2: ::std::os::raw::c_uint,
    pub min_byte1: ::std::os::raw::c_uint,
    pub max_byte1: ::std::os::raw::c_uint,
    pub all_chars_exist: ::std::os::raw::c_int,
    pub default_char: ::std::os::raw::c_uint,
    pub n_properties: ::std::os::raw::c_int,
    pub properties: *mut XFontProp,
    pub min_bounds: XCharStruct,
    pub max_bounds: XCharStruct,
    pub per_char: *mut XCharStruct,
    pub ascent: ::std::os::raw::c_int,
    pub descent: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontStruct"][::std::mem::size_of::<XFontStruct>() - 96usize];
    ["Alignment of XFontStruct"][::std::mem::align_of::<XFontStruct>() - 8usize];
    ["Offset of field: XFontStruct::ext_data"]
        [::std::mem::offset_of!(XFontStruct, ext_data) - 0usize];
    ["Offset of field: XFontStruct::fid"][::std::mem::offset_of!(XFontStruct, fid) - 8usize];
    ["Offset of field: XFontStruct::direction"]
        [::std::mem::offset_of!(XFontStruct, direction) - 16usize];
    ["Offset of field: XFontStruct::min_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, min_char_or_byte2) - 20usize];
    ["Offset of field: XFontStruct::max_char_or_byte2"]
        [::std::mem::offset_of!(XFontStruct, max_char_or_byte2) - 24usize];
    ["Offset of field: XFontStruct::min_byte1"]
        [::std::mem::offset_of!(XFontStruct, min_byte1) - 28usize];
    ["Offset of field: XFontStruct::max_byte1"]
        [::std::mem::offset_of!(XFontStruct, max_byte1) - 32usize];
    ["Offset of field: XFontStruct::all_chars_exist"]
        [::std::mem::offset_of!(XFontStruct, all_chars_exist) - 36usize];
    ["Offset of field: XFontStruct::default_char"]
        [::std::mem::offset_of!(XFontStruct, default_char) - 40usize];
    ["Offset of field: XFontStruct::n_properties"]
        [::std::mem::offset_of!(XFontStruct, n_properties) - 44usize];
    ["Offset of field: XFontStruct::properties"]
        [::std::mem::offset_of!(XFontStruct, properties) - 48usize];
    ["Offset of field: XFontStruct::min_bounds"]
        [::std::mem::offset_of!(XFontStruct, min_bounds) - 56usize];
    ["Offset of field: XFontStruct::max_bounds"]
        [::std::mem::offset_of!(XFontStruct, max_bounds) - 68usize];
    ["Offset of field: XFontStruct::per_char"]
        [::std::mem::offset_of!(XFontStruct, per_char) - 80usize];
    ["Offset of field: XFontStruct::ascent"][::std::mem::offset_of!(XFontStruct, ascent) - 88usize];
    ["Offset of field: XFontStruct::descent"]
        [::std::mem::offset_of!(XFontStruct, descent) - 92usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem"][::std::mem::size_of::<XTextItem>() - 24usize];
    ["Alignment of XTextItem"][::std::mem::align_of::<XTextItem>() - 8usize];
    ["Offset of field: XTextItem::chars"][::std::mem::offset_of!(XTextItem, chars) - 0usize];
    ["Offset of field: XTextItem::nchars"][::std::mem::offset_of!(XTextItem, nchars) - 8usize];
    ["Offset of field: XTextItem::delta"][::std::mem::offset_of!(XTextItem, delta) - 12usize];
    ["Offset of field: XTextItem::font"][::std::mem::offset_of!(XTextItem, font) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XChar2b {
    pub byte1: ::std::os::raw::c_uchar,
    pub byte2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XChar2b"][::std::mem::size_of::<XChar2b>() - 2usize];
    ["Alignment of XChar2b"][::std::mem::align_of::<XChar2b>() - 1usize];
    ["Offset of field: XChar2b::byte1"][::std::mem::offset_of!(XChar2b, byte1) - 0usize];
    ["Offset of field: XChar2b::byte2"][::std::mem::offset_of!(XChar2b, byte2) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTextItem16 {
    pub chars: *mut XChar2b,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font: Font,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XTextItem16"][::std::mem::size_of::<XTextItem16>() - 24usize];
    ["Alignment of XTextItem16"][::std::mem::align_of::<XTextItem16>() - 8usize];
    ["Offset of field: XTextItem16::chars"][::std::mem::offset_of!(XTextItem16, chars) - 0usize];
    ["Offset of field: XTextItem16::nchars"][::std::mem::offset_of!(XTextItem16, nchars) - 8usize];
    ["Offset of field: XTextItem16::delta"][::std::mem::offset_of!(XTextItem16, delta) - 12usize];
    ["Offset of field: XTextItem16::font"][::std::mem::offset_of!(XTextItem16, font) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union XEDataObject {
    pub display: *mut Display,
    pub gc: GC,
    pub visual: *mut Visual,
    pub screen: *mut Screen,
    pub pixmap_format: *mut ScreenFormat,
    pub font: *mut XFontStruct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XEDataObject"][::std::mem::size_of::<XEDataObject>() - 8usize];
    ["Alignment of XEDataObject"][::std::mem::align_of::<XEDataObject>() - 8usize];
    ["Offset of field: XEDataObject::display"]
        [::std::mem::offset_of!(XEDataObject, display) - 0usize];
    ["Offset of field: XEDataObject::gc"][::std::mem::offset_of!(XEDataObject, gc) - 0usize];
    ["Offset of field: XEDataObject::visual"]
        [::std::mem::offset_of!(XEDataObject, visual) - 0usize];
    ["Offset of field: XEDataObject::screen"]
        [::std::mem::offset_of!(XEDataObject, screen) - 0usize];
    ["Offset of field: XEDataObject::pixmap_format"]
        [::std::mem::offset_of!(XEDataObject, pixmap_format) - 0usize];
    ["Offset of field: XEDataObject::font"][::std::mem::offset_of!(XEDataObject, font) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFontSetExtents {
    pub max_ink_extent: XRectangle,
    pub max_logical_extent: XRectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFontSetExtents"][::std::mem::size_of::<XFontSetExtents>() - 16usize];
    ["Alignment of XFontSetExtents"][::std::mem::align_of::<XFontSetExtents>() - 2usize];
    ["Offset of field: XFontSetExtents::max_ink_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_ink_extent) - 0usize];
    ["Offset of field: XFontSetExtents::max_logical_extent"]
        [::std::mem::offset_of!(XFontSetExtents, max_logical_extent) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOM {
    _unused: [u8; 0],
}
pub type XOM = *mut _XOM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XOC {
    _unused: [u8; 0],
}
pub type XOC = *mut _XOC;
pub type XFontSet = *mut _XOC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XmbTextItem {
    pub chars: *mut ::std::os::raw::c_char,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XmbTextItem"][::std::mem::size_of::<XmbTextItem>() - 24usize];
    ["Alignment of XmbTextItem"][::std::mem::align_of::<XmbTextItem>() - 8usize];
    ["Offset of field: XmbTextItem::chars"][::std::mem::offset_of!(XmbTextItem, chars) - 0usize];
    ["Offset of field: XmbTextItem::nchars"][::std::mem::offset_of!(XmbTextItem, nchars) - 8usize];
    ["Offset of field: XmbTextItem::delta"][::std::mem::offset_of!(XmbTextItem, delta) - 12usize];
    ["Offset of field: XmbTextItem::font_set"]
        [::std::mem::offset_of!(XmbTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XwcTextItem {
    pub chars: *mut wchar_t,
    pub nchars: ::std::os::raw::c_int,
    pub delta: ::std::os::raw::c_int,
    pub font_set: XFontSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XwcTextItem"][::std::mem::size_of::<XwcTextItem>() - 24usize];
    ["Alignment of XwcTextItem"][::std::mem::align_of::<XwcTextItem>() - 8usize];
    ["Offset of field: XwcTextItem::chars"][::std::mem::offset_of!(XwcTextItem, chars) - 0usize];
    ["Offset of field: XwcTextItem::nchars"][::std::mem::offset_of!(XwcTextItem, nchars) - 8usize];
    ["Offset of field: XwcTextItem::delta"][::std::mem::offset_of!(XwcTextItem, delta) - 12usize];
    ["Offset of field: XwcTextItem::font_set"]
        [::std::mem::offset_of!(XwcTextItem, font_set) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMCharSetList {
    pub charset_count: ::std::os::raw::c_int,
    pub charset_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMCharSetList"][::std::mem::size_of::<XOMCharSetList>() - 16usize];
    ["Alignment of XOMCharSetList"][::std::mem::align_of::<XOMCharSetList>() - 8usize];
    ["Offset of field: XOMCharSetList::charset_count"]
        [::std::mem::offset_of!(XOMCharSetList, charset_count) - 0usize];
    ["Offset of field: XOMCharSetList::charset_list"]
        [::std::mem::offset_of!(XOMCharSetList, charset_list) - 8usize];
};
pub const XOrientation_XOMOrientation_LTR_TTB: XOrientation = 0;
pub const XOrientation_XOMOrientation_RTL_TTB: XOrientation = 1;
pub const XOrientation_XOMOrientation_TTB_LTR: XOrientation = 2;
pub const XOrientation_XOMOrientation_TTB_RTL: XOrientation = 3;
pub const XOrientation_XOMOrientation_Context: XOrientation = 4;
pub type XOrientation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMOrientation {
    pub num_orientation: ::std::os::raw::c_int,
    pub orientation: *mut XOrientation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMOrientation"][::std::mem::size_of::<XOMOrientation>() - 16usize];
    ["Alignment of XOMOrientation"][::std::mem::align_of::<XOMOrientation>() - 8usize];
    ["Offset of field: XOMOrientation::num_orientation"]
        [::std::mem::offset_of!(XOMOrientation, num_orientation) - 0usize];
    ["Offset of field: XOMOrientation::orientation"]
        [::std::mem::offset_of!(XOMOrientation, orientation) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XOMFontInfo {
    pub num_font: ::std::os::raw::c_int,
    pub font_struct_list: *mut *mut XFontStruct,
    pub font_name_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XOMFontInfo"][::std::mem::size_of::<XOMFontInfo>() - 24usize];
    ["Alignment of XOMFontInfo"][::std::mem::align_of::<XOMFontInfo>() - 8usize];
    ["Offset of field: XOMFontInfo::num_font"]
        [::std::mem::offset_of!(XOMFontInfo, num_font) - 0usize];
    ["Offset of field: XOMFontInfo::font_struct_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_struct_list) - 8usize];
    ["Offset of field: XOMFontInfo::font_name_list"]
        [::std::mem::offset_of!(XOMFontInfo, font_name_list) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIM {
    _unused: [u8; 0],
}
pub type XIM = *mut _XIM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIC {
    _unused: [u8; 0],
}
pub type XIC = *mut _XIC;
pub type XIMProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: XIM, arg2: XPointer, arg3: XPointer)>;
pub type XICProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: XIC, arg2: XPointer, arg3: XPointer) -> ::std::os::raw::c_int,
>;
pub type XIDProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut Display, arg2: XPointer, arg3: XPointer)>;
pub type XIMStyle = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMStyles {
    pub count_styles: ::std::os::raw::c_ushort,
    pub supported_styles: *mut XIMStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMStyles"][::std::mem::size_of::<XIMStyles>() - 16usize];
    ["Alignment of XIMStyles"][::std::mem::align_of::<XIMStyles>() - 8usize];
    ["Offset of field: XIMStyles::count_styles"]
        [::std::mem::offset_of!(XIMStyles, count_styles) - 0usize];
    ["Offset of field: XIMStyles::supported_styles"]
        [::std::mem::offset_of!(XIMStyles, supported_styles) - 8usize];
};
pub type XVaNestedList = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMCallback {
    pub client_data: XPointer,
    pub callback: XIMProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMCallback"][::std::mem::size_of::<XIMCallback>() - 16usize];
    ["Alignment of XIMCallback"][::std::mem::align_of::<XIMCallback>() - 8usize];
    ["Offset of field: XIMCallback::client_data"]
        [::std::mem::offset_of!(XIMCallback, client_data) - 0usize];
    ["Offset of field: XIMCallback::callback"]
        [::std::mem::offset_of!(XIMCallback, callback) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XICCallback {
    pub client_data: XPointer,
    pub callback: XICProc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XICCallback"][::std::mem::size_of::<XICCallback>() - 16usize];
    ["Alignment of XICCallback"][::std::mem::align_of::<XICCallback>() - 8usize];
    ["Offset of field: XICCallback::client_data"]
        [::std::mem::offset_of!(XICCallback, client_data) - 0usize];
    ["Offset of field: XICCallback::callback"]
        [::std::mem::offset_of!(XICCallback, callback) - 8usize];
};
pub type XIMFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMText__bindgen_ty_1 {
    pub multi_byte: *mut ::std::os::raw::c_char,
    pub wide_char: *mut wchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText__bindgen_ty_1"][::std::mem::size_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMText__bindgen_ty_1::multi_byte"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, multi_byte) - 0usize];
    ["Offset of field: _XIMText__bindgen_ty_1::wide_char"]
        [::std::mem::offset_of!(_XIMText__bindgen_ty_1, wide_char) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMText"][::std::mem::size_of::<_XIMText>() - 32usize];
    ["Alignment of _XIMText"][::std::mem::align_of::<_XIMText>() - 8usize];
    ["Offset of field: _XIMText::length"][::std::mem::offset_of!(_XIMText, length) - 0usize];
    ["Offset of field: _XIMText::feedback"][::std::mem::offset_of!(_XIMText, feedback) - 8usize];
    ["Offset of field: _XIMText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMText::string"][::std::mem::offset_of!(_XIMText, string) - 24usize];
};
pub type XIMText = _XIMText;
pub type XIMPreeditState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditStateNotifyCallbackStruct {
    pub state: XIMPreeditState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Alignment of _XIMPreeditStateNotifyCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditStateNotifyCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditStateNotifyCallbackStruct::state"]
        [::std::mem::offset_of!(_XIMPreeditStateNotifyCallbackStruct, state) - 0usize];
};
pub type XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = ::std::os::raw::c_ulong;
pub type XIMStringConversionFeedback = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStringConversionText {
    pub length: ::std::os::raw::c_ushort,
    pub feedback: *mut XIMStringConversionFeedback,
    pub encoding_is_wchar: ::std::os::raw::c_int,
    pub string: _XIMStringConversionText__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStringConversionText__bindgen_ty_1 {
    pub mbs: *mut ::std::os::raw::c_char,
    pub wcs: *mut wchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStringConversionText__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStringConversionText__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::mbs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, mbs) - 0usize];
    ["Offset of field: _XIMStringConversionText__bindgen_ty_1::wcs"]
        [::std::mem::offset_of!(_XIMStringConversionText__bindgen_ty_1, wcs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionText"]
        [::std::mem::size_of::<_XIMStringConversionText>() - 32usize];
    ["Alignment of _XIMStringConversionText"]
        [::std::mem::align_of::<_XIMStringConversionText>() - 8usize];
    ["Offset of field: _XIMStringConversionText::length"]
        [::std::mem::offset_of!(_XIMStringConversionText, length) - 0usize];
    ["Offset of field: _XIMStringConversionText::feedback"]
        [::std::mem::offset_of!(_XIMStringConversionText, feedback) - 8usize];
    ["Offset of field: _XIMStringConversionText::encoding_is_wchar"]
        [::std::mem::offset_of!(_XIMStringConversionText, encoding_is_wchar) - 16usize];
    ["Offset of field: _XIMStringConversionText::string"]
        [::std::mem::offset_of!(_XIMStringConversionText, string) - 24usize];
};
pub type XIMStringConversionText = _XIMStringConversionText;
pub type XIMStringConversionPosition = ::std::os::raw::c_ushort;
pub type XIMStringConversionType = ::std::os::raw::c_ushort;
pub type XIMStringConversionOperation = ::std::os::raw::c_ushort;
pub const XIMCaretDirection_XIMForwardChar: XIMCaretDirection = 0;
pub const XIMCaretDirection_XIMBackwardChar: XIMCaretDirection = 1;
pub const XIMCaretDirection_XIMForwardWord: XIMCaretDirection = 2;
pub const XIMCaretDirection_XIMBackwardWord: XIMCaretDirection = 3;
pub const XIMCaretDirection_XIMCaretUp: XIMCaretDirection = 4;
pub const XIMCaretDirection_XIMCaretDown: XIMCaretDirection = 5;
pub const XIMCaretDirection_XIMNextLine: XIMCaretDirection = 6;
pub const XIMCaretDirection_XIMPreviousLine: XIMCaretDirection = 7;
pub const XIMCaretDirection_XIMLineStart: XIMCaretDirection = 8;
pub const XIMCaretDirection_XIMLineEnd: XIMCaretDirection = 9;
pub const XIMCaretDirection_XIMAbsolutePosition: XIMCaretDirection = 10;
pub const XIMCaretDirection_XIMDontChange: XIMCaretDirection = 11;
pub type XIMCaretDirection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMStringConversionCallbackStruct {
    pub position: XIMStringConversionPosition,
    pub direction: XIMCaretDirection,
    pub operation: XIMStringConversionOperation,
    pub factor: ::std::os::raw::c_ushort,
    pub text: *mut XIMStringConversionText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStringConversionCallbackStruct"]
        [::std::mem::size_of::<_XIMStringConversionCallbackStruct>() - 24usize];
    ["Alignment of _XIMStringConversionCallbackStruct"]
        [::std::mem::align_of::<_XIMStringConversionCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::operation"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, operation) - 8usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::factor"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, factor) - 10usize];
    ["Offset of field: _XIMStringConversionCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMStringConversionCallbackStruct, text) - 16usize];
};
pub type XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditDrawCallbackStruct {
    pub caret: ::std::os::raw::c_int,
    pub chg_first: ::std::os::raw::c_int,
    pub chg_length: ::std::os::raw::c_int,
    pub text: *mut XIMText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditDrawCallbackStruct>() - 24usize];
    ["Alignment of _XIMPreeditDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::caret"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, caret) - 0usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_first"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_first) - 4usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::chg_length"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, chg_length) - 8usize];
    ["Offset of field: _XIMPreeditDrawCallbackStruct::text"]
        [::std::mem::offset_of!(_XIMPreeditDrawCallbackStruct, text) - 16usize];
};
pub type XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct;
pub const XIMCaretStyle_XIMIsInvisible: XIMCaretStyle = 0;
pub const XIMCaretStyle_XIMIsPrimary: XIMCaretStyle = 1;
pub const XIMCaretStyle_XIMIsSecondary: XIMCaretStyle = 2;
pub type XIMCaretStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMPreeditCaretCallbackStruct {
    pub position: ::std::os::raw::c_int,
    pub direction: XIMCaretDirection,
    pub style: XIMCaretStyle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::size_of::<_XIMPreeditCaretCallbackStruct>() - 12usize];
    ["Alignment of _XIMPreeditCaretCallbackStruct"]
        [::std::mem::align_of::<_XIMPreeditCaretCallbackStruct>() - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::position"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, position) - 0usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::direction"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, direction) - 4usize];
    ["Offset of field: _XIMPreeditCaretCallbackStruct::style"]
        [::std::mem::offset_of!(_XIMPreeditCaretCallbackStruct, style) - 8usize];
};
pub type XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct;
pub const XIMStatusDataType_XIMTextType: XIMStatusDataType = 0;
pub const XIMStatusDataType_XIMBitmapType: XIMStatusDataType = 1;
pub type XIMStatusDataType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XIMStatusDrawCallbackStruct {
    pub type_: XIMStatusDataType,
    pub data: _XIMStatusDrawCallbackStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XIMStatusDrawCallbackStruct__bindgen_ty_1 {
    pub text: *mut XIMText,
    pub bitmap: Pixmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Alignment of _XIMStatusDrawCallbackStruct__bindgen_ty_1"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct__bindgen_ty_1>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::text"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, text) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct__bindgen_ty_1::bitmap"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct__bindgen_ty_1, bitmap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMStatusDrawCallbackStruct"]
        [::std::mem::size_of::<_XIMStatusDrawCallbackStruct>() - 16usize];
    ["Alignment of _XIMStatusDrawCallbackStruct"]
        [::std::mem::align_of::<_XIMStatusDrawCallbackStruct>() - 8usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::type_"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, type_) - 0usize];
    ["Offset of field: _XIMStatusDrawCallbackStruct::data"]
        [::std::mem::offset_of!(_XIMStatusDrawCallbackStruct, data) - 8usize];
};
pub type XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTrigger {
    pub keysym: KeySym,
    pub modifier: ::std::os::raw::c_int,
    pub modifier_mask: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTrigger"][::std::mem::size_of::<_XIMHotKeyTrigger>() - 16usize];
    ["Alignment of _XIMHotKeyTrigger"][::std::mem::align_of::<_XIMHotKeyTrigger>() - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::keysym"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, keysym) - 0usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier) - 8usize];
    ["Offset of field: _XIMHotKeyTrigger::modifier_mask"]
        [::std::mem::offset_of!(_XIMHotKeyTrigger, modifier_mask) - 12usize];
};
pub type XIMHotKeyTrigger = _XIMHotKeyTrigger;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XIMHotKeyTriggers {
    pub num_hot_key: ::std::os::raw::c_int,
    pub key: *mut XIMHotKeyTrigger,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XIMHotKeyTriggers"][::std::mem::size_of::<_XIMHotKeyTriggers>() - 16usize];
    ["Alignment of _XIMHotKeyTriggers"][::std::mem::align_of::<_XIMHotKeyTriggers>() - 8usize];
    ["Offset of field: _XIMHotKeyTriggers::num_hot_key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, num_hot_key) - 0usize];
    ["Offset of field: _XIMHotKeyTriggers::key"]
        [::std::mem::offset_of!(_XIMHotKeyTriggers, key) - 8usize];
};
pub type XIMHotKeyTriggers = _XIMHotKeyTriggers;
pub type XIMHotKeyState = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIMValuesList {
    pub count_values: ::std::os::raw::c_ushort,
    pub supported_values: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIMValuesList"][::std::mem::size_of::<XIMValuesList>() - 16usize];
    ["Alignment of XIMValuesList"][::std::mem::align_of::<XIMValuesList>() - 8usize];
    ["Offset of field: XIMValuesList::count_values"]
        [::std::mem::offset_of!(XIMValuesList, count_values) - 0usize];
    ["Offset of field: XIMValuesList::supported_values"]
        [::std::mem::offset_of!(XIMValuesList, supported_values) - 8usize];
};
unsafe extern "C" {
    pub static mut _Xdebug: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLoadQueryFont(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XFontStruct;
}
unsafe extern "C" {
    pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
}
unsafe extern "C" {
    pub fn XGetMotionEvents(
        arg1: *mut Display,
        arg2: Window,
        arg3: Time,
        arg4: Time,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut XTimeCoord;
}
unsafe extern "C" {
    pub fn XDeleteModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XInsertModifiermapEntry(
        arg1: *mut XModifierKeymap,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XNewModifiermap(arg1: ::std::os::raw::c_int) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XCreateImage(
        arg1: *mut Display,
        arg2: *mut Visual,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XInitImage(arg1: *mut XImage) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XGetSubImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_int,
        arg9: *mut XImage,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> *mut XImage;
}
unsafe extern "C" {
    pub fn XOpenDisplay(arg1: *const ::std::os::raw::c_char) -> *mut Display;
}
unsafe extern "C" {
    pub fn XrmInitialize();
}
unsafe extern "C" {
    pub fn XFetchBytes(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XFetchBuffer(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetAtomNames(
        arg1: *mut Display,
        arg2: *mut Atom,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDefault(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayName(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XKeysymToString(arg1: KeySym) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSynchronize(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Display,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn XSetAfterFunction(
        arg1: *mut Display,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut Display,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn XInternAtom(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom;
}
unsafe extern "C" {
    pub fn XInternAtoms(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut Atom,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) -> Colormap;
}
unsafe extern "C" {
    pub fn XCreateColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Visual,
        arg4: ::std::os::raw::c_int,
    ) -> Colormap;
}
unsafe extern "C" {
    pub fn XCreatePixmapCursor(
        arg1: *mut Display,
        arg2: Pixmap,
        arg3: Pixmap,
        arg4: *mut XColor,
        arg5: *mut XColor,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> Cursor;
}
unsafe extern "C" {
    pub fn XCreateGlyphCursor(
        arg1: *mut Display,
        arg2: Font,
        arg3: Font,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *const XColor,
        arg7: *const XColor,
    ) -> Cursor;
}
unsafe extern "C" {
    pub fn XCreateFontCursor(arg1: *mut Display, arg2: ::std::os::raw::c_uint) -> Cursor;
}
unsafe extern "C" {
    pub fn XLoadFont(arg1: *mut Display, arg2: *const ::std::os::raw::c_char) -> Font;
}
unsafe extern "C" {
    pub fn XCreateGC(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> GC;
}
unsafe extern "C" {
    pub fn XGContextFromGC(arg1: GC) -> GContext;
}
unsafe extern "C" {
    pub fn XFlushGC(arg1: *mut Display, arg2: GC);
}
unsafe extern "C" {
    pub fn XCreatePixmap(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreateBitmapFromData(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreatePixmapFromBitmapData(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_ulong,
        arg8: ::std::os::raw::c_uint,
    ) -> Pixmap;
}
unsafe extern "C" {
    pub fn XCreateSimpleWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_ulong,
        arg9: ::std::os::raw::c_ulong,
    ) -> Window;
}
unsafe extern "C" {
    pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
}
unsafe extern "C" {
    pub fn XCreateWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: *mut Visual,
        arg11: ::std::os::raw::c_ulong,
        arg12: *mut XSetWindowAttributes,
    ) -> Window;
}
unsafe extern "C" {
    pub fn XListInstalledColormaps(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Colormap;
}
unsafe extern "C" {
    pub fn XListFonts(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListFontsWithInfo(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut XFontStruct,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetFontPath(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListExtensions(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XListProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Atom;
}
unsafe extern "C" {
    pub fn XListHosts(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XHostAddress;
}
unsafe extern "C" {
    pub fn XKeycodeToKeysym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> KeySym;
}
unsafe extern "C" {
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::std::os::raw::c_int) -> KeySym;
}
unsafe extern "C" {
    pub fn XGetKeyboardMapping(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
unsafe extern "C" {
    pub fn XStringToKeysym(arg1: *const ::std::os::raw::c_char) -> KeySym;
}
unsafe extern "C" {
    pub fn XMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XResourceManagerString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
}
unsafe extern "C" {
    pub fn XInitThreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeThreads() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLockDisplay(arg1: *mut Display);
}
unsafe extern "C" {
    pub fn XUnlockDisplay(arg1: *mut Display);
}
unsafe extern "C" {
    pub fn XInitExtension(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XExtCodes;
}
unsafe extern "C" {
    pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
}
unsafe extern "C" {
    pub fn XFindOnExtensionList(
        arg1: *mut *mut XExtData,
        arg2: ::std::os::raw::c_int,
    ) -> *mut XExtData;
}
unsafe extern "C" {
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
}
unsafe extern "C" {
    pub fn XRootWindow(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> Window;
}
unsafe extern "C" {
    pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
}
unsafe extern "C" {
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
}
unsafe extern "C" {
    pub fn XDefaultVisual(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> *mut Visual;
}
unsafe extern "C" {
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
}
unsafe extern "C" {
    pub fn XDefaultGC(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> GC;
}
unsafe extern "C" {
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
}
unsafe extern "C" {
    pub fn XBlackPixel(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XWhitePixel(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XAllPlanes() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XNextRequest(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn XServerVendor(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayString(arg1: *mut Display) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDefaultColormap(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> Colormap;
}
unsafe extern "C" {
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
}
unsafe extern "C" {
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
}
unsafe extern "C" {
    pub fn XScreenOfDisplay(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> *mut Screen;
}
unsafe extern "C" {
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
}
unsafe extern "C" {
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
pub type XErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: *mut XErrorEvent) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
}
pub type XIOErrorHandler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut Display) -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
}
pub type XIOErrorExitHandler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Display, arg2: *mut ::std::os::raw::c_void),
>;
unsafe extern "C" {
    pub fn XSetIOErrorExitHandler(
        arg1: *mut Display,
        arg2: XIOErrorExitHandler,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn XListPixmapFormats(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut XPixmapFormatValues;
}
unsafe extern "C" {
    pub fn XListDepths(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReconfigureWMWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWMProtocols(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut Atom,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWMProtocols(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XIconifyWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWithdrawWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetCommand(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWMColormapWindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut Window,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWMColormapWindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeStringList(arg1: *mut *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn XSetTransientForHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XActivateScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddHost(arg1: *mut Display, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddHosts(
        arg1: *mut Display,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddToExtensionList(
        arg1: *mut *mut _XExtData,
        arg2: *mut XExtData,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColorCells(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_ulong,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocColorPlanes(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_ulong,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllocNamedColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllowEvents(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAutoRepeatOff(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAutoRepeatOn(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBell(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapBitOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapPad(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBitmapUnit(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCellsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeActivePointerGrab(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: Cursor,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeGC(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeKeyboardControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut XKeyboardControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeKeyboardMapping(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut KeySym,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangePointerControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeProperty(
        arg1: *mut Display,
        arg2: Window,
        arg3: Atom,
        arg4: Atom,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_uchar,
        arg8: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeSaveSet(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeWindowAttributes(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XSetWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckMaskEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckTypedEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckTypedWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCheckWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindows(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindowsDown(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCirculateSubwindowsUp(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XClearArea(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCloseDisplay(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConfigureWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut XWindowChanges,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConnectionNumber(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XConvertSelection(
        arg1: *mut Display,
        arg2: Atom,
        arg3: Atom,
        arg4: Atom,
        arg5: Window,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyArea(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyGC(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: GC,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XCopyPlane(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: Drawable,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultDepth(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefaultScreen(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDefineCursor(arg1: *mut Display, arg2: Window, arg3: Cursor) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDeleteProperty(arg1: *mut Display, arg2: Window, arg3: Atom) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDestroySubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDoesBackingStore(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayCells(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayHeight(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayHeightMM(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayKeycodes(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayPlanes(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayWidth(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDisplayWidthMM(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawArc(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawArcs(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawImageString16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawLine(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawLines(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawPoint(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawPoints(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawRectangle(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawRectangles(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawSegments(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XSegment,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawString16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const XChar2b,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDrawText16(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XTextItem16,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XEnableAccessControl(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XEventsQueued(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFetchName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillArc(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillArcs(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XArc,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillPolygon(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XPoint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillRectangle(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFillRectangles(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XRectangle,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFlush(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XForceScreenSaver(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFree(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeExtensionList(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFont(arg1: *mut Display, arg2: *mut XFontStruct) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontInfo(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut XFontStruct,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontNames(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeFontPath(arg1: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGeometry(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_int,
        arg11: *mut ::std::os::raw::c_int,
        arg12: *mut ::std::os::raw::c_int,
        arg13: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetErrorDatabaseText(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetErrorText(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetFontProperty(
        arg1: *mut XFontStruct,
        arg2: Atom,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetGCValues(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetGeometry(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *mut Window,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: *mut ::std::os::raw::c_uint,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetIconName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetInputFocus(
        arg1: *mut Display,
        arg2: *mut Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetKeyboardControl(
        arg1: *mut Display,
        arg2: *mut XKeyboardState,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetPointerControl(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetPointerMapping(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetScreenSaver(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetTransientForHint(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWindowProperty(
        arg1: *mut Display,
        arg2: Window,
        arg3: Atom,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
        arg8: *mut Atom,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
        arg12: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetWindowAttributes(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XWindowAttributes,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabButton(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: Window,
        arg10: Cursor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabKey(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabKeyboard(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: Window,
        arg8: Cursor,
        arg9: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XHeightOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XImageByteOrder(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XInstallColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
}
unsafe extern "C" {
    pub fn XKillClient(arg1: *mut Display, arg2: XID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLookupColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
        arg5: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMaskEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMoveResizeWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XMoveWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XNoOp(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XParseColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XParseGeometry(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPeekIfEvent(
        arg1: *mut Display,
        arg2: *mut XEvent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Display,
                arg2: *mut XEvent,
                arg3: XPointer,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPending(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProtocolRevision(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProtocolVersion(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPutBackEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XPutImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XImage,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQLength(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestCursor(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestSize(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: Drawable,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestStipple(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryBestTile(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryExtension(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryKeymap(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
        arg9: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTextExtents(
        arg1: *mut Display,
        arg2: XID,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTextExtents16(
        arg1: *mut Display,
        arg2: XID,
        arg3: *const XChar2b,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryTree(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Window,
        arg4: *mut Window,
        arg5: *mut *mut Window,
        arg6: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReadBitmapFile(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut Pixmap,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReadBitmapFileData(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
        arg4: *mut *mut ::std::os::raw::c_uchar,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRebindKeysym(
        arg1: *mut Display,
        arg2: KeySym,
        arg3: *mut KeySym,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_uchar,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRecolorCursor(
        arg1: *mut Display,
        arg2: Cursor,
        arg3: *mut XColor,
        arg4: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveFromSaveSet(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveHost(arg1: *mut Display, arg2: *mut XHostAddress) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveHosts(
        arg1: *mut Display,
        arg2: *mut XHostAddress,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XReparentWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XResetScreenSaver(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XResizeWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRestackWindows(
        arg1: *mut Display,
        arg2: *mut Window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRotateBuffers(arg1: *mut Display, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRotateWindowProperties(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XScreenCount(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSelectInput(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSendEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_long,
        arg5: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetAccessControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetArcMode(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetBackground(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipMask(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipOrigin(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetClipRectangles(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetCloseDownMode(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetCommand(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDashes(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFillRule(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFillStyle(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFontPath(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetForeground(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetFunction(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetGraphicsExposures(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetIconName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetInputFocus(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetLineAttributes(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetModifierMapping(
        arg1: *mut Display,
        arg2: *mut XModifierKeymap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetPlaneMask(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetPointerMapping(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetScreenSaver(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetSelectionOwner(
        arg1: *mut Display,
        arg2: Atom,
        arg3: Window,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetState(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetStipple(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetSubwindowMode(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetTSOrigin(
        arg1: *mut Display,
        arg2: GC,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetTile(arg1: *mut Display, arg2: GC, arg3: Pixmap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBackground(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBackgroundPixmap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorder(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorderPixmap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Pixmap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowBorderWidth(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetWindowColormap(
        arg1: *mut Display,
        arg2: Window,
        arg3: Colormap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreBuffer(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreBytes(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreColors(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *mut XColor,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreName(
        arg1: *mut Display,
        arg2: Window,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XStoreNamedColor(
        arg1: *mut Display,
        arg2: Colormap,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_ulong,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSync(arg1: *mut Display, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextExtents(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextExtents16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut XCharStruct,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextWidth(
        arg1: *mut XFontStruct,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTextWidth16(
        arg1: *mut XFontStruct,
        arg2: *const XChar2b,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTranslateCoordinates(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabButton(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabKey(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
        arg4: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabServer(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUninstallColormap(arg1: *mut Display, arg2: Colormap) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XVendorRelease(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWarpPointer(
        arg1: *mut Display,
        arg2: Window,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWidthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWindowEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
        arg4: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XWriteBitmapFile(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: Pixmap,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSupportsLocale() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetLocaleModifiers(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XOpenOM(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> XOM;
}
unsafe extern "C" {
    pub fn XCloseOM(arg1: XOM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
}
unsafe extern "C" {
    pub fn XLocaleOfOM(arg1: XOM) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
}
unsafe extern "C" {
    pub fn XDestroyOC(arg1: XOC);
}
unsafe extern "C" {
    pub fn XOMOfOC(arg1: XOC) -> XOM;
}
unsafe extern "C" {
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateFontSet(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> XFontSet;
}
unsafe extern "C" {
    pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
}
unsafe extern "C" {
    pub fn XFontsOfFontSet(
        arg1: XFontSet,
        arg2: *mut *mut *mut XFontStruct,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XContextDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XContextualDrawing(arg1: XFontSet) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
}
unsafe extern "C" {
    pub fn XmbTextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextEscapement(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextEscapement(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbTextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextExtents(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcTextPerCharExtents(
        arg1: XFontSet,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8TextPerCharExtents(
        arg1: XFontSet,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XRectangle,
        arg5: *mut XRectangle,
        arg6: ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
        arg8: *mut XRectangle,
        arg9: *mut XRectangle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XwcTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawText(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XmbTextItem,
        arg7: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XmbDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const wchar_t,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XmbDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XwcDrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const wchar_t,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Xutf8DrawImageString(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: XFontSet,
        arg4: GC,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XOpenIM(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> XIM;
}
unsafe extern "C" {
    pub fn XCloseIM(arg1: XIM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
}
unsafe extern "C" {
    pub fn XLocaleOfIM(arg1: XIM) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
}
unsafe extern "C" {
    pub fn XDestroyIC(arg1: XIC);
}
unsafe extern "C" {
    pub fn XSetICFocus(arg1: XIC);
}
unsafe extern "C" {
    pub fn XUnsetICFocus(arg1: XIC);
}
unsafe extern "C" {
    pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn XmbResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XSetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XGetICValues(arg1: XIC, ...) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn XIMOfIC(arg1: XIC) -> XIM;
}
unsafe extern "C" {
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XmbLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XwcLookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut wchar_t,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Xutf8LookupString(
        arg1: XIC,
        arg2: *mut XKeyPressedEvent,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XVaCreateNestedList(arg1: ::std::os::raw::c_int, ...) -> XVaNestedList;
}
unsafe extern "C" {
    pub fn XRegisterIMInstantiateCallback(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUnregisterIMInstantiateCallback(
        arg1: *mut Display,
        arg2: *mut _XrmHashBucketRec,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: XIDProc,
        arg6: XPointer,
    ) -> ::std::os::raw::c_int;
}
pub type XConnectionWatchProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Display,
        arg2: XPointer,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut XPointer,
    ),
>;
unsafe extern "C" {
    pub fn XInternalConnectionNumbers(
        arg1: *mut Display,
        arg2: *mut *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XProcessInternalConnection(arg1: *mut Display, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn XAddConnectionWatch(
        arg1: *mut Display,
        arg2: XConnectionWatchProc,
        arg3: XPointer,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XRemoveConnectionWatch(arg1: *mut Display, arg2: XConnectionWatchProc, arg3: XPointer);
}
unsafe extern "C" {
    pub fn XSetAuthorization(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn _Xmbtowc(
        arg1: *mut wchar_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _Xwctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetEventData(
        arg1: *mut Display,
        arg2: *mut XGenericEventCookie,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
}
unsafe extern "C" {
    pub fn XGetXCBConnection(dpy: *mut Display) -> *mut xcb_connection_t;
}
pub const XEventQueueOwner_XlibOwnsEventQueue: XEventQueueOwner = 0;
pub const XEventQueueOwner_XCBOwnsEventQueue: XEventQueueOwner = 1;
pub type XEventQueueOwner = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn XSetEventQueueOwner(dpy: *mut Display, owner: XEventQueueOwner);
}
pub type XEventClass = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XExtensionVersion {
    pub present: ::std::os::raw::c_int,
    pub major_version: ::std::os::raw::c_short,
    pub minor_version: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XExtensionVersion"][::std::mem::size_of::<XExtensionVersion>() - 8usize];
    ["Alignment of XExtensionVersion"][::std::mem::align_of::<XExtensionVersion>() - 4usize];
    ["Offset of field: XExtensionVersion::present"]
        [::std::mem::offset_of!(XExtensionVersion, present) - 0usize];
    ["Offset of field: XExtensionVersion::major_version"]
        [::std::mem::offset_of!(XExtensionVersion, major_version) - 4usize];
    ["Offset of field: XExtensionVersion::minor_version"]
        [::std::mem::offset_of!(XExtensionVersion, minor_version) - 6usize];
};
unsafe extern "C" {
    pub fn _XiGetDevicePresenceNotifyEvent(arg1: *mut Display) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _xibaddevice(dpy: *mut Display, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadclass(dpy: *mut Display, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadevent(dpy: *mut Display, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xibadmode(dpy: *mut Display, error: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _xidevicebusy(dpy: *mut Display, error: *mut ::std::os::raw::c_int);
}
pub type XAnyClassPtr = *mut _XAnyClassinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceKeyEvent"][::std::mem::size_of::<XDeviceKeyEvent>() - 136usize];
    ["Alignment of XDeviceKeyEvent"][::std::mem::align_of::<XDeviceKeyEvent>() - 8usize];
    ["Offset of field: XDeviceKeyEvent::type_"]
        [::std::mem::offset_of!(XDeviceKeyEvent, type_) - 0usize];
    ["Offset of field: XDeviceKeyEvent::serial"]
        [::std::mem::offset_of!(XDeviceKeyEvent, serial) - 8usize];
    ["Offset of field: XDeviceKeyEvent::send_event"]
        [::std::mem::offset_of!(XDeviceKeyEvent, send_event) - 16usize];
    ["Offset of field: XDeviceKeyEvent::display"]
        [::std::mem::offset_of!(XDeviceKeyEvent, display) - 24usize];
    ["Offset of field: XDeviceKeyEvent::window"]
        [::std::mem::offset_of!(XDeviceKeyEvent, window) - 32usize];
    ["Offset of field: XDeviceKeyEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceKeyEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceKeyEvent::root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, root) - 48usize];
    ["Offset of field: XDeviceKeyEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceKeyEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceKeyEvent::time"]
        [::std::mem::offset_of!(XDeviceKeyEvent, time) - 64usize];
    ["Offset of field: XDeviceKeyEvent::x"][::std::mem::offset_of!(XDeviceKeyEvent, x) - 72usize];
    ["Offset of field: XDeviceKeyEvent::y"][::std::mem::offset_of!(XDeviceKeyEvent, y) - 76usize];
    ["Offset of field: XDeviceKeyEvent::x_root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, x_root) - 80usize];
    ["Offset of field: XDeviceKeyEvent::y_root"]
        [::std::mem::offset_of!(XDeviceKeyEvent, y_root) - 84usize];
    ["Offset of field: XDeviceKeyEvent::state"]
        [::std::mem::offset_of!(XDeviceKeyEvent, state) - 88usize];
    ["Offset of field: XDeviceKeyEvent::keycode"]
        [::std::mem::offset_of!(XDeviceKeyEvent, keycode) - 92usize];
    ["Offset of field: XDeviceKeyEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceKeyEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceKeyEvent::device_state"]
        [::std::mem::offset_of!(XDeviceKeyEvent, device_state) - 100usize];
    ["Offset of field: XDeviceKeyEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceKeyEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceKeyEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceKeyEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceKeyEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceKeyEvent, axis_data) - 108usize];
};
pub type XDeviceKeyPressedEvent = XDeviceKeyEvent;
pub type XDeviceKeyReleasedEvent = XDeviceKeyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceButtonEvent"][::std::mem::size_of::<XDeviceButtonEvent>() - 136usize];
    ["Alignment of XDeviceButtonEvent"][::std::mem::align_of::<XDeviceButtonEvent>() - 8usize];
    ["Offset of field: XDeviceButtonEvent::type_"]
        [::std::mem::offset_of!(XDeviceButtonEvent, type_) - 0usize];
    ["Offset of field: XDeviceButtonEvent::serial"]
        [::std::mem::offset_of!(XDeviceButtonEvent, serial) - 8usize];
    ["Offset of field: XDeviceButtonEvent::send_event"]
        [::std::mem::offset_of!(XDeviceButtonEvent, send_event) - 16usize];
    ["Offset of field: XDeviceButtonEvent::display"]
        [::std::mem::offset_of!(XDeviceButtonEvent, display) - 24usize];
    ["Offset of field: XDeviceButtonEvent::window"]
        [::std::mem::offset_of!(XDeviceButtonEvent, window) - 32usize];
    ["Offset of field: XDeviceButtonEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceButtonEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceButtonEvent::root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, root) - 48usize];
    ["Offset of field: XDeviceButtonEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceButtonEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceButtonEvent::time"]
        [::std::mem::offset_of!(XDeviceButtonEvent, time) - 64usize];
    ["Offset of field: XDeviceButtonEvent::x"]
        [::std::mem::offset_of!(XDeviceButtonEvent, x) - 72usize];
    ["Offset of field: XDeviceButtonEvent::y"]
        [::std::mem::offset_of!(XDeviceButtonEvent, y) - 76usize];
    ["Offset of field: XDeviceButtonEvent::x_root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, x_root) - 80usize];
    ["Offset of field: XDeviceButtonEvent::y_root"]
        [::std::mem::offset_of!(XDeviceButtonEvent, y_root) - 84usize];
    ["Offset of field: XDeviceButtonEvent::state"]
        [::std::mem::offset_of!(XDeviceButtonEvent, state) - 88usize];
    ["Offset of field: XDeviceButtonEvent::button"]
        [::std::mem::offset_of!(XDeviceButtonEvent, button) - 92usize];
    ["Offset of field: XDeviceButtonEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceButtonEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceButtonEvent::device_state"]
        [::std::mem::offset_of!(XDeviceButtonEvent, device_state) - 100usize];
    ["Offset of field: XDeviceButtonEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceButtonEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceButtonEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceButtonEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceButtonEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceButtonEvent, axis_data) - 108usize];
};
pub type XDeviceButtonPressedEvent = XDeviceButtonEvent;
pub type XDeviceButtonReleasedEvent = XDeviceButtonEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceMotionEvent"][::std::mem::size_of::<XDeviceMotionEvent>() - 136usize];
    ["Alignment of XDeviceMotionEvent"][::std::mem::align_of::<XDeviceMotionEvent>() - 8usize];
    ["Offset of field: XDeviceMotionEvent::type_"]
        [::std::mem::offset_of!(XDeviceMotionEvent, type_) - 0usize];
    ["Offset of field: XDeviceMotionEvent::serial"]
        [::std::mem::offset_of!(XDeviceMotionEvent, serial) - 8usize];
    ["Offset of field: XDeviceMotionEvent::send_event"]
        [::std::mem::offset_of!(XDeviceMotionEvent, send_event) - 16usize];
    ["Offset of field: XDeviceMotionEvent::display"]
        [::std::mem::offset_of!(XDeviceMotionEvent, display) - 24usize];
    ["Offset of field: XDeviceMotionEvent::window"]
        [::std::mem::offset_of!(XDeviceMotionEvent, window) - 32usize];
    ["Offset of field: XDeviceMotionEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceMotionEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceMotionEvent::root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, root) - 48usize];
    ["Offset of field: XDeviceMotionEvent::subwindow"]
        [::std::mem::offset_of!(XDeviceMotionEvent, subwindow) - 56usize];
    ["Offset of field: XDeviceMotionEvent::time"]
        [::std::mem::offset_of!(XDeviceMotionEvent, time) - 64usize];
    ["Offset of field: XDeviceMotionEvent::x"]
        [::std::mem::offset_of!(XDeviceMotionEvent, x) - 72usize];
    ["Offset of field: XDeviceMotionEvent::y"]
        [::std::mem::offset_of!(XDeviceMotionEvent, y) - 76usize];
    ["Offset of field: XDeviceMotionEvent::x_root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, x_root) - 80usize];
    ["Offset of field: XDeviceMotionEvent::y_root"]
        [::std::mem::offset_of!(XDeviceMotionEvent, y_root) - 84usize];
    ["Offset of field: XDeviceMotionEvent::state"]
        [::std::mem::offset_of!(XDeviceMotionEvent, state) - 88usize];
    ["Offset of field: XDeviceMotionEvent::is_hint"]
        [::std::mem::offset_of!(XDeviceMotionEvent, is_hint) - 92usize];
    ["Offset of field: XDeviceMotionEvent::same_screen"]
        [::std::mem::offset_of!(XDeviceMotionEvent, same_screen) - 96usize];
    ["Offset of field: XDeviceMotionEvent::device_state"]
        [::std::mem::offset_of!(XDeviceMotionEvent, device_state) - 100usize];
    ["Offset of field: XDeviceMotionEvent::axes_count"]
        [::std::mem::offset_of!(XDeviceMotionEvent, axes_count) - 104usize];
    ["Offset of field: XDeviceMotionEvent::first_axis"]
        [::std::mem::offset_of!(XDeviceMotionEvent, first_axis) - 105usize];
    ["Offset of field: XDeviceMotionEvent::axis_data"]
        [::std::mem::offset_of!(XDeviceMotionEvent, axis_data) - 108usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub time: Time,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceFocusChangeEvent"][::std::mem::size_of::<XDeviceFocusChangeEvent>() - 64usize];
    ["Alignment of XDeviceFocusChangeEvent"]
        [::std::mem::align_of::<XDeviceFocusChangeEvent>() - 8usize];
    ["Offset of field: XDeviceFocusChangeEvent::type_"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, type_) - 0usize];
    ["Offset of field: XDeviceFocusChangeEvent::serial"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, serial) - 8usize];
    ["Offset of field: XDeviceFocusChangeEvent::send_event"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, send_event) - 16usize];
    ["Offset of field: XDeviceFocusChangeEvent::display"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, display) - 24usize];
    ["Offset of field: XDeviceFocusChangeEvent::window"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, window) - 32usize];
    ["Offset of field: XDeviceFocusChangeEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceFocusChangeEvent::mode"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, mode) - 48usize];
    ["Offset of field: XDeviceFocusChangeEvent::detail"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, detail) - 52usize];
    ["Offset of field: XDeviceFocusChangeEvent::time"]
        [::std::mem::offset_of!(XDeviceFocusChangeEvent, time) - 56usize];
};
pub type XDeviceFocusInEvent = XDeviceFocusChangeEvent;
pub type XDeviceFocusOutEvent = XDeviceFocusChangeEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XProximityNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
    pub device_state: ::std::os::raw::c_uint,
    pub axes_count: ::std::os::raw::c_uchar,
    pub first_axis: ::std::os::raw::c_uchar,
    pub axis_data: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XProximityNotifyEvent"][::std::mem::size_of::<XProximityNotifyEvent>() - 128usize];
    ["Alignment of XProximityNotifyEvent"]
        [::std::mem::align_of::<XProximityNotifyEvent>() - 8usize];
    ["Offset of field: XProximityNotifyEvent::type_"]
        [::std::mem::offset_of!(XProximityNotifyEvent, type_) - 0usize];
    ["Offset of field: XProximityNotifyEvent::serial"]
        [::std::mem::offset_of!(XProximityNotifyEvent, serial) - 8usize];
    ["Offset of field: XProximityNotifyEvent::send_event"]
        [::std::mem::offset_of!(XProximityNotifyEvent, send_event) - 16usize];
    ["Offset of field: XProximityNotifyEvent::display"]
        [::std::mem::offset_of!(XProximityNotifyEvent, display) - 24usize];
    ["Offset of field: XProximityNotifyEvent::window"]
        [::std::mem::offset_of!(XProximityNotifyEvent, window) - 32usize];
    ["Offset of field: XProximityNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XProximityNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XProximityNotifyEvent::root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, root) - 48usize];
    ["Offset of field: XProximityNotifyEvent::subwindow"]
        [::std::mem::offset_of!(XProximityNotifyEvent, subwindow) - 56usize];
    ["Offset of field: XProximityNotifyEvent::time"]
        [::std::mem::offset_of!(XProximityNotifyEvent, time) - 64usize];
    ["Offset of field: XProximityNotifyEvent::x"]
        [::std::mem::offset_of!(XProximityNotifyEvent, x) - 72usize];
    ["Offset of field: XProximityNotifyEvent::y"]
        [::std::mem::offset_of!(XProximityNotifyEvent, y) - 76usize];
    ["Offset of field: XProximityNotifyEvent::x_root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, x_root) - 80usize];
    ["Offset of field: XProximityNotifyEvent::y_root"]
        [::std::mem::offset_of!(XProximityNotifyEvent, y_root) - 84usize];
    ["Offset of field: XProximityNotifyEvent::state"]
        [::std::mem::offset_of!(XProximityNotifyEvent, state) - 88usize];
    ["Offset of field: XProximityNotifyEvent::same_screen"]
        [::std::mem::offset_of!(XProximityNotifyEvent, same_screen) - 92usize];
    ["Offset of field: XProximityNotifyEvent::device_state"]
        [::std::mem::offset_of!(XProximityNotifyEvent, device_state) - 96usize];
    ["Offset of field: XProximityNotifyEvent::axes_count"]
        [::std::mem::offset_of!(XProximityNotifyEvent, axes_count) - 100usize];
    ["Offset of field: XProximityNotifyEvent::first_axis"]
        [::std::mem::offset_of!(XProximityNotifyEvent, first_axis) - 101usize];
    ["Offset of field: XProximityNotifyEvent::axis_data"]
        [::std::mem::offset_of!(XProximityNotifyEvent, axis_data) - 104usize];
};
pub type XProximityInEvent = XProximityNotifyEvent;
pub type XProximityOutEvent = XProximityNotifyEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XInputClass {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XInputClass"][::std::mem::size_of::<XInputClass>() - 2usize];
    ["Alignment of XInputClass"][::std::mem::align_of::<XInputClass>() - 1usize];
    ["Offset of field: XInputClass::class"][::std::mem::offset_of!(XInputClass, class) - 0usize];
    ["Offset of field: XInputClass::length"][::std::mem::offset_of!(XInputClass, length) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceStateNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub num_classes: ::std::os::raw::c_int,
    pub data: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceStateNotifyEvent"]
        [::std::mem::size_of::<XDeviceStateNotifyEvent>() - 128usize];
    ["Alignment of XDeviceStateNotifyEvent"]
        [::std::mem::align_of::<XDeviceStateNotifyEvent>() - 8usize];
    ["Offset of field: XDeviceStateNotifyEvent::type_"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, type_) - 0usize];
    ["Offset of field: XDeviceStateNotifyEvent::serial"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, serial) - 8usize];
    ["Offset of field: XDeviceStateNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDeviceStateNotifyEvent::display"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, display) - 24usize];
    ["Offset of field: XDeviceStateNotifyEvent::window"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, window) - 32usize];
    ["Offset of field: XDeviceStateNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceStateNotifyEvent::time"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, time) - 48usize];
    ["Offset of field: XDeviceStateNotifyEvent::num_classes"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, num_classes) - 56usize];
    ["Offset of field: XDeviceStateNotifyEvent::data"]
        [::std::mem::offset_of!(XDeviceStateNotifyEvent, data) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XValuatorStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_valuators: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub valuators: [::std::os::raw::c_int; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XValuatorStatus"][::std::mem::size_of::<XValuatorStatus>() - 28usize];
    ["Alignment of XValuatorStatus"][::std::mem::align_of::<XValuatorStatus>() - 4usize];
    ["Offset of field: XValuatorStatus::class"]
        [::std::mem::offset_of!(XValuatorStatus, class) - 0usize];
    ["Offset of field: XValuatorStatus::length"]
        [::std::mem::offset_of!(XValuatorStatus, length) - 1usize];
    ["Offset of field: XValuatorStatus::num_valuators"]
        [::std::mem::offset_of!(XValuatorStatus, num_valuators) - 2usize];
    ["Offset of field: XValuatorStatus::mode"]
        [::std::mem::offset_of!(XValuatorStatus, mode) - 3usize];
    ["Offset of field: XValuatorStatus::valuators"]
        [::std::mem::offset_of!(XValuatorStatus, valuators) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_short,
    pub keys: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyStatus"][::std::mem::size_of::<XKeyStatus>() - 36usize];
    ["Alignment of XKeyStatus"][::std::mem::align_of::<XKeyStatus>() - 2usize];
    ["Offset of field: XKeyStatus::class"][::std::mem::offset_of!(XKeyStatus, class) - 0usize];
    ["Offset of field: XKeyStatus::length"][::std::mem::offset_of!(XKeyStatus, length) - 1usize];
    ["Offset of field: XKeyStatus::num_keys"]
        [::std::mem::offset_of!(XKeyStatus, num_keys) - 2usize];
    ["Offset of field: XKeyStatus::keys"][::std::mem::offset_of!(XKeyStatus, keys) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonStatus {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_buttons: ::std::os::raw::c_short,
    pub buttons: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonStatus"][::std::mem::size_of::<XButtonStatus>() - 36usize];
    ["Alignment of XButtonStatus"][::std::mem::align_of::<XButtonStatus>() - 2usize];
    ["Offset of field: XButtonStatus::class"]
        [::std::mem::offset_of!(XButtonStatus, class) - 0usize];
    ["Offset of field: XButtonStatus::length"]
        [::std::mem::offset_of!(XButtonStatus, length) - 1usize];
    ["Offset of field: XButtonStatus::num_buttons"]
        [::std::mem::offset_of!(XButtonStatus, num_buttons) - 2usize];
    ["Offset of field: XButtonStatus::buttons"]
        [::std::mem::offset_of!(XButtonStatus, buttons) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceMappingEvent"][::std::mem::size_of::<XDeviceMappingEvent>() - 72usize];
    ["Alignment of XDeviceMappingEvent"][::std::mem::align_of::<XDeviceMappingEvent>() - 8usize];
    ["Offset of field: XDeviceMappingEvent::type_"]
        [::std::mem::offset_of!(XDeviceMappingEvent, type_) - 0usize];
    ["Offset of field: XDeviceMappingEvent::serial"]
        [::std::mem::offset_of!(XDeviceMappingEvent, serial) - 8usize];
    ["Offset of field: XDeviceMappingEvent::send_event"]
        [::std::mem::offset_of!(XDeviceMappingEvent, send_event) - 16usize];
    ["Offset of field: XDeviceMappingEvent::display"]
        [::std::mem::offset_of!(XDeviceMappingEvent, display) - 24usize];
    ["Offset of field: XDeviceMappingEvent::window"]
        [::std::mem::offset_of!(XDeviceMappingEvent, window) - 32usize];
    ["Offset of field: XDeviceMappingEvent::deviceid"]
        [::std::mem::offset_of!(XDeviceMappingEvent, deviceid) - 40usize];
    ["Offset of field: XDeviceMappingEvent::time"]
        [::std::mem::offset_of!(XDeviceMappingEvent, time) - 48usize];
    ["Offset of field: XDeviceMappingEvent::request"]
        [::std::mem::offset_of!(XDeviceMappingEvent, request) - 56usize];
    ["Offset of field: XDeviceMappingEvent::first_keycode"]
        [::std::mem::offset_of!(XDeviceMappingEvent, first_keycode) - 60usize];
    ["Offset of field: XDeviceMappingEvent::count"]
        [::std::mem::offset_of!(XDeviceMappingEvent, count) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XChangeDeviceNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub deviceid: XID,
    pub time: Time,
    pub request: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XChangeDeviceNotifyEvent"]
        [::std::mem::size_of::<XChangeDeviceNotifyEvent>() - 64usize];
    ["Alignment of XChangeDeviceNotifyEvent"]
        [::std::mem::align_of::<XChangeDeviceNotifyEvent>() - 8usize];
    ["Offset of field: XChangeDeviceNotifyEvent::type_"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, type_) - 0usize];
    ["Offset of field: XChangeDeviceNotifyEvent::serial"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, serial) - 8usize];
    ["Offset of field: XChangeDeviceNotifyEvent::send_event"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, send_event) - 16usize];
    ["Offset of field: XChangeDeviceNotifyEvent::display"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, display) - 24usize];
    ["Offset of field: XChangeDeviceNotifyEvent::window"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, window) - 32usize];
    ["Offset of field: XChangeDeviceNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, deviceid) - 40usize];
    ["Offset of field: XChangeDeviceNotifyEvent::time"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, time) - 48usize];
    ["Offset of field: XChangeDeviceNotifyEvent::request"]
        [::std::mem::offset_of!(XChangeDeviceNotifyEvent, request) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevicePresenceNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub time: Time,
    pub devchange: ::std::os::raw::c_int,
    pub deviceid: XID,
    pub control: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevicePresenceNotifyEvent"]
        [::std::mem::size_of::<XDevicePresenceNotifyEvent>() - 72usize];
    ["Alignment of XDevicePresenceNotifyEvent"]
        [::std::mem::align_of::<XDevicePresenceNotifyEvent>() - 8usize];
    ["Offset of field: XDevicePresenceNotifyEvent::type_"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, type_) - 0usize];
    ["Offset of field: XDevicePresenceNotifyEvent::serial"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, serial) - 8usize];
    ["Offset of field: XDevicePresenceNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDevicePresenceNotifyEvent::display"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, display) - 24usize];
    ["Offset of field: XDevicePresenceNotifyEvent::window"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, window) - 32usize];
    ["Offset of field: XDevicePresenceNotifyEvent::time"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, time) - 40usize];
    ["Offset of field: XDevicePresenceNotifyEvent::devchange"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, devchange) - 48usize];
    ["Offset of field: XDevicePresenceNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, deviceid) - 56usize];
    ["Offset of field: XDevicePresenceNotifyEvent::control"]
        [::std::mem::offset_of!(XDevicePresenceNotifyEvent, control) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevicePropertyNotifyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub time: Time,
    pub deviceid: XID,
    pub atom: Atom,
    pub state: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevicePropertyNotifyEvent"]
        [::std::mem::size_of::<XDevicePropertyNotifyEvent>() - 72usize];
    ["Alignment of XDevicePropertyNotifyEvent"]
        [::std::mem::align_of::<XDevicePropertyNotifyEvent>() - 8usize];
    ["Offset of field: XDevicePropertyNotifyEvent::type_"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, type_) - 0usize];
    ["Offset of field: XDevicePropertyNotifyEvent::serial"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, serial) - 8usize];
    ["Offset of field: XDevicePropertyNotifyEvent::send_event"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, send_event) - 16usize];
    ["Offset of field: XDevicePropertyNotifyEvent::display"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, display) - 24usize];
    ["Offset of field: XDevicePropertyNotifyEvent::window"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, window) - 32usize];
    ["Offset of field: XDevicePropertyNotifyEvent::time"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, time) - 40usize];
    ["Offset of field: XDevicePropertyNotifyEvent::deviceid"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, deviceid) - 48usize];
    ["Offset of field: XDevicePropertyNotifyEvent::atom"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, atom) - 56usize];
    ["Offset of field: XDevicePropertyNotifyEvent::state"]
        [::std::mem::offset_of!(XDevicePropertyNotifyEvent, state) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFeedbackState"][::std::mem::size_of::<XFeedbackState>() - 24usize];
    ["Alignment of XFeedbackState"][::std::mem::align_of::<XFeedbackState>() - 8usize];
    ["Offset of field: XFeedbackState::class"]
        [::std::mem::offset_of!(XFeedbackState, class) - 0usize];
    ["Offset of field: XFeedbackState::length"]
        [::std::mem::offset_of!(XFeedbackState, length) - 8usize];
    ["Offset of field: XFeedbackState::id"][::std::mem::offset_of!(XFeedbackState, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKbdFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub click: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
    pub global_auto_repeat: ::std::os::raw::c_int,
    pub auto_repeats: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKbdFeedbackState"][::std::mem::size_of::<XKbdFeedbackState>() - 80usize];
    ["Alignment of XKbdFeedbackState"][::std::mem::align_of::<XKbdFeedbackState>() - 8usize];
    ["Offset of field: XKbdFeedbackState::class"]
        [::std::mem::offset_of!(XKbdFeedbackState, class) - 0usize];
    ["Offset of field: XKbdFeedbackState::length"]
        [::std::mem::offset_of!(XKbdFeedbackState, length) - 8usize];
    ["Offset of field: XKbdFeedbackState::id"]
        [::std::mem::offset_of!(XKbdFeedbackState, id) - 16usize];
    ["Offset of field: XKbdFeedbackState::click"]
        [::std::mem::offset_of!(XKbdFeedbackState, click) - 24usize];
    ["Offset of field: XKbdFeedbackState::percent"]
        [::std::mem::offset_of!(XKbdFeedbackState, percent) - 28usize];
    ["Offset of field: XKbdFeedbackState::pitch"]
        [::std::mem::offset_of!(XKbdFeedbackState, pitch) - 32usize];
    ["Offset of field: XKbdFeedbackState::duration"]
        [::std::mem::offset_of!(XKbdFeedbackState, duration) - 36usize];
    ["Offset of field: XKbdFeedbackState::led_mask"]
        [::std::mem::offset_of!(XKbdFeedbackState, led_mask) - 40usize];
    ["Offset of field: XKbdFeedbackState::global_auto_repeat"]
        [::std::mem::offset_of!(XKbdFeedbackState, global_auto_repeat) - 44usize];
    ["Offset of field: XKbdFeedbackState::auto_repeats"]
        [::std::mem::offset_of!(XKbdFeedbackState, auto_repeats) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPtrFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub accelNum: ::std::os::raw::c_int,
    pub accelDenom: ::std::os::raw::c_int,
    pub threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPtrFeedbackState"][::std::mem::size_of::<XPtrFeedbackState>() - 40usize];
    ["Alignment of XPtrFeedbackState"][::std::mem::align_of::<XPtrFeedbackState>() - 8usize];
    ["Offset of field: XPtrFeedbackState::class"]
        [::std::mem::offset_of!(XPtrFeedbackState, class) - 0usize];
    ["Offset of field: XPtrFeedbackState::length"]
        [::std::mem::offset_of!(XPtrFeedbackState, length) - 8usize];
    ["Offset of field: XPtrFeedbackState::id"]
        [::std::mem::offset_of!(XPtrFeedbackState, id) - 16usize];
    ["Offset of field: XPtrFeedbackState::accelNum"]
        [::std::mem::offset_of!(XPtrFeedbackState, accelNum) - 24usize];
    ["Offset of field: XPtrFeedbackState::accelDenom"]
        [::std::mem::offset_of!(XPtrFeedbackState, accelDenom) - 28usize];
    ["Offset of field: XPtrFeedbackState::threshold"]
        [::std::mem::offset_of!(XPtrFeedbackState, threshold) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIntegerFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub resolution: ::std::os::raw::c_int,
    pub minVal: ::std::os::raw::c_int,
    pub maxVal: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIntegerFeedbackState"][::std::mem::size_of::<XIntegerFeedbackState>() - 40usize];
    ["Alignment of XIntegerFeedbackState"]
        [::std::mem::align_of::<XIntegerFeedbackState>() - 8usize];
    ["Offset of field: XIntegerFeedbackState::class"]
        [::std::mem::offset_of!(XIntegerFeedbackState, class) - 0usize];
    ["Offset of field: XIntegerFeedbackState::length"]
        [::std::mem::offset_of!(XIntegerFeedbackState, length) - 8usize];
    ["Offset of field: XIntegerFeedbackState::id"]
        [::std::mem::offset_of!(XIntegerFeedbackState, id) - 16usize];
    ["Offset of field: XIntegerFeedbackState::resolution"]
        [::std::mem::offset_of!(XIntegerFeedbackState, resolution) - 24usize];
    ["Offset of field: XIntegerFeedbackState::minVal"]
        [::std::mem::offset_of!(XIntegerFeedbackState, minVal) - 28usize];
    ["Offset of field: XIntegerFeedbackState::maxVal"]
        [::std::mem::offset_of!(XIntegerFeedbackState, maxVal) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XStringFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub max_symbols: ::std::os::raw::c_int,
    pub num_syms_supported: ::std::os::raw::c_int,
    pub syms_supported: *mut KeySym,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XStringFeedbackState"][::std::mem::size_of::<XStringFeedbackState>() - 40usize];
    ["Alignment of XStringFeedbackState"][::std::mem::align_of::<XStringFeedbackState>() - 8usize];
    ["Offset of field: XStringFeedbackState::class"]
        [::std::mem::offset_of!(XStringFeedbackState, class) - 0usize];
    ["Offset of field: XStringFeedbackState::length"]
        [::std::mem::offset_of!(XStringFeedbackState, length) - 8usize];
    ["Offset of field: XStringFeedbackState::id"]
        [::std::mem::offset_of!(XStringFeedbackState, id) - 16usize];
    ["Offset of field: XStringFeedbackState::max_symbols"]
        [::std::mem::offset_of!(XStringFeedbackState, max_symbols) - 24usize];
    ["Offset of field: XStringFeedbackState::num_syms_supported"]
        [::std::mem::offset_of!(XStringFeedbackState, num_syms_supported) - 28usize];
    ["Offset of field: XStringFeedbackState::syms_supported"]
        [::std::mem::offset_of!(XStringFeedbackState, syms_supported) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XBellFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XBellFeedbackState"][::std::mem::size_of::<XBellFeedbackState>() - 40usize];
    ["Alignment of XBellFeedbackState"][::std::mem::align_of::<XBellFeedbackState>() - 8usize];
    ["Offset of field: XBellFeedbackState::class"]
        [::std::mem::offset_of!(XBellFeedbackState, class) - 0usize];
    ["Offset of field: XBellFeedbackState::length"]
        [::std::mem::offset_of!(XBellFeedbackState, length) - 8usize];
    ["Offset of field: XBellFeedbackState::id"]
        [::std::mem::offset_of!(XBellFeedbackState, id) - 16usize];
    ["Offset of field: XBellFeedbackState::percent"]
        [::std::mem::offset_of!(XBellFeedbackState, percent) - 24usize];
    ["Offset of field: XBellFeedbackState::pitch"]
        [::std::mem::offset_of!(XBellFeedbackState, pitch) - 28usize];
    ["Offset of field: XBellFeedbackState::duration"]
        [::std::mem::offset_of!(XBellFeedbackState, duration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLedFeedbackState {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub led_values: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLedFeedbackState"][::std::mem::size_of::<XLedFeedbackState>() - 32usize];
    ["Alignment of XLedFeedbackState"][::std::mem::align_of::<XLedFeedbackState>() - 8usize];
    ["Offset of field: XLedFeedbackState::class"]
        [::std::mem::offset_of!(XLedFeedbackState, class) - 0usize];
    ["Offset of field: XLedFeedbackState::length"]
        [::std::mem::offset_of!(XLedFeedbackState, length) - 8usize];
    ["Offset of field: XLedFeedbackState::id"]
        [::std::mem::offset_of!(XLedFeedbackState, id) - 16usize];
    ["Offset of field: XLedFeedbackState::led_values"]
        [::std::mem::offset_of!(XLedFeedbackState, led_values) - 24usize];
    ["Offset of field: XLedFeedbackState::led_mask"]
        [::std::mem::offset_of!(XLedFeedbackState, led_mask) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XFeedbackControl"][::std::mem::size_of::<XFeedbackControl>() - 24usize];
    ["Alignment of XFeedbackControl"][::std::mem::align_of::<XFeedbackControl>() - 8usize];
    ["Offset of field: XFeedbackControl::class"]
        [::std::mem::offset_of!(XFeedbackControl, class) - 0usize];
    ["Offset of field: XFeedbackControl::length"]
        [::std::mem::offset_of!(XFeedbackControl, length) - 8usize];
    ["Offset of field: XFeedbackControl::id"]
        [::std::mem::offset_of!(XFeedbackControl, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPtrFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub accelNum: ::std::os::raw::c_int,
    pub accelDenom: ::std::os::raw::c_int,
    pub threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XPtrFeedbackControl"][::std::mem::size_of::<XPtrFeedbackControl>() - 40usize];
    ["Alignment of XPtrFeedbackControl"][::std::mem::align_of::<XPtrFeedbackControl>() - 8usize];
    ["Offset of field: XPtrFeedbackControl::class"]
        [::std::mem::offset_of!(XPtrFeedbackControl, class) - 0usize];
    ["Offset of field: XPtrFeedbackControl::length"]
        [::std::mem::offset_of!(XPtrFeedbackControl, length) - 8usize];
    ["Offset of field: XPtrFeedbackControl::id"]
        [::std::mem::offset_of!(XPtrFeedbackControl, id) - 16usize];
    ["Offset of field: XPtrFeedbackControl::accelNum"]
        [::std::mem::offset_of!(XPtrFeedbackControl, accelNum) - 24usize];
    ["Offset of field: XPtrFeedbackControl::accelDenom"]
        [::std::mem::offset_of!(XPtrFeedbackControl, accelDenom) - 28usize];
    ["Offset of field: XPtrFeedbackControl::threshold"]
        [::std::mem::offset_of!(XPtrFeedbackControl, threshold) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKbdFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub click: ::std::os::raw::c_int,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub led_mask: ::std::os::raw::c_int,
    pub led_value: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub auto_repeat_mode: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKbdFeedbackControl"][::std::mem::size_of::<XKbdFeedbackControl>() - 56usize];
    ["Alignment of XKbdFeedbackControl"][::std::mem::align_of::<XKbdFeedbackControl>() - 8usize];
    ["Offset of field: XKbdFeedbackControl::class"]
        [::std::mem::offset_of!(XKbdFeedbackControl, class) - 0usize];
    ["Offset of field: XKbdFeedbackControl::length"]
        [::std::mem::offset_of!(XKbdFeedbackControl, length) - 8usize];
    ["Offset of field: XKbdFeedbackControl::id"]
        [::std::mem::offset_of!(XKbdFeedbackControl, id) - 16usize];
    ["Offset of field: XKbdFeedbackControl::click"]
        [::std::mem::offset_of!(XKbdFeedbackControl, click) - 24usize];
    ["Offset of field: XKbdFeedbackControl::percent"]
        [::std::mem::offset_of!(XKbdFeedbackControl, percent) - 28usize];
    ["Offset of field: XKbdFeedbackControl::pitch"]
        [::std::mem::offset_of!(XKbdFeedbackControl, pitch) - 32usize];
    ["Offset of field: XKbdFeedbackControl::duration"]
        [::std::mem::offset_of!(XKbdFeedbackControl, duration) - 36usize];
    ["Offset of field: XKbdFeedbackControl::led_mask"]
        [::std::mem::offset_of!(XKbdFeedbackControl, led_mask) - 40usize];
    ["Offset of field: XKbdFeedbackControl::led_value"]
        [::std::mem::offset_of!(XKbdFeedbackControl, led_value) - 44usize];
    ["Offset of field: XKbdFeedbackControl::key"]
        [::std::mem::offset_of!(XKbdFeedbackControl, key) - 48usize];
    ["Offset of field: XKbdFeedbackControl::auto_repeat_mode"]
        [::std::mem::offset_of!(XKbdFeedbackControl, auto_repeat_mode) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XStringFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub num_keysyms: ::std::os::raw::c_int,
    pub syms_to_display: *mut KeySym,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XStringFeedbackControl"][::std::mem::size_of::<XStringFeedbackControl>() - 40usize];
    ["Alignment of XStringFeedbackControl"]
        [::std::mem::align_of::<XStringFeedbackControl>() - 8usize];
    ["Offset of field: XStringFeedbackControl::class"]
        [::std::mem::offset_of!(XStringFeedbackControl, class) - 0usize];
    ["Offset of field: XStringFeedbackControl::length"]
        [::std::mem::offset_of!(XStringFeedbackControl, length) - 8usize];
    ["Offset of field: XStringFeedbackControl::id"]
        [::std::mem::offset_of!(XStringFeedbackControl, id) - 16usize];
    ["Offset of field: XStringFeedbackControl::num_keysyms"]
        [::std::mem::offset_of!(XStringFeedbackControl, num_keysyms) - 24usize];
    ["Offset of field: XStringFeedbackControl::syms_to_display"]
        [::std::mem::offset_of!(XStringFeedbackControl, syms_to_display) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XIntegerFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub int_to_display: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XIntegerFeedbackControl"][::std::mem::size_of::<XIntegerFeedbackControl>() - 32usize];
    ["Alignment of XIntegerFeedbackControl"]
        [::std::mem::align_of::<XIntegerFeedbackControl>() - 8usize];
    ["Offset of field: XIntegerFeedbackControl::class"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, class) - 0usize];
    ["Offset of field: XIntegerFeedbackControl::length"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, length) - 8usize];
    ["Offset of field: XIntegerFeedbackControl::id"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, id) - 16usize];
    ["Offset of field: XIntegerFeedbackControl::int_to_display"]
        [::std::mem::offset_of!(XIntegerFeedbackControl, int_to_display) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XBellFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub percent: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XBellFeedbackControl"][::std::mem::size_of::<XBellFeedbackControl>() - 40usize];
    ["Alignment of XBellFeedbackControl"][::std::mem::align_of::<XBellFeedbackControl>() - 8usize];
    ["Offset of field: XBellFeedbackControl::class"]
        [::std::mem::offset_of!(XBellFeedbackControl, class) - 0usize];
    ["Offset of field: XBellFeedbackControl::length"]
        [::std::mem::offset_of!(XBellFeedbackControl, length) - 8usize];
    ["Offset of field: XBellFeedbackControl::id"]
        [::std::mem::offset_of!(XBellFeedbackControl, id) - 16usize];
    ["Offset of field: XBellFeedbackControl::percent"]
        [::std::mem::offset_of!(XBellFeedbackControl, percent) - 24usize];
    ["Offset of field: XBellFeedbackControl::pitch"]
        [::std::mem::offset_of!(XBellFeedbackControl, pitch) - 28usize];
    ["Offset of field: XBellFeedbackControl::duration"]
        [::std::mem::offset_of!(XBellFeedbackControl, duration) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLedFeedbackControl {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub id: XID,
    pub led_mask: ::std::os::raw::c_int,
    pub led_values: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLedFeedbackControl"][::std::mem::size_of::<XLedFeedbackControl>() - 32usize];
    ["Alignment of XLedFeedbackControl"][::std::mem::align_of::<XLedFeedbackControl>() - 8usize];
    ["Offset of field: XLedFeedbackControl::class"]
        [::std::mem::offset_of!(XLedFeedbackControl, class) - 0usize];
    ["Offset of field: XLedFeedbackControl::length"]
        [::std::mem::offset_of!(XLedFeedbackControl, length) - 8usize];
    ["Offset of field: XLedFeedbackControl::id"]
        [::std::mem::offset_of!(XLedFeedbackControl, id) - 16usize];
    ["Offset of field: XLedFeedbackControl::led_mask"]
        [::std::mem::offset_of!(XLedFeedbackControl, led_mask) - 24usize];
    ["Offset of field: XLedFeedbackControl::led_values"]
        [::std::mem::offset_of!(XLedFeedbackControl, led_values) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceControl"][::std::mem::size_of::<XDeviceControl>() - 16usize];
    ["Alignment of XDeviceControl"][::std::mem::align_of::<XDeviceControl>() - 8usize];
    ["Offset of field: XDeviceControl::control"]
        [::std::mem::offset_of!(XDeviceControl, control) - 0usize];
    ["Offset of field: XDeviceControl::length"]
        [::std::mem::offset_of!(XDeviceControl, length) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceResolutionControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub first_valuator: ::std::os::raw::c_int,
    pub num_valuators: ::std::os::raw::c_int,
    pub resolutions: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceResolutionControl"]
        [::std::mem::size_of::<XDeviceResolutionControl>() - 32usize];
    ["Alignment of XDeviceResolutionControl"]
        [::std::mem::align_of::<XDeviceResolutionControl>() - 8usize];
    ["Offset of field: XDeviceResolutionControl::control"]
        [::std::mem::offset_of!(XDeviceResolutionControl, control) - 0usize];
    ["Offset of field: XDeviceResolutionControl::length"]
        [::std::mem::offset_of!(XDeviceResolutionControl, length) - 8usize];
    ["Offset of field: XDeviceResolutionControl::first_valuator"]
        [::std::mem::offset_of!(XDeviceResolutionControl, first_valuator) - 12usize];
    ["Offset of field: XDeviceResolutionControl::num_valuators"]
        [::std::mem::offset_of!(XDeviceResolutionControl, num_valuators) - 16usize];
    ["Offset of field: XDeviceResolutionControl::resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionControl, resolutions) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceResolutionState {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub num_valuators: ::std::os::raw::c_int,
    pub resolutions: *mut ::std::os::raw::c_int,
    pub min_resolutions: *mut ::std::os::raw::c_int,
    pub max_resolutions: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceResolutionState"][::std::mem::size_of::<XDeviceResolutionState>() - 40usize];
    ["Alignment of XDeviceResolutionState"]
        [::std::mem::align_of::<XDeviceResolutionState>() - 8usize];
    ["Offset of field: XDeviceResolutionState::control"]
        [::std::mem::offset_of!(XDeviceResolutionState, control) - 0usize];
    ["Offset of field: XDeviceResolutionState::length"]
        [::std::mem::offset_of!(XDeviceResolutionState, length) - 8usize];
    ["Offset of field: XDeviceResolutionState::num_valuators"]
        [::std::mem::offset_of!(XDeviceResolutionState, num_valuators) - 12usize];
    ["Offset of field: XDeviceResolutionState::resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, resolutions) - 16usize];
    ["Offset of field: XDeviceResolutionState::min_resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, min_resolutions) - 24usize];
    ["Offset of field: XDeviceResolutionState::max_resolutions"]
        [::std::mem::offset_of!(XDeviceResolutionState, max_resolutions) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceAbsCalibControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub min_x: ::std::os::raw::c_int,
    pub max_x: ::std::os::raw::c_int,
    pub min_y: ::std::os::raw::c_int,
    pub max_y: ::std::os::raw::c_int,
    pub flip_x: ::std::os::raw::c_int,
    pub flip_y: ::std::os::raw::c_int,
    pub rotation: ::std::os::raw::c_int,
    pub button_threshold: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceAbsCalibControl"][::std::mem::size_of::<XDeviceAbsCalibControl>() - 48usize];
    ["Alignment of XDeviceAbsCalibControl"]
        [::std::mem::align_of::<XDeviceAbsCalibControl>() - 8usize];
    ["Offset of field: XDeviceAbsCalibControl::control"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, control) - 0usize];
    ["Offset of field: XDeviceAbsCalibControl::length"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, length) - 8usize];
    ["Offset of field: XDeviceAbsCalibControl::min_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, min_x) - 12usize];
    ["Offset of field: XDeviceAbsCalibControl::max_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, max_x) - 16usize];
    ["Offset of field: XDeviceAbsCalibControl::min_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, min_y) - 20usize];
    ["Offset of field: XDeviceAbsCalibControl::max_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, max_y) - 24usize];
    ["Offset of field: XDeviceAbsCalibControl::flip_x"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, flip_x) - 28usize];
    ["Offset of field: XDeviceAbsCalibControl::flip_y"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, flip_y) - 32usize];
    ["Offset of field: XDeviceAbsCalibControl::rotation"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, rotation) - 36usize];
    ["Offset of field: XDeviceAbsCalibControl::button_threshold"]
        [::std::mem::offset_of!(XDeviceAbsCalibControl, button_threshold) - 40usize];
};
pub type XDeviceAbsCalibState = XDeviceAbsCalibControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceAbsAreaControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub offset_x: ::std::os::raw::c_int,
    pub offset_y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub screen: ::std::os::raw::c_int,
    pub following: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceAbsAreaControl"][::std::mem::size_of::<XDeviceAbsAreaControl>() - 40usize];
    ["Alignment of XDeviceAbsAreaControl"]
        [::std::mem::align_of::<XDeviceAbsAreaControl>() - 8usize];
    ["Offset of field: XDeviceAbsAreaControl::control"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, control) - 0usize];
    ["Offset of field: XDeviceAbsAreaControl::length"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, length) - 8usize];
    ["Offset of field: XDeviceAbsAreaControl::offset_x"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, offset_x) - 12usize];
    ["Offset of field: XDeviceAbsAreaControl::offset_y"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, offset_y) - 16usize];
    ["Offset of field: XDeviceAbsAreaControl::width"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, width) - 20usize];
    ["Offset of field: XDeviceAbsAreaControl::height"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, height) - 24usize];
    ["Offset of field: XDeviceAbsAreaControl::screen"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, screen) - 28usize];
    ["Offset of field: XDeviceAbsAreaControl::following"]
        [::std::mem::offset_of!(XDeviceAbsAreaControl, following) - 32usize];
};
pub type XDeviceAbsAreaState = XDeviceAbsAreaControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceCoreControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceCoreControl"][::std::mem::size_of::<XDeviceCoreControl>() - 16usize];
    ["Alignment of XDeviceCoreControl"][::std::mem::align_of::<XDeviceCoreControl>() - 8usize];
    ["Offset of field: XDeviceCoreControl::control"]
        [::std::mem::offset_of!(XDeviceCoreControl, control) - 0usize];
    ["Offset of field: XDeviceCoreControl::length"]
        [::std::mem::offset_of!(XDeviceCoreControl, length) - 8usize];
    ["Offset of field: XDeviceCoreControl::status"]
        [::std::mem::offset_of!(XDeviceCoreControl, status) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceCoreState {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub iscore: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceCoreState"][::std::mem::size_of::<XDeviceCoreState>() - 24usize];
    ["Alignment of XDeviceCoreState"][::std::mem::align_of::<XDeviceCoreState>() - 8usize];
    ["Offset of field: XDeviceCoreState::control"]
        [::std::mem::offset_of!(XDeviceCoreState, control) - 0usize];
    ["Offset of field: XDeviceCoreState::length"]
        [::std::mem::offset_of!(XDeviceCoreState, length) - 8usize];
    ["Offset of field: XDeviceCoreState::status"]
        [::std::mem::offset_of!(XDeviceCoreState, status) - 12usize];
    ["Offset of field: XDeviceCoreState::iscore"]
        [::std::mem::offset_of!(XDeviceCoreState, iscore) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceEnableControl {
    pub control: XID,
    pub length: ::std::os::raw::c_int,
    pub enable: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceEnableControl"][::std::mem::size_of::<XDeviceEnableControl>() - 16usize];
    ["Alignment of XDeviceEnableControl"][::std::mem::align_of::<XDeviceEnableControl>() - 8usize];
    ["Offset of field: XDeviceEnableControl::control"]
        [::std::mem::offset_of!(XDeviceEnableControl, control) - 0usize];
    ["Offset of field: XDeviceEnableControl::length"]
        [::std::mem::offset_of!(XDeviceEnableControl, length) - 8usize];
    ["Offset of field: XDeviceEnableControl::enable"]
        [::std::mem::offset_of!(XDeviceEnableControl, enable) - 12usize];
};
pub type XDeviceEnableState = XDeviceEnableControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XAnyClassinfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XAnyClassinfo"][::std::mem::size_of::<_XAnyClassinfo>() - 16usize];
    ["Alignment of _XAnyClassinfo"][::std::mem::align_of::<_XAnyClassinfo>() - 8usize];
    ["Offset of field: _XAnyClassinfo::class"]
        [::std::mem::offset_of!(_XAnyClassinfo, class) - 0usize];
    ["Offset of field: _XAnyClassinfo::length"]
        [::std::mem::offset_of!(_XAnyClassinfo, length) - 8usize];
};
pub type XAnyClassInfo = _XAnyClassinfo;
pub type XDeviceInfoPtr = *mut _XDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDeviceInfo {
    pub id: XID,
    pub type_: Atom,
    pub name: *mut ::std::os::raw::c_char,
    pub num_classes: ::std::os::raw::c_int,
    pub use_: ::std::os::raw::c_int,
    pub inputclassinfo: XAnyClassPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XDeviceInfo"][::std::mem::size_of::<_XDeviceInfo>() - 40usize];
    ["Alignment of _XDeviceInfo"][::std::mem::align_of::<_XDeviceInfo>() - 8usize];
    ["Offset of field: _XDeviceInfo::id"][::std::mem::offset_of!(_XDeviceInfo, id) - 0usize];
    ["Offset of field: _XDeviceInfo::type_"][::std::mem::offset_of!(_XDeviceInfo, type_) - 8usize];
    ["Offset of field: _XDeviceInfo::name"][::std::mem::offset_of!(_XDeviceInfo, name) - 16usize];
    ["Offset of field: _XDeviceInfo::num_classes"]
        [::std::mem::offset_of!(_XDeviceInfo, num_classes) - 24usize];
    ["Offset of field: _XDeviceInfo::use_"][::std::mem::offset_of!(_XDeviceInfo, use_) - 28usize];
    ["Offset of field: _XDeviceInfo::inputclassinfo"]
        [::std::mem::offset_of!(_XDeviceInfo, inputclassinfo) - 32usize];
};
pub type XDeviceInfo = _XDeviceInfo;
pub type XKeyInfoPtr = *mut _XKeyInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XKeyInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub min_keycode: ::std::os::raw::c_ushort,
    pub max_keycode: ::std::os::raw::c_ushort,
    pub num_keys: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XKeyInfo"][::std::mem::size_of::<_XKeyInfo>() - 24usize];
    ["Alignment of _XKeyInfo"][::std::mem::align_of::<_XKeyInfo>() - 8usize];
    ["Offset of field: _XKeyInfo::class"][::std::mem::offset_of!(_XKeyInfo, class) - 0usize];
    ["Offset of field: _XKeyInfo::length"][::std::mem::offset_of!(_XKeyInfo, length) - 8usize];
    ["Offset of field: _XKeyInfo::min_keycode"]
        [::std::mem::offset_of!(_XKeyInfo, min_keycode) - 12usize];
    ["Offset of field: _XKeyInfo::max_keycode"]
        [::std::mem::offset_of!(_XKeyInfo, max_keycode) - 14usize];
    ["Offset of field: _XKeyInfo::num_keys"][::std::mem::offset_of!(_XKeyInfo, num_keys) - 16usize];
};
pub type XKeyInfo = _XKeyInfo;
pub type XButtonInfoPtr = *mut _XButtonInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XButtonInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub num_buttons: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XButtonInfo"][::std::mem::size_of::<_XButtonInfo>() - 16usize];
    ["Alignment of _XButtonInfo"][::std::mem::align_of::<_XButtonInfo>() - 8usize];
    ["Offset of field: _XButtonInfo::class"][::std::mem::offset_of!(_XButtonInfo, class) - 0usize];
    ["Offset of field: _XButtonInfo::length"]
        [::std::mem::offset_of!(_XButtonInfo, length) - 8usize];
    ["Offset of field: _XButtonInfo::num_buttons"]
        [::std::mem::offset_of!(_XButtonInfo, num_buttons) - 12usize];
};
pub type XButtonInfo = _XButtonInfo;
pub type XAxisInfoPtr = *mut _XAxisInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XAxisInfo {
    pub resolution: ::std::os::raw::c_int,
    pub min_value: ::std::os::raw::c_int,
    pub max_value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XAxisInfo"][::std::mem::size_of::<_XAxisInfo>() - 12usize];
    ["Alignment of _XAxisInfo"][::std::mem::align_of::<_XAxisInfo>() - 4usize];
    ["Offset of field: _XAxisInfo::resolution"]
        [::std::mem::offset_of!(_XAxisInfo, resolution) - 0usize];
    ["Offset of field: _XAxisInfo::min_value"]
        [::std::mem::offset_of!(_XAxisInfo, min_value) - 4usize];
    ["Offset of field: _XAxisInfo::max_value"]
        [::std::mem::offset_of!(_XAxisInfo, max_value) - 8usize];
};
pub type XAxisInfo = _XAxisInfo;
pub type XValuatorInfoPtr = *mut _XValuatorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XValuatorInfo {
    pub class: XID,
    pub length: ::std::os::raw::c_int,
    pub num_axes: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub motion_buffer: ::std::os::raw::c_ulong,
    pub axes: XAxisInfoPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XValuatorInfo"][::std::mem::size_of::<_XValuatorInfo>() - 32usize];
    ["Alignment of _XValuatorInfo"][::std::mem::align_of::<_XValuatorInfo>() - 8usize];
    ["Offset of field: _XValuatorInfo::class"]
        [::std::mem::offset_of!(_XValuatorInfo, class) - 0usize];
    ["Offset of field: _XValuatorInfo::length"]
        [::std::mem::offset_of!(_XValuatorInfo, length) - 8usize];
    ["Offset of field: _XValuatorInfo::num_axes"]
        [::std::mem::offset_of!(_XValuatorInfo, num_axes) - 12usize];
    ["Offset of field: _XValuatorInfo::mode"]
        [::std::mem::offset_of!(_XValuatorInfo, mode) - 13usize];
    ["Offset of field: _XValuatorInfo::motion_buffer"]
        [::std::mem::offset_of!(_XValuatorInfo, motion_buffer) - 16usize];
    ["Offset of field: _XValuatorInfo::axes"]
        [::std::mem::offset_of!(_XValuatorInfo, axes) - 24usize];
};
pub type XValuatorInfo = _XValuatorInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XInputClassInfo {
    pub input_class: ::std::os::raw::c_uchar,
    pub event_type_base: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XInputClassInfo"][::std::mem::size_of::<XInputClassInfo>() - 2usize];
    ["Alignment of XInputClassInfo"][::std::mem::align_of::<XInputClassInfo>() - 1usize];
    ["Offset of field: XInputClassInfo::input_class"]
        [::std::mem::offset_of!(XInputClassInfo, input_class) - 0usize];
    ["Offset of field: XInputClassInfo::event_type_base"]
        [::std::mem::offset_of!(XInputClassInfo, event_type_base) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDevice {
    pub device_id: XID,
    pub num_classes: ::std::os::raw::c_int,
    pub classes: *mut XInputClassInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDevice"][::std::mem::size_of::<XDevice>() - 24usize];
    ["Alignment of XDevice"][::std::mem::align_of::<XDevice>() - 8usize];
    ["Offset of field: XDevice::device_id"][::std::mem::offset_of!(XDevice, device_id) - 0usize];
    ["Offset of field: XDevice::num_classes"]
        [::std::mem::offset_of!(XDevice, num_classes) - 8usize];
    ["Offset of field: XDevice::classes"][::std::mem::offset_of!(XDevice, classes) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XEventList {
    pub event_type: XEventClass,
    pub device: XID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XEventList"][::std::mem::size_of::<XEventList>() - 16usize];
    ["Alignment of XEventList"][::std::mem::align_of::<XEventList>() - 8usize];
    ["Offset of field: XEventList::event_type"]
        [::std::mem::offset_of!(XEventList, event_type) - 0usize];
    ["Offset of field: XEventList::device"][::std::mem::offset_of!(XEventList, device) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceTimeCoord {
    pub time: Time,
    pub data: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceTimeCoord"][::std::mem::size_of::<XDeviceTimeCoord>() - 16usize];
    ["Alignment of XDeviceTimeCoord"][::std::mem::align_of::<XDeviceTimeCoord>() - 8usize];
    ["Offset of field: XDeviceTimeCoord::time"]
        [::std::mem::offset_of!(XDeviceTimeCoord, time) - 0usize];
    ["Offset of field: XDeviceTimeCoord::data"]
        [::std::mem::offset_of!(XDeviceTimeCoord, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XDeviceState {
    pub device_id: XID,
    pub num_classes: ::std::os::raw::c_int,
    pub data: *mut XInputClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XDeviceState"][::std::mem::size_of::<XDeviceState>() - 24usize];
    ["Alignment of XDeviceState"][::std::mem::align_of::<XDeviceState>() - 8usize];
    ["Offset of field: XDeviceState::device_id"]
        [::std::mem::offset_of!(XDeviceState, device_id) - 0usize];
    ["Offset of field: XDeviceState::num_classes"]
        [::std::mem::offset_of!(XDeviceState, num_classes) - 8usize];
    ["Offset of field: XDeviceState::data"][::std::mem::offset_of!(XDeviceState, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XValuatorState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_valuators: ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_uchar,
    pub valuators: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XValuatorState"][::std::mem::size_of::<XValuatorState>() - 16usize];
    ["Alignment of XValuatorState"][::std::mem::align_of::<XValuatorState>() - 8usize];
    ["Offset of field: XValuatorState::class"]
        [::std::mem::offset_of!(XValuatorState, class) - 0usize];
    ["Offset of field: XValuatorState::length"]
        [::std::mem::offset_of!(XValuatorState, length) - 1usize];
    ["Offset of field: XValuatorState::num_valuators"]
        [::std::mem::offset_of!(XValuatorState, num_valuators) - 2usize];
    ["Offset of field: XValuatorState::mode"]
        [::std::mem::offset_of!(XValuatorState, mode) - 3usize];
    ["Offset of field: XValuatorState::valuators"]
        [::std::mem::offset_of!(XValuatorState, valuators) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XKeyState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_keys: ::std::os::raw::c_short,
    pub keys: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XKeyState"][::std::mem::size_of::<XKeyState>() - 36usize];
    ["Alignment of XKeyState"][::std::mem::align_of::<XKeyState>() - 2usize];
    ["Offset of field: XKeyState::class"][::std::mem::offset_of!(XKeyState, class) - 0usize];
    ["Offset of field: XKeyState::length"][::std::mem::offset_of!(XKeyState, length) - 1usize];
    ["Offset of field: XKeyState::num_keys"][::std::mem::offset_of!(XKeyState, num_keys) - 2usize];
    ["Offset of field: XKeyState::keys"][::std::mem::offset_of!(XKeyState, keys) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XButtonState {
    pub class: ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_uchar,
    pub num_buttons: ::std::os::raw::c_short,
    pub buttons: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XButtonState"][::std::mem::size_of::<XButtonState>() - 36usize];
    ["Alignment of XButtonState"][::std::mem::align_of::<XButtonState>() - 2usize];
    ["Offset of field: XButtonState::class"][::std::mem::offset_of!(XButtonState, class) - 0usize];
    ["Offset of field: XButtonState::length"]
        [::std::mem::offset_of!(XButtonState, length) - 1usize];
    ["Offset of field: XButtonState::num_buttons"]
        [::std::mem::offset_of!(XButtonState, num_buttons) - 2usize];
    ["Offset of field: XButtonState::buttons"]
        [::std::mem::offset_of!(XButtonState, buttons) - 4usize];
};
unsafe extern "C" {
    pub fn XChangeKeyboardDevice(arg1: *mut Display, arg2: *mut XDevice) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangePointerDevice(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDevice(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XEventClass,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDevice(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDeviceKey(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_uint,
        arg9: *mut XEventClass,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDeviceKey(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGrabDeviceButton(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_uint,
        arg9: *mut XEventClass,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XUngrabDeviceButton(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut XDevice,
        arg6: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XAllowDeviceEvents(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceFocus(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut Window,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceFocus(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: Time,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetFeedbackControl(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XFeedbackState;
}
unsafe extern "C" {
    pub fn XFreeFeedbackList(arg1: *mut XFeedbackState);
}
unsafe extern "C" {
    pub fn XChangeFeedbackControl(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XFeedbackControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XDeviceBell(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: XID,
        arg4: XID,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceKeyMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: KeyCode,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut KeySym;
}
unsafe extern "C" {
    pub fn XChangeDeviceKeyMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut KeySym,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceModifierMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
    ) -> *mut XModifierKeymap;
}
unsafe extern "C" {
    pub fn XSetDeviceModifierMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut XModifierKeymap,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceButtonMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceButtonMapping(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_uchar,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XQueryDeviceState(arg1: *mut Display, arg2: *mut XDevice) -> *mut XDeviceState;
}
unsafe extern "C" {
    pub fn XFreeDeviceState(arg1: *mut XDeviceState);
}
unsafe extern "C" {
    pub fn XGetExtensionVersion(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut XExtensionVersion;
}
unsafe extern "C" {
    pub fn XListInputDevices(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut XDeviceInfo;
}
unsafe extern "C" {
    pub fn XFreeDeviceList(arg1: *mut XDeviceInfo);
}
unsafe extern "C" {
    pub fn XOpenDevice(arg1: *mut Display, arg2: XID) -> *mut XDevice;
}
unsafe extern "C" {
    pub fn XCloseDevice(arg1: *mut Display, arg2: *mut XDevice) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceMode(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSetDeviceValuators(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceControl(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
    ) -> *mut XDeviceControl;
}
unsafe extern "C" {
    pub fn XChangeDeviceControl(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XDeviceControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XSelectExtensionEvent(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut XEventClass,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetSelectedExtensionEvents(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut *mut XEventClass,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut *mut XEventClass,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XChangeDeviceDontPropagateList(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut XEventClass,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceDontPropagateList(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut XEventClass;
}
unsafe extern "C" {
    pub fn XSendExtensionEvent(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Window,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut XEventClass,
        arg7: *mut XEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XGetDeviceMotionEvents(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Time,
        arg4: Time,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    ) -> *mut XDeviceTimeCoord;
}
unsafe extern "C" {
    pub fn XFreeDeviceMotionEvents(arg1: *mut XDeviceTimeCoord);
}
unsafe extern "C" {
    pub fn XFreeDeviceControl(arg1: *mut XDeviceControl);
}
unsafe extern "C" {
    pub fn XListDeviceProperties(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut Atom;
}
unsafe extern "C" {
    pub fn XChangeDeviceProperty(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Atom,
        arg4: Atom,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_uchar,
        arg8: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn XDeleteDeviceProperty(arg1: *mut Display, arg2: *mut XDevice, arg3: Atom);
}
unsafe extern "C" {
    pub fn XGetDeviceProperty(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: Atom,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_int,
        arg7: Atom,
        arg8: *mut Atom,
        arg9: *mut ::std::os::raw::c_int,
        arg10: *mut ::std::os::raw::c_ulong,
        arg11: *mut ::std::os::raw::c_ulong,
        arg12: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestQueryExtension(
        arg1: *mut Display,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestCompareCursorWithWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: Cursor,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestCompareCurrentCursorWithWindow(
        arg1: *mut Display,
        arg2: Window,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeKeyEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeButtonEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeMotionEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeRelativeMotionEvent(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceKeyEvent(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceButtonEvent(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeProximityEvent(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestFakeDeviceMotionEvent(
        arg1: *mut Display,
        arg2: *mut XDevice,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestGrabControl(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn XTestSetGContextOfGC(arg1: GC, arg2: GContext);
}
unsafe extern "C" {
    pub fn XTestSetVisualIDOfVisual(arg1: *mut Visual, arg2: VisualID);
}
unsafe extern "C" {
    pub fn XTestDiscard(arg1: *mut Display) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
